{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1561","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"7cb6d179-2ed0-11e6-8cd5-075a66552162","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:357","type":"CtMethodImpl","sourcecode":"private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry parent, java.io.File file) {\n    if (file == null) {\n        {\n            org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry = parent.newChildInstance(file);\n            entry.refresh(file);\n            java.io.File[] java.io.File[] = listFiles(file);\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (int int = 0 ; i < (files.int) ; i++) {\n                children[i] = createFileEntry(entry, files[i]);\n            }\n            entry.setChildren(children);\n            return entry;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"7cb794ca-2ed0-11e6-8cd5-c779fdc70c68","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:341","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name) {\n    if (name == null) {\n        {\n            return new org.apache.commons.io.filefilter.NameFileFilter(name);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"7cb7bbdb-2ed0-11e6-8cd5-bd19428eae27","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2444","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"7cb7bbdc-2ed0-11e6-8cd5-a342c02ea35a","method":{"position":"org.apache.commons.io.FileUtils:2576","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.util.Date date) {\n    if (!(file.exists())) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified date\");\n            } \n            return org.apache.commons.io.FileUtils.isFileNewer(file, date.getTime());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"7cb7e2ed-2ed0-11e6-8cd5-2d3cd9d96997","method":{"position":"org.apache.commons.io.DirectoryWalker:393","type":"CtMethodImpl","sourcecode":"protected final void checkIfCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (handleIsCancelled(file, depth, results)) {\n                throw new org.apache.commons.io.DirectoryWalker.CancelException(file , depth);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:547","type":"CtBinaryOperatorImpl","sourcecode":"fileFilter == null"},"failures":[],"tindex":"7cb7e2ee-2ed0-11e6-8cd5-f3832bd6a62d","method":{"position":"org.apache.commons.io.FileUtils:558","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter fileFilter) {\n    if (fileFilter == null) {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.and(fileFilter, org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"fileFilter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"7cb809ff-2ed0-11e6-8cd5-4fbef83fe091","method":{"position":"org.apache.commons.io.FilenameUtils:995","type":"CtMethodImpl","sourcecode":"public static java.lang.String getExtension(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\n            if (index == (-1)) {\n                return \"\";\n            } else {\n                return filename.substring((index + 1));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.DirectoryWalker:330","type":"CtBinaryOperatorImpl","sourcecode":"startDirectory == null"},"failures":[],"tindex":"7cb80a00-2ed0-11e6-8cd5-1bcc6f3df361","method":{"position":"org.apache.commons.io.DirectoryWalker:453","type":"CtMethodImpl","sourcecode":"protected void handleCancelled(java.io.File startDirectory, java.util.Collection<T> results, org.apache.commons.io.DirectoryWalker.CancelException cancel) throws java.io.IOException {\n    if (startDirectory == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw cancel;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startDirectory":"startDirectory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"7cb83111-2ed0-11e6-8cd5-353f0bbe35ae","method":{"position":"org.apache.commons.io.IOCase:182","type":"CtMethodImpl","sourcecode":"public boolean checkStartsWith(java.lang.String str, java.lang.String start) {\n    if (start != null) {\n        {\n            return str.regionMatches((!(boolean)), 0, start, 0, start.length());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"start"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cb83112-2ed0-11e6-8cd5-e9ed57057d6a","method":{"position":"org.apache.commons.io.IOUtils:1368","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data).getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"7cb85823-2ed0-11e6-8cd5-118d7de8cf9e","method":{"position":"org.apache.commons.io.IOUtils:1525","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data == null) {\n        {\n            if (data != null) {\n                output.write(data.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cb85824-2ed0-11e6-8cd5-47a79267ce47","method":{"position":"org.apache.commons.io.CopyUtils:303","type":"CtMethodImpl","sourcecode":"public static void copy(java.lang.String input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                {\n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(input);\n                    java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter(output);\n                    org.apache.commons.io.CopyUtils.copy(in, out);\n                    out.flush();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"7cb87f35-2ed0-11e6-8cd5-830b8315e181","method":{"position":"org.apache.commons.io.EndianUtils:218","type":"CtMethodImpl","sourcecode":"public static long readSwappedLong(byte[] data, int offset) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            long long = (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n            long long = (((((data[(offset + 4)]) & 255) << 0) + (((data[(offset + 5)]) & 255) << 8)) + (((data[(offset + 6)]) & 255) << 16)) + (((data[(offset + 7)]) & 255) << 24);\n            return (high << 32) + (4294967295L & low);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:367","type":"CtBinaryOperatorImpl","sourcecode":"selector != null"},"failures":[],"tindex":"7cb87f36-2ed0-11e6-8cd5-337bb621d1cc","method":{"position":"org.apache.commons.io.IOUtils:366","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.nio.channels.Selector selector) {\n    if (selector != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (selector != null) {\n                try {\n                    selector.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"selector":"selector"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"7cb8a647-2ed0-11e6-8cd5-97a55cda3d54","method":{"position":"org.apache.commons.io.FileUtils:2409","type":"CtMethodImpl","sourcecode":"public static long sizeOf(java.io.File file) {\n    if (file.exists()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                java.lang.String java.lang.String = file + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (file.isDirectory()) {\n                return org.apache.commons.io.FileUtils.sizeOfDirectory(file);\n            } else {\n                return file.length();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:841","type":"CtBinaryOperatorImpl","sourcecode":"(url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))"},"failures":[],"tindex":"7cb8a648-2ed0-11e6-8cd5-212bbb063efe","method":{"position":"org.apache.commons.io.IOUtils:916","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.lang.String encoding) throws java.io.IOException {\n    if ((url == null) || (!(\"file\".equalsIgnoreCase(url.getProtocol())))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(url, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == value"},"failures":[],"tindex":"7cb8cd59-2ed0-11e6-8cd5-21e8daccad4a","method":{"position":"org.apache.commons.io.EndianUtils:117","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(byte[] data, int offset, short value) {\n    if ((-1) == offset) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:96","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"7cb8cd5a-2ed0-11e6-8cd5-0b5e05e0de3a","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:91","type":"CtMethodImpl","sourcecode":"public void onStop(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.DirectoryWalker:330","type":"CtBinaryOperatorImpl","sourcecode":"startDirectory == null"},"failures":[],"tindex":"7cb8cd5b-2ed0-11e6-8cd5-bd8b1342fff9","method":{"position":"org.apache.commons.io.DirectoryWalker:469","type":"CtMethodImpl","sourcecode":"protected void handleStart(java.io.File startDirectory, java.util.Collection<T> results) throws java.io.IOException {\n    if (startDirectory == null) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startDirectory":"startDirectory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"7cb8f46c-2ed0-11e6-8cd5-0b72a21403eb","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(1);\n            getStream().write(b);\n            (long)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cb8f46d-2ed0-11e6-8cd5-add3aa961631","method":{"position":"org.apache.commons.io.EndianUtils:409","type":"CtMethodImpl","sourcecode":"public static long readSwappedLong(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < 8 ; i++) {\n                bytes[i] = ((byte)(org.apache.commons.io.EndianUtils.read(input)));\n            }\n            return org.apache.commons.io.EndianUtils.readSwappedLong(bytes, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl","sourcecode":"(dir != null) && (new java.io.File(dir , name).isDirectory())"},"failures":[],"tindex":"7cb8f46e-2ed0-11e6-8cd5-e73647220049","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:50","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        {\n            return accept(new java.io.File(dir , name));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"7cb91b7f-2ed0-11e6-8cd5-312d0bfb9cbe","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n != (-1)) {\n                {\n                    if (n != (-1)) {\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                        }\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cb91b80-2ed0-11e6-8cd5-5d59f08c62c5","method":{"position":"org.apache.commons.io.IOUtils:2095","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1369","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"7cb91b81-2ed0-11e6-8cd5-8f8e68a5baa0","method":{"position":"org.apache.commons.io.IOUtils:1328","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:147","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"7cb94292-2ed0-11e6-8cd5-01d849c98060","method":{"position":"org.apache.commons.io.IOCase:164","type":"CtMethodImpl","sourcecode":"public boolean checkEquals(java.lang.String str1, java.lang.String str2) {\n    if ((str2 == null) || (str1 == null)) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.equals(str2) : str1.equalsIgnoreCase(str2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"str2","str2":"str1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1565","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"7cb94293-2ed0-11e6-8cd5-559f15168a18","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:66","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (file.isDirectory()) {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file, name));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:348","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"7cb94294-2ed0-11e6-8cd5-03f0ca1505f6","method":{"position":"org.apache.commons.io.FilenameUtils:823","type":"CtMethodImpl","sourcecode":"private static java.lang.String doGetPath(java.lang.String filename, int separatorAdd) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            int int = index + separatorAdd;\n            if (((prefix >= (filename.length())) || (index < 0)) || (prefix >= endIndex)) {\n                return \"\";\n            } \n            return filename.substring(prefix, endIndex);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1565","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"7cb969a5-2ed0-11e6-8cd5-8d7ccb69ed8d","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:39","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            return accept(file.getParentFile(), file.getName());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"7cb969a6-2ed0-11e6-8cd5-896a118f81f6","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n != (-1)) {\n                {\n                    if (n != (-1)) {\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                        }\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"7cb969a7-2ed0-11e6-8cd5-73dd2bde6965","method":{"position":"org.apache.commons.io.DirectoryWalker:434","type":"CtMethodImpl","sourcecode":"protected boolean handleIsCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"7cb969a8-2ed0-11e6-8cd5-8fa4f2d920e5","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } \n            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:333","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isDigit(c)"},"failures":[],"tindex":"7cb990b9-2ed0-11e6-8cd5-efac3d60eaf7","method":{"position":"org.apache.commons.io.output.NullWriter:49","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(char c) {\n    if (java.lang.Character.isDigit(c)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.output.NullWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cb990ba-2ed0-11e6-8cd5-fd1d0b3d4c5a","method":{"position":"org.apache.commons.io.IOUtils:1905","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"7cb990bb-2ed0-11e6-8cd5-5bb2dbc6b2d6","method":{"position":"org.apache.commons.io.output.ClosedOutputStream:47","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new java.io.IOException(((\"write(\" + b) + \") failed: stream is closed\"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2708","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"7cb9b7cc-2ed0-11e6-8cd5-4d4b60e98450","method":{"position":"org.apache.commons.io.FileUtils:2707","type":"CtMethodImpl","sourcecode":"public static java.util.zip.Checksum checksum(java.io.File file, java.util.zip.Checksum checksum) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if (file.isDirectory()) {\n                throw new java.lang.IllegalArgumentException(\"Checksums can't be computed on directories\");\n            } \n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = new java.util.zip.CheckedInputStream(new java.io.FileInputStream(file) , checksum);\n                org.apache.commons.io.IOUtils.copy(in, new org.apache.commons.io.output.NullOutputStream());\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n            return checksum;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:295","type":"CtBinaryOperatorImpl","sourcecode":"(file.canRead()) == false"},"failures":[],"tindex":"7cb9b7cd-2ed0-11e6-8cd5-655c2b821edd","method":{"position":"org.apache.commons.io.FileUtils:290","type":"CtMethodImpl","sourcecode":"public static java.io.FileInputStream openInputStream(java.io.File file) throws java.io.IOException {\n    if ((file.canRead()) == false) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canRead()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be read\"));\n                } \n            } else {\n                throw new java.io.FileNotFoundException(((\"File '\" + file) + \"' does not exist\"));\n            }\n            return new java.io.FileInputStream(file);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"7cb9b7ce-2ed0-11e6-8cd5-31cbeb0d7409","method":{"position":"org.apache.commons.io.FileUtils:2268","type":"CtMethodImpl","sourcecode":"public static void forceDelete(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectory(file);\n            } else {\n                boolean boolean = file.exists();\n                if (!(file.delete())) {\n                    if (!filePresent) {\n                        throw new java.io.FileNotFoundException((\"File does not exist: \" + file));\n                    } \n                    java.lang.String java.lang.String = \"Unable to delete file: \" + file;\n                    throw new java.io.IOException(message);\n                } \n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:754","type":"CtBinaryOperatorImpl","sourcecode":"len < 0"},"failures":[],"tindex":"7cb9dedf-2ed0-11e6-8cd5-e57287aeda92","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:134","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) {\n    if (off < 0) {\n        {\n            if (((((off < 0) || (off > (b.int))) || (len < 0)) || ((off + len) > (b.int))) || ((off + len) < 0)) {\n                throw new java.lang.IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return ;\n            } \n            synchronized(org.apache.commons.io.output.ByteArrayOutputStream.this) {\n                int int = (int) + len;\n                int int = len;\n                int int = (int) - (int);\n                while (remaining > 0) {\n                    int int = java.lang.Math.min(remaining, ((byte[].int) - inBufferPos));\n                    java.lang.System.arraycopy(b, ((off + len) - remaining), byte[], inBufferPos, part);\n                    remaining -= part;\n                    if (remaining > 0) {\n                        needNewBuffer(newcount);\n                        inBufferPos = 0;\n                    } \n                }\n                int = newcount;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cb9dee0-2ed0-11e6-8cd5-5b8e4cd9eece","method":{"position":"org.apache.commons.io.EndianUtils:465","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(input));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1419","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.canWrite()) == false"},"failures":[],"tindex":"7cba05f1-2ed0-11e6-8cd5-13f5daae7cde","method":{"position":"org.apache.commons.io.FileUtils:1308","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter) throws java.io.IOException {\n    if ((destDir.canWrite()) == false) {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, filter, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"destDir"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2326","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"7cba05f2-2ed0-11e6-8cd5-59bb307e38c9","method":{"position":"org.apache.commons.io.FileUtils:543","type":"CtMethodImpl","sourcecode":"private static void validateListFilesParameters(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter) {\n    if (!(directory.exists())) {\n        {\n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException(\"Parameter 'directory' is not a directory\");\n            } \n            if (fileFilter == null) {\n                throw new java.lang.NullPointerException(\"Parameter 'fileFilter' is null\");\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"7cba05f3-2ed0-11e6-8cd5-2b5ab00ed7ac","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter2 == null) || (filter1 == null)) {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter2","filter2":"filter1"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:707","type":"CtBinaryOperatorImpl","sourcecode":"guessedEnc != null"},"failures":[],"tindex":"7cba2d04-2ed0-11e6-8cd5-b5d77ee4936d","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if (guessedEnc != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (guessedEnc != null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.String java.lang.String = null;\n                    if (guessedEnc != null) {\n                        byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                        is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                        int int = 0;\n                        int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                        int int = is.read(bytes, offset, max);\n                        int int = -1;\n                        java.lang.String java.lang.String = null;\n                        while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                            offset += c;\n                            max -= c;\n                            c = is.read(bytes, offset, max);\n                            xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                            firstGT = xmlProlog.indexOf('>');\n                        }\n                        if (firstGT == (-1)) {\n                            if (c == (-1)) {\n                                throw new java.io.IOException(\"Unexpected end of XML stream\");\n                            } else {\n                                throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                            }\n                        } \n                        int int = offset;\n                        if (bytesRead > 0) {\n                            is.reset();\n                            java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                            java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                            java.lang.String java.lang.String = bReader.readLine();\n                            while (line != null) {\n                                prolog.append(line);\n                                line = bReader.readLine();\n                            }\n                            java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                            if (m.find()) {\n                                encoding = m.group(1).toUpperCase();\n                                encoding = encoding.substring(1, ((encoding.length()) - 1));\n                            } \n                        } \n                    } \n                    return encoding;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"guessedEnc":"guessedEnc"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2380","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"7cba2d05-2ed0-11e6-8cd5-2b2e8554cf21","method":{"position":"org.apache.commons.io.FileUtils:2530","type":"CtMethodImpl","sourcecode":"private static void checkDirectory(java.io.File directory) {\n    if (!(directory.isDirectory())) {\n        {\n            if (!(directory.exists())) {\n                throw new java.lang.IllegalArgumentException((directory + \" does not exist\"));\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((directory + \" is not a directory\"));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"7cba5416-2ed0-11e6-8cd5-874a6214e7c5","method":{"position":"org.apache.commons.io.IOCase:197","type":"CtMethodImpl","sourcecode":"public boolean checkEndsWith(java.lang.String str, java.lang.String end) {\n    if (end != null) {\n        {\n            int int = end.length();\n            return str.regionMatches((!(boolean)), ((str.length()) - endLen), end, 0, endLen);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"end"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:580","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"7cba5417-2ed0-11e6-8cd5-1f3c42bb5889","method":{"position":"org.apache.commons.io.FileCleaningTracker:106","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker) {\n    if (path == null) {\n        {\n            track(path, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2313","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(directory))"},"failures":[],"tindex":"7cba5418-2ed0-11e6-8cd5-11196e69adad","method":{"position":"org.apache.commons.io.FileUtils:2467","type":"CtMethodImpl","sourcecode":"public static long sizeOfDirectory(java.io.File directory) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return 0L;\n            } \n            long long = 0;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size += org.apache.commons.io.FileUtils.sizeOf(file);\n                        if (size < 0) {\n                            break;\n                        } \n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"7cba7b29-2ed0-11e6-8cd5-3ff495ceeb54","method":{"position":"org.apache.commons.io.FileUtils:2077","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data) throws java.io.IOException {\n    if (file == null) {\n        {\n            org.apache.commons.io.FileUtils.writeByteArrayToFile(file, data, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:77","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"7cba7b2a-2ed0-11e6-8cd5-4b006ccd04d0","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:72","type":"CtMethodImpl","sourcecode":"private int getType(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                return 1;\n            } else {\n                return 2;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"7cba7b2b-2ed0-11e6-8cd5-ebe541443e56","method":{"position":"org.apache.commons.io.output.ProxyWriter:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq, int start, int end) throws java.io.IOException {\n    if (start == 0) {\n        {\n            try {\n                beforeWrite((end - start));\n                java.io.Writer.append(csq, start, end);\n                afterWrite((end - start));\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"start"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cbaa23c-2ed0-11e6-8cd5-b36261b45530","method":{"position":"org.apache.commons.io.IOUtils:1818","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, long inputOffset, long length) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                {\n                    return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:59","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"7cbaa23d-2ed0-11e6-8cd5-63728adc16d4","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:503","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter filter) {\n    if (filter == null) {\n        {\n            return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cbaa23e-2ed0-11e6-8cd5-6137ca2452b9","method":{"position":"org.apache.commons.io.IOUtils:502","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, int size) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (size < 0) {\n                throw new java.lang.IllegalArgumentException((\"Size must be equal or greater than zero: \" + size));\n            } \n            if (size == 0) {\n                return new byte[0];\n            } \n            byte[] byte[] = new byte[size];\n            int int = 0;\n            int int;\n            while ((offset < size) && ((readed = input.read(data, offset, (size - offset))) != (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))) {\n                offset += readed;\n            }\n            if (offset != size) {\n                throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n            } \n            return data;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == value"},"failures":[],"tindex":"7cbac94f-2ed0-11e6-8cd5-295db1f789c0","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if ((-1) == length) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"length"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:707","type":"CtBinaryOperatorImpl","sourcecode":"guessedEnc != null"},"failures":[],"tindex":"7cbac950-2ed0-11e6-8cd5-33b1db971bbd","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if (guessedEnc != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (guessedEnc != null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.String java.lang.String = null;\n                    if (guessedEnc != null) {\n                        byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                        is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                        int int = 0;\n                        int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                        int int = is.read(bytes, offset, max);\n                        int int = -1;\n                        java.lang.String java.lang.String = null;\n                        while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                            offset += c;\n                            max -= c;\n                            c = is.read(bytes, offset, max);\n                            xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                            firstGT = xmlProlog.indexOf('>');\n                        }\n                        if (firstGT == (-1)) {\n                            if (c == (-1)) {\n                                throw new java.io.IOException(\"Unexpected end of XML stream\");\n                            } else {\n                                throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                            }\n                        } \n                        int int = offset;\n                        if (bytesRead > 0) {\n                            is.reset();\n                            java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                            java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                            java.lang.String java.lang.String = bReader.readLine();\n                            while (line != null) {\n                                prolog.append(line);\n                                line = bReader.readLine();\n                            }\n                            java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                            if (m.find()) {\n                                encoding = m.group(1).toUpperCase();\n                                encoding = encoding.substring(1, ((encoding.length()) - 1));\n                            } \n                        } \n                    } \n                    return encoding;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"guessedEnc":"guessedEnc"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cbaf061-2ed0-11e6-8cd5-1b42af494e62","method":{"position":"org.apache.commons.io.output.DemuxOutputStream:39","type":"CtMethodImpl","sourcecode":"public java.io.OutputStream bindStream(java.io.OutputStream output) {\n    if (null != output) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.OutputStream java.io.OutputStream = java.lang.InheritableThreadLocal<java.io.OutputStream>.get();\n            java.lang.InheritableThreadLocal<java.io.OutputStream>.set(output);\n            return stream;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cbaf062-2ed0-11e6-8cd5-c5e380562075","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    output.write(((byte)((value >> 0) & 255)));\n                    output.write(((byte)((value >> 8) & 255)));\n                    output.write(((byte)((value >> 16) & 255)));\n                    output.write(((byte)((value >> 24) & 255)));\n                    output.write(((byte)((value >> 32) & 255)));\n                    output.write(((byte)((value >> 40) & 255)));\n                    output.write(((byte)((value >> 48) & 255)));\n                    output.write(((byte)((value >> 56) & 255)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2308","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"7cbaf063-2ed0-11e6-8cd5-5117c8fce4d2","method":{"position":"org.apache.commons.io.FileUtils:682","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\n    if (!(directory.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter;\n            if (extensions == null) {\n                filter = org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                java.lang.String[] java.lang.String[] = org.apache.commons.io.FileUtils.toSuffixes(extensions);\n                filter = new org.apache.commons.io.filefilter.SuffixFileFilter(suffixes);\n            }\n            return org.apache.commons.io.FileUtils.listFiles(directory, filter, (recursive ? org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:175","type":"CtBinaryOperatorImpl","sourcecode":"iterator != null"},"failures":[],"tindex":"7cbb1774-2ed0-11e6-8cd5-453ddcd8f0d1","method":{"position":"org.apache.commons.io.LineIterator:174","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(org.apache.commons.io.LineIterator iterator) {\n    if (iterator != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator != null) {\n                iterator.close();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:376","type":"CtInvocationImpl","sourcecode":"entry.isDirectory()"},"failures":[],"tindex":"7cbb1775-2ed0-11e6-8cd5-076fd5a4f68b","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:411","type":"CtMethodImpl","sourcecode":"private void doDelete(org.apache.commons.io.monitor.FileEntry entry) {\n    if (entry.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (org.apache.commons.io.monitor.FileAlterationListener org.apache.commons.io.monitor.FileAlterationListener : java.util.List<org.apache.commons.io.monitor.FileAlterationListener>) {\n                if (entry.isDirectory()) {\n                    listener.onDirectoryDelete(entry.getFile());\n                } else {\n                    listener.onFileDelete(entry.getFile());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:136","type":"CtBinaryOperatorImpl","sourcecode":"(threadFactory) != null"},"failures":[],"tindex":"7cbb1776-2ed0-11e6-8cd5-659dffb07800","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:86","type":"CtMethodImpl","sourcecode":"public synchronized void setThreadFactory(java.util.concurrent.ThreadFactory threadFactory) {\n    if (threadFactory != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileAlterationMonitor.this.java.util.concurrent.ThreadFactory = threadFactory;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"threadFactory":"threadFactory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:400","type":"CtBinaryOperatorImpl","sourcecode":"sock != null"},"failures":[],"tindex":"7cbb3e87-2ed0-11e6-8cd5-b1bece5787b7","method":{"position":"org.apache.commons.io.IOUtils:399","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.net.ServerSocket sock) {\n    if (sock != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (sock != null) {\n                try {\n                    sock.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sock":"sock"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"7cbb3e88-2ed0-11e6-8cd5-8ffbd255d217","method":{"position":"org.apache.commons.io.FileSystemUtils:287","type":"CtMethodImpl","sourcecode":"long freeSpaceWindows(java.lang.String path, long timeout) throws java.io.IOException {\n    if (path == null) {\n        {\n            path = org.apache.commons.io.FilenameUtils.normalize(path, false);\n            if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n                path = (\"\\\"\" + path) + \"\\\"\";\n            } \n            java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"cmd.exe\" , \"/C\" , \"dir /a /-c \" + path };\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, java.lang.Integer.java.lang.Integer.int, timeout);\n            for (int int = (lines.size()) - 1 ; i >= 0 ; i--) {\n                java.lang.String java.lang.String = lines.get(i);\n                if ((line.length()) > 0) {\n                    return parseDir(line, path);\n                } \n            }\n            throw new java.io.IOException((((\"Command line 'dir /-c' did not return any info \" + \"for path '\") + path) + \"'\"));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:656","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"7cbb6599-2ed0-11e6-8cd5-83e0875a1756","method":{"position":"org.apache.commons.io.input.XmlStreamReader:450","type":"CtMethodImpl","sourcecode":"private java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, java.lang.String httpContentType, boolean lenient) throws java.io.IOException {\n    if (httpContentType != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String java.lang.String = bom.getBOMCharsetName();\n            java.lang.String java.lang.String = pis.getBOMCharsetName();\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n            try {\n                return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n            } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                if (lenient) {\n                    return doLenientDetection(httpContentType, ex);\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"httpContentType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.TaggedIOException:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)"},"failures":[],"tindex":"7cbb659a-2ed0-11e6-8cd5-b96a23e660c4","method":{"position":"org.apache.commons.io.TaggedIOException:92","type":"CtMethodImpl","sourcecode":"public static void throwCauseIfTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) throws java.io.IOException {\n    if (org.apache.commons.io.TaggedIOException.isTaggedWith(tag, tag)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)) {\n                throw ((org.apache.commons.io.TaggedIOException)(throwable)).getCause();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"tag","tag":"tag"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cbb659b-2ed0-11e6-8cd5-0f499761459b","method":{"position":"org.apache.commons.io.CopyUtils:303","type":"CtMethodImpl","sourcecode":"public static void copy(java.lang.String input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                {\n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(input);\n                    java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter(output);\n                    org.apache.commons.io.CopyUtils.copy(in, out);\n                    out.flush();\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"7cbb8cac-2ed0-11e6-8cd5-4f05f095e85a","method":{"position":"org.apache.commons.io.FileUtils:1805","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (file.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.readLines(file, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2784","type":"CtBinaryOperatorImpl","sourcecode":"(!(destDir.exists())) && createDestDir"},"failures":[],"tindex":"7cbb8cad-2ed0-11e6-8cd5-05de4dc8eb5a","method":{"position":"org.apache.commons.io.FileUtils:2854","type":"CtMethodImpl","sourcecode":"public static void moveFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if ((!(srcFile.exists())) && createDestDir) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination directory must not be null\");\n            } \n            if ((!(destDir.exists())) && createDestDir) {\n                destDir.mkdirs();\n            } \n            if (!(destDir.exists())) {\n                throw new java.io.FileNotFoundException(((((\"Destination directory '\" + destDir) + \"' does not exist [createDestDir=\") + createDestDir) + \"]\"));\n            } \n            if (!(destDir.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.moveFile(srcFile, new java.io.File(destDir , srcFile.getName()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"createDestDir":"createDestDir","destDir":"srcFile"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cbb8cae-2ed0-11e6-8cd5-f5b9e1998be1","method":{"position":"org.apache.commons.io.input.DemuxInputStream:39","type":"CtMethodImpl","sourcecode":"public java.io.InputStream bindStream(java.io.InputStream input) {\n    if (null != input) {\n        {\n            java.io.InputStream java.io.InputStream = java.lang.InheritableThreadLocal<java.io.InputStream>.get();\n            java.lang.InheritableThreadLocal<java.io.InputStream>.set(input);\n            return oldValue;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"7cbbb3bf-2ed0-11e6-8cd5-c5e3ed9ba4d3","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:276","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"7cbbb3c0-2ed0-11e6-8cd5-0d5bf0274b5d","method":{"position":"org.apache.commons.io.monitor.FileEntry:189","type":"CtMethodImpl","sourcecode":"public void setName(java.lang.String name) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.java.lang.String = name;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2663","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"7cbbb3c1-2ed0-11e6-8cd5-7f3cd763908f","method":{"position":"org.apache.commons.io.FileUtils:325","type":"CtMethodImpl","sourcecode":"public static java.io.FileOutputStream openOutputStream(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        {\n            return org.apache.commons.io.FileUtils.openOutputStream(file, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2313","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(directory))"},"failures":[],"tindex":"7cbbb3c2-2ed0-11e6-8cd5-eb3fa3e3b6b5","method":{"position":"org.apache.commons.io.FileUtils:191","type":"CtMethodImpl","sourcecode":"public static java.io.File getFile(java.io.File directory, java.lang.String... names) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n        {\n            if (directory == null) {\n                throw new java.lang.NullPointerException(\"directorydirectory must not be null\");\n            } \n            if (names == null) {\n                throw new java.lang.NullPointerException(\"names must not be null\");\n            } \n            java.io.File java.io.File = directory;\n            for (java.lang.String java.lang.String : names) {\n                file = new java.io.File(file , name);\n            }\n            return file;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SizeFileFilter:71","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"7cbbdad3-2ed0-11e6-8cd5-e168d21b315d","method":{"position":"org.apache.commons.io.FileUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(long size) {\n    if (size < 0) {\n        {\n            return org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(size));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cbbdad4-2ed0-11e6-8cd5-e5952fa444b5","method":{"position":"org.apache.commons.io.EndianUtils:283","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(java.io.OutputStream output, short value) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"7cbbdad5-2ed0-11e6-8cd5-f549a4f211aa","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:405","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter1 == null) || (filter1 == null)) {\n        {\n            return new org.apache.commons.io.filefilter.OrFileFilter(filter1 , filter2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter1","filter2":"filter1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"7cbbdad6-2ed0-11e6-8cd5-17b128352167","method":{"position":"org.apache.commons.io.FilenameUtils:710","type":"CtMethodImpl","sourcecode":"public static int indexOfExtension(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (filename == null) {\n                                return -1;\n                            } \n                            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n                            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n                            return lastSeparator > extensionPos ? -1 : extensionPos;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"7cbc01e7-2ed0-11e6-8cd5-d3e38368b511","method":{"position":"org.apache.commons.io.FileUtils:2620","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.io.File reference) {\n    if (!(reference.exists())) {\n        {\n            if (reference == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n            } \n            if (!(reference.exists())) {\n                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, reference.lastModified());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"reference"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"7cbc01e8-2ed0-11e6-8cd5-33bc016d20ba","method":{"position":"org.apache.commons.io.EndianUtils:142","type":"CtMethodImpl","sourcecode":"public static int readSwappedUnsignedShort(byte[] data, int offset) {\n    if (data != null) {\n        {\n            return (((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:459","type":"CtVariableReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"7cbc01e9-2ed0-11e6-8cd5-91a92179c5a9","method":{"position":"org.apache.commons.io.input.XmlStreamReader:423","type":"CtMethodImpl","sourcecode":"private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        {\n            java.lang.String java.lang.String = bom.getBOMCharsetName();\n            java.lang.String java.lang.String = pis.getBOMCharsetName();\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n            try {\n                return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n            } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                if (lenient) {\n                    return doLenientDetection(null, ex);\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1146","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"7cbc28fa-2ed0-11e6-8cd5-7db10aee4a81","method":{"position":"org.apache.commons.io.FilenameUtils:710","type":"CtMethodImpl","sourcecode":"public static int indexOfExtension(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (filename == null) {\n                                return -1;\n                            } \n                            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n                            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n                            return lastSeparator > extensionPos ? -1 : extensionPos;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl","sourcecode":"((file != null) && (file.isFile())) && (file.canRead())"},"failures":[],"tindex":"7cbc28fb-2ed0-11e6-8cd5-159393197361","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (((file != null) && (file.isFile())) && (file.canRead())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.io.FileFilter) != null) {\n                return java.io.FileFilter.accept(file);\n            } else {\n                return super.accept(file);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"7cbc28fc-2ed0-11e6-8cd5-7f9076f13dc2","method":{"position":"org.apache.commons.io.FileUtils:1925","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if ((file.getParent()) == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                org.apache.commons.io.IOUtils.write(data, out, encoding);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:96","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"7cbc28fd-2ed0-11e6-8cd5-fba4e422a9ab","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:95","type":"CtMethodImpl","sourcecode":"public void addObserver(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        {\n            if (observer != null) {\n                java.util.List<org.apache.commons.io.monitor.FileAlterationObserver>.add(observer);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:906","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"7cbc500e-2ed0-11e6-8cd5-8b96e8d8551c","method":{"position":"org.apache.commons.io.FilenameUtils:710","type":"CtMethodImpl","sourcecode":"public static int indexOfExtension(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (filename == null) {\n                                return -1;\n                            } \n                            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n                            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n                            return lastSeparator > extensionPos ? -1 : extensionPos;\n                        }\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:110","type":"CtInvocationImpl","sourcecode":"file1.isDirectory()"},"failures":[],"tindex":"7cbc500f-2ed0-11e6-8cd5-1f5f8ff9013e","method":{"position":"org.apache.commons.io.FileUtils:729","type":"CtMethodImpl","sourcecode":"public static boolean contentEquals(java.io.File file1, java.io.File file2) throws java.io.IOException {\n    if (file1.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            boolean boolean = file1.exists();\n            if (file1Exists != (file2.exists())) {\n                return false;\n            } \n            if (!file1Exists) {\n                return true;\n            } \n            if ((file1.isDirectory()) || (file2.isDirectory())) {\n                throw new java.io.IOException(\"Can't compare directories, only files\");\n            } \n            if ((file1.length()) != (file2.length())) {\n                return false;\n            } \n            if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                return true;\n            } \n            java.io.InputStream java.io.InputStream = null;\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                input1 = new java.io.FileInputStream(file1);\n                input2 = new java.io.FileInputStream(file2);\n                return org.apache.commons.io.IOUtils.contentEquals(input1, input2);\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(input1);\n                org.apache.commons.io.IOUtils.closeQuietly(input2);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1":"file1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cbc5010-2ed0-11e6-8cd5-d74828cf9e53","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"7cbc7721-2ed0-11e6-8cd5-11f577e6f4f1","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    output.write(((byte)((value >> 0) & 255)));\n                    output.write(((byte)((value >> 8) & 255)));\n                    output.write(((byte)((value >> 16) & 255)));\n                    output.write(((byte)((value >> 24) & 255)));\n                    output.write(((byte)((value >> 32) & 255)));\n                    output.write(((byte)((value >> 40) & 255)));\n                    output.write(((byte)((value >> 48) & 255)));\n                    output.write(((byte)((value >> 56) & 255)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"7cbc7722-2ed0-11e6-8cd5-9f567d30e85e","method":{"position":"org.apache.commons.io.FilenameUtils:566","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToWindows(java.lang.String path) {\n    if (path == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1371","type":"CtBinaryOperatorImpl","sourcecode":"((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))"},"failures":[],"tindex":"7cbc7723-2ed0-11e6-8cd5-d16826219932","method":{"position":"org.apache.commons.io.FilenameUtils:1367","type":"CtMethodImpl","sourcecode":"static java.lang.String[] splitOnTokens(java.lang.String text) {\n    if (((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n        {\n            if (((text.indexOf('?')) == (-1)) && ((text.indexOf('*')) == (-1))) {\n                return new java.lang.String[]{ text };\n            } \n            char[] char[] = text.toCharArray();\n            java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (((array[i]) == '?') || ((array[i]) == '*')) {\n                    if ((buffer.length()) != 0) {\n                        list.add(buffer.toString());\n                        buffer.setLength(0);\n                    } \n                    if ((array[i]) == '?') {\n                        list.add(\"?\");\n                    } else if ((list.isEmpty()) || ((i > 0) && ((list.get(((list.size()) - 1)).equals(\"*\")) == false))) {\n                        list.add(\"*\");\n                    } \n                } else {\n                    buffer.append(array[i]);\n                }\n            }\n            if ((buffer.length()) != 0) {\n                list.add(buffer.toString());\n            } \n            return list.toArray(new java.lang.String[list.size()]);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"text":"text"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"7cbc9e34-2ed0-11e6-8cd5-4f94519735ae","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(b.int);\n            getStream().write(b);\n            long += b.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2313","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(directory))"},"failures":[],"tindex":"7cbc9e35-2ed0-11e6-8cd5-a5c4f0d31f2c","method":{"position":"org.apache.commons.io.FileUtils:708","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n        {\n            return org.apache.commons.io.FileUtils.listFiles(directory, extensions, recursive).iterator();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"7cbc9e36-2ed0-11e6-8cd5-2be0553a795b","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return read(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"7cbcc547-2ed0-11e6-8cd5-15dc8baa12af","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value) {\n    if (value != null) {\n        {\n            java.lang.StringBuilder.append(value);\n            return org.apache.commons.io.output.StringBuilderWriter.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1168","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"7cbcc548-2ed0-11e6-8cd5-fdc05e9d54bb","method":{"position":"org.apache.commons.io.FilenameUtils:973","type":"CtMethodImpl","sourcecode":"public static java.lang.String getBaseName(java.lang.String filename) {\n    if (filename == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.removeExtension(org.apache.commons.io.FilenameUtils.getName(filename));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"7cbcc549-2ed0-11e6-8cd5-ddff1976e0d7","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:132","type":"CtMethodImpl","sourcecode":"public void readFully(byte[] data, int offset, int length) throws java.io.EOFException, java.io.IOException {\n    if (data != null) {\n        throw new java.io.EOFException();\n    } else {\n        {\n            int int = length;\n            while (remaining > 0) {\n                int int = (offset + length) - remaining;\n                int int = read(data, location, remaining);\n                if ((-1) == count) {\n                    throw new java.io.EOFException();\n                } \n                remaining -= count;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"7cbcec5a-2ed0-11e6-8cd5-634322d1d8a2","method":{"position":"org.apache.commons.io.IOUtils:1818","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, long inputOffset, long length) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                {\n                    return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"7cbcec5b-2ed0-11e6-8cd5-5bbfcfc76b96","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n != (-1)) {\n                {\n                    if (n != (-1)) {\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                        }\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:141","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"7cbcec5c-2ed0-11e6-8cd5-6f923a1b98c9","method":{"position":"org.apache.commons.io.input.BOMInputStream:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf, int off, int len) throws java.io.IOException {\n    if (off == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            while ((len > 0) && (b >= 0)) {\n                b = readFirstBytes();\n                if (b >= 0) {\n                    buf[(off++)] = ((byte)(b & 255));\n                    len--;\n                    firstCount++;\n                } \n            }\n            int int = java.io.InputStream.read(buf, off, len);\n            return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
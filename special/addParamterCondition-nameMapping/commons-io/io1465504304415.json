{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"2e56381b-2e81-11e6-b489-89d6b5191e6f","method":{"position":"org.apache.commons.io.FileSystemUtils:323","type":"CtMethodImpl","sourcecode":"long parseDir(java.lang.String line, java.lang.String path) throws java.io.IOException {\n    if ((line.length()) == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            int int = (line.length()) - 1;\n            innerLoop1 : while (j >= 0) {\n                char char = line.charAt(j);\n                if (java.lang.Character.isDigit(c)) {\n                    bytesEnd = j + 1;\n                    break innerLoop1;\n                } \n                j--;\n            }\n            innerLoop2 : while (j >= 0) {\n                char char = line.charAt(j);\n                if (((!(java.lang.Character.isDigit(c))) && (c != ',')) && (c != '.')) {\n                    bytesStart = j + 1;\n                    break innerLoop2;\n                } \n                j--;\n            }\n            if (j < 0) {\n                throw new java.io.IOException((((\"Command line 'dir /-c' did not return valid info \" + \"for path '\") + path) + \"'\"));\n            } \n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(line.substring(bytesStart, bytesEnd));\n            for (int int = 0 ; k < (buf.length()) ; k++) {\n                if (((buf.charAt(k)) == ',') || ((buf.charAt(k)) == '.')) {\n                    buf.deleteCharAt((k--));\n                } \n            }\n            return parseBytes(buf.toString(), path);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"line"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"2e56fb6c-2e81-11e6-b489-83482ec9ac32","method":{"position":"org.apache.commons.io.input.CharSequenceReader:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] array, int offset, int length) {\n    if (length < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            if (array == null) {\n                throw new java.lang.NullPointerException(\"Character array is missing\");\n            } \n            if (((length < 0) || (offset < 0)) || ((offset + length) > (array.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (array.int)) + \", offset=\") + offset) + \", length=\") + length));\n            } \n            int int = 0;\n            for (int int = 0 ; i < length ; i++) {\n                int int = read();\n                if (c == (-1)) {\n                    return count;\n                } \n                array[(offset + i)] = ((char)(c));\n                count++;\n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:289","type":"CtBinaryOperatorImpl","sourcecode":"((path.length()) > 0) && ((path.charAt(0)) != '\"')"},"failures":[],"tindex":"2e57227d-2e81-11e6-b489-0d9f9cf1f93a","method":{"position":"org.apache.commons.io.FileCleaningTracker:106","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker) {\n    if (((marker.length()) > 0) && ((path.charAt(0)) != '\"')) {\n        {\n            track(path, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"marker"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e57227e-2e81-11e6-b489-8171660f3a8b","method":{"position":"org.apache.commons.io.EndianUtils:439","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (null != input) {\n                {\n                    return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(input));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:707","type":"CtBinaryOperatorImpl","sourcecode":"guessedEnc != null"},"failures":[],"tindex":"2e57498f-2e81-11e6-b489-dbac2d84e44d","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if (guessedEnc != null) {\n        {\n            java.lang.String java.lang.String = null;\n            if (guessedEnc != null) {\n                byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                int int = 0;\n                int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                int int = is.read(bytes, offset, max);\n                int int = -1;\n                java.lang.String java.lang.String = null;\n                while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                    offset += c;\n                    max -= c;\n                    c = is.read(bytes, offset, max);\n                    xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                    firstGT = xmlProlog.indexOf('>');\n                }\n                if (firstGT == (-1)) {\n                    if (c == (-1)) {\n                        throw new java.io.IOException(\"Unexpected end of XML stream\");\n                    } else {\n                        throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                    }\n                } \n                int int = offset;\n                if (bytesRead > 0) {\n                    is.reset();\n                    java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                    java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                    java.lang.String java.lang.String = bReader.readLine();\n                    while (line != null) {\n                        prolog.append(line);\n                        line = bReader.readLine();\n                    }\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                    if (m.find()) {\n                        encoding = m.group(1).toUpperCase();\n                        encoding = encoding.substring(1, ((encoding.length()) - 1));\n                    } \n                } \n            } \n            return encoding;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"guessedEnc":"guessedEnc"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:923","type":"CtBinaryOperatorImpl","sourcecode":"url != null"},"failures":[],"tindex":"2e5770a0-2e81-11e6-b489-0bb73f42d007","method":{"position":"org.apache.commons.io.IOUtils:893","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (url != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = url.openStream();\n            try {\n                return org.apache.commons.io.IOUtils.toString(inputStream, encoding);\n            } finally {\n                inputStream.close();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5797b1-2e81-11e6-b489-85998d08e1ee","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (null != input) {\n                {\n                    java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n                    return org.apache.commons.io.IOUtils.readLines(reader);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"2e57bec2-2e81-11e6-b489-2779210c46ce","method":{"position":"org.apache.commons.io.IOUtils:1067","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.Reader reader) {\n    if (reader == null) {\n        {\n            return new org.apache.commons.io.LineIterator(reader);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"2e57bec3-2e81-11e6-b489-6936978e630c","method":{"position":"org.apache.commons.io.IOUtils:1743","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = org.apache.commons.io.IOUtils.copyLarge(input, output);\n            if (count > (java.lang.Integer.java.lang.Integer.int)) {\n                return -1;\n            } \n            return ((int)(count));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:289","type":"CtBinaryOperatorImpl","sourcecode":"((path.length()) > 0) && ((path.charAt(0)) != '\"')"},"failures":[],"tindex":"2e57e5d4-2e81-11e6-b489-3ffd816bc507","method":{"position":"org.apache.commons.io.FileSystemUtils:435","type":"CtMethodImpl","sourcecode":"long parseBytes(java.lang.String freeSpace, java.lang.String path) throws java.io.IOException {\n    if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                long long = java.lang.Long.parseLong(freeSpace);\n                if (bytes < 0) {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not find free space in response \") + \"for path '\") + path) + \"'- check path is valid\"));\n                } \n                return bytes;\n            } catch (java.lang.NumberFormatException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return numeric data as expected \") + \"for path '\") + path) + \"'- check path is valid\") , ex);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"2e580ce5-2e81-11e6-b489-b70555596250","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        {\n            if ((java.io.FileFilter) != null) {\n                return java.io.FileFilter.accept(file);\n            } else {\n                return super.accept(file);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"2e580ce6-2e81-11e6-b489-d58dd63fc91a","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        {\n            java.io.Writer.write(str);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"2e580ce7-2e81-11e6-b489-2fdb35354dc0","method":{"position":"org.apache.commons.io.FileUtils:2595","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, long timeMillis) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified file\");\n            } \n            if (!(file.exists())) {\n                return false;\n            } \n            return (file.lastModified()) > timeMillis;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5833f8-2e81-11e6-b489-59ef44f93276","method":{"position":"org.apache.commons.io.IOUtils:801","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:165","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"2e5833f9-2e81-11e6-b489-83e2734d7e8f","method":{"position":"org.apache.commons.io.IOCase:146","type":"CtMethodImpl","sourcecode":"public int checkCompareTo(java.lang.String str1, java.lang.String str2) {\n    if ((str1 == null) || (str2 == null)) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"str1","str2":"str2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e585b0a-2e81-11e6-b489-21ffcdc7d972","method":{"position":"org.apache.commons.io.IOUtils:1285","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data , org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2292","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"2e58821b-2e81-11e6-b489-051ea333d303","method":{"position":"org.apache.commons.io.input.BoundedInputStream:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = (long) >= 0 ? java.lang.Math.min(n, ((long) - (long))) : n;\n            long long = java.io.InputStream.skip(toSkip);\n            long += skippedBytes;\n            return skippedBytes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:797","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"2e58821c-2e81-11e6-b489-c34aa5855c04","method":{"position":"org.apache.commons.io.comparator.PathFileComparator:102","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file1.isDirectory()) || (file1.isDirectory())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getPath(), file2.getPath());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file1","file1":"file1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2269","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"2e58a92d-2e81-11e6-b489-891f84a96715","method":{"position":"org.apache.commons.io.FileUtils:351","type":"CtMethodImpl","sourcecode":"public static java.io.FileOutputStream openOutputStream(java.io.File file, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canWrite()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be written to\"));\n                } \n            } else {\n                java.io.File java.io.File = file.getParentFile();\n                if (parent != null) {\n                    if ((!(parent.mkdirs())) && (!(parent.isDirectory()))) {\n                        throw new java.io.IOException(((\"Directory '\" + parent) + \"' could not be created\"));\n                    } \n                } \n            }\n            return new java.io.FileOutputStream(file , append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:192","type":"CtBinaryOperatorImpl","sourcecode":"directory == null"},"failures":[],"tindex":"2e58a92e-2e81-11e6-b489-9b0bbdfa6315","method":{"position":"org.apache.commons.io.FileUtils:1602","type":"CtMethodImpl","sourcecode":"public static boolean directoryContains(final java.io.File directory, final java.io.File child) throws java.io.IOException {\n    if (child == null) {\n        {\n            if (directory == null) {\n                throw new java.lang.IllegalArgumentException(\"Directory must not be null\");\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((\"Not a directory: \" + directory));\n            } \n            if (child == null) {\n                return false;\n            } \n            if ((!(directory.exists())) || (!(child.exists()))) {\n                return false;\n            } \n            java.lang.String java.lang.String = directory.getCanonicalPath();\n            java.lang.String java.lang.String = child.getCanonicalPath();\n            return org.apache.commons.io.FilenameUtils.directoryContains(canonicalParent, canonicalChild);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"child"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2471","type":"CtBinaryOperatorImpl","sourcecode":"files == null"},"failures":[],"tindex":"2e58d03f-2e81-11e6-b489-89c852d748d0","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:324","type":"CtMethodImpl","sourcecode":"private void checkAndNotify(org.apache.commons.io.monitor.FileEntry parent, org.apache.commons.io.monitor.FileEntry[] previous, java.io.File[] files) {\n    if (files == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry : previous) {\n                while ((c < (files.int)) && ((java.util.Comparator<java.io.File>.compare(entry.getFile(), files[c])) > 0)) {\n                    current[c] = createFileEntry(parent, files[c]);\n                    doCreate(current[c]);\n                    c++;\n                }\n                if ((c < (files.int)) && ((java.util.Comparator<java.io.File>.compare(entry.getFile(), files[c])) == 0)) {\n                    doMatch(entry, files[c]);\n                    checkAndNotify(entry, entry.getChildren(), listFiles(files[c]));\n                    current[c] = entry;\n                    c++;\n                } else {\n                    checkAndNotify(entry, entry.getChildren(), org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.io.File[]);\n                    doDelete(entry);\n                }\n            }\n            for ( ; c < (files.int) ; c++) {\n                current[c] = createFileEntry(parent, files[c]);\n                doCreate(current[c]);\n            }\n            parent.setChildren(current);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:73","type":"CtBinaryOperatorImpl","sourcecode":"suffix == null"},"failures":[],"tindex":"2e58f750-2e81-11e6-b489-63d8c6ca2e96","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:317","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String suffix) {\n    if (suffix == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.SuffixFileFilter(suffix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffix":"suffix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:348","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"2e58f751-2e81-11e6-b489-5d4832bb7ef6","method":{"position":"org.apache.commons.io.FilenameUtils:1277","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher, org.apache.commons.io.IOCase caseSensitivity) {\n    if (wildcardMatcher == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((filename == null) && (wildcardMatcher == null)) {\n                return true;\n            } \n            if ((filename == null) || (wildcardMatcher == null)) {\n                return false;\n            } \n            if (caseSensitivity == null) {\n                caseSensitivity = org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            java.lang.String[] java.lang.String[] = org.apache.commons.io.FilenameUtils.splitOnTokens(wildcardMatcher);\n            boolean boolean = false;\n            int int = 0;\n            int int = 0;\n            java.util.Stack<int[]> java.util.Stack<int[]> = new java.util.Stack<int[]>();\n            do {\n                if ((backtrack.size()) > 0) {\n                    int[] int[] = backtrack.pop();\n                    wcsIdx = array[0];\n                    textIdx = array[1];\n                    anyChars = true;\n                } \n                while (wcsIdx < (wcs.int)) {\n                    if (wcs[wcsIdx].equals(\"?\")) {\n                        textIdx++;\n                        if (textIdx > (filename.length())) {\n                            break;\n                        } \n                        anyChars = false;\n                    } else if (wcs[wcsIdx].equals(\"*\")) {\n                        anyChars = true;\n                        if (wcsIdx == ((wcs.int) - 1)) {\n                            textIdx = filename.length();\n                        } \n                    } else {\n                        if (anyChars) {\n                            textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                            if (textIdx == (-1)) {\n                                break;\n                            } \n                            int int = caseSensitivity.checkIndexOf(filename, (textIdx + 1), wcs[wcsIdx]);\n                            if (repeat >= 0) {\n                                backtrack.push(new int[]{ wcsIdx , repeat });\n                            } \n                        } else {\n                            if (!(caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx]))) {\n                                break;\n                            } \n                        }\n                        textIdx += wcs[wcsIdx].length();\n                        anyChars = false;\n                    }\n                    wcsIdx++;\n                }\n                if ((wcsIdx == (wcs.int)) && (textIdx == (filename.length()))) {\n                    return true;\n                } \n            } while ((backtrack.size()) > 0 );\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"wildcardMatcher"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2531","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"2e591e62-2e81-11e6-b489-cf10cb9fb084","method":{"position":"org.apache.commons.io.DirectoryWalker:503","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryStart(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(directory.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:77","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"2e591e63-2e81-11e6-b489-fd1a72a69b2e","method":{"position":"org.apache.commons.io.output.LockableFileWriter:268","type":"CtMethodImpl","sourcecode":"private java.io.Writer initWriter(java.io.File file, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file.getAbsolutePath() , append);\n                writer = new java.io.OutputStreamWriter(stream , org.apache.commons.io.Charsets.toCharset(encoding));\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                org.apache.commons.io.FileUtils.deleteQuietly(java.io.File);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                org.apache.commons.io.FileUtils.deleteQuietly(java.io.File);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl","sourcecode":"!(file.delete())"},"failures":[],"tindex":"2e591e64-2e81-11e6-b489-19acbf9d5a3a","method":{"position":"org.apache.commons.io.FileCleaner:73","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker, deleteStrategy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:623","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"2e594575-2e81-11e6-b489-6b3825415d43","method":{"position":"org.apache.commons.io.FilenameUtils:1145","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.lang.String extension) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return false;\n            } \n            if ((extension == null) || ((extension.length()) == 0)) {\n                return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n            return fileExt.equals(extension);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:141","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"2e594576-2e81-11e6-b489-f5c2a3a215e5","method":{"position":"org.apache.commons.io.output.ProxyWriter:154","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int len) throws java.io.IOException {\n    if (st == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(chr, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"st"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl","sourcecode":"(dir != null) && (new java.io.File(dir , name).isDirectory())"},"failures":[],"tindex":"2e594577-2e81-11e6-b489-afa9f13d4f86","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        {\n            if ((java.io.FilenameFilter) != null) {\n                return java.io.FilenameFilter.accept(dir, name);\n            } else {\n                return super.accept(dir, name);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1538","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.delete())"},"failures":[],"tindex":"2e596c88-2e81-11e6-b489-6106c5558478","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:51","type":"CtMethodImpl","sourcecode":"public void onDirectoryChange(final java.io.File directory) {\n    if (!(directory.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1076","type":"CtInvocationImpl","sourcecode":"srcFile.isDirectory()"},"failures":[],"tindex":"2e596c89-2e81-11e6-b489-e7064229e3f2","method":{"position":"org.apache.commons.io.FileUtils:2811","type":"CtMethodImpl","sourcecode":"public static void moveFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (destFile.isDirectory()) {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destFile == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcFile.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcFile) + \"' does not exist\"));\n            } \n            if (srcFile.isDirectory()) {\n                throw new java.io.IOException(((\"Source '\" + srcFile) + \"' is a directory\"));\n            } \n            if (destFile.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destFile) + \"' already exists\"));\n            } \n            if (destFile.isDirectory()) {\n                throw new java.io.IOException(((\"Destination '\" + destFile) + \"' is a directory\"));\n            } \n            boolean boolean = srcFile.renameTo(destFile);\n            if (!rename) {\n                org.apache.commons.io.FileUtils.copyFile(srcFile, destFile);\n                if (!(srcFile.delete())) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(destFile);\n                    throw new java.io.IOException(((((\"Failed to delete original file '\" + srcFile) + \"' after copy to '\") + destFile) + \"'\"));\n                } \n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"destFile"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1160","type":"CtVariableReadImpl","sourcecode":"preserveFileDate"},"failures":[],"tindex":"2e596c8a-2e81-11e6-b489-e187e21d20a4","method":{"position":"org.apache.commons.io.FileUtils:1005","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if (preserveFileDate) {\n        {\n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, preserveFileDate);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"preserveFileDate":"preserveFileDate"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"2e59939b-2e81-11e6-b489-cb4b81be7af2","method":{"position":"org.apache.commons.io.CopyUtils:134","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:689","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"2e59939c-2e81-11e6-b489-59096d9019ca","method":{"position":"org.apache.commons.io.FilenameUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String getName(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            return filename.substring((index + 1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:302","type":"CtBinaryOperatorImpl","sourcecode":"closeable != null"},"failures":[],"tindex":"2e59939d-2e81-11e6-b489-6731cae39477","method":{"position":"org.apache.commons.io.IOUtils:300","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Closeable closeable) {\n    if (closeable != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if (closeable != null) {\n                    closeable.close();\n                } \n            } catch (java.io.IOException ioe) {\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closeable":"closeable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2368","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"2e59baae-2e81-11e6-b489-4de0d73a36c9","method":{"position":"org.apache.commons.io.FileUtils:543","type":"CtMethodImpl","sourcecode":"private static void validateListFilesParameters(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter) {\n    if (!(directory.isDirectory())) {\n        {\n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException(\"Parameter 'directory' is not a directory\");\n            } \n            if (fileFilter == null) {\n                throw new java.lang.NullPointerException(\"Parameter 'fileFilter' is null\");\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1122","type":"CtBinaryOperatorImpl","sourcecode":"(filename1 == null) || (filename2 == null)"},"failures":[],"tindex":"2e59baaf-2e81-11e6-b489-0ddbe95e4124","method":{"position":"org.apache.commons.io.FilenameUtils:1080","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalized(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename1 == null) || (filename2 == null)) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"filename2","filename1":"filename1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"2e59bab0-2e81-11e6-b489-73fc70c3e2f0","method":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:150","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.SuffixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEndsWith(name, suffix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:478","type":"CtBinaryOperatorImpl","sourcecode":"(httpContentType != null) && (httpContentType.startsWith(\"text/html\"))"},"failures":[],"tindex":"2e59e1c1-2e81-11e6-b489-b5ebd58a2798","method":{"position":"org.apache.commons.io.input.XmlStreamReader:476","type":"CtMethodImpl","sourcecode":"private java.lang.String doLenientDetection(java.lang.String httpContentType, org.apache.commons.io.input.XmlStreamReaderException ex) throws java.io.IOException {\n    if ((httpContentType != null) && (httpContentType.startsWith(\"text/html\"))) {\n        {\n            if ((httpContentType != null) && (httpContentType.startsWith(\"text/html\"))) {\n                httpContentType = httpContentType.substring(\"text/html\".length());\n                httpContentType = \"text/xml\" + httpContentType;\n                try {\n                    return calculateHttpEncoding(httpContentType, ex.getBomEncoding(), ex.getXmlGuessEncoding(), ex.getXmlEncoding(), true);\n                } catch (org.apache.commons.io.input.XmlStreamReaderException ex2) {\n                    ex = ex2;\n                }\n            } \n            java.lang.String java.lang.String = ex.getXmlEncoding();\n            if (encoding == null) {\n                encoding = ex.getContentTypeEncoding();\n            } \n            if (encoding == null) {\n                encoding = (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n            } \n            return encoding;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"httpContentType"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2292","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"2e59e1c2-2e81-11e6-b489-838eca6bc08c","method":{"position":"org.apache.commons.io.input.CharSequenceReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) {\n    if (n < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Number of characters to skip is less than zero: \" + n));\n                    } \n                    if ((int) >= (java.lang.CharSequence.length())) {\n                        return -1;\n                    } \n                    int int = ((int)(java.lang.Math.min(java.lang.CharSequence.length(), ((int) + n))));\n                    int int = dest - (int);\n                    int = dest;\n                    return count;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.SwappedDataInputStream:142","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == count"},"failures":[],"tindex":"2e59e1c3-2e81-11e6-b489-17d7a539f324","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:244","type":"CtMethodImpl","sourcecode":"public int skipBytes(int count) throws java.io.EOFException, java.io.IOException {\n    if ((-1) == count) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return ((int)(java.io.InputStream.skip(count)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:164","type":"CtBinaryOperatorImpl","sourcecode":"(magicNumber.length()) == 0"},"failures":[],"tindex":"2e5a08d4-2e81-11e6-b489-ed78ce516a95","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:657","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber) {\n    if ((magicNumber.length()) == 0) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"magicNumber":"magicNumber"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1570","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5a08d5-2e81-11e6-b489-6381ba236194","method":{"position":"org.apache.commons.io.FileUtils:1987","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data) throws java.io.IOException {\n    if (data != null) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5a08d6-2e81-11e6-b489-05afb4c1e0e4","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (null != input) {\n                {\n                    java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n                    return org.apache.commons.io.IOUtils.readLines(reader);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5a2fe7-2e81-11e6-b489-dd73f64843d6","method":{"position":"org.apache.commons.io.EndianUtils:439","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (null != input) {\n                {\n                    return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(input));\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2444","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"2e5a2fe8-2e81-11e6-b489-fdc540c2102f","method":{"position":"org.apache.commons.io.DirectoryWalker:533","type":"CtMethodImpl","sourcecode":"protected void handleFile(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(file.exists())) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5a2fe9-2e81-11e6-b489-073b42266795","method":{"position":"org.apache.commons.io.EndianUtils:129","type":"CtMethodImpl","sourcecode":"public static short readSwappedShort(byte[] data, int offset) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((short)((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"2e5a2fea-2e81-11e6-b489-6f631f112712","method":{"position":"org.apache.commons.io.FileUtils:2149","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines) throws java.io.IOException {\n    if (file.exists()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, null, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"2e5a56fb-2e81-11e6-b489-1f2ea41bede1","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:87","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] bts, int st, int end) throws java.io.IOException {\n    if (end == 0) {\n        {\n            try {\n                beforeWrite(end);\n                java.io.OutputStream.write(bts, st, end);\n                afterWrite(end);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"end"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1122","type":"CtBinaryOperatorImpl","sourcecode":"(filename1 == null) || (filename2 == null)"},"failures":[],"tindex":"2e5a56fc-2e81-11e6-b489-0590812d9ac4","method":{"position":"org.apache.commons.io.FilenameUtils:1064","type":"CtMethodImpl","sourcecode":"public static boolean equalsOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename1 == null) || (filename1 == null)) {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"filename1","filename1":"filename1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"2e5a56fd-2e81-11e6-b489-c5045f1a0fb0","method":{"position":"org.apache.commons.io.IOUtils:443","type":"CtMethodImpl","sourcecode":"public static java.io.BufferedReader toBufferedReader(java.io.Reader reader) {\n    if (reader == null) {\n        {\n            return reader instanceof java.io.BufferedReader ? ((java.io.BufferedReader)(reader)) : new java.io.BufferedReader(reader);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5a56fe-2e81-11e6-b489-bbec6b7b7ce0","method":{"position":"org.apache.commons.io.EndianUtils:117","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(byte[] data, int offset, short value) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1168","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"2e5a7e0f-2e81-11e6-b489-1f97c2ac6e23","method":{"position":"org.apache.commons.io.FilenameUtils:688","type":"CtMethodImpl","sourcecode":"public static int indexOfLastSeparator(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            return java.lang.Math.max(lastUnixPos, lastWindowsPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"2e5a7e10-2e81-11e6-b489-2d779d3ffa58","method":{"position":"org.apache.commons.io.FileUtils:1760","type":"CtMethodImpl","sourcecode":"public static byte[] readFileToByteArray(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.toByteArray(in, file.length());\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.DirectoryWalker:330","type":"CtBinaryOperatorImpl","sourcecode":"startDirectory == null"},"failures":[],"tindex":"2e5a7e11-2e81-11e6-b489-738ea50a0820","method":{"position":"org.apache.commons.io.DirectoryWalker:329","type":"CtMethodImpl","sourcecode":"protected final void walk(java.io.File startDirectory, java.util.Collection<T> results) throws java.io.IOException {\n    if (startDirectory == null) {\n        {\n            if (startDirectory == null) {\n                throw new java.lang.NullPointerException(\"Start Directory is null\");\n            } \n            try {\n                handleStart(startDirectory, results);\n                walk(startDirectory, 0, results);\n                handleEnd(results);\n            } catch (org.apache.commons.io.DirectoryWalker.CancelException cancel) {\n                handleCancelled(startDirectory, results, cancel);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startDirectory":"startDirectory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2471","type":"CtBinaryOperatorImpl","sourcecode":"files == null"},"failures":[],"tindex":"2e5aa522-2e81-11e6-b489-61332f42a412","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:211","type":"CtMethodImpl","sourcecode":"public static java.util.Set<java.io.File> filterSet(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (files == null) {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return new java.util.HashSet<java.io.File>(java.util.Arrays.asList(acceptedFiles));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"2e5aa523-2e81-11e6-b489-1b110db931fb","method":{"position":"org.apache.commons.io.IOUtils:1525","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (data != null) {\n                        output.write(data.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.TaggedIOException:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)"},"failures":[],"tindex":"2e5aa524-2e81-11e6-b489-3d37757ff8f4","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if (org.apache.commons.io.TaggedIOException.isTaggedWith(tag, tag)) {\n        {\n            return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"tag","tag":"tag"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"2e5acc35-2e81-11e6-b489-0fddeb073385","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:101","type":"CtMethodImpl","sourcecode":"public void throwIfCauseOf(java.lang.Exception exception) throws java.io.IOException {\n    if (null != exception) {\n        {\n            org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(exception, java.io.Serializable);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"2e5acc36-2e81-11e6-b489-21c193dbaba6","method":{"position":"org.apache.commons.io.output.WriterOutputStream:229","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            write(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"2e5acc37-2e81-11e6-b489-5519ad138520","method":{"position":"org.apache.commons.io.IOUtils:1550","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"2e5acc38-2e81-11e6-b489-7fec35a266d6","method":{"position":"org.apache.commons.io.IOUtils:1525","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (data != null) {\n                        output.write(data.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2317","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"2e5af349-2e81-11e6-b489-e32cfae89b74","method":{"position":"org.apache.commons.io.IOUtils:2379","type":"CtMethodImpl","sourcecode":"public static void skipFully(java.io.Reader input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = org.apache.commons.io.IOUtils.skip(input, toSkip);\n            if (skipped != toSkip) {\n                throw new java.io.EOFException((((\"Chars to skip: \" + toSkip) + \" actual: \") + skipped));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"toSkip"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:107","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"2e5af34a-2e81-11e6-b489-651440b29a42","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:106","type":"CtMethodImpl","sourcecode":"public void removeObserver(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (observer != null) {\n                while (java.util.List<org.apache.commons.io.monitor.FileAlterationObserver>.remove(observer)) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"2e5af34b-2e81-11e6-b489-65760396ebe6","method":{"position":"org.apache.commons.io.output.LockableFileWriter:349","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        {\n            java.io.Writer.write(str);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"2e5af34c-2e81-11e6-b489-7d46eaaada09","method":{"position":"org.apache.commons.io.filefilter.FalseFileFilter:68","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"2e5b1a5d-2e81-11e6-b489-bb48ebf5120d","method":{"position":"org.apache.commons.io.input.ReaderInputStream:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            if (b == null) {\n                {\n                    return read(b, 0, b.int);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"2e5b1a5e-2e81-11e6-b489-e77db900b504","method":{"position":"org.apache.commons.io.input.ReaderInputStream:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            if (b == null) {\n                {\n                    return read(b, 0, b.int);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1489","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5b1a5f-2e81-11e6-b489-ff43867d819d","method":{"position":"org.apache.commons.io.IOUtils:1488","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5b1a60-2e81-11e6-b489-5b12a6ab979d","method":{"position":"org.apache.commons.io.EndianUtils:261","type":"CtMethodImpl","sourcecode":"public static void writeSwappedDouble(byte[] data, int offset, double value) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedLong(data, offset, java.lang.Double.doubleToLongBits(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:949","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"2e5b1a61-2e81-11e6-b489-019573560364","method":{"position":"org.apache.commons.io.FilenameUtils:240","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename, boolean unixSeparator) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            char char = unixSeparator ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, separator, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"2e5b4172-2e81-11e6-b489-65be0e42430b","method":{"position":"org.apache.commons.io.FileUtils:2576","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.util.Date date) {\n    if (file.exists()) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified date\");\n            } \n            return org.apache.commons.io.FileUtils.isFileNewer(file, date.getTime());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:802","type":"CtInvocationImpl","sourcecode":"file1.getCanonicalFile().equals(file2.getCanonicalFile())"},"failures":[],"tindex":"2e5b4173-2e81-11e6-b489-19bfe59cebcf","method":{"position":"org.apache.commons.io.comparator.SizeFileComparator:108","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1.getCanonicalFile().equals(file1.getCanonicalFile())) {\n        {\n            long long = 0;\n            if (file1.isDirectory()) {\n                size1 = (boolean) && (file1.exists()) ? org.apache.commons.io.FileUtils.sizeOfDirectory(file1) : 0;\n            } else {\n                size1 = file1.length();\n            }\n            long long = 0;\n            if (file2.isDirectory()) {\n                size2 = (boolean) && (file2.exists()) ? org.apache.commons.io.FileUtils.sizeOfDirectory(file2) : 0;\n            } else {\n                size2 = file2.length();\n            }\n            long long = size1 - size2;\n            if (result < 0) {\n                return -1;\n            } else if (result > 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file1","file1":"file1"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2355","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"2e5b4174-2e81-11e6-b489-49f7efa382e6","method":{"position":"org.apache.commons.io.IOUtils:2277","type":"CtMethodImpl","sourcecode":"public static long skip(java.io.InputStream input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Skip count must be non-negative, actual: \" + toSkip));\n            } \n            if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[]) == null) {\n                org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[] = new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int];\n            } \n            long long = toSkip;\n            while (remain > 0) {\n                long long = input.read(org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[], 0, ((int)(java.lang.Math.min(remain, org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))));\n                if (n < 0) {\n                    break;\n                } \n                remain -= n;\n            }\n            return toSkip - remain;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"toSkip"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:96","type":"CtBinaryOperatorImpl","sourcecode":"line == null"},"failures":[],"tindex":"2e5b6885-2e81-11e6-b489-21c138e642c1","method":{"position":"org.apache.commons.io.input.TailerListenerAdapter:54","type":"CtMethodImpl","sourcecode":"public void handle(java.lang.String line) {\n    if (line == null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"line"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5b6886-2e81-11e6-b489-bf1b9d31a38d","method":{"position":"org.apache.commons.io.IOUtils:1448","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output, encoding);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"2e5b6887-2e81-11e6-b489-77e9c221e0a3","method":{"position":"org.apache.commons.io.FileCleaner:88","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.lang.String path, java.lang.Object marker) {\n    if ((marker.length()) == 0) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(path, marker);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"marker"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2478","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"2e5b6888-2e81-11e6-b489-2326cadfe82b","method":{"position":"org.apache.commons.io.filefilter.CanReadFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.canRead();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1570","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"2e5b8f99-2e81-11e6-b489-8763061fa0bd","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:175","type":"CtBinaryOperatorImpl","sourcecode":"(prefix) != null"},"failures":[],"tindex":"2e5b8f9a-2e81-11e6-b489-5115e5940c18","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:306","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix, org.apache.commons.io.IOCase caseSensitivity) {\n    if (prefix != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (prefix != null) {\n                {\n                    return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix , caseSensitivity);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"prefix"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:167","type":"CtBinaryOperatorImpl","sourcecode":"offset < 0"},"failures":[],"tindex":"2e5b8f9b-2e81-11e6-b489-09142b0614f3","method":{"position":"org.apache.commons.io.EndianUtils:200","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(byte[] data, int offset, long value) {\n    if (value < 0) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n            data[(offset + 2)] = ((byte)((value >> 16) & 255));\n            data[(offset + 3)] = ((byte)((value >> 24) & 255));\n            data[(offset + 4)] = ((byte)((value >> 32) & 255));\n            data[(offset + 5)] = ((byte)((value >> 40) & 255));\n            data[(offset + 6)] = ((byte)((value >> 48) & 255));\n            data[(offset + 7)] = ((byte)((value >> 56) & 255));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5b8f9c-2e81-11e6-b489-bbc79beafeed","method":{"position":"org.apache.commons.io.IOUtils:1010","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            return org.apache.commons.io.IOUtils.readLines(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:273","type":"CtBinaryOperatorImpl","sourcecode":"files != null"},"failures":[],"tindex":"2e5bb6ad-2e81-11e6-b489-ef5123fb276c","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:268","type":"CtMethodImpl","sourcecode":"private static <T extends java.util.Collection<java.io.File>>T filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files, T acceptedFiles) {\n    if (files != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                throw new java.lang.IllegalArgumentException(\"file filter is null\");\n            } \n            if (files != null) {\n                for (java.io.File java.io.File : files) {\n                    if (file == null) {\n                        throw new java.lang.IllegalArgumentException(\"file collection contains null\");\n                    } \n                    if (filter.accept(file)) {\n                        acceptedFiles.add(file);\n                    } \n                }\n            } \n            return acceptedFiles;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:175","type":"CtBinaryOperatorImpl","sourcecode":"(prefix) != null"},"failures":[],"tindex":"2e5bb6ae-2e81-11e6-b489-2934cdf2d187","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:306","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix, org.apache.commons.io.IOCase caseSensitivity) {\n    if (prefix != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (prefix != null) {\n                {\n                    return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix , caseSensitivity);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"prefix"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ThreadMonitor:69","type":"CtBinaryOperatorImpl","sourcecode":"timeout > 0"},"failures":[],"tindex":"2e5bb6af-2e81-11e6-b489-cf851e14320d","method":{"position":"org.apache.commons.io.ThreadMonitor:54","type":"CtMethodImpl","sourcecode":"public static java.lang.Thread start(long timeout) {\n    if (timeout > 0) {\n        {\n            return org.apache.commons.io.ThreadMonitor.start(java.lang.Thread.currentThread(), timeout);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeout":"timeout"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1067","type":"CtBinaryOperatorImpl","sourcecode":"srcFile == null"},"failures":[],"tindex":"2e5bb6b0-2e81-11e6-b489-19a94dd62808","method":{"position":"org.apache.commons.io.FileUtils:1037","type":"CtMethodImpl","sourcecode":"public static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (srcFile == null) {\n        {\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"srcFile"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"(file1.length()) != (file2.length())"},"failures":[],"tindex":"2e5bddc1-2e81-11e6-b489-037c9b4fa776","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:62","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file2.length()) != (file2.length())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (getType(file1)) - (getType(file2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2","file1":"file2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2787","type":"CtUnaryOperatorImpl","sourcecode":"!(destDir.exists())"},"failures":[],"tindex":"2e5bddc2-2e81-11e6-b489-71633ff128ad","method":{"position":"org.apache.commons.io.FileUtils:2889","type":"CtMethodImpl","sourcecode":"public static void moveToDirectory(java.io.File src, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (!(src.exists())) {\n        {\n            if (src == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(src.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + src) + \"' does not exist\"));\n            } \n            if (src.isDirectory()) {\n                org.apache.commons.io.FileUtils.moveDirectoryToDirectory(src, destDir, createDestDir);\n            } else {\n                org.apache.commons.io.FileUtils.moveFileToDirectory(src, destDir, createDestDir);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"src"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"2e5bddc3-2e81-11e6-b489-41cc4c8cb976","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:789","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } \n            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.FileFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5bddc4-2e81-11e6-b489-7f37199f9d0a","method":{"position":"org.apache.commons.io.IOUtils:2557","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.InputStream input, byte[] buffer) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.readFully(input, buffer, 0, buffer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:400","type":"CtBinaryOperatorImpl","sourcecode":"sock != null"},"failures":[],"tindex":"2e5c04d5-2e81-11e6-b489-89eaaa6399c9","method":{"position":"org.apache.commons.io.IOUtils:399","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.net.ServerSocket sock) {\n    if (sock != null) {\n        {\n            if (sock != null) {\n                try {\n                    sock.close();\n                } catch (java.io.IOException ioe) {\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sock":"sock"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5c04d6-2e81-11e6-b489-a7141a7d91ed","method":{"position":"org.apache.commons.io.IOUtils:460","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            org.apache.commons.io.output.ByteArrayOutputStream org.apache.commons.io.output.ByteArrayOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\n            org.apache.commons.io.IOUtils.copy(input, output);\n            return output.toByteArray();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1411","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.isDirectory()) == false"},"failures":[],"tindex":"2e5c04d7-2e81-11e6-b489-2f58465aa85f","method":{"position":"org.apache.commons.io.FileUtils:2734","type":"CtMethodImpl","sourcecode":"public static void moveDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if ((destDir.isDirectory()) == false) {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcDir.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcDir) + \"' does not exist\"));\n            } \n            if (!(srcDir.isDirectory())) {\n                throw new java.io.IOException(((\"Source '\" + srcDir) + \"' is not a directory\"));\n            } \n            if (destDir.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destDir) + \"' already exists\"));\n            } \n            boolean boolean = srcDir.renameTo(destDir);\n            if (!rename) {\n                if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n                    throw new java.io.IOException((((\"Cannot move directory: \" + srcDir) + \" to a subdirectory of itself: \") + destDir));\n                } \n                org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir);\n                org.apache.commons.io.FileUtils.deleteDirectory(srcDir);\n                if (srcDir.exists()) {\n                    throw new java.io.IOException(((((\"Failed to delete original directory '\" + srcDir) + \"' after copy to '\") + destDir) + \"'\"));\n                } \n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"destDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"2e5c2be8-2e81-11e6-b489-73761ceeffe7","method":{"position":"org.apache.commons.io.EndianUtils:477","type":"CtMethodImpl","sourcecode":"private static int read(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = input.read();\n            if ((-1) == value) {\n                throw new java.io.EOFException(\"Unexpected EOF reached\");\n            } \n            return value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2331","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"2e5c2be9-2e81-11e6-b489-197aa88136f2","method":{"position":"org.apache.commons.io.input.CharSequenceReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) {\n    if (n < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (n < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (n < 0) {\n                        throw new java.lang.IllegalArgumentException((\"Number of characters to skip is less than zero: \" + n));\n                    } \n                    if ((int) >= (java.lang.CharSequence.length())) {\n                        return -1;\n                    } \n                    int int = ((int)(java.lang.Math.min(java.lang.CharSequence.length(), ((int) + n))));\n                    int int = dest - (int);\n                    int = dest;\n                    return count;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1530","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"2e5c2bea-2e81-11e6-b489-47638a075b7a","method":{"position":"org.apache.commons.io.FileUtils:2530","type":"CtMethodImpl","sourcecode":"private static void checkDirectory(java.io.File directory) {\n    if (!(directory.exists())) {\n        {\n            if (!(directory.exists())) {\n                throw new java.lang.IllegalArgumentException((directory + \" does not exist\"));\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((directory + \" is not a directory\"));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:413","type":"CtInvocationImpl","sourcecode":"entry.isDirectory()"},"failures":[],"tindex":"2e5c2beb-2e81-11e6-b489-df3350afd665","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:374","type":"CtMethodImpl","sourcecode":"private void doCreate(org.apache.commons.io.monitor.FileEntry entry) {\n    if (entry.isDirectory()) {\n        {\n            for (org.apache.commons.io.monitor.FileAlterationListener org.apache.commons.io.monitor.FileAlterationListener : java.util.List<org.apache.commons.io.monitor.FileAlterationListener>) {\n                if (entry.isDirectory()) {\n                    listener.onDirectoryCreate(entry.getFile());\n                } else {\n                    listener.onFileCreate(entry.getFile());\n                }\n            }\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = entry.getChildren();\n            for (org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry : children) {\n                doCreate(aChildren);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == value"},"failures":[],"tindex":"2e5c52fc-2e81-11e6-b489-4f78d1d8d334","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if ((-1) == value) {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"2e5c52fd-2e81-11e6-b489-176caa7dc9e4","method":{"position":"org.apache.commons.io.input.ReaderInputStream:222","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b, int off, int len) throws java.io.IOException {\n    if (b == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (b == null) {\n                throw new java.lang.NullPointerException(\"Byte array must not be null\");\n            } \n            if (((len < 0) || (off < 0)) || ((off + len) > (b.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (b.int)) + \", offset=\") + off) + \", length=\") + len));\n            } \n            int int = 0;\n            if (len == 0) {\n                return 0;\n            } \n            while (len > 0) {\n                if (java.nio.ByteBuffer.hasRemaining()) {\n                    int int = java.lang.Math.min(java.nio.ByteBuffer.remaining(), len);\n                    java.nio.ByteBuffer.get(b, off, c);\n                    off += c;\n                    len -= c;\n                    read += c;\n                } else {\n                    fillBuffer();\n                    if ((boolean) && (!(java.nio.ByteBuffer.hasRemaining()))) {\n                        break;\n                    } \n                }\n            }\n            return (read == 0) && (boolean) ? -1 : read;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ThreadMonitor:69","type":"CtBinaryOperatorImpl","sourcecode":"timeout > 0"},"failures":[],"tindex":"2e5c52fe-2e81-11e6-b489-17f4e96d1775","method":{"position":"org.apache.commons.io.FileSystemUtils:233","type":"CtMethodImpl","sourcecode":"public static long freeSpaceKb(long timeout) throws java.io.IOException {\n    if (timeout > 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileSystemUtils.freeSpaceKb(new java.io.File(\".\").getAbsolutePath(), timeout);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeout":"timeout"},"type":"special","returnInThen":false,"status":0}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57dda65b-3f0c-11e6-981a-77b4fdedfa1a","method":{"position":"org.apache.commons.io.FilenameUtils:622","type":"CtMethodImpl","sourcecode":"public static int getPrefixLength(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        return -1;\n                    } \n                    int int = filename.length();\n                    if (len == 0) {\n                        return 0;\n                    } \n                    char char = filename.charAt(0);\n                    if (ch0 == ':') {\n                        return -1;\n                    } \n                    if (len == 1) {\n                        if (ch0 == '~') {\n                            return 2;\n                        } \n                        return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n                    } else {\n                        if (ch0 == '~') {\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                            if ((posUnix == (-1)) && (posWin == (-1))) {\n                                return len + 1;\n                            } \n                            posUnix = posUnix == (-1) ? posWin : posUnix;\n                            posWin = posWin == (-1) ? posUnix : posWin;\n                            return (java.lang.Math.min(posUnix, posWin)) + 1;\n                        } \n                        char char = filename.charAt(1);\n                        if (ch1 == ':') {\n                            ch0 = java.lang.Character.toUpperCase(ch0);\n                            if ((ch0 >= 'A') && (ch0 <= 'Z')) {\n                                if ((len == 2) || ((org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2))) == false)) {\n                                    return 2;\n                                } \n                                return 3;\n                            } \n                            return -1;\n                        } else if ((org.apache.commons.io.FilenameUtils.isSeparator(ch0)) && (org.apache.commons.io.FilenameUtils.isSeparator(ch1))) {\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                            if ((((posUnix == (-1)) && (posWin == (-1))) || (posUnix == 2)) || (posWin == 2)) {\n                                return -1;\n                            } \n                            posUnix = posUnix == (-1) ? posWin : posUnix;\n                            posWin = posWin == (-1) ? posUnix : posWin;\n                            return (java.lang.Math.min(posUnix, posWin)) + 1;\n                        } else {\n                            return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ByteOrderMark:131","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57de69ac-3f0c-11e6-981a-a78006e99164","method":{"position":"org.apache.commons.io.ByteOrderMark:130","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (!(obj instanceof org.apache.commons.io.ByteOrderMark)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(obj instanceof org.apache.commons.io.ByteOrderMark)) {\n                return false;\n            } \n            org.apache.commons.io.ByteOrderMark org.apache.commons.io.ByteOrderMark = ((org.apache.commons.io.ByteOrderMark)(obj));\n            if ((int[].int) != (bom.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (int[].int) ; i++) {\n                if ((int[][i]) != (bom.get(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57de90bd-3f0c-11e6-981a-d5839ed741e5","method":{"position":"org.apache.commons.io.FileUtils:290","type":"CtMethodImpl","sourcecode":"public static java.io.FileInputStream openInputStream(java.io.File file) throws java.io.IOException {\n    if (((file != null) && (file.isFile())) && (file.canRead())) {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canRead()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be read\"));\n                } \n            } else {\n                throw new java.io.FileNotFoundException(((\"File '\" + file) + \"' does not exist\"));\n            }\n            return new java.io.FileInputStream(file);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SizeFileFilter:71","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57deb7ce-3f0c-11e6-981a-5f76a0f0d1ce","method":{"position":"org.apache.commons.io.FileUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(long size) {\n    if (size < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(size));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57deb7cf-3f0c-11e6-981a-e19fb1f224aa","method":{"position":"org.apache.commons.io.input.AutoCloseInputStream:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        {\n            if (n == (-1)) {\n                close();\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57dedee0-3f0c-11e6-981a-8735c445e989","method":{"position":"org.apache.commons.io.FileUtils:462","type":"CtMethodImpl","sourcecode":"public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection<java.io.File> files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return files.toArray(new java.io.File[files.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:116","type":"CtInvocationImpl"},"failures":[],"tindex":"57dedee1-3f0c-11e6-981a-7dbc41fd4c61","method":{"position":"org.apache.commons.io.comparator.NameFileComparator:101","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getName(), file2.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:493","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57df05f2-3f0c-11e6-981a-d328e0039389","method":{"position":"org.apache.commons.io.input.ProxyReader:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] chr, int st, int len) throws java.io.IOException {\n    if (st == 0) {\n        {\n            try {\n                beforeRead(len);\n                int int = java.io.Reader.read(chr, st, len);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"st"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:80","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57df2d03-3f0c-11e6-981a-639b3b63440f","method":{"position":"org.apache.commons.io.DirectoryWalker:519","type":"CtMethodImpl","sourcecode":"protected java.io.File[] filterDirectoryContents(java.io.File directory, int depth, java.io.File[] files) throws java.io.IOException {\n    if (files == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return files;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1635","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57df5414-3f0c-11e6-981a-c9019eaf46a0","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (!(directory.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57dfa235-3f0c-11e6-981a-25d93ecee0fe","method":{"position":"org.apache.commons.io.input.ProxyReader:223","type":"CtMethodImpl","sourcecode":"protected void beforeRead(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2337","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57dfa236-3f0c-11e6-981a-5f78070918de","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:76","type":"CtMethodImpl","sourcecode":"public static java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (files == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (files == null) {\n                {\n                    if (filter == null) {\n                        throw new java.lang.IllegalArgumentException(\"file filter is null\");\n                    } \n                    if (files == null) {\n                        return new java.io.File[0];\n                    } \n                    java.util.List<java.io.File> java.util.List<java.io.File> = new java.util.ArrayList<java.io.File>();\n                    for (java.io.File java.io.File : files) {\n                        if (file == null) {\n                            throw new java.lang.IllegalArgumentException(\"file array contains null\");\n                        } \n                        if (filter.accept(file)) {\n                            acceptedFiles.add(file);\n                        } \n                    }\n                    return acceptedFiles.toArray(new java.io.File[acceptedFiles.size()]);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57dff057-3f0c-11e6-981a-43c311c8a103","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String value) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                {\n                    if (value != null) {\n                        java.lang.StringBuilder.append(value);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57dff058-3f0c-11e6-981a-5b3bcd7e7fc3","method":{"position":"org.apache.commons.io.IOUtils:2095","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e01769-3f0c-11e6-981a-af35640538db","method":{"position":"org.apache.commons.io.input.BoundedInputStream:102","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.input.BoundedInputStream.this.read(b, 0, b.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1369","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e03e7a-3f0c-11e6-981a-1fadc7617227","method":{"position":"org.apache.commons.io.IOUtils:1368","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data).getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e03e7b-3f0c-11e6-981a-6b2807af0fe2","method":{"position":"org.apache.commons.io.IOUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl"},"failures":[],"tindex":"57e03e7c-3f0c-11e6-981a-4578b1f8ce14","method":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:76","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                java.io.File[] java.io.File[] = file.listFiles();\n                return (files == null) || ((files.int) == 0);\n            } else {\n                return (file.length()) == 0;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.ArrayIndexOutOfBoundsException","condition":{"position":"org.apache.commons.io.FilenameUtils:1000","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0658d-3f0c-11e6-981a-c974d194ff49","method":{"position":"org.apache.commons.io.HexDump:71","type":"CtMethodImpl","sourcecode":"public static void dump(byte[] data, long offset, java.io.OutputStream stream, int index) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException {\n    if (index == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ArrayIndexOutOfBoundsException();\n    } else {\n        {\n            if ((index < 0) || (index >= (data.int))) {\n                throw new java.lang.ArrayIndexOutOfBoundsException((((\"illegal index: \" + index) + \" into array of length \") + (data.int)));\n            } \n            if (stream == null) {\n                throw new java.lang.IllegalArgumentException(\"cannot write to nullstream\");\n            } \n            long long = offset + index;\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(74);\n            for (int int = index ; j < (data.int) ; j += 16) {\n                int int = (data.int) - j;\n                if (chars_read > 16) {\n                    chars_read = 16;\n                } \n                org.apache.commons.io.HexDump.dump(buffer, display_offset).append(' ');\n                for (int int = 0 ; k < 16 ; k++) {\n                    if (k < chars_read) {\n                        org.apache.commons.io.HexDump.dump(buffer, data[(k + j)]);\n                    } else {\n                        buffer.append(\"  \");\n                    }\n                    buffer.append(' ');\n                }\n                for (int int = 0 ; k < chars_read ; k++) {\n                    if (((data[(k + j)]) >= ' ') && ((data[(k + j)]) < 127)) {\n                        buffer.append(((char)(data[(k + j)])));\n                    } else {\n                        buffer.append('.');\n                    }\n                }\n                buffer.append(org.apache.commons.io.HexDump.org.apache.commons.io.HexDump.java.lang.String);\n                stream.write(buffer.toString().getBytes());\n                stream.flush();\n                buffer.setLength(0);\n                display_offset += chars_read;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:96","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e08c9e-3f0c-11e6-981a-7330145eb8bc","method":{"position":"org.apache.commons.io.output.ProxyWriter:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) throws java.io.IOException {\n    if (csq != null) {\n        {\n            try {\n                int int = 0;\n                if (csq != null) {\n                    len = csq.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.append(csq);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"csq":"csq"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e08c9f-3f0c-11e6-981a-b10d0f1a1384","method":{"position":"org.apache.commons.io.EndianUtils:239","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(byte[] data, int offset, float value) {\n    if ((-1) == offset) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(data, offset, java.lang.Float.floatToIntBits(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e08ca0-3f0c-11e6-981a-059c25364a7c","method":{"position":"org.apache.commons.io.output.ClosedOutputStream:47","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new java.io.IOException(((\"write(\" + b) + \") failed: stream is closed\"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1116","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0b3b1-3f0c-11e6-981a-0146eedf601e","method":{"position":"org.apache.commons.io.FilenameUtils:1064","type":"CtMethodImpl","sourcecode":"public static boolean equalsOnSystem(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename2 == null) || (filename2 == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, false, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"filename2","filename1":"filename2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0b3b2-3f0c-11e6-981a-91a42417ae78","method":{"position":"org.apache.commons.io.EndianUtils:272","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(byte[] data, int offset) {\n    if (data != null) {\n        {\n            return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(data, offset));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0b3b3-3f0c-11e6-981a-e74ac626a5d1","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:394","type":"CtMethodImpl","sourcecode":"private void doMatch(org.apache.commons.io.monitor.FileEntry entry, java.io.File file) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (entry.refresh(file)) {\n                for (org.apache.commons.io.monitor.FileAlterationListener org.apache.commons.io.monitor.FileAlterationListener : java.util.List<org.apache.commons.io.monitor.FileAlterationListener>) {\n                    if (entry.isDirectory()) {\n                        listener.onDirectoryChange(file);\n                    } else {\n                        listener.onFileChange(file);\n                    }\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0dac4-3f0c-11e6-981a-717eb78f3feb","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:306","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix, org.apache.commons.io.IOCase caseSensitivity) {\n    if ((caseSensitivity != null) && (!(caseSensitivity.isCaseSensitive()))) {\n        {\n            return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix , caseSensitivity);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:273","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0dac5-3f0c-11e6-981a-3744adba67d9","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:268","type":"CtMethodImpl","sourcecode":"private static <T extends java.util.Collection<java.io.File>>T filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.lang.Iterable<java.io.File> files, T acceptedFiles) {\n    if (files != null) {\n        {\n            if (filter == null) {\n                throw new java.lang.IllegalArgumentException(\"file filter is null\");\n            } \n            if (files != null) {\n                for (java.io.File java.io.File : files) {\n                    if (file == null) {\n                        throw new java.lang.IllegalArgumentException(\"file collection contains null\");\n                    } \n                    if (filter.accept(file)) {\n                        acceptedFiles.add(file);\n                    } \n                }\n            } \n            return acceptedFiles;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e0dac6-3f0c-11e6-981a-11f09ef0b59f","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (value != null) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e101d7-3f0c-11e6-981a-a7ae1f5b0159","method":{"position":"org.apache.commons.io.IOUtils:1210","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input, java.nio.charset.Charset encoding) {\n    if (input == null) {\n        {\n            return new java.io.ByteArrayInputStream(input.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:711","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e101d8-3f0c-11e6-981a-8be3de9b2b24","method":{"position":"org.apache.commons.io.FilenameUtils:864","type":"CtMethodImpl","sourcecode":"public static java.lang.String getFullPath(java.lang.String filename) {\n    if (filename == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e101d9-3f0c-11e6-981a-edd61d38324d","method":{"position":"org.apache.commons.io.output.TeeOutputStream:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            super.write(b, off, len);\n            org.apache.commons.io.output.TeeOutputStream.this.java.io.OutputStream.write(b, off, len);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:223","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e128ea-3f0c-11e6-981a-11a834fd068b","method":{"position":"org.apache.commons.io.FileUtils:2684","type":"CtMethodImpl","sourcecode":"public static long checksumCRC32(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.util.zip.CRC32 java.util.zip.CRC32 = new java.util.zip.CRC32();\n            org.apache.commons.io.FileUtils.checksum(file, crc);\n            return crc.getValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2308","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57e128eb-3f0c-11e6-981a-9bfc71da226e","method":{"position":"org.apache.commons.io.FileUtils:591","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (!(directory.exists())) {\n        {\n            org.apache.commons.io.FileUtils.validateListFilesParameters(directory, fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(dirFilter);\n            java.util.Collection<java.io.File> java.util.Collection<java.io.File> = new java.util.LinkedList<java.io.File>();\n            if (directory.isDirectory()) {\n                files.add(directory);\n            } \n            org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.or(effFileFilter, effDirFilter), true);\n            return files;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2448","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e14ffc-3f0c-11e6-981a-594b2826eef0","method":{"position":"org.apache.commons.io.IOUtils:2495","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length < 0) {\n        {\n            int int = org.apache.commons.io.IOUtils.read(input, buffer, offset, length);\n            if (actual != length) {\n                throw new java.io.EOFException((((\"Length to read: \" + length) + \" actual: \") + actual));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:239","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e14ffd-3f0c-11e6-981a-a7ce02b3d0e6","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:75","type":"CtMethodImpl","sourcecode":"public void onFileChange(final java.io.File file) {\n    if (((file != null) && (file.isFile())) && (file.canRead())) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e14ffe-3f0c-11e6-981a-6f74795a3902","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:537","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e1770f-3f0c-11e6-981a-d5fa5d3cfd32","method":{"position":"org.apache.commons.io.input.XmlStreamReader:507","type":"CtMethodImpl","sourcecode":"java.lang.String calculateRawEncoding(java.lang.String bomEnc, java.lang.String xmlGuessEnc, java.lang.String xmlEnc) throws java.io.IOException {\n    if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(xmlGuessEnc)))) {\n        {\n            if (bomEnc == null) {\n                if ((xmlGuessEnc == null) || (xmlEnc == null)) {\n                    return (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n                } \n                if ((xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) && ((xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) {\n                    return xmlGuessEnc;\n                } \n                return xmlEnc;\n            } \n            if (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                if ((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return bomEnc;\n            } \n            if ((bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                if (((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) && (!(xmlEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return bomEnc;\n            } \n            if ((bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (bomEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if ((xmlGuessEnc != null) && (!(xmlGuessEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                if (((xmlEnc != null) && (!(xmlEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)))) && (!(xmlEnc.equals(bomEnc)))) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return bomEnc;\n            } \n            java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, new java.lang.Object[]{ bomEnc , xmlGuessEnc , xmlEnc });\n            throw new org.apache.commons.io.input.XmlStreamReaderException(msg , bomEnc , xmlGuessEnc , xmlEnc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bomEnc":"xmlGuessEnc","xmlGuessEnc":"xmlGuessEnc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl"},"failures":[],"tindex":"57e19e20-3f0c-11e6-981a-49309ec995f7","method":{"position":"org.apache.commons.io.FileUtils:1760","type":"CtMethodImpl","sourcecode":"public static byte[] readFileToByteArray(java.io.File file) throws java.io.IOException {\n    if (file.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.toByteArray(in, file.length());\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:212","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e19e21-3f0c-11e6-981a-098fc70cd472","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:678","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String magicNumber, long offset) {\n    if (offset < 0) {\n        {\n            return new org.apache.commons.io.filefilter.MagicNumberFileFilter(magicNumber , offset);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57e19e22-3f0c-11e6-981a-4ddde8a77c61","method":{"position":"org.apache.commons.io.filefilter.DirectoryFileFilter:69","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isDirectory();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl"},"failures":[],"tindex":"57e1c533-3f0c-11e6-981a-9562e247c709","method":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:168","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (file.isDirectory()) {\n        {\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.SuffixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEndsWith(name, suffix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e1c534-3f0c-11e6-981a-27c2eea40fc1","method":{"position":"org.apache.commons.io.output.LockableFileWriter:327","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2471","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e1c535-3f0c-11e6-981a-7fbc5ec683f4","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:76","type":"CtMethodImpl","sourcecode":"public static java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (files == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (files == null) {\n                {\n                    if (filter == null) {\n                        throw new java.lang.IllegalArgumentException(\"file filter is null\");\n                    } \n                    if (files == null) {\n                        return new java.io.File[0];\n                    } \n                    java.util.List<java.io.File> java.util.List<java.io.File> = new java.util.ArrayList<java.io.File>();\n                    for (java.io.File java.io.File : files) {\n                        if (file == null) {\n                            throw new java.lang.IllegalArgumentException(\"file array contains null\");\n                        } \n                        if (filter.accept(file)) {\n                            acceptedFiles.add(file);\n                        } \n                    }\n                    return acceptedFiles.toArray(new java.io.File[acceptedFiles.size()]);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e1ec46-3f0c-11e6-981a-c565e731f3b9","method":{"position":"org.apache.commons.io.comparator.DefaultFileComparator:63","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file2.isDirectory()) || (file2.isDirectory())) {\n        {\n            return file1.compareTo(file2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2","file1":"file2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e1ec47-3f0c-11e6-981a-db5083ce218d","method":{"position":"org.apache.commons.io.FilenameUtils:1080","type":"CtMethodImpl","sourcecode":"public static boolean equalsNormalized(java.lang.String filename1, java.lang.String filename2) {\n    if ((filename2 == null) || (filename2 == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.equals(filename1, filename2, true, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename2":"filename2","filename1":"filename2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:996","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e1ec48-3f0c-11e6-981a-cbc3ef84c486","method":{"position":"org.apache.commons.io.FilenameUtils:193","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:623","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e21359-3f0c-11e6-981a-c788dcdd727d","method":{"position":"org.apache.commons.io.FilenameUtils:622","type":"CtMethodImpl","sourcecode":"public static int getPrefixLength(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        return -1;\n                    } \n                    int int = filename.length();\n                    if (len == 0) {\n                        return 0;\n                    } \n                    char char = filename.charAt(0);\n                    if (ch0 == ':') {\n                        return -1;\n                    } \n                    if (len == 1) {\n                        if (ch0 == '~') {\n                            return 2;\n                        } \n                        return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n                    } else {\n                        if (ch0 == '~') {\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                            if ((posUnix == (-1)) && (posWin == (-1))) {\n                                return len + 1;\n                            } \n                            posUnix = posUnix == (-1) ? posWin : posUnix;\n                            posWin = posWin == (-1) ? posUnix : posWin;\n                            return (java.lang.Math.min(posUnix, posWin)) + 1;\n                        } \n                        char char = filename.charAt(1);\n                        if (ch1 == ':') {\n                            ch0 = java.lang.Character.toUpperCase(ch0);\n                            if ((ch0 >= 'A') && (ch0 <= 'Z')) {\n                                if ((len == 2) || ((org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2))) == false)) {\n                                    return 2;\n                                } \n                                return 3;\n                            } \n                            return -1;\n                        } else if ((org.apache.commons.io.FilenameUtils.isSeparator(ch0)) && (org.apache.commons.io.FilenameUtils.isSeparator(ch1))) {\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                            int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                            if ((((posUnix == (-1)) && (posWin == (-1))) || (posUnix == 2)) || (posWin == 2)) {\n                                return -1;\n                            } \n                            posUnix = posUnix == (-1) ? posWin : posUnix;\n                            posWin = posWin == (-1) ? posUnix : posWin;\n                            return (java.lang.Math.min(posUnix, posWin)) + 1;\n                        } else {\n                            return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2478","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57e23a6a-3f0c-11e6-981a-e1b29adbcfe9","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e23a6b-3f0c-11e6-981a-1709417631d4","method":{"position":"org.apache.commons.io.FileUtils:1560","type":"CtMethodImpl","sourcecode":"public static boolean deleteQuietly(java.io.File file) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                return false;\n            } \n            try {\n                if (file.isDirectory()) {\n                    org.apache.commons.io.FileUtils.cleanDirectory(file);\n                } \n            } catch (java.lang.Exception ignored) {\n            }\n            try {\n                return file.delete();\n            } catch (java.lang.Exception ignored) {\n                return false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1364","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2617c-3f0c-11e6-981a-b30a84425626","method":{"position":"org.apache.commons.io.FileUtils:2777","type":"CtMethodImpl","sourcecode":"public static void moveDirectoryToDirectory(java.io.File src, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (destDir == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (src == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination directory must not be null\");\n            } \n            if ((!(destDir.exists())) && createDestDir) {\n                destDir.mkdirs();\n            } \n            if (!(destDir.exists())) {\n                throw new java.io.FileNotFoundException(((((\"Destination directory '\" + destDir) + \"' does not exist [createDestDir=\") + createDestDir) + \"]\"));\n            } \n            if (!(destDir.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.moveDirectory(src, new java.io.File(destDir , src.getName()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"destDir"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2326","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57e2617d-3f0c-11e6-981a-63c860655fac","method":{"position":"org.apache.commons.io.FileUtils:2307","type":"CtMethodImpl","sourcecode":"private static void deleteDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (!(directory.exists())) {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            directory.deleteOnExit();\n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectoryOnExit(directory);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:906","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2617e-3f0c-11e6-981a-358e4de332c2","method":{"position":"org.apache.commons.io.FilenameUtils:1259","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatchOnSystem(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if (wildcardMatcher == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"wildcardMatcher"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2888f-3f0c-11e6-981a-21d3f21f4aec","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (null != output) {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n            output.write(((byte)((value >> 32) & 255)));\n            output.write(((byte)((value >> 40) & 255)));\n            output.write(((byte)((value >> 48) & 255)));\n            output.write(((byte)((value >> 56) & 255)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1373","type":"CtInvocationImpl"},"failures":[],"tindex":"57e28890-3f0c-11e6-981a-cbb3799df87d","method":{"position":"org.apache.commons.io.FileUtils:1259","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if (srcDir.getCanonicalPath().equals(srcDir.getCanonicalPath())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, null, preserveFileDate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"srcDir","destDir":"srcDir"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e28891-3f0c-11e6-981a-6de9441f20b0","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n                return false;\n            } \n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2afa2-3f0c-11e6-981a-3971bc863e65","method":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:276","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toBufferedInputStream(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            org.apache.commons.io.output.ByteArrayOutputStream org.apache.commons.io.output.ByteArrayOutputStream = new org.apache.commons.io.output.ByteArrayOutputStream();\n            output.write(input);\n            return output.toBufferedInputStream();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2506","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2afa3-3f0c-11e6-981a-cbe53e1a0c70","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:324","type":"CtMethodImpl","sourcecode":"private void checkAndNotify(org.apache.commons.io.monitor.FileEntry parent, org.apache.commons.io.monitor.FileEntry[] previous, java.io.File[] files) {\n    if (files == null) {\n        {\n            int int = 0;\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry : previous) {\n                while ((c < (files.int)) && ((java.util.Comparator<java.io.File>.compare(entry.getFile(), files[c])) > 0)) {\n                    current[c] = createFileEntry(parent, files[c]);\n                    doCreate(current[c]);\n                    c++;\n                }\n                if ((c < (files.int)) && ((java.util.Comparator<java.io.File>.compare(entry.getFile(), files[c])) == 0)) {\n                    doMatch(entry, files[c]);\n                    checkAndNotify(entry, entry.getChildren(), listFiles(files[c]));\n                    current[c] = entry;\n                    c++;\n                } else {\n                    checkAndNotify(entry, entry.getChildren(), org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.io.File[]);\n                    doDelete(entry);\n                }\n            }\n            for ( ; c < (files.int) ; c++) {\n                current[c] = createFileEntry(parent, files[c]);\n                doCreate(current[c]);\n            }\n            parent.setChildren(current);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1073","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2d6b4-3f0c-11e6-981a-7b2fa5f9bd4c","method":{"position":"org.apache.commons.io.FileUtils:1037","type":"CtMethodImpl","sourcecode":"public static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if ((srcFile.exists()) == false) {\n        {\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"srcFile"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2d6b5-3f0c-11e6-981a-3ffd70228129","method":{"position":"org.apache.commons.io.FileUtils:212","type":"CtMethodImpl","sourcecode":"public static java.io.File getFile(java.lang.String... names) {\n    if (names == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (names == null) {\n                throw new java.lang.NullPointerException(\"names must not be null\");\n            } \n            java.io.File java.io.File = null;\n            for (java.lang.String java.lang.String : names) {\n                if (file == null) {\n                    file = new java.io.File(name);\n                } else {\n                    file = new java.io.File(file , name);\n                }\n            }\n            return file;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"names":"names"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2d6b6-3f0c-11e6-981a-df2b8b49ddf0","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:405","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter2 == null) || (filter2 == null)) {\n        {\n            return new org.apache.commons.io.filefilter.OrFileFilter(filter1 , filter2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter2","filter2":"filter2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2fdc7-3f0c-11e6-981a-5796c536e18f","method":{"position":"org.apache.commons.io.IOUtils:1411","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2fdc8-3f0c-11e6-981a-dd9e007ee067","method":{"position":"org.apache.commons.io.EndianUtils:409","type":"CtMethodImpl","sourcecode":"public static long readSwappedLong(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            byte[] byte[] = new byte[8];\n            for (int int = 0 ; i < 8 ; i++) {\n                bytes[i] = ((byte)(org.apache.commons.io.EndianUtils.read(input)));\n            }\n            return org.apache.commons.io.EndianUtils.readSwappedLong(bytes, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2fdc9-3f0c-11e6-981a-c3a1ebf8fd50","method":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:118","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.regex.Pattern.matcher(name).matches();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e2fdca-3f0c-11e6-981a-fbd1947fce9b","method":{"position":"org.apache.commons.io.IOUtils:1932","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e324db-3f0c-11e6-981a-1968e3c734d6","method":{"position":"org.apache.commons.io.FilenameUtils:823","type":"CtMethodImpl","sourcecode":"private static java.lang.String doGetPath(java.lang.String filename, int separatorAdd) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            int int = index + separatorAdd;\n            if (((prefix >= (filename.length())) || (index < 0)) || (prefix >= endIndex)) {\n                return \"\";\n            } \n            return filename.substring(prefix, endIndex);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e324dc-3f0c-11e6-981a-0922129f2cb6","method":{"position":"org.apache.commons.io.output.LockableFileWriter:349","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        {\n            java.io.Writer.write(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:431","type":"CtVariableReadImpl"},"failures":[],"tindex":"57e324dd-3f0c-11e6-981a-03d439bcca5d","method":{"position":"org.apache.commons.io.input.XmlStreamReader:423","type":"CtMethodImpl","sourcecode":"private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        {\n            if (lenient) {\n                {\n                    java.lang.String java.lang.String = bom.getBOMCharsetName();\n                    java.lang.String java.lang.String = pis.getBOMCharsetName();\n                    java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n                    try {\n                        return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n                    } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                        if (lenient) {\n                            return doLenientDetection(null, ex);\n                        } else {\n                            throw ex;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e34bee-3f0c-11e6-981a-9308ec0eefbc","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            return read(b, 0, b.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl"},"failures":[],"tindex":"57e34bef-3f0c-11e6-981a-b742803a2fb0","method":{"position":"org.apache.commons.io.FileUtils:1987","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e34bf0-3f0c-11e6-981a-1565a38f2eca","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:132","type":"CtMethodImpl","sourcecode":"public void readFully(byte[] data, int offset, int length) throws java.io.EOFException, java.io.IOException {\n    if (data != null) {\n        {\n            int int = length;\n            while (remaining > 0) {\n                int int = (offset + length) - remaining;\n                int int = read(data, location, remaining);\n                if ((-1) == count) {\n                    throw new java.io.EOFException();\n                } \n                remaining -= count;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e34bf1-3f0c-11e6-981a-ef7d00910e7b","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e37302-3f0c-11e6-981a-77918ad5df39","method":{"position":"org.apache.commons.io.output.DemuxOutputStream:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int ch) throws java.io.IOException {\n    if (ch != (-1)) {\n        {\n            java.io.OutputStream java.io.OutputStream = java.lang.InheritableThreadLocal<java.io.OutputStream>.get();\n            if (null != output) {\n                output.write(ch);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1284","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e37303-3f0c-11e6-981a-e176ea985666","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:354","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name, org.apache.commons.io.IOCase caseSensitivity) {\n    if (caseSensitivity == null) {\n        {\n            return new org.apache.commons.io.filefilter.NameFileFilter(name , caseSensitivity);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:741","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e37304-3f0c-11e6-981a-678dc5334cf8","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:515","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter filter) {\n    if (filter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e37305-3f0c-11e6-981a-fd4617f07b67","method":{"position":"org.apache.commons.io.filefilter.TrueFileFilter:67","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        {\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e37306-3f0c-11e6-981a-df1771f9acc8","method":{"position":"org.apache.commons.io.IOUtils:1395","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e39a17-3f0c-11e6-981a-69d18c414ed6","method":{"position":"org.apache.commons.io.input.ProxyReader:243","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e39a18-3f0c-11e6-981a-618d7e64d00e","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:292","type":"CtInvocationImpl"},"failures":[],"tindex":"57e39a19-3f0c-11e6-981a-e34125525049","method":{"position":"org.apache.commons.io.input.Tailer:255","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen, int bufSize) {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , reOpen , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:580","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e39a1a-3f0c-11e6-981a-d5293fbad3ff","method":{"position":"org.apache.commons.io.FilenameUtils:566","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToWindows(java.lang.String path) {\n    if (path == null) {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:478","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e3c12b-3f0c-11e6-981a-a72f846894e6","method":{"position":"org.apache.commons.io.input.XmlStreamReader:678","type":"CtMethodImpl","sourcecode":"static java.lang.String getContentTypeEncoding(java.lang.String httpContentType) {\n    if ((httpContentType != null) && (httpContentType.startsWith(\"text/html\"))) {\n        {\n            java.lang.String java.lang.String = null;\n            if (httpContentType != null) {\n                int int = httpContentType.indexOf(\";\");\n                if (i > (-1)) {\n                    java.lang.String java.lang.String = httpContentType.substring((i + 1));\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(postMime);\n                    encoding = m.find() ? m.group(1) : null;\n                    encoding = encoding != null ? encoding.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale) : null;\n                } \n            } \n            return encoding;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"httpContentType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e3c12c-3f0c-11e6-981a-1f425a273f84","method":{"position":"org.apache.commons.io.IOUtils:1010","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.IOUtils.readLines(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl"},"failures":[],"tindex":"57e3c12d-3f0c-11e6-981a-27ba6a0f2d86","method":{"position":"org.apache.commons.io.FileUtils:1634","type":"CtMethodImpl","sourcecode":"public static void cleanDirectory(java.io.File directory) throws java.io.IOException {\n    if (directory.isDirectory()) {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDelete(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e3e83e-3f0c-11e6-981a-291cb90e8c71","method":{"position":"org.apache.commons.io.EndianUtils:250","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(byte[] data, int offset) {\n    if (data != null) {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2478","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57e3e83f-3f0c-11e6-981a-d7f436a17eea","method":{"position":"org.apache.commons.io.FileUtils:1747","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file) throws java.io.IOException {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        {\n            return org.apache.commons.io.FileUtils.readFileToString(file, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e3e840-3f0c-11e6-981a-dfb8544476a5","method":{"position":"org.apache.commons.io.output.NullWriter:105","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) {\n    if (st == 0) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"st"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl"},"failures":[],"tindex":"57e40f51-3f0c-11e6-981a-db2067a46fce","method":{"position":"org.apache.commons.io.FileUtils:2001","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), append);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:46","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e40f52-3f0c-11e6-981a-2dca20c3fd42","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:515","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter filter) {\n    if (filter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:906","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e40f53-3f0c-11e6-981a-f9fb52704c6c","method":{"position":"org.apache.commons.io.FilenameUtils:1145","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.lang.String extension) {\n    if (extension == null) {\n        {\n            if (filename == null) {\n                return false;\n            } \n            if ((extension == null) || ((extension.length()) == 0)) {\n                return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n            return fileExt.equals(extension);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"extension"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e40f54-3f0c-11e6-981a-936e4891143a","method":{"position":"org.apache.commons.io.FilenameUtils:347","type":"CtMethodImpl","sourcecode":"private static java.lang.String doNormalize(java.lang.String filename, char separator, boolean keepSeparator) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = filename.length();\n            if (size == 0) {\n                return filename;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            char[] char[] = new char[size + 2];\n            filename.getChars(0, filename.length(), array, 0);\n            char char = separator == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char) ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == otherSeparator) {\n                    array[i] = separator;\n                } \n            }\n            boolean boolean = true;\n            if ((array[(size - 1)]) != separator) {\n                array[(size++)] = separator;\n                lastIsDirectory = false;\n            } \n            for (int int = prefix + 1 ; i < size ; i++) {\n                if (((array[i]) == separator) && ((array[(i - 1)]) == separator)) {\n                    java.lang.System.arraycopy(array, i, array, (i - 1), (size - i));\n                    size--;\n                    i--;\n                } \n            }\n            for (int int = prefix + 1 ; i < size ; i++) {\n                if ((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((i == (prefix + 1)) || ((array[(i - 2)]) == separator))) {\n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    java.lang.System.arraycopy(array, (i + 1), array, (i - 1), (size - i));\n                    size -= 2;\n                    i--;\n                } \n            }\n            outer : for (int int = prefix + 2 ; i < size ; i++) {\n                if (((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((array[(i - 2)]) == '.')) && ((i == (prefix + 2)) || ((array[(i - 3)]) == separator))) {\n                    if (i == (prefix + 2)) {\n                        return null;\n                    } \n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    int int;\n                    for (j = i - 4 ; j >= prefix ; j--) {\n                        if ((array[j]) == separator) {\n                            java.lang.System.arraycopy(array, (i + 1), array, (j + 1), (size - i));\n                            size -= i - j;\n                            i = j + 1;\n                            continue outer;\n                        } \n                    }\n                    java.lang.System.arraycopy(array, (i + 1), array, prefix, (size - i));\n                    size -= (i + 1) - prefix;\n                    i = prefix + 1;\n                } \n            }\n            if (size <= 0) {\n                return \"\";\n            } \n            if (size <= prefix) {\n                return new java.lang.String(array , 0 , size);\n            } \n            if (lastIsDirectory && keepSeparator) {\n                return new java.lang.String(array , 0 , size);\n            } \n            return new java.lang.String(array , 0 , (size - 1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e43665-3f0c-11e6-981a-a1a516a7bd89","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String value) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                {\n                    if (value != null) {\n                        java.lang.StringBuilder.append(value);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e45d76-3f0c-11e6-981a-091ba04ad69f","method":{"position":"org.apache.commons.io.IOUtils:1905","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(in, output);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl"},"failures":[],"tindex":"57e45d77-3f0c-11e6-981a-41f4a0e1764a","method":{"position":"org.apache.commons.io.FileUtils:2185","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, java.lang.String lineEnding) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, lineEnding, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:459","type":"CtVariableReadImpl"},"failures":[],"tindex":"57e45d78-3f0c-11e6-981a-cd83bc5790d4","method":{"position":"org.apache.commons.io.input.XmlStreamReader:423","type":"CtMethodImpl","sourcecode":"private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        {\n            if (lenient) {\n                {\n                    java.lang.String java.lang.String = bom.getBOMCharsetName();\n                    java.lang.String java.lang.String = pis.getBOMCharsetName();\n                    java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n                    try {\n                        return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n                    } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                        if (lenient) {\n                            return doLenientDetection(null, ex);\n                        } else {\n                            throw ex;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e48489-3f0c-11e6-981a-9b51b347183d","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e4848a-3f0c-11e6-981a-a1fe47adb0bd","method":{"position":"org.apache.commons.io.IOUtils:1654","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        {\n            if (lines == null) {\n                return ;\n            } \n            if (lineEnding == null) {\n                lineEnding = org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.java.lang.String;\n            } \n            java.nio.charset.Charset java.nio.charset.Charset = org.apache.commons.io.Charsets.toCharset(encoding);\n            for (java.lang.Object java.lang.Object : lines) {\n                if (line != null) {\n                    output.write(line.toString().getBytes(cs));\n                } \n                output.write(lineEnding.getBytes(cs));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1329","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e4848b-3f0c-11e6-981a-bbe1d8bbf78c","method":{"position":"org.apache.commons.io.IOUtils:1348","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output) throws java.io.IOException {\n    if (data != null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1168","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e4848c-3f0c-11e6-981a-59ec046d6d30","method":{"position":"org.apache.commons.io.FilenameUtils:973","type":"CtMethodImpl","sourcecode":"public static java.lang.String getBaseName(java.lang.String filename) {\n    if (filename == null) {\n        {\n            return org.apache.commons.io.FilenameUtils.removeExtension(org.apache.commons.io.FilenameUtils.getName(filename));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1195","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e4ab9d-3f0c-11e6-981a-b18e19aa2700","method":{"position":"org.apache.commons.io.FilenameUtils:1025","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeExtension(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\n            if (index == (-1)) {\n                return filename;\n            } else {\n                return filename.substring(0, index);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57e4ab9e-3f0c-11e6-981a-b129d11208c6","method":{"position":"org.apache.commons.io.IOUtils:583","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.Reader input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            return org.apache.commons.io.IOUtils.toByteArray(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314765880/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
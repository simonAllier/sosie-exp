{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b59ed0a2-3f26-11e6-a10a-153331fa2413","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:39","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                {\n                    return accept(file.getParentFile(), file.getName());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:430","type":"CtInvocationImpl"},"failures":[],"tindex":"b59f93f3-3f26-11e6-a10a-af9fe6cd72cb","method":{"position":"org.apache.commons.io.FileUtils:2409","type":"CtMethodImpl","sourcecode":"public static long sizeOf(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            if (!(file.exists())) {\n                java.lang.String java.lang.String = file + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (file.isDirectory()) {\n                return org.apache.commons.io.FileUtils.sizeOfDirectory(file);\n            } else {\n                return file.length();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1489","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b59fbb04-3f26-11e6-a10a-b7cdb9b56e8b","method":{"position":"org.apache.commons.io.IOUtils:1616","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (encoding != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (data != null) {\n                        output.write(data.toString().getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1609","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b59fe215-3f26-11e6-a10a-d58d0ab0d223","method":{"position":"org.apache.commons.io.FileUtils:2530","type":"CtMethodImpl","sourcecode":"private static void checkDirectory(java.io.File directory) {\n    if (!(directory.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(directory.exists())) {\n                throw new java.lang.IllegalArgumentException((directory + \" does not exist\"));\n            } \n            if (!(directory.isDirectory())) {\n                throw new java.lang.IllegalArgumentException((directory + \" is not a directory\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:110","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a0cc76-3f26-11e6-a10a-3d7a884f05f4","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:62","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file2.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (getType(file1)) - (getType(file2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file1":"file2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ByteArrayOutputStream:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a0f387-3f26-11e6-a10a-e961b7a3c0dd","method":{"position":"org.apache.commons.io.input.ProxyReader:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] chr, int st, int len) throws java.io.IOException {\n    if (st == 0) {\n        {\n            try {\n                beforeRead(len);\n                int int = java.io.Reader.read(chr, st, len);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"st"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a0f388-3f26-11e6-a10a-43c9550c3516","method":{"position":"org.apache.commons.io.IOUtils:1138","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            return org.apache.commons.io.IOUtils.lineIterator(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a11a99-3f26-11e6-a10a-711023e8e3cf","method":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:76","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                java.io.File[] java.io.File[] = file.listFiles();\n                return (files == null) || ((files.int) == 0);\n            } else {\n                return (file.length()) == 0;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a11a9a-3f26-11e6-a10a-259acaa98218","method":{"position":"org.apache.commons.io.IOUtils:1525","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        {\n            if (data != null) {\n                output.write(data.getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a11a9b-3f26-11e6-a10a-af1188b65b60","method":{"position":"org.apache.commons.io.IOUtils:1395","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a141ac-3f26-11e6-a10a-39418147e42c","method":{"position":"org.apache.commons.io.FileSystemUtils:141","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static long freeSpace(java.lang.String path) throws java.io.IOException {\n    if ((path.length()) == 0) {\n        {\n            return org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.freeSpaceOS(path, org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int, false, (-1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:186","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a141ad-3f26-11e6-a10a-9f7d0c96b3e1","method":{"position":"org.apache.commons.io.filefilter.FileFileFilter:58","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isFile();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:233","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a141ae-3f26-11e6-a10a-457349c58b89","method":{"position":"org.apache.commons.io.output.LockableFileWriter:232","type":"CtMethodImpl","sourcecode":"private void testLockDir(java.io.File lockDir) throws java.io.IOException {\n    if (!(lockDir.exists())) {\n        {\n            if (!(lockDir.exists())) {\n                throw new java.io.IOException((\"Could not find lockDir: \" + (lockDir.getAbsolutePath())));\n            } \n            if (!(lockDir.canWrite())) {\n                throw new java.io.IOException((\"Could not write to lockDir: \" + (lockDir.getAbsolutePath())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockDir":"lockDir"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a168bf-3f26-11e6-a10a-69d9ae4f9a2e","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:276","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        {\n            java.io.Writer.write(chr);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a168c0-3f26-11e6-a10a-9d3f5ba5d0b0","method":{"position":"org.apache.commons.io.CopyUtils:241","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (null != input) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a168c1-3f26-11e6-a10a-bf90c45177c2","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if ((-1) == offset) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:223","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a168c2-3f26-11e6-a10a-079c6314cf03","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:83","type":"CtMethodImpl","sourcecode":"public void onFileDelete(final java.io.File file) {\n    if (file == null) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a18fd3-3f26-11e6-a10a-3dd8e780fe92","method":{"position":"org.apache.commons.io.input.ProxyReader:243","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n == (-1)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n != (-1)) {\n                        {\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a18fd4-3f26-11e6-a10a-3596e2f34a43","method":{"position":"org.apache.commons.io.IOUtils:1743","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            long long = org.apache.commons.io.IOUtils.copyLarge(input, output);\n            if (count > (java.lang.Integer.java.lang.Integer.int)) {\n                return -1;\n            } \n            return ((int)(count));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileDeleteStrategy:72","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a18fd5-3f26-11e6-a10a-efea4ba47715","method":{"position":"org.apache.commons.io.FileDeleteStrategy:71","type":"CtMethodImpl","sourcecode":"public boolean deleteQuietly(java.io.File fileToDelete) {\n    if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n        {\n            if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n                return true;\n            } \n            try {\n                return doDelete(fileToDelete);\n            } catch (java.io.IOException ex) {\n                return false;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileToDelete":"fileToDelete"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a1b6e6-3f26-11e6-a10a-792dc636089b","method":{"position":"org.apache.commons.io.input.AutoCloseInputStream:75","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void afterRead(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n == (-1)) {\n                close();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:386","type":"CtVariableReadImpl"},"failures":[],"tindex":"b5a1b6e7-3f26-11e6-a10a-b550bd74cbe8","method":{"position":"org.apache.commons.io.FileSystemUtils:379","type":"CtMethodImpl","sourcecode":"long freeSpaceUnix(java.lang.String path, boolean kb, boolean posix, long timeout) throws java.io.IOException {\n    if (kb) {\n        {\n            if ((path.length()) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            java.lang.String java.lang.String = \"-\";\n            if (kb) {\n                flags += \"k\";\n            } \n            if (posix) {\n                flags += \"P\";\n            } \n            java.lang.String[] java.lang.String[] = (flags.length()) > 1 ? new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , flags , path } : new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , path };\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, 3, timeout);\n            if ((lines.size()) < 2) {\n                throw new java.io.IOException(((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return info as expected \") + \"for path '\") + path) + \"'- response was \") + lines));\n            } \n            java.lang.String java.lang.String = lines.get(1);\n            java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line2 , \" \");\n            if ((tok.countTokens()) < 4) {\n                if (((tok.countTokens()) == 1) && ((lines.size()) >= 3)) {\n                    java.lang.String java.lang.String = lines.get(2);\n                    tok = new java.util.StringTokenizer(line3 , \" \");\n                } else {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return data as expected \") + \"for path '\") + path) + \"'- check path is valid\"));\n                }\n            } else {\n                tok.nextToken();\n            }\n            tok.nextToken();\n            tok.nextToken();\n            java.lang.String java.lang.String = tok.nextToken();\n            return parseBytes(freeSpace, path);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"kb":"kb"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a1b6e8-3f26-11e6-a10a-d548f45cdca0","method":{"position":"org.apache.commons.io.IOUtils:273","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.OutputStream output) {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a1ddf9-3f26-11e6-a10a-61e30fa42c94","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a1ddfa-3f26-11e6-a10a-9d49bb1f70eb","method":{"position":"org.apache.commons.io.filefilter.NameFileFilter:161","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEquals(name, name2)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2921","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a1ddfb-3f26-11e6-a10a-6fcc36ae3a55","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:39","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                {\n                    return accept(file.getParentFile(), file.getName());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2050c-3f26-11e6-a10a-2bb9f943b5ba","method":{"position":"org.apache.commons.io.output.NullWriter:114","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) {\n    if (str != null) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:130","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a2050d-3f26-11e6-a10a-a5b15b3fe279","method":{"position":"org.apache.commons.io.FileUtils:1987","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data) throws java.io.IOException {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2050e-3f26-11e6-a10a-0f38798b847b","method":{"position":"org.apache.commons.io.FilenameUtils:553","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToUnix(java.lang.String path) {\n    if ((path.length()) == 0) {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2331","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a2050f-3f26-11e6-a10a-eff735445f7c","method":{"position":"org.apache.commons.io.FileUtils:519","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (!(directory.isDirectory())) {\n        {\n            org.apache.commons.io.FileUtils.validateListFilesParameters(directory, fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(dirFilter);\n            java.util.Collection<java.io.File> java.util.Collection<java.io.File> = new java.util.LinkedList<java.io.File>();\n            org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.or(effFileFilter, effDirFilter), false);\n            return files;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:547","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a22c20-3f26-11e6-a10a-a3d07af297f7","method":{"position":"org.apache.commons.io.FileUtils:626","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFiles(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (fileFilter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.listFiles(directory, fileFilter, dirFilter).iterator();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"fileFilter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a22c21-3f26-11e6-a10a-49ba919afdc2","method":{"position":"org.apache.commons.io.EndianUtils:183","type":"CtMethodImpl","sourcecode":"public static long readSwappedUnsignedInteger(byte[] data, int offset) {\n    if (data != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            long long = ((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16);\n            long long = (data[(offset + 3)]) & 255;\n            return (high << 24) + (4294967295L & low);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ThreadMonitor:84","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a22c22-3f26-11e6-a10a-95e25dba0cc7","method":{"position":"org.apache.commons.io.ThreadMonitor:83","type":"CtMethodImpl","sourcecode":"public static void stop(java.lang.Thread thread) {\n    if (thread != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (thread != null) {\n                thread.interrupt();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"thread":"thread"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:186","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a25333-3f26-11e6-a10a-851d15bffa13","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:129","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            if (file.isDirectory()) {\n                return false;\n            } \n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), wildcard)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a25334-3f26-11e6-a10a-45c2a115c136","method":{"position":"org.apache.commons.io.CopyUtils:134","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            if (null != output) {\n                {\n                    output.write(input);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a25335-3f26-11e6-a10a-4dfc69270197","method":{"position":"org.apache.commons.io.FilenameUtils:193","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a27a46-3f26-11e6-a10a-612fd903299f","method":{"position":"org.apache.commons.io.EndianUtils:272","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(byte[] data, int offset) {\n    if (data != null) {\n        {\n            if (data != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(data, offset));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:685","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a27a47-3f26-11e6-a10a-5551b3b2dfac","method":{"position":"org.apache.commons.io.FileUtils:663","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] toSuffixes(java.lang.String[] extensions) {\n    if (extensions == null) {\n        {\n            java.lang.String[] java.lang.String[] = new java.lang.String[extensions.int];\n            for (int int = 0 ; i < (extensions.int) ; i++) {\n                suffixes[i] = \".\" + (extensions[i]);\n            }\n            return suffixes;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extensions":"extensions"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:623","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a27a48-3f26-11e6-a10a-9b7bc7fd2a90","method":{"position":"org.apache.commons.io.FilenameUtils:193","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalize(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, true);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2a159-3f26-11e6-a10a-53eba4e981c0","method":{"position":"org.apache.commons.io.IOUtils:163","type":"CtMethodImpl","sourcecode":"public static void close(java.net.URLConnection conn) {\n    if (conn instanceof java.net.HttpURLConnection) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (conn instanceof java.net.HttpURLConnection) {\n                ((java.net.HttpURLConnection)(conn)).disconnect();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"conn":"conn"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1168","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2a15a-3f26-11e6-a10a-5db9f080bb22","method":{"position":"org.apache.commons.io.FilenameUtils:622","type":"CtMethodImpl","sourcecode":"public static int getPrefixLength(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.length();\n            if (len == 0) {\n                return 0;\n            } \n            char char = filename.charAt(0);\n            if (ch0 == ':') {\n                return -1;\n            } \n            if (len == 1) {\n                if (ch0 == '~') {\n                    return 2;\n                } \n                return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n            } else {\n                if (ch0 == '~') {\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 1);\n                    if ((posUnix == (-1)) && (posWin == (-1))) {\n                        return len + 1;\n                    } \n                    posUnix = posUnix == (-1) ? posWin : posUnix;\n                    posWin = posWin == (-1) ? posUnix : posWin;\n                    return (java.lang.Math.min(posUnix, posWin)) + 1;\n                } \n                char char = filename.charAt(1);\n                if (ch1 == ':') {\n                    ch0 = java.lang.Character.toUpperCase(ch0);\n                    if ((ch0 >= 'A') && (ch0 <= 'Z')) {\n                        if ((len == 2) || ((org.apache.commons.io.FilenameUtils.isSeparator(filename.charAt(2))) == false)) {\n                            return 2;\n                        } \n                        return 3;\n                    } \n                    return -1;\n                } else if ((org.apache.commons.io.FilenameUtils.isSeparator(ch0)) && (org.apache.commons.io.FilenameUtils.isSeparator(ch1))) {\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                    int int = filename.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, 2);\n                    if ((((posUnix == (-1)) && (posWin == (-1))) || (posUnix == 2)) || (posWin == 2)) {\n                        return -1;\n                    } \n                    posUnix = posUnix == (-1) ? posWin : posUnix;\n                    posWin = posWin == (-1) ? posUnix : posWin;\n                    return (java.lang.Math.min(posUnix, posWin)) + 1;\n                } else {\n                    return org.apache.commons.io.FilenameUtils.isSeparator(ch0) ? 1 : 0;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2331","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2c86b-3f26-11e6-a10a-6facc6fc943c","method":{"position":"org.apache.commons.io.input.CharSequenceReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) {\n    if (n < 0) {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Number of characters to skip is less than zero: \" + n));\n            } \n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            int int = ((int)(java.lang.Math.min(java.lang.CharSequence.length(), ((int) + n))));\n            int int = dest - (int);\n            int = dest;\n            return count;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2c86c-3f26-11e6-a10a-ed42ed414c2e","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter2 == null) || (filter2 == null)) {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter2","filter2":"filter2"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1561","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2c86d-3f26-11e6-a10a-1f39f23333d1","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a2ef7e-3f26-11e6-a10a-8d97363e791a","method":{"position":"org.apache.commons.io.FilenameUtils:347","type":"CtMethodImpl","sourcecode":"private static java.lang.String doNormalize(java.lang.String filename, char separator, boolean keepSeparator) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = filename.length();\n            if (size == 0) {\n                return filename;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            char[] char[] = new char[size + 2];\n            filename.getChars(0, filename.length(), array, 0);\n            char char = separator == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char) ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == otherSeparator) {\n                    array[i] = separator;\n                } \n            }\n            boolean boolean = true;\n            if ((array[(size - 1)]) != separator) {\n                array[(size++)] = separator;\n                lastIsDirectory = false;\n            } \n            for (int int = prefix + 1 ; i < size ; i++) {\n                if (((array[i]) == separator) && ((array[(i - 1)]) == separator)) {\n                    java.lang.System.arraycopy(array, i, array, (i - 1), (size - i));\n                    size--;\n                    i--;\n                } \n            }\n            for (int int = prefix + 1 ; i < size ; i++) {\n                if ((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((i == (prefix + 1)) || ((array[(i - 2)]) == separator))) {\n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    java.lang.System.arraycopy(array, (i + 1), array, (i - 1), (size - i));\n                    size -= 2;\n                    i--;\n                } \n            }\n            outer : for (int int = prefix + 2 ; i < size ; i++) {\n                if (((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((array[(i - 2)]) == '.')) && ((i == (prefix + 2)) || ((array[(i - 3)]) == separator))) {\n                    if (i == (prefix + 2)) {\n                        return null;\n                    } \n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    int int;\n                    for (j = i - 4 ; j >= prefix ; j--) {\n                        if ((array[j]) == separator) {\n                            java.lang.System.arraycopy(array, (i + 1), array, (j + 1), (size - i));\n                            size -= i - j;\n                            i = j + 1;\n                            continue outer;\n                        } \n                    }\n                    java.lang.System.arraycopy(array, (i + 1), array, prefix, (size - i));\n                    size -= (i + 1) - prefix;\n                    i = prefix + 1;\n                } \n            }\n            if (size <= 0) {\n                return \"\";\n            } \n            if (size <= prefix) {\n                return new java.lang.String(array , 0 , size);\n            } \n            if (lastIsDirectory && keepSeparator) {\n                return new java.lang.String(array , 0 , size);\n            } \n            return new java.lang.String(array , 0 , (size - 1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a44f0f-3f26-11e6-a10a-2f70e0aa8a5e","method":{"position":"org.apache.commons.io.EndianUtils:272","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(byte[] data, int offset) {\n    if (data != null) {\n        {\n            if (data != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(data, offset));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a47620-3f26-11e6-a10a-87158e5ba217","method":{"position":"org.apache.commons.io.FileUtils:1853","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.lineIterator(in, encoding);\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a47621-3f26-11e6-a10a-dbe385d5fb2e","method":{"position":"org.apache.commons.io.input.Tailer:287","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen) {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, delayMillis, end, reOpen, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a47622-3f26-11e6-a10a-3f8755359473","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:357","type":"CtMethodImpl","sourcecode":"private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry parent, java.io.File file) {\n    if (file.isDirectory()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry org.apache.commons.io.monitor.FileEntry = parent.newChildInstance(file);\n            entry.refresh(file);\n            java.io.File[] java.io.File[] = listFiles(file);\n            org.apache.commons.io.monitor.FileEntry[] org.apache.commons.io.monitor.FileEntry[] = (files.int) > 0 ? new org.apache.commons.io.monitor.FileEntry[files.int] : org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry.org.apache.commons.io.monitor.FileEntry[];\n            for (int int = 0 ; i < (files.int) ; i++) {\n                children[i] = createFileEntry(entry, files[i]);\n            }\n            entry.setChildren(children);\n            return entry;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a49d33-3f26-11e6-a10a-fb3191dfa781","method":{"position":"org.apache.commons.io.FileUtils:2292","type":"CtMethodImpl","sourcecode":"public static void forceDeleteOnExit(java.io.File file) throws java.io.IOException {\n    if (file == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectoryOnExit(file);\n            } else {\n                file.deleteOnExit();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:61","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a49d34-3f26-11e6-a10a-8150b7bc2ff3","method":{"position":"org.apache.commons.io.comparator.AbstractFileComparator:60","type":"CtMethodImpl","sourcecode":"public java.util.List<java.io.File> sort(java.util.List<java.io.File> files) {\n    if (files != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (files != null) {\n                java.util.Collections.sort(files, org.apache.commons.io.comparator.AbstractFileComparator.this);\n            } \n            return files;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"files":"files"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a49d35-3f26-11e6-a10a-3b7632fd585a","method":{"position":"org.apache.commons.io.input.ProxyReader:243","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n == (-1)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n != (-1)) {\n                        {\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a4c446-3f26-11e6-a10a-d79a82d9bf4f","method":{"position":"org.apache.commons.io.FileUtils:2165","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, boolean append) throws java.io.IOException {\n    if (file.exists()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, null, append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:689","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a4c447-3f26-11e6-a10a-790e9e0513a5","method":{"position":"org.apache.commons.io.FilenameUtils:1025","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeExtension(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = org.apache.commons.io.FilenameUtils.indexOfExtension(filename);\n            if (index == (-1)) {\n                return filename;\n            } else {\n                return filename.substring(0, index);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2513","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a4c448-3f26-11e6-a10a-114c2ec6b223","method":{"position":"org.apache.commons.io.FileCleaner:73","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker, deleteStrategy);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a4eb59-3f26-11e6-a10a-a3cbeb36c5b3","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:435","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.OrFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.toList(filters));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1640","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a4eb5a-3f26-11e6-a10a-55880b6a59fa","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (!(directory.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a4eb5b-3f26-11e6-a10a-b3d0d8d77447","method":{"position":"org.apache.commons.io.FileUtils:2091","type":"CtMethodImpl","sourcecode":"public static void writeByteArrayToFile(java.io.File file, byte[] data, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            java.io.OutputStream java.io.OutputStream = null;\n            try {\n                out = org.apache.commons.io.FileUtils.openOutputStream(file, append);\n                out.write(data);\n                out.close();\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(out);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:866","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a4eb5c-3f26-11e6-a10a-b93521239d11","method":{"position":"org.apache.commons.io.FileUtils:864","type":"CtMethodImpl","sourcecode":"static java.lang.String decodeUrl(java.lang.String url) {\n    if ((url != null) && ((url.indexOf('%')) >= 0)) {\n        {\n            java.lang.String java.lang.String = url;\n            if ((url != null) && ((url.indexOf('%')) >= 0)) {\n                int int = url.length();\n                java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer.allocate(n);\n                for (int int = 0 ; i < n ; ) {\n                    if ((url.charAt(i)) == '%') {\n                        try {\n                            do {\n                                byte byte = ((byte)(java.lang.Integer.parseInt(url.substring((i + 1), (i + 3)), 16)));\n                                bytes.put(octet);\n                                i += 3;\n                            } while ((i < n) && ((url.charAt(i)) == '%') );\n                            continue;\n                        } catch (java.lang.RuntimeException e) {\n                        } finally {\n                            if ((bytes.position()) > 0) {\n                                bytes.flip();\n                                buffer.append(org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.java.nio.charset.Charset.decode(bytes).toString());\n                                bytes.clear();\n                            } \n                        }\n                    } \n                    buffer.append(url.charAt((i++)));\n                }\n                decoded = buffer.toString();\n            } \n            return decoded;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1640","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a5126d-3f26-11e6-a10a-29bfadfd7f97","method":{"position":"org.apache.commons.io.DirectoryWalker:561","type":"CtMethodImpl","sourcecode":"protected void handleDirectoryEnd(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(directory.isDirectory())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:302","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5126e-3f26-11e6-a10a-0756b0570034","method":{"position":"org.apache.commons.io.IOUtils:300","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.Closeable closeable) {\n    if (closeable != null) {\n        {\n            try {\n                if (closeable != null) {\n                    closeable.close();\n                } \n            } catch (java.io.IOException ioe) {\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closeable":"closeable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:289","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5126f-3f26-11e6-a10a-bd38ed376d7e","method":{"position":"org.apache.commons.io.FileCleaner:88","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.lang.String path, java.lang.Object marker) {\n    if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(path, marker);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2787","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a53980-3f26-11e6-a10a-113b5e7ae0e0","method":{"position":"org.apache.commons.io.FileUtils:1005","type":"CtMethodImpl","sourcecode":"public static void copyFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean preserveFileDate) throws java.io.IOException {\n    if (!(srcFile.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, preserveFileDate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"srcFile"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a53981-3f26-11e6-a10a-af1a8602eb84","method":{"position":"org.apache.commons.io.IOUtils:1164","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.nio.charset.Charset encoding) {\n    if (input == null) {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input.toString(), encoding);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a53982-3f26-11e6-a10a-1d43911d221c","method":{"position":"org.apache.commons.io.EndianUtils:129","type":"CtMethodImpl","sourcecode":"public static short readSwappedShort(byte[] data, int offset) {\n    if (data != null) {\n        {\n            return ((short)((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a53983-3f26-11e6-a10a-ab40ae383eaf","method":{"position":"org.apache.commons.io.IOUtils:2401","type":"CtMethodImpl","sourcecode":"public static int read(java.io.Reader input, char[] buffer, int offset, int length) throws java.io.IOException {\n    if (length < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:824","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a56094-3f26-11e6-a10a-9fe92f291456","method":{"position":"org.apache.commons.io.FilenameUtils:1194","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.util.Collection<java.lang.String> extensions) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return false;\n            } \n            if ((extensions == null) || (extensions.isEmpty())) {\n                return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n            for (java.lang.String java.lang.String : extensions) {\n                if (fileExt.equals(extension)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a56095-3f26-11e6-a10a-47fb130c3f00","method":{"position":"org.apache.commons.io.IOUtils:2123","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter(output , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(input, out);\n            out.flush();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a56096-3f26-11e6-a10a-73f3bb1f1387","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a587a7-3f26-11e6-a10a-c1b5239ab329","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (len >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(len);\n            getStream().write(b, off, len);\n            long += len;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"len"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:754","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a587a8-3f26-11e6-a10a-e56d93baf156","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (off < 0) {\n        {\n            if ((java.io.StringWriter) != null) {\n                detectEncoding(cbuf, off, len);\n            } else {\n                java.io.Writer.write(cbuf, off, len);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a587a9-3f26-11e6-a10a-9fa7495093c1","method":{"position":"org.apache.commons.io.FilenameUtils:710","type":"CtMethodImpl","sourcecode":"public static int indexOfExtension(java.lang.String filename) {\n    if (filename == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filename == null) {\n                return -1;\n            } \n            int int = filename.lastIndexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n            return lastSeparator > extensionPos ? -1 : extensionPos;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a587aa-3f26-11e6-a10a-a928d6193e9d","method":{"position":"org.apache.commons.io.CopyUtils:134","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            if (null != output) {\n                {\n                    output.write(input);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1284","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5aebb-3f26-11e6-a10a-83e2a2336fce","method":{"position":"org.apache.commons.io.FilenameUtils:1112","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2, boolean normalized, org.apache.commons.io.IOCase caseSensitivity) {\n    if ((caseSensitivity != null) && (!(caseSensitivity.isCaseSensitive()))) {\n        {\n            if (caseSensitivity == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((filename1 == null) || (filename2 == null)) {\n                        return (filename1 == null) && (filename2 == null);\n                    } \n                    if (normalized) {\n                        filename1 = org.apache.commons.io.FilenameUtils.normalize(filename1);\n                        filename2 = org.apache.commons.io.FilenameUtils.normalize(filename2);\n                        if ((filename1 == null) || (filename2 == null)) {\n                            throw new java.lang.NullPointerException(\"Error normalizing one or both of the file names\");\n                        } \n                    } \n                    if (caseSensitivity == null) {\n                        caseSensitivity = org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n                    } \n                    return caseSensitivity.checkEquals(filename1, filename2);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a5aebc-3f26-11e6-a10a-134b9aad61dd","method":{"position":"org.apache.commons.io.FileUtils:1708","type":"CtMethodImpl","sourcecode":"public static java.lang.String readFileToString(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (!(file.exists())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.toString(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5aebd-3f26-11e6-a10a-955a22cd6a06","method":{"position":"org.apache.commons.io.EndianUtils:452","type":"CtMethodImpl","sourcecode":"public static void writeSwappedDouble(java.io.OutputStream output, double value) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedLong(output, java.lang.Double.doubleToLongBits(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5d5ce-3f26-11e6-a10a-ed146a93d688","method":{"position":"org.apache.commons.io.output.NullWriter:105","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) {\n    if (chr != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2833","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a5d5cf-3f26-11e6-a10a-cb4c5dcb5928","method":{"position":"org.apache.commons.io.FileUtils:2854","type":"CtMethodImpl","sourcecode":"public static void moveFileToDirectory(java.io.File srcFile, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (!(destDir.delete())) {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination directory must not be null\");\n            } \n            if ((!(destDir.exists())) && createDestDir) {\n                destDir.mkdirs();\n            } \n            if (!(destDir.exists())) {\n                throw new java.io.FileNotFoundException(((((\"Destination directory '\" + destDir) + \"' does not exist [createDestDir=\") + createDestDir) + \"]\"));\n            } \n            if (!(destDir.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.moveFile(srcFile, new java.io.File(destDir , srcFile.getName()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"destDir"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.TeeInputStream:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5d5d0-3f26-11e6-a10a-9d628cea2b7d","method":{"position":"org.apache.commons.io.input.ProxyReader:243","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (n == (-1)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (n != (-1)) {\n                        {\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2815","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5d5d1-3f26-11e6-a10a-f9a9455c2335","method":{"position":"org.apache.commons.io.FileUtils:1037","type":"CtMethodImpl","sourcecode":"public static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (destFile == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"destFile"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DeferredFileOutputStream:175","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5fce2-3f26-11e6-a10a-4b196a2ef68a","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:293","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix) {\n    if (prefix != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"prefix"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5fce3-3f26-11e6-a10a-2dc61e29ac09","method":{"position":"org.apache.commons.io.EndianUtils:200","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(byte[] data, int offset, long value) {\n    if ((-1) == offset) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n            data[(offset + 2)] = ((byte)((value >> 16) & 255));\n            data[(offset + 3)] = ((byte)((value >> 24) & 255));\n            data[(offset + 4)] = ((byte)((value >> 32) & 255));\n            data[(offset + 5)] = ((byte)((value >> 40) & 255));\n            data[(offset + 6)] = ((byte)((value >> 48) & 255));\n            data[(offset + 7)] = ((byte)((value >> 56) & 255));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1526","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5fce4-3f26-11e6-a10a-a946802991a9","method":{"position":"org.apache.commons.io.IOUtils:1616","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (encoding != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (data != null) {\n                        output.write(data.toString().getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"encoding"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a5fce5-3f26-11e6-a10a-7dc19625ea26","method":{"position":"org.apache.commons.io.EndianUtils:250","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(byte[] data, int offset) {\n    if (data != null) {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(data, offset));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1609","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a5fce6-3f26-11e6-a10a-2355b663c2d8","method":{"position":"org.apache.commons.io.FileUtils:1634","type":"CtMethodImpl","sourcecode":"public static void cleanDirectory(java.io.File directory) throws java.io.IOException {\n    if (!(directory.isDirectory())) {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDelete(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1861","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a623f7-3f26-11e6-a10a-9543834e0313","method":{"position":"org.apache.commons.io.IOUtils:2027","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.Reader input, java.io.Writer output, final long inputOffset, final long length) throws java.io.IOException {\n    if (inputOffset > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new char[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"inputOffset"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a623f8-3f26-11e6-a10a-53fd2a23727a","method":{"position":"org.apache.commons.io.output.LockableFileWriter:339","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) throws java.io.IOException {\n    if (st == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr, st, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"st"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.TaggedIOException:94","type":"CtInvocationImpl"},"failures":[],"tindex":"b5a623f9-3f26-11e6-a10a-7f7ca9c2053f","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if (org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)) {\n        {\n            return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable","tag":"tag"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1127","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a623fa-3f26-11e6-a10a-c3e56fa4a3ae","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:354","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name, org.apache.commons.io.IOCase caseSensitivity) {\n    if (caseSensitivity == null) {\n        {\n            if (caseSensitivity == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.io.filefilter.NameFileFilter(name , caseSensitivity);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a64b0b-3f26-11e6-a10a-695186388379","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (!(file.delete())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2666","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a64b0c-3f26-11e6-a10a-496f67a5e1e7","method":{"position":"org.apache.commons.io.FileUtils:2707","type":"CtMethodImpl","sourcecode":"public static java.util.zip.Checksum checksum(java.io.File file, java.util.zip.Checksum checksum) throws java.io.IOException {\n    if (!(file.exists())) {\n        {\n            if (file.isDirectory()) {\n                throw new java.lang.IllegalArgumentException(\"Checksums can't be computed on directories\");\n            } \n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = new java.util.zip.CheckedInputStream(new java.io.FileInputStream(file) , checksum);\n                org.apache.commons.io.IOUtils.copy(in, new org.apache.commons.io.output.NullOutputStream());\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n            return checksum;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a64b0d-3f26-11e6-a10a-09028dae6505","method":{"position":"org.apache.commons.io.FilenameUtils:1112","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.String filename1, java.lang.String filename2, boolean normalized, org.apache.commons.io.IOCase caseSensitivity) {\n    if ((caseSensitivity != null) && (!(caseSensitivity.isCaseSensitive()))) {\n        {\n            if (caseSensitivity == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((filename1 == null) || (filename2 == null)) {\n                        return (filename1 == null) && (filename2 == null);\n                    } \n                    if (normalized) {\n                        filename1 = org.apache.commons.io.FilenameUtils.normalize(filename1);\n                        filename2 = org.apache.commons.io.FilenameUtils.normalize(filename2);\n                        if ((filename1 == null) || (filename2 == null)) {\n                            throw new java.lang.NullPointerException(\"Error normalizing one or both of the file names\");\n                        } \n                    } \n                    if (caseSensitivity == null) {\n                        caseSensitivity = org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n                    } \n                    return caseSensitivity.checkEquals(filename1, filename2);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a6721e-3f26-11e6-a10a-69c064ace05f","method":{"position":"org.apache.commons.io.IOUtils:1311","type":"CtMethodImpl","sourcecode":"public static void write(byte[] data, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1534","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a6721f-3f26-11e6-a10a-07e2992b3de4","method":{"position":"org.apache.commons.io.FileUtils:2366","type":"CtMethodImpl","sourcecode":"public static void forceMkdir(java.io.File directory) throws java.io.IOException {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n        {\n            if (directory.exists()) {\n                if (!(directory.isDirectory())) {\n                    java.lang.String java.lang.String = ((\"File \" + directory) + \" exists and is \") + \"not a directory. Unable to create directory.\";\n                    throw new java.io.IOException(message);\n                } \n            } else {\n                if (!(directory.mkdirs())) {\n                    if (!(directory.isDirectory())) {\n                        java.lang.String java.lang.String = \"Unable to create directory \" + directory;\n                        throw new java.io.IOException(message);\n                    } \n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1489","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a67220-3f26-11e6-a10a-436c4392ac35","method":{"position":"org.apache.commons.io.IOUtils:1411","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a67221-3f26-11e6-a10a-fb02f2a6f410","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(1);\n            getStream().write(b);\n            (long)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1127","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a69932-3f26-11e6-a10a-47cf375e1822","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:354","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name, org.apache.commons.io.IOCase caseSensitivity) {\n    if (caseSensitivity == null) {\n        {\n            if (caseSensitivity == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new org.apache.commons.io.filefilter.NameFileFilter(name , caseSensitivity);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a69933-3f26-11e6-a10a-9309c6ca5d72","method":{"position":"org.apache.commons.io.FileUtils:1111","type":"CtMethodImpl","sourcecode":"public static long copyFile(java.io.File input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            final java.io.FileInputStream java.io.FileInputStream = new java.io.FileInputStream(input);\n            try {\n                return org.apache.commons.io.IOUtils.copyLarge(fis, output);\n            } finally {\n                fis.close();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1845","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5a69934-3f26-11e6-a10a-811c373200f9","method":{"position":"org.apache.commons.io.IOUtils:1818","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, long inputOffset, long length) throws java.io.IOException {\n    if (length > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.copyLarge(input, output, inputOffset, length, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inputOffset":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ByteOrderMark:131","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b5a69935-3f26-11e6-a10a-579dc6818e24","method":{"position":"org.apache.commons.io.ByteOrderMark:130","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (!(obj instanceof org.apache.commons.io.ByteOrderMark)) {\n        {\n            if (!(obj instanceof org.apache.commons.io.ByteOrderMark)) {\n                return false;\n            } \n            org.apache.commons.io.ByteOrderMark org.apache.commons.io.ByteOrderMark = ((org.apache.commons.io.ByteOrderMark)(obj));\n            if ((int[].int) != (bom.length())) {\n                return false;\n            } \n            for (int int = 0 ; i < (int[].int) ; i++) {\n                if ((int[][i]) != (bom.get(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325344208/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
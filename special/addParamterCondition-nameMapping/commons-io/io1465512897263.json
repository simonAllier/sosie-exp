{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:493","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"301535f1-2e95-11e6-bf85-bbd9b5582a1e","method":{"position":"org.apache.commons.io.input.BOMInputStream:331","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] buf, int off, int len) throws java.io.IOException {\n    if (off == 0) {\n        {\n            int int = 0;\n            int int = 0;\n            while ((len > 0) && (b >= 0)) {\n                b = readFirstBytes();\n                if (b >= 0) {\n                    buf[(off++)] = ((byte)(b & 255));\n                    len--;\n                    firstCount++;\n                } \n            }\n            int int = java.io.InputStream.read(buf, off, len);\n            return secondCount < 0 ? firstCount > 0 ? firstCount : -1 : firstCount + secondCount;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"3015f942-2e95-11e6-bf85-b7da3067d31b","method":{"position":"org.apache.commons.io.IOUtils:443","type":"CtMethodImpl","sourcecode":"public static java.io.BufferedReader toBufferedReader(java.io.Reader reader) {\n    if (reader == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return reader instanceof java.io.BufferedReader ? ((java.io.BufferedReader)(reader)) : new java.io.BufferedReader(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"3015f943-2e95-11e6-bf85-29271591ebdf","method":{"position":"org.apache.commons.io.output.NullWriter:125","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) {\n    if (str != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl","sourcecode":"(dir != null) && (new java.io.File(dir , name).isDirectory())"},"failures":[],"tindex":"30162054-2e95-11e6-bf85-75d1737867cf","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:76","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"30162055-2e95-11e6-bf85-b3d269b25fc8","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter1 == null) || (filter2 == null)) {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter1","filter2":"filter2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:107","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"30164766-2e95-11e6-bf85-f344b573491e","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:35","type":"CtMethodImpl","sourcecode":"public void onStart(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2377","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.mkdirs())"},"failures":[],"tindex":"30164767-2e95-11e6-bf85-d712ed607df2","method":{"position":"org.apache.commons.io.DirectoryWalker:350","type":"CtMethodImpl","sourcecode":"private void walk(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(directory.mkdirs())) {\n        {\n            checkIfCancelled(directory, depth, results);\n            if (handleDirectory(directory, depth, results)) {\n                handleDirectoryStart(directory, depth, results);\n                int int = depth + 1;\n                if (((int) < 0) || (childDepth <= (int))) {\n                    checkIfCancelled(directory, depth, results);\n                    java.io.File[] java.io.File[] = (java.io.FileFilter) == null ? directory.listFiles() : directory.listFiles(java.io.FileFilter);\n                    childFiles = filterDirectoryContents(directory, depth, childFiles);\n                    if (childFiles == null) {\n                        handleRestricted(directory, childDepth, results);\n                    } else {\n                        for (java.io.File java.io.File : childFiles) {\n                            if (childFile.isDirectory()) {\n                                walk(childFile, childDepth, results);\n                            } else {\n                                checkIfCancelled(childFile, childDepth, results);\n                                handleFile(childFile, childDepth, results);\n                                checkIfCancelled(childFile, childDepth, results);\n                            }\n                        }\n                    }\n                } \n                handleDirectoryEnd(directory, depth, results);\n            } \n            checkIfCancelled(directory, depth, results);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"30166e78-2e95-11e6-bf85-5f7aa7af568e","method":{"position":"org.apache.commons.io.EndianUtils:344","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            int int = org.apache.commons.io.EndianUtils.read(input);\n            return ((((value1 & 255) << 0) + ((value2 & 255) << 8)) + ((value3 & 255) << 16)) + ((value4 & 255) << 24);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1026","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"30169589-2e95-11e6-bf85-bf01de544ac7","method":{"position":"org.apache.commons.io.FilenameUtils:287","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalizeNoEndSeparator(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"3016958a-2e95-11e6-bf85-5b9393ecb8c9","method":{"position":"org.apache.commons.io.IOUtils:1164","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.CharSequence input, java.nio.charset.Charset encoding) {\n    if (input == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toInputStream(input.toString(), encoding);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2893","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"3016bc9b-2e95-11e6-bf85-b7ba8e3b332f","method":{"position":"org.apache.commons.io.FileUtils:1403","type":"CtMethodImpl","sourcecode":"private static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate, java.util.List<java.lang.String> exclusionList) throws java.io.IOException {\n    if (filter == null) {\n        {\n            if (srcDir == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n                    if (srcFiles == null) {\n                        throw new java.io.IOException((\"Failed to list contents of \" + srcDir));\n                    } \n                    if (destDir.exists()) {\n                        if ((destDir.isDirectory()) == false) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' exists but is not a directory\"));\n                        } \n                    } else {\n                        if ((!(destDir.mkdirs())) && (!(destDir.isDirectory()))) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' directory cannot be created\"));\n                        } \n                    }\n                    if ((destDir.canWrite()) == false) {\n                        throw new java.io.IOException(((\"Destination '\" + destDir) + \"' cannot be written to\"));\n                    } \n                    for (java.io.File java.io.File : srcFiles) {\n                        java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                        if ((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))) {\n                            if (srcFile.isDirectory()) {\n                                org.apache.commons.io.FileUtils.doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                            } else {\n                                org.apache.commons.io.FileUtils.doCopyFile(srcFile, dstFile, preserveFileDate);\n                            }\n                        } \n                    }\n                    if (preserveFileDate) {\n                        destDir.setLastModified(srcDir.lastModified());\n                    } \n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"srcDir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:685","type":"CtBinaryOperatorImpl","sourcecode":"extensions == null"},"failures":[],"tindex":"3016e3ac-2e95-11e6-bf85-650be9901bf0","method":{"position":"org.apache.commons.io.FileUtils:663","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] toSuffixes(java.lang.String[] extensions) {\n    if (extensions == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = new java.lang.String[extensions.int];\n            for (int int = 0 ; i < (extensions.int) ; i++) {\n                suffixes[i] = \".\" + (extensions[i]);\n            }\n            return suffixes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extensions":"extensions"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"3016e3ad-2e95-11e6-bf85-6594c00c4a6e","method":{"position":"org.apache.commons.io.IOUtils:2277","type":"CtMethodImpl","sourcecode":"public static long skip(java.io.InputStream input, long toSkip) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Skip count must be non-negative, actual: \" + toSkip));\n            } \n            if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[]) == null) {\n                org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[] = new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int];\n            } \n            long long = toSkip;\n            while (remain > 0) {\n                long long = input.read(org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.byte[], 0, ((int)(java.lang.Math.min(remain, org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))));\n                if (n < 0) {\n                    break;\n                } \n                remain -= n;\n            }\n            return toSkip - remain;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:547","type":"CtBinaryOperatorImpl","sourcecode":"fileFilter == null"},"failures":[],"tindex":"30170abe-2e95-11e6-bf85-bb4feb7ca0c6","method":{"position":"org.apache.commons.io.FileUtils:558","type":"CtMethodImpl","sourcecode":"private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter fileFilter) {\n    if (fileFilter == null) {\n        {\n            return org.apache.commons.io.filefilter.FileFilterUtils.and(fileFilter, org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilter":"fileFilter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2331","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"30170abf-2e95-11e6-bf85-d3241899df86","method":{"position":"org.apache.commons.io.FileUtils:2325","type":"CtMethodImpl","sourcecode":"private static void cleanDirectoryOnExit(java.io.File directory) throws java.io.IOException {\n    if (!(directory.isDirectory())) {\n        {\n            if (!(directory.exists())) {\n                java.lang.String java.lang.String = directory + \" does not exist\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            if (!(directory.isDirectory())) {\n                java.lang.String java.lang.String = directory + \" is not a directory\";\n                throw new java.lang.IllegalArgumentException(message);\n            } \n            java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                throw new java.io.IOException((\"Failed to list contents of \" + directory));\n            } \n            java.io.IOException java.io.IOException = null;\n            for (java.io.File java.io.File : files) {\n                try {\n                    org.apache.commons.io.FileUtils.forceDeleteOnExit(file);\n                } catch (java.io.IOException ioe) {\n                    exception = ioe;\n                }\n            }\n            if (null != exception) {\n                throw exception;\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2377","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.mkdirs())"},"failures":[],"tindex":"301731d0-2e95-11e6-bf85-91d89e8b39f2","method":{"position":"org.apache.commons.io.FileUtils:2467","type":"CtMethodImpl","sourcecode":"public static long sizeOfDirectory(java.io.File directory) {\n    if (!(directory.mkdirs())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.checkDirectory(directory);\n            final java.io.File[] java.io.File[] = directory.listFiles();\n            if (files == null) {\n                return 0L;\n            } \n            long long = 0;\n            for (final java.io.File java.io.File : files) {\n                try {\n                    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                        size += org.apache.commons.io.FileUtils.sizeOf(file);\n                        if (size < 0) {\n                            break;\n                        } \n                    } \n                } catch (java.io.IOException ioe) {\n                }\n            }\n            return size;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"301731d1-2e95-11e6-bf85-0bac2e05f83b","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((file.getParentFile()) != null) {\n                {\n                    if (file.isDirectory()) {\n                        {\n                            return file.isHidden();\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1526","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"301758e2-2e95-11e6-bf85-59dcbc47995b","method":{"position":"org.apache.commons.io.IOUtils:1411","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl","sourcecode":"(dir != null) && (new java.io.File(dir , name).isDirectory())"},"failures":[],"tindex":"301758e3-2e95-11e6-bf85-03125d49ab28","method":{"position":"org.apache.commons.io.filefilter.RegexFileFilter:118","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        {\n            return java.util.regex.Pattern.matcher(name).matches();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2449","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"301758e4-2e95-11e6-bf85-d9f44ebb1cd4","method":{"position":"org.apache.commons.io.filefilter.SuffixFileFilter:150","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.SuffixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkEndsWith(name, suffix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:186","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"30177ff5-2e95-11e6-bf85-39627e170cb6","method":{"position":"org.apache.commons.io.filefilter.WildcardFilter:129","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                return false;\n            } \n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(file.getName(), wildcard)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"30177ff6-2e95-11e6-bf85-b9e12f4dd8c6","method":{"position":"org.apache.commons.io.EndianUtils:426","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(java.io.OutputStream output, float value) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(output, java.lang.Float.floatToIntBits(value));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"30177ff7-2e95-11e6-bf85-e7ecceeea9a8","method":{"position":"org.apache.commons.io.FilenameUtils:347","type":"CtMethodImpl","sourcecode":"private static java.lang.String doNormalize(java.lang.String filename, char separator, boolean keepSeparator) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                return null;\n            } \n            int int = filename.length();\n            if (size == 0) {\n                return filename;\n            } \n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(filename);\n            if (prefix < 0) {\n                return null;\n            } \n            char[] char[] = new char[size + 2];\n            filename.getChars(0, filename.length(), array, 0);\n            char char = separator == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char) ? org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char : org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char;\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == otherSeparator) {\n                    array[i] = separator;\n                } \n            }\n            boolean boolean = true;\n            if ((array[(size - 1)]) != separator) {\n                array[(size++)] = separator;\n                lastIsDirectory = false;\n            } \n            for (int int = prefix + 1 ; i < size ; i++) {\n                if (((array[i]) == separator) && ((array[(i - 1)]) == separator)) {\n                    java.lang.System.arraycopy(array, i, array, (i - 1), (size - i));\n                    size--;\n                    i--;\n                } \n            }\n            for (int int = prefix + 1 ; i < size ; i++) {\n                if ((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((i == (prefix + 1)) || ((array[(i - 2)]) == separator))) {\n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    java.lang.System.arraycopy(array, (i + 1), array, (i - 1), (size - i));\n                    size -= 2;\n                    i--;\n                } \n            }\n            outer : for (int int = prefix + 2 ; i < size ; i++) {\n                if (((((array[i]) == separator) && ((array[(i - 1)]) == '.')) && ((array[(i - 2)]) == '.')) && ((i == (prefix + 2)) || ((array[(i - 3)]) == separator))) {\n                    if (i == (prefix + 2)) {\n                        return null;\n                    } \n                    if (i == (size - 1)) {\n                        lastIsDirectory = true;\n                    } \n                    int int;\n                    for (j = i - 4 ; j >= prefix ; j--) {\n                        if ((array[j]) == separator) {\n                            java.lang.System.arraycopy(array, (i + 1), array, (j + 1), (size - i));\n                            size -= i - j;\n                            i = j + 1;\n                            continue outer;\n                        } \n                    }\n                    java.lang.System.arraycopy(array, (i + 1), array, prefix, (size - i));\n                    size -= (i + 1) - prefix;\n                    i = prefix + 1;\n                } \n            }\n            if (size <= 0) {\n                return \"\";\n            } \n            if (size <= prefix) {\n                return new java.lang.String(array , 0 , size);\n            } \n            if (lastIsDirectory && keepSeparator) {\n                return new java.lang.String(array , 0 , size);\n            } \n            return new java.lang.String(array , 0 , (size - 1));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"3017a708-2e95-11e6-bf85-8317c9e75f95","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((file.getParentFile()) != null) {\n                {\n                    if (file.isDirectory()) {\n                        {\n                            return file.isHidden();\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"3017ce19-2e95-11e6-bf85-6b4815a4645b","method":{"position":"org.apache.commons.io.monitor.FileEntry:93","type":"CtMethodImpl","sourcecode":"public boolean refresh(java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = boolean;\n                    long long = long;\n                    boolean boolean = boolean;\n                    long long = long;\n                    java.lang.String = file.getName();\n                    boolean = file.exists();\n                    boolean = boolean ? file.isDirectory() : false;\n                    long = boolean ? file.lastModified() : 0;\n                    long = (boolean) && (!(boolean)) ? file.length() : 0;\n                    return ((((boolean) != origExists) || ((long) != origLastModified)) || ((boolean) != origDirectory)) || ((long) != origLength);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:305","type":"CtBinaryOperatorImpl","sourcecode":"(line.length()) > 0"},"failures":[],"tindex":"3017ce1a-2e95-11e6-bf85-21a29c9f9799","method":{"position":"org.apache.commons.io.LineIterator:117","type":"CtMethodImpl","sourcecode":"protected boolean isValidLine(java.lang.String line) {\n    if ((line.length()) > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"line":"line"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"3017f52b-2e95-11e6-bf85-5f472709734a","method":{"position":"org.apache.commons.io.IOUtils:865","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URI uri, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            return org.apache.commons.io.IOUtils.toString(uri, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.EndianUtils:482","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == value"},"failures":[],"tindex":"3017f52c-2e95-11e6-bf85-994522f2287c","method":{"position":"org.apache.commons.io.EndianUtils:239","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(byte[] data, int offset, float value) {\n    if ((-1) == offset) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(data, offset, java.lang.Float.floatToIntBits(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"offset"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"3017f52d-2e95-11e6-bf85-198bcb04b1b8","method":{"position":"org.apache.commons.io.output.DemuxOutputStream:39","type":"CtMethodImpl","sourcecode":"public java.io.OutputStream bindStream(java.io.OutputStream output) {\n    if (null != output) {\n        {\n            java.io.OutputStream java.io.OutputStream = java.lang.InheritableThreadLocal<java.io.OutputStream>.get();\n            java.lang.InheritableThreadLocal<java.io.OutputStream>.set(output);\n            return stream;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:292","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"30181c3e-2e95-11e6-bf85-0b993fcdadfa","method":{"position":"org.apache.commons.io.FileUtils:2247","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, java.lang.String lineEnding, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, null, lines, lineEnding, append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.SizeFileComparator:116","type":"CtInvocationImpl","sourcecode":"file2.isDirectory()"},"failures":[],"tindex":"30181c3f-2e95-11e6-bf85-0bda29dad2d0","method":{"position":"org.apache.commons.io.comparator.SizeFileComparator:108","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file2.isDirectory()) {\n        {\n            long long = 0;\n            if (file1.isDirectory()) {\n                size1 = (boolean) && (file1.exists()) ? org.apache.commons.io.FileUtils.sizeOfDirectory(file1) : 0;\n            } else {\n                size1 = file1.length();\n            }\n            long long = 0;\n            if (file2.isDirectory()) {\n                size2 = (boolean) && (file2.exists()) ? org.apache.commons.io.FileUtils.sizeOfDirectory(file2) : 0;\n            } else {\n                size2 = file2.length();\n            }\n            long long = size1 - size2;\n            if (result < 0) {\n                return -1;\n            } else if (result > 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SizeFileFilter:71","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"30181c40-2e95-11e6-bf85-f70a06745a67","method":{"position":"org.apache.commons.io.FileUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(long size) {\n    if (size < 0) {\n        {\n            if (size < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(size));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:121","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"30184351-2e95-11e6-bf85-914218f7aa4d","method":{"position":"org.apache.commons.io.FileSystemUtils:287","type":"CtMethodImpl","sourcecode":"long freeSpaceWindows(java.lang.String path, long timeout) throws java.io.IOException {\n    if (path == null) {\n        {\n            path = org.apache.commons.io.FilenameUtils.normalize(path, false);\n            if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n                path = (\"\\\"\" + path) + \"\\\"\";\n            } \n            java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"cmd.exe\" , \"/C\" , \"dir /a /-c \" + path };\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, java.lang.Integer.java.lang.Integer.int, timeout);\n            for (int int = (lines.size()) - 1 ; i >= 0 ; i--) {\n                java.lang.String java.lang.String = lines.get(i);\n                if ((line.length()) > 0) {\n                    return parseDir(line, path);\n                } \n            }\n            throw new java.io.IOException((((\"Command line 'dir /-c' did not return any info \" + \"for path '\") + path) + \"'\"));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2331","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"30184352-2e95-11e6-bf85-1f19992c9aca","method":{"position":"org.apache.commons.io.input.BoundedInputStream:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) throws java.io.IOException {\n    if (n < 0) {\n        {\n            long long = (long) >= 0 ? java.lang.Math.min(n, ((long) - (long))) : n;\n            long long = java.io.InputStream.skip(toSkip);\n            long += skippedBytes;\n            return skippedBytes;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1659","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"30186a63-2e95-11e6-bf85-d1d0b5c336d1","method":{"position":"org.apache.commons.io.output.TaggedOutputStream:87","type":"CtMethodImpl","sourcecode":"public boolean isCauseOf(java.lang.Exception exception) {\n    if (null != exception) {\n        {\n            return org.apache.commons.io.TaggedIOException.isTaggedWith(exception, java.io.Serializable);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2621","type":"CtBinaryOperatorImpl","sourcecode":"reference == null"},"failures":[],"tindex":"30186a64-2e95-11e6-bf85-13697aea033c","method":{"position":"org.apache.commons.io.FileUtils:2620","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, java.io.File reference) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (reference == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified reference file\");\n            } \n            if (!(reference.exists())) {\n                throw new java.lang.IllegalArgumentException(((\"The reference file '\" + reference) + \"' doesn't exist\"));\n            } \n            return org.apache.commons.io.FileUtils.isFileOlder(file, reference.lastModified());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reference":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"30189175-2e95-11e6-bf85-67b6a4f76709","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        {\n            java.io.Writer.write(str);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1561","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"30189176-2e95-11e6-bf85-71e7030e088c","method":{"position":"org.apache.commons.io.DirectoryWalker:393","type":"CtMethodImpl","sourcecode":"protected final void checkIfCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (handleIsCancelled(file, depth, results)) {\n                throw new org.apache.commons.io.DirectoryWalker.CancelException(file , depth);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:275","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"30189177-2e95-11e6-bf85-d1c4d47b2abd","method":{"position":"org.apache.commons.io.FileCleaningTracker:90","type":"CtMethodImpl","sourcecode":"public void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (marker == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"The file must not be null\");\n            } \n            addTracker(file.getPath(), marker, deleteStrategy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"marker"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"3018b888-2e95-11e6-bf85-bb94e60798bc","method":{"position":"org.apache.commons.io.monitor.FileEntry:189","type":"CtMethodImpl","sourcecode":"public void setName(java.lang.String name) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.java.lang.String = name;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"3018b889-2e95-11e6-bf85-c74cbf36d8ec","method":{"position":"org.apache.commons.io.output.ClosedOutputStream:47","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        {\n            throw new java.io.IOException(((\"write(\" + b) + \") failed: stream is closed\"));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"(file1.length()) != (file2.length())"},"failures":[],"tindex":"3018b88a-2e95-11e6-bf85-eb1303da658c","method":{"position":"org.apache.commons.io.comparator.PathFileComparator:102","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if ((file2.length()) != (file2.length())) {\n        {\n            return org.apache.commons.io.IOCase.checkCompareTo(file1.getPath(), file2.getPath());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2","file1":"file2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"3018df9b-2e95-11e6-bf85-0fe0eec53ecc","method":{"position":"org.apache.commons.io.input.Tailer:236","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, int bufSize) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:711","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"3018df9c-2e95-11e6-bf85-9f83363ffca4","method":{"position":"org.apache.commons.io.FilenameUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String getName(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filename == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (filename == null) {\n                                return null;\n                            } \n                            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n                            return filename.substring((index + 1));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"3018df9d-2e95-11e6-bf85-7f501d3d8d79","method":{"position":"org.apache.commons.io.IOUtils:1932","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2478","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"301906ae-2e95-11e6-bf85-77effc9ab98e","method":{"position":"org.apache.commons.io.FileUtils:1987","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data) throws java.io.IOException {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"301906af-2e95-11e6-bf85-c500ae186f52","method":{"position":"org.apache.commons.io.output.LockableFileWriter:339","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) throws java.io.IOException {\n    if (st == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(chr, st, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"st"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:356","type":"CtBinaryOperatorImpl","sourcecode":"(file.canWrite()) == false"},"failures":[],"tindex":"3019ca00-2e95-11e6-bf85-d92c66139690","method":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:149","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if ((file.canWrite()) == false) {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : org.apache.commons.io.filefilter.PrefixFileFilter.this.java.lang.String[]) {\n                if (org.apache.commons.io.IOCase.checkStartsWith(name, prefix)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl","sourcecode":"n == (-1)"},"failures":[],"tindex":"3019ca01-2e95-11e6-bf85-cf5b38f8ddf0","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"3019ca02-2e95-11e6-bf85-6f2326d6911c","method":{"position":"org.apache.commons.io.input.TeeInputStream:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] bts, int st, int end) throws java.io.IOException {\n    if (end == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = super.read(bts, st, end);\n            if (n != (-1)) {\n                java.io.OutputStream.write(bts, st, n);\n            } \n            return n;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"end"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SizeFileFilter:71","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"3019f113-2e95-11e6-bf85-d5315c61120c","method":{"position":"org.apache.commons.io.FileUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(long size) {\n    if (size < 0) {\n        {\n            if (size < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(size));\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"3019f114-2e95-11e6-bf85-c9f4c9c3a74d","method":{"position":"org.apache.commons.io.output.NullOutputStream:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"3019f115-2e95-11e6-bf85-edeced301f4b","method":{"position":"org.apache.commons.io.IOUtils:1010","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.readLines(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"301a1826-2e95-11e6-bf85-9f7cd4d9e265","method":{"position":"org.apache.commons.io.filefilter.CanReadFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            return file.canRead();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"301a1827-2e95-11e6-bf85-e36a91ff7b84","method":{"position":"org.apache.commons.io.FileSystemUtils:258","type":"CtMethodImpl","sourcecode":"long freeSpaceOS(java.lang.String path, int os, boolean kb, long timeout) throws java.io.IOException {\n    if ((path.length()) == 0) {\n        {\n            if (path == null) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            switch (os) {\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return kb ? (freeSpaceWindows(path, timeout)) / (org.apache.commons.io.FileUtils.org.apache.commons.io.FileUtils.long) : freeSpaceWindows(path, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, false, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    return freeSpaceUnix(path, kb, true, timeout);\n                case org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.int :\n                    throw new java.lang.IllegalStateException(\"Unsupported operating system\");\n                default :\n                    throw new java.lang.IllegalStateException(\"Exception caught when determining operating system\");\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"301a1828-2e95-11e6-bf85-ab077903f7cd","method":{"position":"org.apache.commons.io.CopyUtils:134","type":"CtMethodImpl","sourcecode":"public static void copy(byte[] input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            output.write(input);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"301a3f39-2e95-11e6-bf85-91a753564499","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:740","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                return org.apache.commons.io.filefilter.FileFilterUtils.and(filter, org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.FileFilterUtils.org.apache.commons.io.filefilter.IOFileFilter);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"301a3f3a-2e95-11e6-bf85-6f24d52637d7","method":{"position":"org.apache.commons.io.output.BrokenOutputStream:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        {\n            throw java.io.IOException;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"301a3f3b-2e95-11e6-bf85-f1122d35ad3f","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:180","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return java.util.Arrays.asList(acceptedFiles);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"301a3f3c-2e95-11e6-bf85-5bbac1bdafad","method":{"position":"org.apache.commons.io.IOUtils:1138","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            return org.apache.commons.io.IOUtils.lineIterator(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"301a664d-2e95-11e6-bf85-4de8f62ba5f5","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (value != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:949","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"301a664e-2e95-11e6-bf85-edd1ea8046bb","method":{"position":"org.apache.commons.io.FilenameUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String getName(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filename == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (filename == null) {\n                                return null;\n                            } \n                            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n                            return filename.substring((index + 1));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:96","type":"CtBinaryOperatorImpl","sourcecode":"csq != null"},"failures":[],"tindex":"301a664f-2e95-11e6-bf85-b15958034372","method":{"position":"org.apache.commons.io.output.ProxyWriter:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq) throws java.io.IOException {\n    if (csq != null) {\n        {\n            try {\n                int int = 0;\n                if (csq != null) {\n                    len = csq.length();\n                } \n                beforeWrite(len);\n                java.io.Writer.append(csq);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"csq":"csq"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"301a6650-2e95-11e6-bf85-b1942080a662","method":{"position":"org.apache.commons.io.IOUtils:1230","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toInputStream(java.lang.String input, java.lang.String encoding) throws java.io.IOException {\n    if (input != null) {\n        {\n            byte[] byte[] = input.getBytes(org.apache.commons.io.Charsets.toCharset(encoding));\n            return new java.io.ByteArrayInputStream(bytes);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"301a8d61-2e95-11e6-bf85-013ac9c7d344","method":{"position":"org.apache.commons.io.FileUtils:1111","type":"CtMethodImpl","sourcecode":"public static long copyFile(java.io.File input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            final java.io.FileInputStream java.io.FileInputStream = new java.io.FileInputStream(input);\n            try {\n                return org.apache.commons.io.IOUtils.copyLarge(fis, output);\n            } finally {\n                fis.close();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2331","type":"CtBinaryOperatorImpl","sourcecode":"n < 0"},"failures":[],"tindex":"301a8d62-2e95-11e6-bf85-f759882996e8","method":{"position":"org.apache.commons.io.input.CharSequenceReader:139","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic long skip(long n) {\n    if (n < 0) {\n        {\n            if (n < 0) {\n                throw new java.lang.IllegalArgumentException((\"Number of characters to skip is less than zero: \" + n));\n            } \n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            int int = ((int)(java.lang.Math.min(java.lang.CharSequence.length(), ((int) + n))));\n            int int = dest - (int);\n            int = dest;\n            return count;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:77","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"301a8d63-2e95-11e6-bf85-3bc2abf107c7","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } \n            return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2824","type":"CtInvocationImpl","sourcecode":"destFile.exists()"},"failures":[],"tindex":"301ab474-2e95-11e6-bf85-0da826f830f3","method":{"position":"org.apache.commons.io.FileUtils:2811","type":"CtMethodImpl","sourcecode":"public static void moveFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (destFile.exists()) {\n        {\n            if (srcFile == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destFile == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if (!(srcFile.exists())) {\n                throw new java.io.FileNotFoundException(((\"Source '\" + srcFile) + \"' does not exist\"));\n            } \n            if (srcFile.isDirectory()) {\n                throw new java.io.IOException(((\"Source '\" + srcFile) + \"' is a directory\"));\n            } \n            if (destFile.exists()) {\n                throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destFile) + \"' already exists\"));\n            } \n            if (destFile.isDirectory()) {\n                throw new java.io.IOException(((\"Destination '\" + destFile) + \"' is a directory\"));\n            } \n            boolean boolean = srcFile.renameTo(destFile);\n            if (!rename) {\n                org.apache.commons.io.FileUtils.copyFile(srcFile, destFile);\n                if (!(srcFile.delete())) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(destFile);\n                    throw new java.io.IOException(((((\"Failed to delete original file '\" + srcFile) + \"' after copy to '\") + destFile) + \"'\"));\n                } \n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"destFile"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl","sourcecode":"!(file.delete())"},"failures":[],"tindex":"301ab475-2e95-11e6-bf85-89ec919f7f36","method":{"position":"org.apache.commons.io.monitor.FileEntry:93","type":"CtMethodImpl","sourcecode":"public boolean refresh(java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(file.exists())) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = boolean;\n                    long long = long;\n                    boolean boolean = boolean;\n                    long long = long;\n                    java.lang.String = file.getName();\n                    boolean = file.exists();\n                    boolean = boolean ? file.isDirectory() : false;\n                    long = boolean ? file.lastModified() : 0;\n                    long = (boolean) && (!(boolean)) ? file.length() : 0;\n                    return ((((boolean) != origExists) || ((long) != origLastModified)) || ((boolean) != origDirectory)) || ((long) != origLength);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:85","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"301cb046-2e95-11e6-bf85-11eb0d7c3cf2","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:117","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.isEmpty()) {\n                return false;\n            } \n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (!(fileFilter.accept(file))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"301cd757-2e95-11e6-bf85-595c2cceda0b","method":{"position":"org.apache.commons.io.FileUtils:2684","type":"CtMethodImpl","sourcecode":"public static long checksumCRC32(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.util.zip.CRC32 java.util.zip.CRC32 = new java.util.zip.CRC32();\n            org.apache.commons.io.FileUtils.checksum(file, crc);\n            return crc.getValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2273","type":"CtUnaryOperatorImpl","sourcecode":"!(file.delete())"},"failures":[],"tindex":"301cd758-2e95-11e6-bf85-49cbcb25a06b","method":{"position":"org.apache.commons.io.filefilter.HiddenFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (!(file.delete())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((file.getParentFile()) != null) {\n                {\n                    if (file.isDirectory()) {\n                        {\n                            return file.isHidden();\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:107","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"301cd759-2e95-11e6-bf85-bf800889cadb","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:95","type":"CtMethodImpl","sourcecode":"public void addObserver(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (observer != null) {\n                java.util.List<org.apache.commons.io.monitor.FileAlterationObserver>.add(observer);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"301cfe6a-2e95-11e6-bf85-8b7ab9964f9e","method":{"position":"org.apache.commons.io.filefilter.AbstractFileFilter:50","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        {\n            return accept(new java.io.File(dir , name));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"301cfe6b-2e95-11e6-bf85-2b7ebe9ea03c","method":{"position":"org.apache.commons.io.IOUtils:1590","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, ((java.lang.String)(null)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:750","type":"CtInvocationImpl","sourcecode":"file1.getCanonicalFile().equals(file2.getCanonicalFile())"},"failures":[],"tindex":"301cfe6c-2e95-11e6-bf85-c348f779740a","method":{"position":"org.apache.commons.io.comparator.ReverseComparator:54","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file2.getCanonicalFile().equals(file2.getCanonicalFile())) {\n        {\n            return java.util.Comparator<java.io.File>.compare(file2, file1);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2","file1":"file2"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"301cfe6d-2e95-11e6-bf85-b5261a90b6c4","method":{"position":"org.apache.commons.io.EndianUtils:297","type":"CtMethodImpl","sourcecode":"public static short readSwappedShort(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            return ((short)((((org.apache.commons.io.EndianUtils.read(input)) & 255) << 0) + (((org.apache.commons.io.EndianUtils.read(input)) & 255) << 8)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1146","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"301d257e-2e95-11e6-bf85-43fa669b89db","method":{"position":"org.apache.commons.io.FilenameUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String getName(java.lang.String filename) {\n    if (filename == null) {\n        {\n            if (filename == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (filename == null) {\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (filename == null) {\n                                return null;\n                            } \n                            int int = org.apache.commons.io.FilenameUtils.indexOfLastSeparator(filename);\n                            return filename.substring((index + 1));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2367","type":"CtInvocationImpl","sourcecode":"directory.exists()"},"failures":[],"tindex":"301d257f-2e95-11e6-bf85-e588e4a8167e","method":{"position":"org.apache.commons.io.FileUtils:519","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (directory.exists()) {\n        {\n            org.apache.commons.io.FileUtils.validateListFilesParameters(directory, fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveFileFilter(fileFilter);\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter = org.apache.commons.io.FileUtils.setUpEffectiveDirFilter(dirFilter);\n            java.util.Collection<java.io.File> java.util.Collection<java.io.File> = new java.util.LinkedList<java.io.File>();\n            org.apache.commons.io.FileUtils.innerListFiles(files, directory, org.apache.commons.io.filefilter.FileFilterUtils.or(effFileFilter, effDirFilter), false);\n            return files;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"301d2580-2e95-11e6-bf85-7f2dd907c19f","method":{"position":"org.apache.commons.io.IOUtils:430","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toBufferedInputStream(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"301d4c91-2e95-11e6-bf85-0fc9f224a0e3","method":{"position":"org.apache.commons.io.IOUtils:1743","type":"CtMethodImpl","sourcecode":"public static int copy(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            long long = org.apache.commons.io.IOUtils.copyLarge(input, output);\n            if (count > (java.lang.Integer.java.lang.Integer.int)) {\n                return -1;\n            } \n            return ((int)(count));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:292","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"301d4c92-2e95-11e6-bf85-9958ca491232","method":{"position":"org.apache.commons.io.filefilter.NotFileFilter:66","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file, java.lang.String name) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.io.filefilter.IOFileFilter.accept(file, name));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:489","type":"CtBinaryOperatorImpl","sourcecode":"basePath == null"},"failures":[],"tindex":"301d4c93-2e95-11e6-bf85-dd0a2eefaaae","method":{"position":"org.apache.commons.io.FilenameUtils:481","type":"CtMethodImpl","sourcecode":"public static java.lang.String concat(java.lang.String basePath, java.lang.String fullFilenameToAdd) {\n    if (basePath == null) {\n        {\n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(fullFilenameToAdd);\n            if (prefix < 0) {\n                return null;\n            } \n            if (prefix > 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            if (basePath == null) {\n                return null;\n            } \n            int int = basePath.length();\n            if (len == 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            char char = basePath.charAt((len - 1));\n            if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\n                return org.apache.commons.io.FilenameUtils.normalize((basePath + fullFilenameToAdd));\n            } else {\n                return org.apache.commons.io.FilenameUtils.normalize(((basePath + '/') + fullFilenameToAdd));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"basePath":"basePath"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:497","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.FilenameUtils.isSeparator(ch)"},"failures":[],"tindex":"301d4c94-2e95-11e6-bf85-1f197903bfa3","method":{"position":"org.apache.commons.io.FilenameUtils:148","type":"CtMethodImpl","sourcecode":"private static boolean isSeparator(char ch) {\n    if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\n        {\n            return (ch == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) || (ch == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"301d73a5-2e95-11e6-bf85-2131a5232022","method":{"position":"org.apache.commons.io.IOUtils:273","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.OutputStream output) {\n    if (null != output) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(output)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:1538","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.delete())"},"failures":[],"tindex":"301d73a6-2e95-11e6-bf85-e3fb7d32d97e","method":{"position":"org.apache.commons.io.FileUtils:476","type":"CtMethodImpl","sourcecode":"private static void innerListFiles(java.util.Collection<java.io.File> files, java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter filter, boolean includeSubDirectories) {\n    if (!(directory.delete())) {\n        {\n            java.io.File[] java.io.File[] = directory.listFiles(((java.io.FileFilter)(filter)));\n            if (found != null) {\n                for (java.io.File java.io.File : found) {\n                    if (file.isDirectory()) {\n                        if (includeSubDirectories) {\n                            files.add(file);\n                        } \n                        org.apache.commons.io.FileUtils.innerListFiles(files, file, filter, includeSubDirectories);\n                    } else {\n                        files.add(file);\n                    }\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"301d73a7-2e95-11e6-bf85-c5d1bb37b904","method":{"position":"org.apache.commons.io.IOUtils:245","type":"CtMethodImpl","sourcecode":"public static void closeQuietly(java.io.InputStream input) {\n    if (null != input) {\n        {\n            org.apache.commons.io.IOUtils.closeQuietly(((java.io.Closeable)(input)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.NotFileFilter:41","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"301d73a8-2e95-11e6-bf85-735ed639e35a","method":{"position":"org.apache.commons.io.FileUtils:1403","type":"CtMethodImpl","sourcecode":"private static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate, java.util.List<java.lang.String> exclusionList) throws java.io.IOException {\n    if (filter == null) {\n        {\n            if (srcDir == null) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n                    if (srcFiles == null) {\n                        throw new java.io.IOException((\"Failed to list contents of \" + srcDir));\n                    } \n                    if (destDir.exists()) {\n                        if ((destDir.isDirectory()) == false) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' exists but is not a directory\"));\n                        } \n                    } else {\n                        if ((!(destDir.mkdirs())) && (!(destDir.isDirectory()))) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' directory cannot be created\"));\n                        } \n                    }\n                    if ((destDir.canWrite()) == false) {\n                        throw new java.io.IOException(((\"Destination '\" + destDir) + \"' cannot be written to\"));\n                    } \n                    for (java.io.File java.io.File : srcFiles) {\n                        java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                        if ((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))) {\n                            if (srcFile.isDirectory()) {\n                                org.apache.commons.io.FileUtils.doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                            } else {\n                                org.apache.commons.io.FileUtils.doCopyFile(srcFile, dstFile, preserveFileDate);\n                            }\n                        } \n                    }\n                    if (preserveFileDate) {\n                        destDir.setLastModified(srcDir.lastModified());\n                    } \n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"301d9ab9-2e95-11e6-bf85-fbd6d17d70c8","method":{"position":"org.apache.commons.io.EndianUtils:465","type":"CtMethodImpl","sourcecode":"public static double readSwappedDouble(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Double.longBitsToDouble(org.apache.commons.io.EndianUtils.readSwappedLong(input));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2531","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"301d9aba-2e95-11e6-bf85-f9e79af19897","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (!(directory.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2513","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"301d9abb-2e95-11e6-bf85-650734006a4d","method":{"position":"org.apache.commons.io.monitor.FileEntry:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.io.monitor.FileEntry newChildInstance(java.io.File file) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry.this , file);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:512","type":"CtBinaryOperatorImpl","sourcecode":"(xmlGuessEnc == null) || (xmlEnc == null)"},"failures":[],"tindex":"301dc1cc-2e95-11e6-bf85-2142c761667f","method":{"position":"org.apache.commons.io.input.XmlStreamReader:579","type":"CtMethodImpl","sourcecode":"java.lang.String calculateHttpEncoding(java.lang.String httpContentType, java.lang.String bomEnc, java.lang.String xmlGuessEnc, java.lang.String xmlEnc, boolean lenient) throws java.io.IOException {\n    if ((httpContentType == null) || (xmlEnc == null)) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (lenient && (xmlEnc != null)) {\n                return xmlEnc;\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(httpContentType);\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(httpContentType);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isAppXml(cTMime);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isTextXml(cTMime);\n            if ((!appXml) && (!textXml)) {\n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if (cTEnc == null) {\n                if (appXml) {\n                    return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n                } else {\n                    return (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n                }\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            return cTEnc;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"xmlEnc":"xmlEnc","xmlGuessEnc":"httpContentType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:118","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.filefilter.AndFileFilter.this.fileFilters.isEmpty()"},"failures":[],"tindex":"301ed33d-2e95-11e6-bf85-774dd5dc7dbf","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:107","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:352","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"301efa4e-2e95-11e6-bf85-43197b298ea7","method":{"position":"org.apache.commons.io.input.Tailer:255","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen, int bufSize) {\n    if (file.exists()) {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , reOpen , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"301efa4f-2e95-11e6-bf85-51fcd14d1460","method":{"position":"org.apache.commons.io.FileUtils:1853","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (file.isDirectory()) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.lineIterator(in, encoding);\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n                throw ex;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:489","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"301efa50-2e95-11e6-bf85-2bce6105aed6","method":{"position":"org.apache.commons.io.IOUtils:1690","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            org.apache.commons.io.IOUtils.writeLines(lines, lineEnding, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.TaggedIOException:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)"},"failures":[],"tindex":"301f2161-2e95-11e6-bf85-a3e9bd31523b","method":{"position":"org.apache.commons.io.TaggedIOException:64","type":"CtMethodImpl","sourcecode":"public static boolean isTaggedWith(java.lang.Throwable throwable, java.lang.Object tag) {\n    if (org.apache.commons.io.TaggedIOException.isTaggedWith(throwable, tag)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((tag != null) && (throwable instanceof org.apache.commons.io.TaggedIOException)) && (tag.equals(((org.apache.commons.io.TaggedIOException)(throwable)).java.io.Serializable));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable","tag":"tag"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.EOFException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"301f2162-2e95-11e6-bf85-b58177bc91d0","method":{"position":"org.apache.commons.io.input.SwappedDataInputStream:116","type":"CtMethodImpl","sourcecode":"public void readFully(byte[] data) throws java.io.EOFException, java.io.IOException {\n    if (data != null) {\n        throw new java.io.EOFException();\n    } else {\n        {\n            readFully(data, 0, data.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:253","type":"CtBinaryOperatorImpl","sourcecode":"listener != null"},"failures":[],"tindex":"301f2163-2e95-11e6-bf85-c3c076bb41f6","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:252","type":"CtMethodImpl","sourcecode":"public void removeListener(final org.apache.commons.io.monitor.FileAlterationListener listener) {\n    if (listener != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (listener != null) {\n                while (java.util.List<org.apache.commons.io.monitor.FileAlterationListener>.remove(listener)) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"listener":"listener"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:289","type":"CtBinaryOperatorImpl","sourcecode":"((path.length()) > 0) && ((path.charAt(0)) != '\"')"},"failures":[],"tindex":"301f2164-2e95-11e6-bf85-4f56c85daab8","method":{"position":"org.apache.commons.io.FilenameUtils:579","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToSystem(java.lang.String path) {\n    if (((path.length()) > 0) && ((path.charAt(0)) != '\"')) {\n        {\n            if (path == null) {\n                return null;\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return org.apache.commons.io.FilenameUtils.separatorsToWindows(path);\n            } else {\n                return org.apache.commons.io.FilenameUtils.separatorsToUnix(path);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
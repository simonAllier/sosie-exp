{"failureDictionary":{},"transformations":[{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"a36c78cb-2e82-11e6-ad9a-efec0ccf40ab","method":{"position":"org.apache.commons.io.EndianUtils:452","type":"CtMethodImpl","sourcecode":"public static void writeSwappedDouble(java.io.OutputStream output, double value) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedLong(output, java.lang.Double.doubleToLongBits(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CountingInputStream:71","type":"CtBinaryOperatorImpl","sourcecode":"n != (-1)"},"failures":[],"tindex":"a36d3c1c-2e82-11e6-ad9a-e7f2e162d299","method":{"position":"org.apache.commons.io.output.ProxyOutputStream:153","type":"CtMethodImpl","sourcecode":"protected void afterWrite(int n) throws java.io.IOException {\n    if (n != (-1)) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:493","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"a36d3c1d-2e82-11e6-ad9a-591c348f2974","method":{"position":"org.apache.commons.io.output.XmlStreamWriter:153","type":"CtMethodImpl","sourcecode":"private void detectEncoding(char[] cbuf, int off, int len) throws java.io.IOException {\n    if (off == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = len;\n            java.lang.StringBuffer java.lang.StringBuffer = java.io.StringWriter.getBuffer();\n            if (((xmlProlog.length()) + len) > (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                size = (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int) - (xmlProlog.length());\n            } \n            java.io.StringWriter.write(cbuf, off, size);\n            if ((xmlProlog.length()) >= 5) {\n                if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n                    int int = xmlProlog.indexOf(\"?>\");\n                    if (xmlPrologEnd > 0) {\n                        java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.java.util.regex.Pattern.matcher(xmlProlog.substring(0, xmlPrologEnd));\n                        if (m.find()) {\n                            java.lang.String = m.group(1).toUpperCase();\n                            java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1));\n                        } else {\n                            java.lang.String = java.lang.String;\n                        }\n                    } else {\n                        if ((xmlProlog.length()) >= (org.apache.commons.io.output.XmlStreamWriter.org.apache.commons.io.output.XmlStreamWriter.int)) {\n                            java.lang.String = java.lang.String;\n                        } \n                    }\n                } else {\n                    java.lang.String = java.lang.String;\n                }\n                if ((java.lang.String) != null) {\n                    java.io.StringWriter = null;\n                    java.io.Writer = new java.io.OutputStreamWriter(java.io.OutputStream , java.lang.String);\n                    java.io.Writer.write(xmlProlog.toString());\n                    if (len > size) {\n                        java.io.Writer.write(cbuf, (off + size), (len - size));\n                    } \n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a36d8a3e-2e82-11e6-ad9a-adadbc033f96","method":{"position":"org.apache.commons.io.IOUtils:1905","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            org.apache.commons.io.IOUtils.copy(in, output);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"a36db14f-2e82-11e6-ad9a-0b26ae08969a","method":{"position":"org.apache.commons.io.EndianUtils:117","type":"CtMethodImpl","sourcecode":"public static void writeSwappedShort(byte[] data, int offset, short value) {\n    if (data != null) {\n        {\n            data[(offset + 0)] = ((byte)((value >> 0) & 255));\n            data[(offset + 1)] = ((byte)((value >> 8) & 255));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2513","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"a36db150-2e82-11e6-ad9a-0bd2040c11e4","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:116","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (fileFilter.accept(file)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:237","type":"CtUnaryOperatorImpl","sourcecode":"!(lockDir.canWrite())"},"failures":[],"tindex":"a36dd861-2e82-11e6-ad9a-09a006e7a2e7","method":{"position":"org.apache.commons.io.output.LockableFileWriter:232","type":"CtMethodImpl","sourcecode":"private void testLockDir(java.io.File lockDir) throws java.io.IOException {\n    if (!(lockDir.canWrite())) {\n        {\n            if (!(lockDir.exists())) {\n                throw new java.io.IOException((\"Could not find lockDir: \" + (lockDir.getAbsolutePath())));\n            } \n            if (!(lockDir.canWrite())) {\n                throw new java.io.IOException((\"Could not write to lockDir: \" + (lockDir.getAbsolutePath())));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lockDir":"lockDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"a36dff72-2e82-11e6-ad9a-87bd979c718e","method":{"position":"org.apache.commons.io.input.CharSequenceReader:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] array, int offset, int length) {\n    if (length < 0) {\n        {\n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            if (array == null) {\n                throw new java.lang.NullPointerException(\"Character array is missing\");\n            } \n            if (((length < 0) || (offset < 0)) || ((offset + length) > (array.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (array.int)) + \", offset=\") + offset) + \", length=\") + length));\n            } \n            int int = 0;\n            for (int int = 0 ; i < length ; i++) {\n                int int = read();\n                if (c == (-1)) {\n                    return count;\n                } \n                array[(offset + i)] = ((char)(c));\n                count++;\n            }\n            return count;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:431","type":"CtVariableReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"a36dff73-2e82-11e6-ad9a-e3c0da5fa0be","method":{"position":"org.apache.commons.io.input.XmlStreamReader:579","type":"CtMethodImpl","sourcecode":"java.lang.String calculateHttpEncoding(java.lang.String httpContentType, java.lang.String bomEnc, java.lang.String xmlGuessEnc, java.lang.String xmlEnc, boolean lenient) throws java.io.IOException {\n    if (lenient) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (lenient && (xmlEnc != null)) {\n                return xmlEnc;\n            } \n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(httpContentType);\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(httpContentType);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isAppXml(cTMime);\n            boolean boolean = org.apache.commons.io.input.XmlStreamReader.isTextXml(cTMime);\n            if ((!appXml) && (!textXml)) {\n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if (cTEnc == null) {\n                if (appXml) {\n                    return calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n                } else {\n                    return (java.lang.String) == null ? org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String : java.lang.String;\n                }\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            if ((cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) || (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                if (bomEnc != null) {\n                    java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                    throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n                } \n                return cTEnc;\n            } \n            if (cTEnc.equals(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String)) {\n                if ((bomEnc != null) && (bomEnc.startsWith(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String))) {\n                    return bomEnc;\n                } \n                java.lang.String java.lang.String = java.text.MessageFormat.format(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.lang.String, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n                throw new org.apache.commons.io.input.XmlStreamReaderException(msg , cTMime , cTEnc , bomEnc , xmlGuessEnc , xmlEnc);\n            } \n            return cTEnc;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a36e74a4-2e82-11e6-ad9a-d3207c1fbb08","method":{"position":"org.apache.commons.io.IOUtils:1884","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:923","type":"CtBinaryOperatorImpl","sourcecode":"url != null"},"failures":[],"tindex":"a36e74a5-2e82-11e6-ad9a-05628a79d8fb","method":{"position":"org.apache.commons.io.IOUtils:878","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url) throws java.io.IOException {\n    if (url != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(url, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2480","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"a36e9bb6-2e82-11e6-ad9a-9d98921c65b3","method":{"position":"org.apache.commons.io.FileUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(long size) {\n    if (size < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (size < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(size));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"a36e9bb7-2e82-11e6-ad9a-0976062c01df","method":{"position":"org.apache.commons.io.output.NullWriter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq, int start, int end) {\n    if (start == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.output.NullWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"start"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2444","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a36ec2c8-2e82-11e6-ad9a-056830b529bc","method":{"position":"org.apache.commons.io.FileCleaner:73","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void track(java.io.File file, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if (!(file.exists())) {\n        {\n            org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaner.org.apache.commons.io.FileCleaningTracker.track(file, marker, deleteStrategy);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"a36ee9d9-2e82-11e6-ad9a-0305790dbaf7","method":{"position":"org.apache.commons.io.FileUtils:476","type":"CtMethodImpl","sourcecode":"private static void innerListFiles(java.util.Collection<java.io.File> files, java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter filter, boolean includeSubDirectories) {\n    if (filter == null) {\n        {\n            java.io.File[] java.io.File[] = directory.listFiles(((java.io.FileFilter)(filter)));\n            if (found != null) {\n                for (java.io.File java.io.File : found) {\n                    if (file.isDirectory()) {\n                        if (includeSubDirectories) {\n                            files.add(file);\n                        } \n                        org.apache.commons.io.FileUtils.innerListFiles(files, file, filter, includeSubDirectories);\n                    } else {\n                        files.add(file);\n                    }\n                }\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl","sourcecode":"n == (-1)"},"failures":[],"tindex":"a36ee9da-2e82-11e6-ad9a-ddf80dcb43d4","method":{"position":"org.apache.commons.io.output.ProxyWriter:242","type":"CtMethodImpl","sourcecode":"protected void beforeWrite(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"a36f10eb-2e82-11e6-ad9a-a72cb219594d","method":{"position":"org.apache.commons.io.IOUtils:2095","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2666","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a36f37fc-2e82-11e6-ad9a-01b1c0a20e18","method":{"position":"org.apache.commons.io.FileUtils:325","type":"CtMethodImpl","sourcecode":"public static java.io.FileOutputStream openOutputStream(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.openOutputStream(file, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2824","type":"CtInvocationImpl","sourcecode":"destFile.exists()"},"failures":[],"tindex":"a36f37fd-2e82-11e6-ad9a-3d249a6ae115","method":{"position":"org.apache.commons.io.FileUtils:2811","type":"CtMethodImpl","sourcecode":"public static void moveFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if ((srcFile.exists()) == false) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (destFile.exists()) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (srcFile == null) {\n                        throw new java.lang.NullPointerException(\"Source must not be null\");\n                    } \n                    if (destFile == null) {\n                        throw new java.lang.NullPointerException(\"Destination must not be null\");\n                    } \n                    if (!(srcFile.exists())) {\n                        throw new java.io.FileNotFoundException(((\"Source '\" + srcFile) + \"' does not exist\"));\n                    } \n                    if (srcFile.isDirectory()) {\n                        throw new java.io.IOException(((\"Source '\" + srcFile) + \"' is a directory\"));\n                    } \n                    if (destFile.exists()) {\n                        throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destFile) + \"' already exists\"));\n                    } \n                    if (destFile.isDirectory()) {\n                        throw new java.io.IOException(((\"Destination '\" + destFile) + \"' is a directory\"));\n                    } \n                    boolean boolean = srcFile.renameTo(destFile);\n                    if (!rename) {\n                        org.apache.commons.io.FileUtils.copyFile(srcFile, destFile);\n                        if (!(srcFile.delete())) {\n                            org.apache.commons.io.FileUtils.deleteQuietly(destFile);\n                            throw new java.io.IOException(((((\"Failed to delete original file '\" + srcFile) + \"' after copy to '\") + destFile) + \"'\"));\n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destFile":"destFile"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"a36f5f0e-2e82-11e6-ad9a-979f6606d4f7","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:390","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter2 == null) || (filter2 == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.AndFileFilter(filter1 , filter2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter2","filter2":"filter2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"a36f861f-2e82-11e6-ad9a-d732fa605307","method":{"position":"org.apache.commons.io.FileUtils:2185","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, java.lang.String lineEnding) throws java.io.IOException {\n    if (encoding != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, lineEnding, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"a36f8620-2e82-11e6-ad9a-2f9fdbab7e4b","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            if (reader == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    long long = reader.getFilePointer();\n                    long long = pos;\n                    int int;\n                    boolean boolean = false;\n                    while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                        for (int int = 0 ; i < num ; i++) {\n                            byte byte = byte[][i];\n                            switch (ch) {\n                                case '\\n' :\n                                    seenCR = false;\n                                    org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                    sb.setLength(0);\n                                    rePos = (pos + i) + 1;\n                                    break;\n                                case '\\r' :\n                                    if (seenCR) {\n                                        sb.append('\\r');\n                                    } \n                                    seenCR = true;\n                                    break;\n                                default :\n                                    if (seenCR) {\n                                        seenCR = false;\n                                        org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                        sb.setLength(0);\n                                        rePos = (pos + i) + 1;\n                                    } \n                                    sb.append(((char)(ch)));\n                            }\n                        }\n                        pos = reader.getFilePointer();\n                    }\n                    reader.seek(rePos);\n                    return rePos;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"a36fad31-2e82-11e6-ad9a-23361e640026","method":{"position":"org.apache.commons.io.FileUtils:1961","type":"CtMethodImpl","sourcecode":"public static void writeStringToFile(java.io.File file, java.lang.String data) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.writeStringToFile(file, data, java.nio.charset.Charset.defaultCharset(), false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"a36fad32-2e82-11e6-ad9a-7944dcab3fe2","method":{"position":"org.apache.commons.io.IOUtils:948","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(byte[] input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            return new java.lang.String(input , org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"a36fd443-2e82-11e6-ad9a-83731c08b4f3","method":{"position":"org.apache.commons.io.FileUtils:290","type":"CtMethodImpl","sourcecode":"public static java.io.FileInputStream openInputStream(java.io.File file) throws java.io.IOException {\n    if ((file.getParentFile()) != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canRead()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be read\"));\n                } \n            } else {\n                throw new java.io.FileNotFoundException(((\"File '\" + file) + \"' does not exist\"));\n            }\n            return new java.io.FileInputStream(file);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:489","type":"CtBinaryOperatorImpl","sourcecode":"basePath == null"},"failures":[],"tindex":"a36fd444-2e82-11e6-ad9a-8dfda00777e0","method":{"position":"org.apache.commons.io.FilenameUtils:481","type":"CtMethodImpl","sourcecode":"public static java.lang.String concat(java.lang.String basePath, java.lang.String fullFilenameToAdd) {\n    if (basePath == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = org.apache.commons.io.FilenameUtils.getPrefixLength(fullFilenameToAdd);\n            if (prefix < 0) {\n                return null;\n            } \n            if (prefix > 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            if (basePath == null) {\n                return null;\n            } \n            int int = basePath.length();\n            if (len == 0) {\n                return org.apache.commons.io.FilenameUtils.normalize(fullFilenameToAdd);\n            } \n            char char = basePath.charAt((len - 1));\n            if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\n                return org.apache.commons.io.FilenameUtils.normalize((basePath + fullFilenameToAdd));\n            } else {\n                return org.apache.commons.io.FilenameUtils.normalize(((basePath + '/') + fullFilenameToAdd));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"basePath":"basePath"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1073","type":"CtBinaryOperatorImpl","sourcecode":"(srcFile.exists()) == false"},"failures":[],"tindex":"a36ffb55-2e82-11e6-ad9a-09df79d9b073","method":{"position":"org.apache.commons.io.FileUtils:2811","type":"CtMethodImpl","sourcecode":"public static void moveFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if ((srcFile.exists()) == false) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (destFile.exists()) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (srcFile == null) {\n                        throw new java.lang.NullPointerException(\"Source must not be null\");\n                    } \n                    if (destFile == null) {\n                        throw new java.lang.NullPointerException(\"Destination must not be null\");\n                    } \n                    if (!(srcFile.exists())) {\n                        throw new java.io.FileNotFoundException(((\"Source '\" + srcFile) + \"' does not exist\"));\n                    } \n                    if (srcFile.isDirectory()) {\n                        throw new java.io.IOException(((\"Source '\" + srcFile) + \"' is a directory\"));\n                    } \n                    if (destFile.exists()) {\n                        throw new org.apache.commons.io.FileExistsException(((\"Destination '\" + destFile) + \"' already exists\"));\n                    } \n                    if (destFile.isDirectory()) {\n                        throw new java.io.IOException(((\"Destination '\" + destFile) + \"' is a directory\"));\n                    } \n                    boolean boolean = srcFile.renameTo(destFile);\n                    if (!rename) {\n                        org.apache.commons.io.FileUtils.copyFile(srcFile, destFile);\n                        if (!(srcFile.delete())) {\n                            org.apache.commons.io.FileUtils.deleteQuietly(destFile);\n                            throw new java.io.IOException(((((\"Failed to delete original file '\" + srcFile) + \"' after copy to '\") + destFile) + \"'\"));\n                        } \n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"srcFile"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:627","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"a36ffb56-2e82-11e6-ad9a-b1f3893788b0","method":{"position":"org.apache.commons.io.output.ProxyWriter:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int len) throws java.io.IOException {\n    if (st == 0) {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(str, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"st"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.CharSequenceInputStream:114","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"a3702267-2e82-11e6-ad9a-fbdb210405fe","method":{"position":"org.apache.commons.io.input.ReaderInputStream:260","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            return read(b, 0, b.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:223","type":"CtBinaryOperatorImpl","sourcecode":"b == null"},"failures":[],"tindex":"a3702268-2e82-11e6-ad9a-e91993b0a89d","method":{"position":"org.apache.commons.io.input.CharSequenceInputStream:160","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(byte[] b) throws java.io.IOException {\n    if (b == null) {\n        {\n            return read(b, 0, b.int);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2313","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(directory))"},"failures":[],"tindex":"a3702269-2e82-11e6-ad9a-1170caaadc27","method":{"position":"org.apache.commons.io.FileUtils:682","type":"CtMethodImpl","sourcecode":"public static java.util.Collection<java.io.File> listFiles(java.io.File directory, java.lang.String[] extensions, boolean recursive) {\n    if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n        {\n            org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter;\n            if (extensions == null) {\n                filter = org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n            } else {\n                java.lang.String[] java.lang.String[] = org.apache.commons.io.FileUtils.toSuffixes(extensions);\n                filter = new org.apache.commons.io.filefilter.SuffixFileFilter(suffixes);\n            }\n            return org.apache.commons.io.FileUtils.listFiles(directory, filter, (recursive ? org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.TrueFileFilter.org.apache.commons.io.filefilter.IOFileFilter : org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.FalseFileFilter.org.apache.commons.io.filefilter.IOFileFilter));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1127","type":"CtBinaryOperatorImpl","sourcecode":"caseSensitivity == null"},"failures":[],"tindex":"a370497a-2e82-11e6-ad9a-5d7716d0e958","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:330","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String suffix, org.apache.commons.io.IOCase caseSensitivity) {\n    if (caseSensitivity == null) {\n        {\n            return new org.apache.commons.io.filefilter.SuffixFileFilter(suffix , caseSensitivity);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"caseSensitivity":"caseSensitivity"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.Tailer:349","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"a370497b-2e82-11e6-ad9a-b9c1a72ee0df","method":{"position":"org.apache.commons.io.input.Tailer:448","type":"CtMethodImpl","sourcecode":"private long readLines(java.io.RandomAccessFile reader) throws java.io.IOException {\n    if (reader == null) {\n        {\n            if (reader == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    long long = reader.getFilePointer();\n                    long long = pos;\n                    int int;\n                    boolean boolean = false;\n                    while ((boolean) && ((num = reader.read(byte[])) != (-1))) {\n                        for (int int = 0 ; i < num ; i++) {\n                            byte byte = byte[][i];\n                            switch (ch) {\n                                case '\\n' :\n                                    seenCR = false;\n                                    org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                    sb.setLength(0);\n                                    rePos = (pos + i) + 1;\n                                    break;\n                                case '\\r' :\n                                    if (seenCR) {\n                                        sb.append('\\r');\n                                    } \n                                    seenCR = true;\n                                    break;\n                                default :\n                                    if (seenCR) {\n                                        seenCR = false;\n                                        org.apache.commons.io.input.TailerListener.handle(sb.toString());\n                                        sb.setLength(0);\n                                        rePos = (pos + i) + 1;\n                                    } \n                                    sb.append(((char)(ch)));\n                            }\n                        }\n                        pos = reader.getFilePointer();\n                    }\n                    reader.seek(rePos);\n                    return rePos;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"a370708c-2e82-11e6-ad9a-ad01247ffd7a","method":{"position":"org.apache.commons.io.IOUtils:1788","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output, byte[] buffer) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            long long = 0;\n            int int = 0;\n            while ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) != (n = input.read(buffer))) {\n                output.write(buffer, 0, n);\n                count += n;\n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"a370708d-2e82-11e6-ad9a-c341b94e3bab","method":{"position":"org.apache.commons.io.FileCleaningTracker:76","type":"CtMethodImpl","sourcecode":"public void track(java.io.File file, java.lang.Object marker) {\n    if (marker == null) {\n        {\n            track(file, marker, ((org.apache.commons.io.FileDeleteStrategy)(null)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"marker"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:544","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"a370979e-2e82-11e6-ad9a-b1ffb0fe9552","method":{"position":"org.apache.commons.io.FileUtils:191","type":"CtMethodImpl","sourcecode":"public static java.io.File getFile(java.io.File directory, java.lang.String... names) {\n    if (!(directory.isDirectory())) {\n        {\n            if (directory == null) {\n                throw new java.lang.NullPointerException(\"directorydirectory must not be null\");\n            } \n            if (names == null) {\n                throw new java.lang.NullPointerException(\"names must not be null\");\n            } \n            java.io.File java.io.File = directory;\n            for (java.lang.String java.lang.String : names) {\n                file = new java.io.File(file , name);\n            }\n            return file;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2444","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a370979f-2e82-11e6-ad9a-83803eb3c323","method":{"position":"org.apache.commons.io.input.Tailer:255","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen, int bufSize) {\n    if (!(file.exists())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.input.Tailer org.apache.commons.io.input.Tailer = new org.apache.commons.io.input.Tailer(file , listener , delayMillis , end , reOpen , bufSize);\n            java.lang.Thread java.lang.Thread = new java.lang.Thread(tailer);\n            thread.setDaemon(true);\n            thread.start();\n            return tailer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:75","type":"CtBinaryOperatorImpl","sourcecode":"(filter1 == null) || (filter2 == null)"},"failures":[],"tindex":"a37097a0-2e82-11e6-ad9a-39066aa29e55","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:405","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter filter1, org.apache.commons.io.filefilter.IOFileFilter filter2) {\n    if ((filter2 == null) || (filter1 == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.OrFileFilter(filter1 , filter2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter1":"filter2","filter2":"filter1"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"a37097a1-2e82-11e6-ad9a-738f81cc748d","method":{"position":"org.apache.commons.io.input.Tailer:287","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener, long delayMillis, boolean end, boolean reOpen) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, delayMillis, end, reOpen, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1412","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"a370beb2-2e82-11e6-ad9a-bbdeb80c6cbb","method":{"position":"org.apache.commons.io.IOUtils:1411","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.CharSequence data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                org.apache.commons.io.IOUtils.write(data.toString(), output);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"a370beb3-2e82-11e6-ad9a-158c5399fe7b","method":{"position":"org.apache.commons.io.FilenameUtils:566","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToWindows(java.lang.String path) {\n    if (path == null) {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a370beb4-2e82-11e6-ad9a-d5b35c6fd6a5","method":{"position":"org.apache.commons.io.FileUtils:1818","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.FileUtils.readLines(file, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.SwappedDataInputStream:142","type":"CtBinaryOperatorImpl","sourcecode":"(-1) == count"},"failures":[],"tindex":"a370e5c5-2e82-11e6-ad9a-c53c16dd0978","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:219","type":"CtMethodImpl","sourcecode":"protected void checkThreshold(int count) throws java.io.IOException {\n    if ((-1) == count) {\n        {\n            if ((!(boolean)) && (((long) + count) > (int))) {\n                boolean = true;\n                thresholdReached();\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"a370e5c6-2e82-11e6-ad9a-055358650a43","method":{"position":"org.apache.commons.io.EndianUtils:183","type":"CtMethodImpl","sourcecode":"public static long readSwappedUnsignedInteger(byte[] data, int offset) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            long long = ((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16);\n            long long = (data[(offset + 3)]) & 255;\n            return (high << 24) + (4294967295L & low);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:413","type":"CtInvocationImpl","sourcecode":"entry.isDirectory()"},"failures":[],"tindex":"a370e5c7-2e82-11e6-ad9a-e39b713cd0a0","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:411","type":"CtMethodImpl","sourcecode":"private void doDelete(org.apache.commons.io.monitor.FileEntry entry) {\n    if (entry.isDirectory()) {\n        {\n            for (org.apache.commons.io.monitor.FileAlterationListener org.apache.commons.io.monitor.FileAlterationListener : java.util.List<org.apache.commons.io.monitor.FileAlterationListener>) {\n                if (entry.isDirectory()) {\n                    listener.onDirectoryDelete(entry.getFile());\n                } else {\n                    listener.onFileDelete(entry.getFile());\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:218","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"a370e5c8-2e82-11e6-ad9a-dfb2d9fcf5c9","method":{"position":"org.apache.commons.io.FileUtils:2135","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines, boolean append) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null, append);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl","sourcecode":"n == (-1)"},"failures":[],"tindex":"a3710cd9-2e82-11e6-ad9a-bb8e84f5c3ee","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.SizeFileFilter:71","type":"CtBinaryOperatorImpl","sourcecode":"size < 0"},"failures":[],"tindex":"a3710cda-2e82-11e6-ad9a-99820edbc2f4","method":{"position":"org.apache.commons.io.FileUtils:425","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteCountToDisplaySize(long size) {\n    if (size < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (size < 0) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger.valueOf(size));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileSystemUtils:380","type":"CtBinaryOperatorImpl","sourcecode":"(path.length()) == 0"},"failures":[],"tindex":"a3710cdb-2e82-11e6-ad9a-01b394bfa393","method":{"position":"org.apache.commons.io.FileCleaningTracker:120","type":"CtMethodImpl","sourcecode":"public void track(java.lang.String path, java.lang.Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy) {\n    if ((path.length()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (path == null) {\n                throw new java.lang.NullPointerException(\"The path must not be null\");\n            } \n            addTracker(path, marker, deleteStrategy);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a37133ec-2e82-11e6-ad9a-cdec58269098","method":{"position":"org.apache.commons.io.EndianUtils:439","type":"CtMethodImpl","sourcecode":"public static float readSwappedFloat(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return java.lang.Float.intBitsToFloat(org.apache.commons.io.EndianUtils.readSwappedInteger(input));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1009","type":"CtBinaryOperatorImpl","sourcecode":"(destDir.exists()) && ((destDir.isDirectory()) == false)"},"failures":[],"tindex":"a37133ed-2e82-11e6-ad9a-8749fb9d30dd","method":{"position":"org.apache.commons.io.FileUtils:1403","type":"CtMethodImpl","sourcecode":"private static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate, java.util.List<java.lang.String> exclusionList) throws java.io.IOException {\n    if (destDir.getCanonicalPath().startsWith(destDir.getCanonicalPath())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                {\n                    java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n                    if (srcFiles == null) {\n                        throw new java.io.IOException((\"Failed to list contents of \" + srcDir));\n                    } \n                    if (destDir.exists()) {\n                        if ((destDir.isDirectory()) == false) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' exists but is not a directory\"));\n                        } \n                    } else {\n                        if ((!(destDir.mkdirs())) && (!(destDir.isDirectory()))) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' directory cannot be created\"));\n                        } \n                    }\n                    if ((destDir.canWrite()) == false) {\n                        throw new java.io.IOException(((\"Destination '\" + destDir) + \"' cannot be written to\"));\n                    } \n                    for (java.io.File java.io.File : srcFiles) {\n                        java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                        if ((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))) {\n                            if (srcFile.isDirectory()) {\n                                org.apache.commons.io.FileUtils.doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                            } else {\n                                org.apache.commons.io.FileUtils.doCopyFile(srcFile, dstFile, preserveFileDate);\n                            }\n                        } \n                    }\n                    if (preserveFileDate) {\n                        destDir.setLastModified(srcDir.lastModified());\n                    } \n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"destDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:580","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"a37133ee-2e82-11e6-ad9a-4d7b04196a5f","method":{"position":"org.apache.commons.io.FilenameUtils:553","type":"CtMethodImpl","sourcecode":"public static java.lang.String separatorsToUnix(java.lang.String path) {\n    if (path == null) {\n        {\n            if ((path == null) || ((path.indexOf(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) == (-1))) {\n                return path;\n            } \n            return path.replace(org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:85","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"a3721e4f-2e82-11e6-ad9a-83db23cdf8b7","method":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:222","type":"CtMethodImpl","sourcecode":"private static java.io.Writer initWriter(java.io.File file, java.lang.Object encoding, boolean append) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File is missing\");\n            } \n            if (encoding == null) {\n                throw new java.lang.NullPointerException(\"Encoding is missing\");\n            } \n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file , append);\n                if (encoding instanceof java.nio.charset.Charset) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.Charset)(encoding)));\n                } else if (encoding instanceof java.nio.charset.CharsetEncoder) {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.nio.charset.CharsetEncoder)(encoding)));\n                } else {\n                    writer = new java.io.OutputStreamWriter(stream , ((java.lang.String)(encoding)));\n                }\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a3724560-2e82-11e6-ad9a-dfb686983837","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:129","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(final java.io.File file, final java.lang.String name) {\n    if (!(file.exists())) {\n        {\n            for (org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.IOFileFilter : java.util.List<org.apache.commons.io.filefilter.IOFileFilter>) {\n                if (fileFilter.accept(file, name)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2599","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a3726c71-2e82-11e6-ad9a-0b0623b52404","method":{"position":"org.apache.commons.io.DirectoryWalker:434","type":"CtMethodImpl","sourcecode":"protected boolean handleIsCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(file.exists())) {\n        {\n            return false;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a3726c72-2e82-11e6-ad9a-1b156ca27367","method":{"position":"org.apache.commons.io.IOUtils:2354","type":"CtMethodImpl","sourcecode":"public static void skipFully(java.io.InputStream input, long toSkip) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Bytes to skip must not be negative: \" + toSkip));\n            } \n            long long = org.apache.commons.io.IOUtils.skip(input, toSkip);\n            if (skipped != toSkip) {\n                throw new java.io.EOFException((((\"Bytes to skip: \" + toSkip) + \" actual: \") + skipped));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"a3729383-2e82-11e6-ad9a-27e6e74d0cfa","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String value) {\n    if (value != null) {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"a3729384-2e82-11e6-ad9a-99920ba60673","method":{"position":"org.apache.commons.io.FileUtils:2662","type":"CtMethodImpl","sourcecode":"public static boolean isFileOlder(java.io.File file, long timeMillis) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified file\");\n            } \n            if (!(file.exists())) {\n                return false;\n            } \n            return (file.lastModified()) < timeMillis;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"a3729385-2e82-11e6-ad9a-5f9fdc5f8903","method":{"position":"org.apache.commons.io.EndianUtils:389","type":"CtMethodImpl","sourcecode":"public static void writeSwappedLong(java.io.OutputStream output, long value) throws java.io.IOException {\n    if (null != output) {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n            output.write(((byte)((value >> 32) & 255)));\n            output.write(((byte)((value >> 40) & 255)));\n            output.write(((byte)((value >> 48) & 255)));\n            output.write(((byte)((value >> 56) & 255)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.EmptyFileFilter:77","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"a372ba96-2e82-11e6-ad9a-ffb3a2ef14cc","method":{"position":"org.apache.commons.io.DirectoryWalker:533","type":"CtMethodImpl","sourcecode":"protected void handleFile(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:333","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isDigit(c)"},"failures":[],"tindex":"a372ba97-2e82-11e6-ad9a-bfdc1cf320ea","method":{"position":"org.apache.commons.io.output.ProxyWriter:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(char c) throws java.io.IOException {\n    if (java.lang.Character.isDigit(c)) {\n        {\n            try {\n                beforeWrite(1);\n                java.io.Writer.append(c);\n                afterWrite(1);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl","sourcecode":"(dir != null) && (new java.io.File(dir , name).isDirectory())"},"failures":[],"tindex":"a372e1a8-2e82-11e6-ad9a-75de21f32193","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.io.FilenameFilter) != null) {\n                return java.io.FilenameFilter.accept(dir, name);\n            } else {\n                return super.accept(dir, name);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"a372e1a9-2e82-11e6-ad9a-95aaa8e40db9","method":{"position":"org.apache.commons.io.FilenameUtils:1277","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatch(java.lang.String filename, java.lang.String wildcardMatcher, org.apache.commons.io.IOCase caseSensitivity) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((filename == null) && (wildcardMatcher == null)) {\n                return true;\n            } \n            if ((filename == null) || (wildcardMatcher == null)) {\n                return false;\n            } \n            if (caseSensitivity == null) {\n                caseSensitivity = org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase;\n            } \n            java.lang.String[] java.lang.String[] = org.apache.commons.io.FilenameUtils.splitOnTokens(wildcardMatcher);\n            boolean boolean = false;\n            int int = 0;\n            int int = 0;\n            java.util.Stack<int[]> java.util.Stack<int[]> = new java.util.Stack<int[]>();\n            do {\n                if ((backtrack.size()) > 0) {\n                    int[] int[] = backtrack.pop();\n                    wcsIdx = array[0];\n                    textIdx = array[1];\n                    anyChars = true;\n                } \n                while (wcsIdx < (wcs.int)) {\n                    if (wcs[wcsIdx].equals(\"?\")) {\n                        textIdx++;\n                        if (textIdx > (filename.length())) {\n                            break;\n                        } \n                        anyChars = false;\n                    } else if (wcs[wcsIdx].equals(\"*\")) {\n                        anyChars = true;\n                        if (wcsIdx == ((wcs.int) - 1)) {\n                            textIdx = filename.length();\n                        } \n                    } else {\n                        if (anyChars) {\n                            textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                            if (textIdx == (-1)) {\n                                break;\n                            } \n                            int int = caseSensitivity.checkIndexOf(filename, (textIdx + 1), wcs[wcsIdx]);\n                            if (repeat >= 0) {\n                                backtrack.push(new int[]{ wcsIdx , repeat });\n                            } \n                        } else {\n                            if (!(caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx]))) {\n                                break;\n                            } \n                        }\n                        textIdx += wcs[wcsIdx].length();\n                        anyChars = false;\n                    }\n                    wcsIdx++;\n                }\n                if ((wcsIdx == (wcs.int)) && (textIdx == (filename.length()))) {\n                    return true;\n                } \n            } while ((backtrack.size()) > 0 );\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"a37308ba-2e82-11e6-ad9a-55cb8c705cf5","method":{"position":"org.apache.commons.io.EndianUtils:168","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(byte[] data, int offset) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1286","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"a3732fcb-2e82-11e6-ad9a-bf723dfe58a7","method":{"position":"org.apache.commons.io.EndianUtils:168","type":"CtMethodImpl","sourcecode":"public static int readSwappedInteger(byte[] data, int offset) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (data != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (((((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8)) + (((data[(offset + 2)]) & 255) << 16)) + (((data[(offset + 3)]) & 255) << 24);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"a3732fcc-2e82-11e6-ad9a-9be9a2ab98c8","method":{"position":"org.apache.commons.io.IOUtils:2157","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1708","type":"CtBinaryOperatorImpl","sourcecode":"lines == null"},"failures":[],"tindex":"a37356dd-2e82-11e6-ad9a-73cf383137c5","method":{"position":"org.apache.commons.io.IOUtils:1706","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.Writer writer) throws java.io.IOException {\n    if (lines == null) {\n        {\n            if (lines == null) {\n                return ;\n            } \n            if (lineEnding == null) {\n                lineEnding = org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.java.lang.String;\n            } \n            for (java.lang.Object java.lang.Object : lines) {\n                if (line != null) {\n                    writer.write(line.toString());\n                } \n                writer.write(lineEnding);\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lines":"lines"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"a37356de-2e82-11e6-ad9a-6fa812f2c200","method":{"position":"org.apache.commons.io.EndianUtils:142","type":"CtMethodImpl","sourcecode":"public static int readSwappedUnsignedShort(byte[] data, int offset) {\n    if (data != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2752","type":"CtInvocationImpl","sourcecode":"destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())"},"failures":[],"tindex":"a37356df-2e82-11e6-ad9a-2d5b764d281f","method":{"position":"org.apache.commons.io.FileUtils:1403","type":"CtMethodImpl","sourcecode":"private static void doCopyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter, boolean preserveFileDate, java.util.List<java.lang.String> exclusionList) throws java.io.IOException {\n    if (destDir.getCanonicalPath().startsWith(destDir.getCanonicalPath())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                {\n                    java.io.File[] java.io.File[] = filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);\n                    if (srcFiles == null) {\n                        throw new java.io.IOException((\"Failed to list contents of \" + srcDir));\n                    } \n                    if (destDir.exists()) {\n                        if ((destDir.isDirectory()) == false) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' exists but is not a directory\"));\n                        } \n                    } else {\n                        if ((!(destDir.mkdirs())) && (!(destDir.isDirectory()))) {\n                            throw new java.io.IOException(((\"Destination '\" + destDir) + \"' directory cannot be created\"));\n                        } \n                    }\n                    if ((destDir.canWrite()) == false) {\n                        throw new java.io.IOException(((\"Destination '\" + destDir) + \"' cannot be written to\"));\n                    } \n                    for (java.io.File java.io.File : srcFiles) {\n                        java.io.File java.io.File = new java.io.File(destDir , srcFile.getName());\n                        if ((exclusionList == null) || (!(exclusionList.contains(srcFile.getCanonicalPath())))) {\n                            if (srcFile.isDirectory()) {\n                                org.apache.commons.io.FileUtils.doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                            } else {\n                                org.apache.commons.io.FileUtils.doCopyFile(srcFile, dstFile, preserveFileDate);\n                            }\n                        } \n                    }\n                    if (preserveFileDate) {\n                        destDir.setLastModified(srcDir.lastModified());\n                    } \n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"destDir","destDir":"destDir"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:634","type":"CtBinaryOperatorImpl","sourcecode":"len == 1"},"failures":[],"tindex":"a373a500-2e82-11e6-ad9a-470e9d5696fc","method":{"position":"org.apache.commons.io.output.ProxyWriter:154","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int len) throws java.io.IOException {\n    if (st == 1) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(chr, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"st"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a373a501-2e82-11e6-ad9a-670dc43d5541","method":{"position":"org.apache.commons.io.CopyUtils:241","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a373a502-2e82-11e6-ad9a-3b7b0367fb36","method":{"position":"org.apache.commons.io.filefilter.TrueFileFilter:67","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File dir, java.lang.String name) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:109","type":"CtBinaryOperatorImpl","sourcecode":"(dir != null) && (new java.io.File(dir , name).isDirectory())"},"failures":[],"tindex":"a373cc13-2e82-11e6-ad9a-d3cf8443c83f","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File dir, java.lang.String name) {\n    if ((dir != null) && (new java.io.File(dir , name).isDirectory())) {\n        {\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name","dir":"dir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a373cc14-2e82-11e6-ad9a-99305b607031","method":{"position":"org.apache.commons.io.monitor.FileEntry:189","type":"CtMethodImpl","sourcecode":"public void setName(java.lang.String name) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.java.lang.String = name;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a373cc15-2e82-11e6-ad9a-3f2a5654498c","method":{"position":"org.apache.commons.io.IOUtils:502","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, int size) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (size < 0) {\n                throw new java.lang.IllegalArgumentException((\"Size must be equal or greater than zero: \" + size));\n            } \n            if (size == 0) {\n                return new byte[0];\n            } \n            byte[] byte[] = new byte[size];\n            int int = 0;\n            int int;\n            while ((offset < size) && ((readed = input.read(data, offset, (size - offset))) != (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))) {\n                offset += readed;\n            }\n            if (offset != size) {\n                throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n            } \n            return data;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"a3741a36-2e82-11e6-ad9a-553f3eb600a1","method":{"position":"org.apache.commons.io.IOUtils:2095","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.Reader input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.AndFileFilter:61","type":"CtBinaryOperatorImpl","sourcecode":"fileFilters == null"},"failures":[],"tindex":"a3741a37-2e82-11e6-ad9a-e38200393c02","method":{"position":"org.apache.commons.io.filefilter.OrFileFilter:107","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters == null) {\n        {\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.OrFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"a3744148-2e82-11e6-ad9a-8756132e579d","method":{"position":"org.apache.commons.io.IOUtils:722","type":"CtMethodImpl","sourcecode":"public static char[] toCharArray(java.io.InputStream is, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            return org.apache.commons.io.IOUtils.toCharArray(is, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:130","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"a3744149-2e82-11e6-ad9a-37cf3cfc1fec","method":{"position":"org.apache.commons.io.input.Tailer:311","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.input.Tailer create(java.io.File file, org.apache.commons.io.input.TailerListener listener) {\n    if (file.isDirectory()) {\n        {\n            return org.apache.commons.io.input.Tailer.create(file, listener, org.apache.commons.io.input.Tailer.org.apache.commons.io.input.Tailer.int, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"a374414a-2e82-11e6-ad9a-bb5a4c100d97","method":{"position":"org.apache.commons.io.filefilter.FileFileFilter:58","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return file.isFile();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:443","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"a374685b-2e82-11e6-ad9a-655b8748a5e4","method":{"position":"org.apache.commons.io.FileUtils:2920","type":"CtMethodImpl","sourcecode":"public static boolean isSymlink(java.io.File file) throws java.io.IOException {\n    if (!(file.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file == null) {\n                throw new java.lang.NullPointerException(\"File must not be null\");\n            } \n            if (org.apache.commons.io.FilenameUtils.isSystemWindows()) {\n                return false;\n            } \n            java.io.File java.io.File = null;\n            if ((file.getParent()) == null) {\n                fileInCanonicalDir = file;\n            } else {\n                java.io.File java.io.File = file.getParentFile().getCanonicalFile();\n                fileInCanonicalDir = new java.io.File(canonicalDir , file.getName());\n            }\n            if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a374685c-2e82-11e6-ad9a-636b24143605","method":{"position":"org.apache.commons.io.IOUtils:1101","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        {\n            return new org.apache.commons.io.LineIterator(new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2663","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"a3748f6d-2e82-11e6-ad9a-a343fe80bffa","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:75","type":"CtMethodImpl","sourcecode":"public void onFileChange(final java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.LineIterator:68","type":"CtBinaryOperatorImpl","sourcecode":"reader == null"},"failures":[],"tindex":"a3748f6e-2e82-11e6-ad9a-4b75ff61a12b","method":{"position":"org.apache.commons.io.IOUtils:443","type":"CtMethodImpl","sourcecode":"public static java.io.BufferedReader toBufferedReader(java.io.Reader reader) {\n    if (reader == null) {\n        {\n            return reader instanceof java.io.BufferedReader ? ((java.io.BufferedReader)(reader)) : new java.io.BufferedReader(reader);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"reader":"reader"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"a3748f6f-2e82-11e6-ad9a-4df8e83bf0db","method":{"position":"org.apache.commons.io.EndianUtils:477","type":"CtMethodImpl","sourcecode":"private static int read(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            int int = input.read();\n            if ((-1) == value) {\n                throw new java.io.EOFException(\"Unexpected EOF reached\");\n            } \n            return value;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:497","type":"CtInvocationImpl","sourcecode":"org.apache.commons.io.FilenameUtils.isSeparator(ch)"},"failures":[],"tindex":"a374b680-2e82-11e6-ad9a-c15e0492b55b","method":{"position":"org.apache.commons.io.FilenameUtils:148","type":"CtMethodImpl","sourcecode":"private static boolean isSeparator(char ch) {\n    if (org.apache.commons.io.FilenameUtils.isSeparator(ch)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (ch == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char)) || (ch == (org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"a374b681-2e82-11e6-ad9a-ad499b26db9c","method":{"position":"org.apache.commons.io.IOUtils:801","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"a374dd92-2e82-11e6-ad9a-2f5ec25d66f8","method":{"position":"org.apache.commons.io.FileSystemUtils:379","type":"CtMethodImpl","sourcecode":"long freeSpaceUnix(java.lang.String path, boolean kb, boolean posix, long timeout) throws java.io.IOException {\n    if (path == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((path.length()) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Path must not be empty\");\n            } \n            java.lang.String java.lang.String = \"-\";\n            if (kb) {\n                flags += \"k\";\n            } \n            if (posix) {\n                flags += \"P\";\n            } \n            java.lang.String[] java.lang.String[] = (flags.length()) > 1 ? new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , flags , path } : new java.lang.String[]{ org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String , path };\n            java.util.List<java.lang.String> java.util.List<java.lang.String> = performCommand(cmdAttribs, 3, timeout);\n            if ((lines.size()) < 2) {\n                throw new java.io.IOException(((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return info as expected \") + \"for path '\") + path) + \"'- response was \") + lines));\n            } \n            java.lang.String java.lang.String = lines.get(1);\n            java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(line2 , \" \");\n            if ((tok.countTokens()) < 4) {\n                if (((tok.countTokens()) == 1) && ((lines.size()) >= 3)) {\n                    java.lang.String java.lang.String = lines.get(2);\n                    tok = new java.util.StringTokenizer(line3 , \" \");\n                } else {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return data as expected \") + \"for path '\") + path) + \"'- check path is valid\"));\n                }\n            } else {\n                tok.nextToken();\n            }\n            tok.nextToken();\n            tok.nextToken();\n            java.lang.String java.lang.String = tok.nextToken();\n            return parseBytes(freeSpace, path);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:925","type":"CtBinaryOperatorImpl","sourcecode":"end == 0"},"failures":[],"tindex":"a37504a3-2e82-11e6-ad9a-e7331ae00724","method":{"position":"org.apache.commons.io.output.LockableFileWriter:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int end) throws java.io.IOException {\n    if (st == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.Writer.write(str, st, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"end":"st"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:291","type":"CtInvocationImpl","sourcecode":"file.exists()"},"failures":[],"tindex":"a37504a4-2e82-11e6-ad9a-5d4b8f958009","method":{"position":"org.apache.commons.io.FileUtils:2595","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, long timeMillis) {\n    if (file.exists()) {\n        {\n            if (file == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified file\");\n            } \n            if (!(file.exists())) {\n                return false;\n            } \n            return (file.lastModified()) > timeMillis;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:544","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.isDirectory())"},"failures":[],"tindex":"a37504a5-2e82-11e6-ad9a-b9400d65b5af","method":{"position":"org.apache.commons.io.DirectoryWalker:547","type":"CtMethodImpl","sourcecode":"protected void handleRestricted(java.io.File directory, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (!(directory.isDirectory())) {\n        {\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"a3752bb6-2e82-11e6-ad9a-99c03a2bd226","method":{"position":"org.apache.commons.io.filefilter.TrueFileFilter:56","type":"CtMethodImpl","sourcecode":"public boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        {\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.ThreadMonitor:84","type":"CtBinaryOperatorImpl","sourcecode":"thread != null"},"failures":[],"tindex":"a3752bb7-2e82-11e6-ad9a-25f76ee172a2","method":{"position":"org.apache.commons.io.ThreadMonitor:83","type":"CtMethodImpl","sourcecode":"public static void stop(java.lang.Thread thread) {\n    if (thread != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (thread != null) {\n                thread.interrupt();\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"thread":"thread"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"a3752bb8-2e82-11e6-ad9a-8dfbbb56937e","method":{"position":"org.apache.commons.io.output.NullWriter:105","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr, int st, int end) {\n    if (chr != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.NameFileFilter:69","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a3752bb9-2e82-11e6-ad9a-139f624f1422","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:354","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String name, org.apache.commons.io.IOCase caseSensitivity) {\n    if (name == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.filefilter.NameFileFilter(name , caseSensitivity);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:223","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"a37552ca-2e82-11e6-ad9a-372ff902e6b4","method":{"position":"org.apache.commons.io.monitor.FileEntry:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.io.monitor.FileEntry newChildInstance(java.io.File file) {\n    if (file == null) {\n        {\n            return new org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry.this , file);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2928","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParent()) == null"},"failures":[],"tindex":"a37552cb-2e82-11e6-ad9a-237e64089bf7","method":{"position":"org.apache.commons.io.FileUtils:2268","type":"CtMethodImpl","sourcecode":"public static void forceDelete(java.io.File file) throws java.io.IOException {\n    if ((file.getParent()) == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectory(file);\n            } else {\n                boolean boolean = file.exists();\n                if (!(file.delete())) {\n                    if (!filePresent) {\n                        throw new java.io.FileNotFoundException((\"File does not exist: \" + file));\n                    } \n                    java.lang.String java.lang.String = \"Unable to delete file: \" + file;\n                    throw new java.io.IOException(message);\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"a37552cc-2e82-11e6-ad9a-9f8e8d824031","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:515","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter filter) {\n    if (filter == null) {\n        {\n            return new org.apache.commons.io.filefilter.DelegateFileFilter(filter);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:656","type":"CtBinaryOperatorImpl","sourcecode":"httpContentType != null"},"failures":[],"tindex":"a37579dd-2e82-11e6-ad9a-3d99224eb4d9","method":{"position":"org.apache.commons.io.input.XmlStreamReader:678","type":"CtMethodImpl","sourcecode":"static java.lang.String getContentTypeEncoding(java.lang.String httpContentType) {\n    if (httpContentType != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = null;\n            if (httpContentType != null) {\n                int int = httpContentType.indexOf(\";\");\n                if (i > (-1)) {\n                    java.lang.String java.lang.String = httpContentType.substring((i + 1));\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(postMime);\n                    encoding = m.find() ? m.group(1) : null;\n                    encoding = encoding != null ? encoding.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale) : null;\n                } \n            } \n            return encoding;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"httpContentType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:111","type":"CtBinaryOperatorImpl","sourcecode":"(charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))"},"failures":[],"tindex":"a37579de-2e82-11e6-ad9a-6f41f5449833","method":{"position":"org.apache.commons.io.Charsets:66","type":"CtMethodImpl","sourcecode":"public static java.nio.charset.Charset toCharset(java.nio.charset.Charset charset) {\n    if ((charset == (java.nio.charset.Charset.forName(\"UTF-16BE\"))) || (charset == (java.nio.charset.Charset.forName(\"UTF-16LE\")))) {\n        {\n            return charset == null ? java.nio.charset.Charset.defaultCharset() : charset;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charset":"charset"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
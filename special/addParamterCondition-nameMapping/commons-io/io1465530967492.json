{"failureDictionary":{},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2577","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"42c55a65-2ebf-11e6-885f-5f1dbb906a7d","method":{"position":"org.apache.commons.io.FileUtils:2576","type":"CtMethodImpl","sourcecode":"public static boolean isFileNewer(java.io.File file, java.util.Date date) {\n    if (date == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"No specified date\");\n            } \n            return org.apache.commons.io.FileUtils.isFileNewer(file, date.getTime());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:923","type":"CtBinaryOperatorImpl","sourcecode":"url != null"},"failures":[],"tindex":"42c5f6a6-2ebf-11e6-885f-6785c442b9c0","method":{"position":"org.apache.commons.io.IOUtils:893","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (url != null) {\n        {\n            java.io.InputStream java.io.InputStream = url.openStream();\n            try {\n                return org.apache.commons.io.IOUtils.toString(inputStream, encoding);\n            } finally {\n                inputStream.close();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:186","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42c61db7-2ebf-11e6-885f-a16ee0c039a7","method":{"position":"org.apache.commons.io.FileUtils:351","type":"CtMethodImpl","sourcecode":"public static java.io.FileOutputStream openOutputStream(java.io.File file, boolean append) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if (file.exists()) {\n                if (file.isDirectory()) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' exists but is a directory\"));\n                } \n                if ((file.canWrite()) == false) {\n                    throw new java.io.IOException(((\"File '\" + file) + \"' cannot be written to\"));\n                } \n            } else {\n                java.io.File java.io.File = file.getParentFile();\n                if (parent != null) {\n                    if ((!(parent.mkdirs())) && (!(parent.isDirectory()))) {\n                        throw new java.io.IOException(((\"Directory '\" + parent) + \"' could not be created\"));\n                    } \n                } \n            }\n            return new java.io.FileOutputStream(file , append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"42c644c8-2ebf-11e6-885f-25e52c908877","method":{"position":"org.apache.commons.io.CopyUtils:259","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , encoding);\n            org.apache.commons.io.CopyUtils.copy(in, output);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileSystemUtils:259","type":"CtBinaryOperatorImpl","sourcecode":"path == null"},"failures":[],"tindex":"42c644c9-2ebf-11e6-885f-4704e01a050a","method":{"position":"org.apache.commons.io.FileSystemUtils:435","type":"CtMethodImpl","sourcecode":"long parseBytes(java.lang.String freeSpace, java.lang.String path) throws java.io.IOException {\n    if (path == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                long long = java.lang.Long.parseLong(freeSpace);\n                if (bytes < 0) {\n                    throw new java.io.IOException((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not find free space in response \") + \"for path '\") + path) + \"'- check path is valid\"));\n                } \n                return bytes;\n            } catch (java.lang.NumberFormatException ex) {\n                throw new org.apache.commons.io.IOExceptionWithCause((((((\"Command line '\" + (org.apache.commons.io.FileSystemUtils.org.apache.commons.io.FileSystemUtils.java.lang.String)) + \"' did not return numeric data as expected \") + \"for path '\") + path) + \"'- check path is valid\") , ex);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"path":"path"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"42c66bda-2ebf-11e6-885f-bd009e8d7c23","method":{"position":"org.apache.commons.io.CopyUtils:303","type":"CtMethodImpl","sourcecode":"public static void copy(java.lang.String input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != output) {\n        {\n            java.io.StringReader java.io.StringReader = new java.io.StringReader(input);\n            java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter(output);\n            org.apache.commons.io.CopyUtils.copy(in, out);\n            out.flush();\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:802","type":"CtInvocationImpl","sourcecode":"file1.getCanonicalFile().equals(file2.getCanonicalFile())"},"failures":[],"tindex":"42c692eb-2ebf-11e6-885f-1bc7be7197e0","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:62","type":"CtMethodImpl","sourcecode":"public int compare(java.io.File file1, java.io.File file2) {\n    if (file1.getCanonicalFile().equals(file1.getCanonicalFile())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (getType(file1)) - (getType(file2));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file1","file1":"file1"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"42c6b9fc-2ebf-11e6-885f-efbfb41e851c","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:83","type":"CtMethodImpl","sourcecode":"public void onFileDelete(final java.io.File file) {\n    if (file == null) {\n        {\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"42c6b9fd-2ebf-11e6-885f-61ee4d455b51","method":{"position":"org.apache.commons.io.IOUtils:1767","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.copyLarge(input, output, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42c6e10e-2ebf-11e6-885f-2df2a8a64166","method":{"position":"org.apache.commons.io.IOUtils:776","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.output.StringBuilderWriter org.apache.commons.io.output.StringBuilderWriter = new org.apache.commons.io.output.StringBuilderWriter();\n            org.apache.commons.io.IOUtils.copy(input, sw, encoding);\n            return sw.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"42c6e10f-2ebf-11e6-885f-c1348cb4d006","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if ((file2.isDirectory()) || (file2.isDirectory())) {\n        {\n            if (charsetName == null) {\n                {\n                    if ((charsetName == null) || ((charsetName.length()) == 0)) {\n                        {\n                            if ((file2.isDirectory()) || (file2.isDirectory())) {\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    boolean boolean = file1.exists();\n                                    if (file1Exists != (file2.exists())) {\n                                        return false;\n                                    } \n                                    if (!file1Exists) {\n                                        return true;\n                                    } \n                                    if ((file1.isDirectory()) || (file2.isDirectory())) {\n                                        throw new java.io.IOException(\"Can't compare directories, only files\");\n                                    } \n                                    if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                                        return true;\n                                    } \n                                    java.io.Reader java.io.Reader = null;\n                                    java.io.Reader java.io.Reader = null;\n                                    try {\n                                        if (charsetName == null) {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                                        } else {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                                        }\n                                        return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n                                    } finally {\n                                        org.apache.commons.io.IOUtils.closeQuietly(input1);\n                                        org.apache.commons.io.IOUtils.closeQuietly(input2);\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2","file1":"file2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:270","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"42c72f30-2ebf-11e6-885f-c5322b85a5ef","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:180","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.io.File> filterList(org.apache.commons.io.filefilter.IOFileFilter filter, java.io.File... files) {\n    if (filter == null) {\n        {\n            java.io.File[] java.io.File[] = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, files);\n            return java.util.Arrays.asList(acceptedFiles);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42c75641-2ebf-11e6-885f-13dbeb99b5b9","method":{"position":"org.apache.commons.io.IOUtils:482","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, long size) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (size > (java.lang.Integer.java.lang.Integer.int)) {\n                throw new java.lang.IllegalArgumentException((\"Size cannot be greater than Integer max value: \" + size));\n            } \n            return org.apache.commons.io.IOUtils.toByteArray(input, ((int)(size)));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"42c75642-2ebf-11e6-885f-4754c658ff4e","method":{"position":"org.apache.commons.io.output.BrokenOutputStream:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            throw java.io.IOException;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:353","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42c77d53-2ebf-11e6-885f-0f182e740fdf","method":{"position":"org.apache.commons.io.FileUtils:2117","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.lang.String encoding, java.util.Collection<?> lines) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.writeLines(file, encoding, lines, null, false);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileCleaningTracker:91","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"42c77d54-2ebf-11e6-885f-15b1aad2bff8","method":{"position":"org.apache.commons.io.filefilter.MagicNumberFileFilter:238","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((file != null) && (file.isFile())) && (file.canRead())) {\n                java.io.RandomAccessFile java.io.RandomAccessFile = null;\n                try {\n                    byte[] byte[] = new byte[org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[].int];\n                    randomAccessFile = new java.io.RandomAccessFile(file , \"r\");\n                    randomAccessFile.seek(long);\n                    int int = randomAccessFile.read(fileBytes);\n                    if (read != (byte[].int)) {\n                        return false;\n                    } \n                    return java.util.Arrays.equals(org.apache.commons.io.filefilter.MagicNumberFileFilter.this.byte[], fileBytes);\n                } catch (java.io.IOException ioe) {\n                } finally {\n                    org.apache.commons.io.IOUtils.closeQuietly(randomAccessFile);\n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2747","type":"CtInvocationImpl","sourcecode":"destDir.exists()"},"failures":[],"tindex":"42c7a465-2ebf-11e6-885f-8132ec17100e","method":{"position":"org.apache.commons.io.FileUtils:2777","type":"CtMethodImpl","sourcecode":"public static void moveDirectoryToDirectory(java.io.File src, java.io.File destDir, boolean createDestDir) throws java.io.IOException {\n    if (src.exists()) {\n        {\n            if (src == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination directory must not be null\");\n            } \n            if ((!(destDir.exists())) && createDestDir) {\n                destDir.mkdirs();\n            } \n            if (!(destDir.exists())) {\n                throw new java.io.FileNotFoundException(((((\"Destination directory '\" + destDir) + \"' does not exist [createDestDir=\") + createDestDir) + \"]\"));\n            } \n            if (!(destDir.isDirectory())) {\n                throw new java.io.IOException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.moveDirectory(src, new java.io.File(destDir , src.getName()));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"src"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:1425","type":"CtInvocationImpl","sourcecode":"srcFile.isDirectory()"},"failures":[],"tindex":"42c7cb76-2ebf-11e6-885f-7d031a27bc58","method":{"position":"org.apache.commons.io.FileUtils:1037","type":"CtMethodImpl","sourcecode":"public static void copyFile(java.io.File srcFile, java.io.File destFile) throws java.io.IOException {\n    if (srcFile.isDirectory()) {\n        {\n            org.apache.commons.io.FileUtils.copyFile(srcFile, destFile, true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcFile":"srcFile"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1412","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"42c7f287-2ebf-11e6-885f-0d009ffe5b00","method":{"position":"org.apache.commons.io.FileUtils:2062","type":"CtMethodImpl","sourcecode":"public static void write(java.io.File file, java.lang.CharSequence data, java.lang.String encoding, boolean append) throws java.io.IOException {\n    if (data != null) {\n        {\n            org.apache.commons.io.FileUtils.write(file, data, org.apache.commons.io.Charsets.toCharset(encoding), append);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1278","type":"CtBinaryOperatorImpl","sourcecode":"(filename == null) && (wildcardMatcher == null)"},"failures":[],"tindex":"42c81998-2ebf-11e6-885f-11b36bedaad3","method":{"position":"org.apache.commons.io.FilenameUtils:1259","type":"CtMethodImpl","sourcecode":"public static boolean wildcardMatchOnSystem(java.lang.String filename, java.lang.String wildcardMatcher) {\n    if ((filename == null) && (filename == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.wildcardMatch(filename, wildcardMatcher, org.apache.commons.io.IOCase.org.apache.commons.io.IOCase.org.apache.commons.io.IOCase);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename","wildcardMatcher":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"42c81999-2ebf-11e6-885f-e1459fc04a3e","method":{"position":"org.apache.commons.io.input.ReversedLinesFileReader:329","type":"CtMethodImpl","sourcecode":"private int getNewLineMatchByteCount(byte[] data, int i) {\n    if (data != null) {\n        {\n            for (byte[] byte[] : byte[][]) {\n                boolean boolean = true;\n                for (int int = (newLineSequence.int) - 1 ; j >= 0 ; j--) {\n                    int int = (i + j) - ((newLineSequence.int) - 1);\n                    match &= (k >= 0) && ((data[k]) == (newLineSequence[j]));\n                }\n                if (match) {\n                    return newLineSequence.int;\n                } \n            }\n            return 0;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"42c8199a-2ebf-11e6-885f-4f73dc1c8ee0","method":{"position":"org.apache.commons.io.IOUtils:1368","type":"CtMethodImpl","sourcecode":"public static void write(char[] data, java.io.OutputStream output, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(new java.lang.String(data).getBytes(org.apache.commons.io.Charsets.toCharset(encoding)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2741","type":"CtUnaryOperatorImpl","sourcecode":"!(srcDir.exists())"},"failures":[],"tindex":"42c840ab-2ebf-11e6-885f-2bf7a528ca7b","method":{"position":"org.apache.commons.io.FileUtils:1308","type":"CtMethodImpl","sourcecode":"public static void copyDirectory(java.io.File srcDir, java.io.File destDir, java.io.FileFilter filter) throws java.io.IOException {\n    if (!(destDir.exists())) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, destDir, filter, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcDir":"destDir"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:623","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"42c840ac-2ebf-11e6-885f-a3eec7dc8b69","method":{"position":"org.apache.commons.io.FilenameUtils:1194","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.util.Collection<java.lang.String> extensions) {\n    if ((extensions == null) || (extensions.isEmpty())) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        return false;\n                    } \n                    if ((extensions == null) || (extensions.isEmpty())) {\n                        return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n                    } \n                    java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n                    for (java.lang.String java.lang.String : extensions) {\n                        if (fileExt.equals(extension)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"42c867bd-2ebf-11e6-885f-75a54b52155b","method":{"position":"org.apache.commons.io.output.TeeOutputStream:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            super.write(b);\n            org.apache.commons.io.output.TeeOutputStream.this.java.io.OutputStream.write(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2411","type":"CtUnaryOperatorImpl","sourcecode":"!(file.exists())"},"failures":[],"tindex":"42c867be-2ebf-11e6-885f-b7ae41ab2142","method":{"position":"org.apache.commons.io.FileUtils:2165","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (!(file.exists())) {\n                {\n                    org.apache.commons.io.FileUtils.writeLines(file, null, lines, null, append);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:353","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42c867bf-2ebf-11e6-885f-7d60fedde39b","method":{"position":"org.apache.commons.io.filefilter.DelegateFileFilter:73","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.io.FileFilter) != null) {\n                return java.io.FileFilter.accept(file);\n            } else {\n                return super.accept(file);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:96","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"42c88ed0-2ebf-11e6-885f-b923a8662494","method":{"position":"org.apache.commons.io.monitor.FileAlterationListenerAdaptor:35","type":"CtMethodImpl","sourcecode":"public void onStart(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42c88ed1-2ebf-11e6-885f-01e037241f05","method":{"position":"org.apache.commons.io.IOUtils:985","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.InputStream input, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader(input , org.apache.commons.io.Charsets.toCharset(encoding));\n            return org.apache.commons.io.IOUtils.readLines(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.FileWriterWithEncoding:223","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"42c88ed2-2ebf-11e6-885f-3dc9581d3ad1","method":{"position":"org.apache.commons.io.output.LockableFileWriter:268","type":"CtMethodImpl","sourcecode":"private java.io.Writer initWriter(java.io.File file, java.nio.charset.Charset encoding, boolean append) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            boolean boolean = file.exists();\n            java.io.OutputStream java.io.OutputStream = null;\n            java.io.Writer java.io.Writer = null;\n            try {\n                stream = new java.io.FileOutputStream(file.getAbsolutePath() , append);\n                writer = new java.io.OutputStreamWriter(stream , org.apache.commons.io.Charsets.toCharset(encoding));\n            } catch (java.io.IOException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                org.apache.commons.io.FileUtils.deleteQuietly(java.io.File);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            } catch (java.lang.RuntimeException ex) {\n                org.apache.commons.io.IOUtils.closeQuietly(writer);\n                org.apache.commons.io.IOUtils.closeQuietly(stream);\n                org.apache.commons.io.FileUtils.deleteQuietly(java.io.File);\n                if (fileExistedAlready == false) {\n                    org.apache.commons.io.FileUtils.deleteQuietly(file);\n                } \n                throw ex;\n            }\n            return writer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2858","type":"CtBinaryOperatorImpl","sourcecode":"destDir == null"},"failures":[],"tindex":"42c92b13-2ebf-11e6-885f-e1a3a15a3838","method":{"position":"org.apache.commons.io.FileUtils:1189","type":"CtMethodImpl","sourcecode":"public static void copyDirectoryToDirectory(java.io.File srcDir, java.io.File destDir) throws java.io.IOException {\n    if (srcDir == null) {\n        {\n            if (srcDir == null) {\n                throw new java.lang.NullPointerException(\"Source must not be null\");\n            } \n            if ((srcDir.exists()) && ((srcDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Source '\" + destDir) + \"' is not a directory\"));\n            } \n            if (destDir == null) {\n                throw new java.lang.NullPointerException(\"Destination must not be null\");\n            } \n            if ((destDir.exists()) && ((destDir.isDirectory()) == false)) {\n                throw new java.lang.IllegalArgumentException(((\"Destination '\" + destDir) + \"' is not a directory\"));\n            } \n            org.apache.commons.io.FileUtils.copyDirectory(srcDir, new java.io.File(destDir , srcDir.getName()), true);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"destDir":"srcDir"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:147","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"42c95224-2ebf-11e6-885f-237973f548f3","method":{"position":"org.apache.commons.io.IOCase:164","type":"CtMethodImpl","sourcecode":"public boolean checkEquals(java.lang.String str1, java.lang.String str2) {\n    if ((str1 == null) || (str2 == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.equals(str2) : str1.equalsIgnoreCase(str2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"str1","str2":"str2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2308","type":"CtUnaryOperatorImpl","sourcecode":"!(directory.exists())"},"failures":[],"tindex":"42c95225-2ebf-11e6-885f-77e87fee5973","method":{"position":"org.apache.commons.io.FileUtils:1529","type":"CtMethodImpl","sourcecode":"public static void deleteDirectory(java.io.File directory) throws java.io.IOException {\n    if (!(directory.exists())) {\n        {\n            if (!(directory.exists())) {\n                return ;\n            } \n            if (!(org.apache.commons.io.FileUtils.isSymlink(directory))) {\n                org.apache.commons.io.FileUtils.cleanDirectory(directory);\n            } \n            if (!(directory.delete())) {\n                java.lang.String java.lang.String = (\"Unable to delete directory \" + directory) + \".\";\n                throw new java.io.IOException(message);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"42c97936-2ebf-11e6-885f-b737758ca985","method":{"position":"org.apache.commons.io.input.ProxyReader:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        {\n            try {\n                beforeRead((chr != null ? chr.int : 0));\n                int int = java.io.Reader.read(chr);\n                afterRead(n);\n                return n;\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n                return -1;\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:242","type":"CtBinaryOperatorImpl","sourcecode":"listener != null"},"failures":[],"tindex":"42c97937-2ebf-11e6-885f-2d91233cc1e1","method":{"position":"org.apache.commons.io.monitor.FileAlterationObserver:241","type":"CtMethodImpl","sourcecode":"public void addListener(final org.apache.commons.io.monitor.FileAlterationListener listener) {\n    if (listener != null) {\n        {\n            if (listener != null) {\n                java.util.List<org.apache.commons.io.monitor.FileAlterationListener>.add(listener);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"listener":"listener"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:923","type":"CtBinaryOperatorImpl","sourcecode":"url != null"},"failures":[],"tindex":"42c9a048-2ebf-11e6-885f-013375c4ef12","method":{"position":"org.apache.commons.io.IOUtils:878","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.net.URL url) throws java.io.IOException {\n    if (url != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(url, java.nio.charset.Charset.defaultCharset());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"url":"url"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.AutoCloseInputStream:76","type":"CtBinaryOperatorImpl","sourcecode":"n == (-1)"},"failures":[],"tindex":"42c9a049-2ebf-11e6-885f-0385beb95686","method":{"position":"org.apache.commons.io.input.ProxyInputStream:220","type":"CtMethodImpl","sourcecode":"protected void afterRead(int n) throws java.io.IOException {\n    if (n == (-1)) {\n        throw new java.io.IOException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"n":"n"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:707","type":"CtBinaryOperatorImpl","sourcecode":"guessedEnc != null"},"failures":[],"tindex":"42c9a04a-2ebf-11e6-885f-c1fc0fd8df2d","method":{"position":"org.apache.commons.io.input.XmlStreamReader:704","type":"CtMethodImpl","sourcecode":"private static java.lang.String getXmlProlog(java.io.InputStream is, java.lang.String guessedEnc) throws java.io.IOException {\n    if (guessedEnc != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String java.lang.String = null;\n            if (guessedEnc != null) {\n                byte[] byte[] = new byte[org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int];\n                is.mark(org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int);\n                int int = 0;\n                int int = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int;\n                int int = is.read(bytes, offset, max);\n                int int = -1;\n                java.lang.String java.lang.String = null;\n                while (((c != (-1)) && (firstGT == (-1))) && (offset < (org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.int))) {\n                    offset += c;\n                    max -= c;\n                    c = is.read(bytes, offset, max);\n                    xmlProlog = new java.lang.String(bytes , 0 , offset , guessedEnc);\n                    firstGT = xmlProlog.indexOf('>');\n                }\n                if (firstGT == (-1)) {\n                    if (c == (-1)) {\n                        throw new java.io.IOException(\"Unexpected end of XML stream\");\n                    } else {\n                        throw new java.io.IOException(((\"XML prolog or ROOT element not found on first \" + offset) + \" bytes\"));\n                    }\n                } \n                int int = offset;\n                if (bytesRead > 0) {\n                    is.reset();\n                    java.io.BufferedReader java.io.BufferedReader = new java.io.BufferedReader(new java.io.StringReader(xmlProlog.substring(0, (firstGT + 1))));\n                    java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer();\n                    java.lang.String java.lang.String = bReader.readLine();\n                    while (line != null) {\n                        prolog.append(line);\n                        line = bReader.readLine();\n                    }\n                    java.util.regex.Matcher java.util.regex.Matcher = org.apache.commons.io.input.XmlStreamReader.org.apache.commons.io.input.XmlStreamReader.java.util.regex.Pattern.matcher(prolog);\n                    if (m.find()) {\n                        encoding = m.group(1).toUpperCase();\n                        encoding = encoding.substring(1, ((encoding.length()) - 1));\n                    } \n                } \n            } \n            return encoding;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"guessedEnc":"guessedEnc"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42c9c75b-2ebf-11e6-885f-75df5af782b3","method":{"position":"org.apache.commons.io.IOUtils:430","type":"CtMethodImpl","sourcecode":"public static java.io.InputStream toBufferedInputStream(java.io.InputStream input) throws java.io.IOException {\n    if (null != input) {\n        {\n            return org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(input);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:186","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42c9ee6c-2ebf-11e6-885f-31f50144987f","method":{"position":"org.apache.commons.io.FileUtils:1805","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (file.isDirectory()) {\n                        {\n                            return org.apache.commons.io.FileUtils.readLines(file, org.apache.commons.io.Charsets.toCharset(encoding));\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:352","type":"CtBinaryOperatorImpl","sourcecode":"size == 0"},"failures":[],"tindex":"42c9ee6d-2ebf-11e6-885f-3d993154c865","method":{"position":"org.apache.commons.io.IOUtils:502","type":"CtMethodImpl","sourcecode":"public static byte[] toByteArray(java.io.InputStream input, int size) throws java.io.IOException {\n    if (size == 0) {\n        {\n            if (size < 0) {\n                throw new java.lang.IllegalArgumentException((\"Size must be equal or greater than zero: \" + size));\n            } \n            if (size == 0) {\n                return new byte[0];\n            } \n            byte[] byte[] = new byte[size];\n            int int = 0;\n            int int;\n            while ((offset < size) && ((readed = input.read(data, offset, (size - offset))) != (org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))) {\n                offset += readed;\n            }\n            if (offset != size) {\n                throw new java.io.IOException((((\"Unexpected readed size. current: \" + offset) + \", excepted: \") + size));\n            } \n            return data;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"size"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:1198","type":"CtBinaryOperatorImpl","sourcecode":"(extensions == null) || (extensions.isEmpty())"},"failures":[],"tindex":"42ca157e-2ebf-11e6-885f-7d789abcd258","method":{"position":"org.apache.commons.io.FilenameUtils:1194","type":"CtMethodImpl","sourcecode":"public static boolean isExtension(java.lang.String filename, java.util.Collection<java.lang.String> extensions) {\n    if ((extensions == null) || (extensions.isEmpty())) {\n        {\n            if (filename == null) {\n                {\n                    if (filename == null) {\n                        return false;\n                    } \n                    if ((extensions == null) || (extensions.isEmpty())) {\n                        return (org.apache.commons.io.FilenameUtils.indexOfExtension(filename)) == (-1);\n                    } \n                    java.lang.String java.lang.String = org.apache.commons.io.FilenameUtils.getExtension(filename);\n                    for (java.lang.String java.lang.String : extensions) {\n                        if (fileExt.equals(extension)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extensions":"extensions"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:478","type":"CtBinaryOperatorImpl","sourcecode":"(httpContentType != null) && (httpContentType.startsWith(\"text/html\"))"},"failures":[],"tindex":"42ca157f-2ebf-11e6-885f-896557dc9a9a","method":{"position":"org.apache.commons.io.input.XmlStreamReader:450","type":"CtMethodImpl","sourcecode":"private java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream bom, org.apache.commons.io.input.BOMInputStream pis, java.lang.String httpContentType, boolean lenient) throws java.io.IOException {\n    if ((httpContentType != null) && (httpContentType.startsWith(\"text/html\"))) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String java.lang.String = bom.getBOMCharsetName();\n            java.lang.String java.lang.String = pis.getBOMCharsetName();\n            java.lang.String java.lang.String = org.apache.commons.io.input.XmlStreamReader.getXmlProlog(pis, xmlGuessEnc);\n            try {\n                return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n            } catch (org.apache.commons.io.input.XmlStreamReaderException ex) {\n                if (lenient) {\n                    return doLenientDetection(httpContentType, ex);\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"httpContentType":"httpContentType"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"42ca3c90-2ebf-11e6-885f-85237bc997d7","method":{"position":"org.apache.commons.io.IOUtils:2447","type":"CtMethodImpl","sourcecode":"public static int read(java.io.InputStream input, byte[] buffer, int offset, int length) throws java.io.IOException {\n    if (offset < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (length < 0) {\n                throw new java.lang.IllegalArgumentException((\"Length must not be negative: \" + length));\n            } \n            int int = length;\n            while (remaining > 0) {\n                int int = length - remaining;\n                int int = input.read(buffer, (offset + location), remaining);\n                if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int) == count) {\n                    break;\n                } \n                remaining -= count;\n            }\n            return length - remaining;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.ByteOrderMark:70","type":"CtBinaryOperatorImpl","sourcecode":"(charsetName == null) || ((charsetName.length()) == 0)"},"failures":[],"tindex":"42ca3c91-2ebf-11e6-885f-f7df4e12ecda","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if ((file2.isDirectory()) || (file2.isDirectory())) {\n        {\n            if (charsetName == null) {\n                {\n                    if ((charsetName == null) || ((charsetName.length()) == 0)) {\n                        {\n                            if ((file2.isDirectory()) || (file2.isDirectory())) {\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    boolean boolean = file1.exists();\n                                    if (file1Exists != (file2.exists())) {\n                                        return false;\n                                    } \n                                    if (!file1Exists) {\n                                        return true;\n                                    } \n                                    if ((file1.isDirectory()) || (file2.isDirectory())) {\n                                        throw new java.io.IOException(\"Can't compare directories, only files\");\n                                    } \n                                    if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                                        return true;\n                                    } \n                                    java.io.Reader java.io.Reader = null;\n                                    java.io.Reader java.io.Reader = null;\n                                    try {\n                                        if (charsetName == null) {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                                        } else {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                                        }\n                                        return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n                                    } finally {\n                                        org.apache.commons.io.IOUtils.closeQuietly(input1);\n                                        org.apache.commons.io.IOUtils.closeQuietly(input2);\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"charsetName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"42ca63a2-2ebf-11e6-885f-cba764142ebc","method":{"position":"org.apache.commons.io.IOCase:217","type":"CtMethodImpl","sourcecode":"public int checkIndexOf(java.lang.String str, int strStartIndex, java.lang.String search) {\n    if (search != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (str.length()) - (search.length());\n            if (endIndex >= strStartIndex) {\n                for (int int = strStartIndex ; i <= endIndex ; i++) {\n                    if (checkRegionMatches(str, i, search)) {\n                        return i;\n                    } \n                }\n            } \n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"search"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.PrefixFileFilter:72","type":"CtBinaryOperatorImpl","sourcecode":"prefix == null"},"failures":[],"tindex":"42ca8ab3-2ebf-11e6-885f-6dc26ae7eeab","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:306","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String prefix, org.apache.commons.io.IOCase caseSensitivity) {\n    if (prefix == null) {\n        {\n            return new org.apache.commons.io.filefilter.PrefixFileFilter(prefix , caseSensitivity);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prefix":"prefix"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2269","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42ca8ab4-2ebf-11e6-885f-bfc05f89f931","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:72","type":"CtMethodImpl","sourcecode":"private int getType(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (file.isDirectory()) {\n                        return 1;\n                    } else {\n                        return 2;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1848","type":"CtBinaryOperatorImpl","sourcecode":"length == 0"},"failures":[],"tindex":"42cab1c5-2ebf-11e6-885f-095057129037","method":{"position":"org.apache.commons.io.monitor.FileEntry:227","type":"CtMethodImpl","sourcecode":"public void setLength(long length) {\n    if (length == 0) {\n        {\n            org.apache.commons.io.monitor.FileEntry.this.long = length;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2513","type":"CtUnaryOperatorImpl","sourcecode":"!(org.apache.commons.io.FileUtils.isSymlink(file))"},"failures":[],"tindex":"42cab1c6-2ebf-11e6-885f-e7eaf057002f","method":{"position":"org.apache.commons.io.FileUtils:1805","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (file.isDirectory()) {\n                        {\n                            return org.apache.commons.io.FileUtils.readLines(file, org.apache.commons.io.Charsets.toCharset(encoding));\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42cad8d7-2ebf-11e6-885f-1ba54a60e395","method":{"position":"org.apache.commons.io.IOUtils:2557","type":"CtMethodImpl","sourcecode":"public static void readFully(java.io.InputStream input, byte[] buffer) throws java.io.IOException {\n    if (null != input) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.readFully(input, buffer, 0, buffer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.ReaderInputStream:231","type":"CtBinaryOperatorImpl","sourcecode":"len == 0"},"failures":[],"tindex":"42cad8d8-2ebf-11e6-885f-e1ccffb1a935","method":{"position":"org.apache.commons.io.output.ProxyWriter:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str, int st, int len) throws java.io.IOException {\n    if (len == 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            try {\n                beforeWrite(len);\n                java.io.Writer.write(str, st, len);\n                afterWrite(len);\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"len"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.OrFileFilter:148","type":"CtBinaryOperatorImpl","sourcecode":"(fileFilters) != null"},"failures":[],"tindex":"42cad8d9-2ebf-11e6-885f-69d00b5478db","method":{"position":"org.apache.commons.io.filefilter.AndFileFilter:108","type":"CtMethodImpl","sourcecode":"public void setFileFilters(final java.util.List<org.apache.commons.io.filefilter.IOFileFilter> fileFilters) {\n    if (fileFilters != null) {\n        {\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.clear();\n            org.apache.commons.io.filefilter.AndFileFilter.this.java.util.List<org.apache.commons.io.filefilter.IOFileFilter>.addAll(fileFilters);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileFilters":"fileFilters"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:685","type":"CtBinaryOperatorImpl","sourcecode":"extensions == null"},"failures":[],"tindex":"42caffea-2ebf-11e6-885f-2fd863318474","method":{"position":"org.apache.commons.io.FileUtils:663","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] toSuffixes(java.lang.String[] extensions) {\n    if (extensions == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = new java.lang.String[extensions.int];\n            for (int int = 0 ; i < (extensions.int) ; i++) {\n                suffixes[i] = \".\" + (extensions[i]);\n            }\n            return suffixes;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"extensions":"extensions"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"42cb26fb-2ebf-11e6-885f-1f6b01ef7215","method":{"position":"org.apache.commons.io.EndianUtils:328","type":"CtMethodImpl","sourcecode":"public static void writeSwappedInteger(java.io.OutputStream output, int value) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            output.write(((byte)((value >> 0) & 255)));\n            output.write(((byte)((value >> 8) & 255)));\n            output.write(((byte)((value >> 16) & 255)));\n            output.write(((byte)((value >> 24) & 255)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:810","type":"CtBinaryOperatorImpl","sourcecode":"charsetName == null"},"failures":[],"tindex":"42cb26fc-2ebf-11e6-885f-49aa0c38d218","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if ((file2.isDirectory()) || (file2.isDirectory())) {\n        {\n            if (charsetName == null) {\n                {\n                    if ((charsetName == null) || ((charsetName.length()) == 0)) {\n                        {\n                            if ((file2.isDirectory()) || (file2.isDirectory())) {\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    boolean boolean = file1.exists();\n                                    if (file1Exists != (file2.exists())) {\n                                        return false;\n                                    } \n                                    if (!file1Exists) {\n                                        return true;\n                                    } \n                                    if ((file1.isDirectory()) || (file2.isDirectory())) {\n                                        throw new java.io.IOException(\"Can't compare directories, only files\");\n                                    } \n                                    if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                                        return true;\n                                    } \n                                    java.io.Reader java.io.Reader = null;\n                                    java.io.Reader java.io.Reader = null;\n                                    try {\n                                        if (charsetName == null) {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                                        } else {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                                        }\n                                        return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n                                    } finally {\n                                        org.apache.commons.io.IOUtils.closeQuietly(input1);\n                                        org.apache.commons.io.IOUtils.closeQuietly(input2);\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsetName":"charsetName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:758","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"42cb4e0d-2ebf-11e6-885f-212228b4b8a2","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                {\n                    if (filter == null) {\n                        return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n                    } \n                    return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:600","type":"CtInvocationImpl","sourcecode":"directory.isDirectory()"},"failures":[],"tindex":"42cb4e0e-2ebf-11e6-885f-030ffbdb44aa","method":{"position":"org.apache.commons.io.FileUtils:651","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File directory, org.apache.commons.io.filefilter.IOFileFilter fileFilter, org.apache.commons.io.filefilter.IOFileFilter dirFilter) {\n    if (directory.isDirectory()) {\n        {\n            return org.apache.commons.io.FileUtils.listFilesAndDirs(directory, fileFilter, dirFilter).iterator();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"directory":"directory"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.XmlStreamReader:492","type":"CtBinaryOperatorImpl","sourcecode":"encoding == null"},"failures":[],"tindex":"42cb4e0f-2ebf-11e6-885f-21e93152d67a","method":{"position":"org.apache.commons.io.IOUtils:801","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(java.io.InputStream input, java.lang.String encoding) throws java.io.IOException {\n    if (encoding == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            return org.apache.commons.io.IOUtils.toString(input, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:750","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"42cb7520-2ebf-11e6-885f-8d4461680df4","method":{"position":"org.apache.commons.io.FilenameUtils:287","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalizeNoEndSeparator(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doNormalize(filename, org.apache.commons.io.FilenameUtils.org.apache.commons.io.FilenameUtils.char, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"42cb7521-2ebf-11e6-885f-d1a5020905af","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value) {\n    if (value != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder.append(value);\n                    return org.apache.commons.io.output.StringBuilderWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2596","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"42cb7522-2ebf-11e6-885f-b5f2f8b2afaf","method":{"position":"org.apache.commons.io.FileUtils:1805","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.lang.String encoding) throws java.io.IOException {\n    if (file == null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(org.apache.commons.io.FileUtils.isSymlink(file))) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (file.isDirectory()) {\n                        {\n                            return org.apache.commons.io.FileUtils.readLines(file, org.apache.commons.io.Charsets.toCharset(encoding));\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:72","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"42cb7523-2ebf-11e6-885f-953a104765d5","method":{"position":"org.apache.commons.io.EndianUtils:426","type":"CtMethodImpl","sourcecode":"public static void writeSwappedFloat(java.io.OutputStream output, float value) throws java.io.IOException {\n    if (null != output) {\n        {\n            org.apache.commons.io.EndianUtils.writeSwappedInteger(output, java.lang.Float.floatToIntBits(value));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FilenameUtils:906","type":"CtBinaryOperatorImpl","sourcecode":"filename == null"},"failures":[],"tindex":"42cb9c34-2ebf-11e6-885f-d31a8eca727d","method":{"position":"org.apache.commons.io.FilenameUtils:864","type":"CtMethodImpl","sourcecode":"public static java.lang.String getFullPath(java.lang.String filename) {\n    if (filename == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.FilenameUtils.doGetFullPath(filename, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filename":"filename"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"42cb9c35-2ebf-11e6-885f-bdd868942fcf","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:136","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] value, int offset, int length) {\n    if (value != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                java.lang.StringBuilder.append(value, offset, length);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:173","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[],"tindex":"42cb9c36-2ebf-11e6-885f-cfd0a756d523","method":{"position":"org.apache.commons.io.output.LockableFileWriter:349","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(java.lang.String str) throws java.io.IOException {\n    if (str != null) {\n        {\n            java.io.Writer.write(str);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:790","type":"CtBinaryOperatorImpl","sourcecode":"filter == null"},"failures":[],"tindex":"42cbc347-2ebf-11e6-885f-3f593505e903","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:774","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter filter) {\n    if (filter == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filter == null) {\n                {\n                    if (filter == null) {\n                        return org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter;\n                    } \n                    return new org.apache.commons.io.filefilter.AndFileFilter(org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.DirectoryFileFilter.org.apache.commons.io.filefilter.IOFileFilter , filter);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filter":"filter"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2317","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"42cbc348-2ebf-11e6-885f-0daae49a17da","method":{"position":"org.apache.commons.io.IOUtils:2316","type":"CtMethodImpl","sourcecode":"public static long skip(java.io.Reader input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Skip count must be non-negative, actual: \" + toSkip));\n            } \n            if ((org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.char[]) == null) {\n                org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.char[] = new char[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int];\n            } \n            long long = toSkip;\n            while (remain > 0) {\n                long long = input.read(org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.char[], 0, ((int)(java.lang.Math.min(remain, org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int))));\n                if (n < 0) {\n                    break;\n                } \n                remain -= n;\n            }\n            return toSkip - remain;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"toSkip"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:73","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42cbea59-2ebf-11e6-885f-8d3647ea1c89","method":{"position":"org.apache.commons.io.IOUtils:1767","type":"CtMethodImpl","sourcecode":"public static long copyLarge(java.io.InputStream input, java.io.OutputStream output) throws java.io.IOException {\n    if (null != input) {\n        {\n            if (null != output) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    return org.apache.commons.io.IOUtils.copyLarge(input, output, new byte[org.apache.commons.io.IOUtils.org.apache.commons.io.IOUtils.int]);\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:449","type":"CtBinaryOperatorImpl","sourcecode":"filters == null"},"failures":[],"tindex":"42cbea5a-2ebf-11e6-885f-cf6413124588","method":{"position":"org.apache.commons.io.filefilter.FileFilterUtils:448","type":"CtMethodImpl","sourcecode":"public static java.util.List<org.apache.commons.io.filefilter.IOFileFilter> toList(org.apache.commons.io.filefilter.IOFileFilter... filters) {\n    if (filters == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (filters == null) {\n                throw new java.lang.IllegalArgumentException(\"The filters must not be null\");\n            } \n            java.util.List<org.apache.commons.io.filefilter.IOFileFilter> java.util.List<org.apache.commons.io.filefilter.IOFileFilter> = new java.util.ArrayList<org.apache.commons.io.filefilter.IOFileFilter>(filters.int);\n            for (int int = 0 ; i < (filters.int) ; i++) {\n                if ((filters[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The filter[\" + i) + \"] is null\"));\n                } \n                list.add(filters[i]);\n            }\n            return list;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"filters":"filters"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1617","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"42cbea5b-2ebf-11e6-885f-d3f440560f55","method":{"position":"org.apache.commons.io.IOUtils:1568","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static void write(java.lang.StringBuffer data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data.toString());\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:482","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cc116c-2ebf-11e6-885f-b7177e253ed3","method":{"position":"org.apache.commons.io.filefilter.CanReadFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if ((file.canRead()) == false) {\n        {\n            if (file.isDirectory()) {\n                {\n                    return file.canRead();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"42cc116d-2ebf-11e6-885f-8fddd7f09892","method":{"position":"org.apache.commons.io.output.ClosedOutputStream:47","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        {\n            if (b >= 0) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    throw new java.io.IOException(((\"write(\" + b) + \") failed: stream is closed\"));\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2350","type":"CtBinaryOperatorImpl","sourcecode":"null != exception"},"failures":[],"tindex":"42cc116e-2ebf-11e6-885f-b7b310063d8a","method":{"position":"org.apache.commons.io.input.TaggedInputStream:87","type":"CtMethodImpl","sourcecode":"public boolean isCauseOf(java.lang.Throwable exception) {\n    if (null != exception) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.io.TaggedIOException.isTaggedWith(exception, java.io.Serializable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"exception":"exception"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:2278","type":"CtBinaryOperatorImpl","sourcecode":"toSkip < 0"},"failures":[],"tindex":"42cc116f-2ebf-11e6-885f-75b1ae562622","method":{"position":"org.apache.commons.io.IOUtils:2354","type":"CtMethodImpl","sourcecode":"public static void skipFully(java.io.InputStream input, long toSkip) throws java.io.IOException {\n    if (toSkip < 0) {\n        {\n            if (toSkip < 0) {\n                throw new java.lang.IllegalArgumentException((\"Bytes to skip must not be negative: \" + toSkip));\n            } \n            long long = org.apache.commons.io.IOUtils.skip(input, toSkip);\n            if (skipped != toSkip) {\n                throw new java.io.EOFException((((\"Bytes to skip: \" + toSkip) + \" actual: \") + skipped));\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toSkip":"toSkip"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.LockableFileWriter:183","type":"CtBinaryOperatorImpl","sourcecode":"(file.getParentFile()) != null"},"failures":[],"tindex":"42cc3880-2ebf-11e6-885f-9b1d90d4ad9a","method":{"position":"org.apache.commons.io.FileUtils:1780","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> readLines(java.io.File file, java.nio.charset.Charset encoding) throws java.io.IOException {\n    if ((file.getParentFile()) != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            java.io.InputStream java.io.InputStream = null;\n            try {\n                in = org.apache.commons.io.FileUtils.openInputStream(file);\n                return org.apache.commons.io.IOUtils.readLines(in, org.apache.commons.io.Charsets.toCharset(encoding));\n            } finally {\n                org.apache.commons.io.IOUtils.closeQuietly(in);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.DemuxInputStream:56","type":"CtBinaryOperatorImpl","sourcecode":"null != input"},"failures":[],"tindex":"42cc3881-2ebf-11e6-885f-096f6f17cabf","method":{"position":"org.apache.commons.io.IOUtils:1884","type":"CtMethodImpl","sourcecode":"public static void copy(java.io.InputStream input, java.io.Writer output) throws java.io.IOException {\n    if (null != input) {\n        {\n            org.apache.commons.io.IOUtils.copy(input, output, java.nio.charset.Charset.defaultCharset());\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:2402","type":"CtBinaryOperatorImpl","sourcecode":"length < 0"},"failures":[],"tindex":"42cc3882-2ebf-11e6-885f-4b93553f941f","method":{"position":"org.apache.commons.io.input.CharSequenceReader:100","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] array, int offset, int length) {\n    if (offset < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) >= (java.lang.CharSequence.length())) {\n                return -1;\n            } \n            if (array == null) {\n                throw new java.lang.NullPointerException(\"Character array is missing\");\n            } \n            if (((length < 0) || (offset < 0)) || ((offset + length) > (array.int))) {\n                throw new java.lang.IndexOutOfBoundsException((((((\"Array Size=\" + (array.int)) + \", offset=\") + offset) + \", length=\") + length));\n            } \n            int int = 0;\n            for (int int = 0 ; i < length ; i++) {\n                int int = read();\n                if (c == (-1)) {\n                    return count;\n                } \n                array[(offset + i)] = ((char)(c));\n                count++;\n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"offset"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:96","type":"CtBinaryOperatorImpl","sourcecode":"csq != null"},"failures":[],"tindex":"42cc5f93-2ebf-11e6-885f-073f87933312","method":{"position":"org.apache.commons.io.output.ProxyWriter:74","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence csq, int start, int end) throws java.io.IOException {\n    if (csq != null) {\n        {\n            try {\n                beforeWrite((end - start));\n                java.io.Writer.append(csq, start, end);\n                afterWrite((end - start));\n            } catch (java.io.IOException e) {\n                handleIOException(e);\n            }\n            return org.apache.commons.io.output.ProxyWriter.this;\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"csq":"csq"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:295","type":"CtBinaryOperatorImpl","sourcecode":"(file.canRead()) == false"},"failures":[],"tindex":"42cc5f94-2ebf-11e6-885f-cb7d4c89c778","method":{"position":"org.apache.commons.io.filefilter.CanReadFileFilter:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if ((file.canRead()) == false) {\n        {\n            if (file.isDirectory()) {\n                {\n                    return file.canRead();\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.filefilter.WildcardFilter:130","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cc5f95-2ebf-11e6-885f-bf3f5cfbe6ba","method":{"position":"org.apache.commons.io.FileUtils:2268","type":"CtMethodImpl","sourcecode":"public static void forceDelete(java.io.File file) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if (file.isDirectory()) {\n                org.apache.commons.io.FileUtils.deleteDirectory(file);\n            } else {\n                boolean boolean = file.exists();\n                if (!(file.delete())) {\n                    if (!filePresent) {\n                        throw new java.io.FileNotFoundException((\"File does not exist: \" + file));\n                    } \n                    java.lang.String java.lang.String = \"Unable to delete file: \" + file;\n                    throw new java.io.IOException(message);\n                } \n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:353","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cc5f96-2ebf-11e6-885f-478d8afd69e8","method":{"position":"org.apache.commons.io.monitor.FileEntry:124","type":"CtMethodImpl","sourcecode":"public org.apache.commons.io.monitor.FileEntry newChildInstance(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.io.monitor.FileEntry(org.apache.commons.io.monitor.FileEntry.this , file);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.IOUtils:1526","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"42cc86a7-2ebf-11e6-885f-992238c6bd10","method":{"position":"org.apache.commons.io.IOUtils:1488","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.Writer output) throws java.io.IOException {\n    if (data != null) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (data != null) {\n                output.write(data);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:2449","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cc86a8-2ebf-11e6-885f-090a769ba45a","method":{"position":"org.apache.commons.io.DirectoryWalker:393","type":"CtMethodImpl","sourcecode":"protected final void checkIfCancelled(java.io.File file, int depth, java.util.Collection<T> results) throws java.io.IOException {\n    if (file.isDirectory()) {\n        {\n            if (handleIsCancelled(file, depth, results)) {\n                throw new org.apache.commons.io.DirectoryWalker.CancelException(file , depth);\n            } \n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cc86a9-2ebf-11e6-885f-b5aa3d0984d2","method":{"position":"org.apache.commons.io.FileUtils:1676","type":"CtMethodImpl","sourcecode":"public static boolean waitFor(java.io.File file, int seconds) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            int int = 0;\n            while (!(file.exists())) {\n                if ((tick++) >= 10) {\n                    tick = 0;\n                    if ((timeout++) > seconds) {\n                        return false;\n                    } \n                } \n                try {\n                    java.lang.Thread.sleep(100);\n                } catch (java.lang.InterruptedException ignore) {\n                } catch (java.lang.Exception ex) {\n                    break;\n                }\n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.monitor.FileEntry:71","type":"CtBinaryOperatorImpl","sourcecode":"file == null"},"failures":[],"tindex":"42ccadba-2ebf-11e6-885f-cbcfd4aaf205","method":{"position":"org.apache.commons.io.FileUtils:2165","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.io.File file, java.util.Collection<?> lines, boolean append) throws java.io.IOException {\n    if (file == null) {\n        {\n            if (!(file.exists())) {\n                {\n                    org.apache.commons.io.FileUtils.writeLines(file, null, lines, null, append);\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FileUtils:740","type":"CtBinaryOperatorImpl","sourcecode":"(file1.isDirectory()) || (file2.isDirectory())"},"failures":[],"tindex":"42ccadbb-2ebf-11e6-885f-b79b9f4f7fd8","method":{"position":"org.apache.commons.io.FileUtils:786","type":"CtMethodImpl","sourcecode":"public static boolean contentEqualsIgnoreEOL(java.io.File file1, java.io.File file2, java.lang.String charsetName) throws java.io.IOException {\n    if ((file2.isDirectory()) || (file2.isDirectory())) {\n        {\n            if (charsetName == null) {\n                {\n                    if ((charsetName == null) || ((charsetName.length()) == 0)) {\n                        {\n                            if ((file2.isDirectory()) || (file2.isDirectory())) {\n                                throw new java.io.IOException();\n                            } else {\n                                {\n                                    boolean boolean = file1.exists();\n                                    if (file1Exists != (file2.exists())) {\n                                        return false;\n                                    } \n                                    if (!file1Exists) {\n                                        return true;\n                                    } \n                                    if ((file1.isDirectory()) || (file2.isDirectory())) {\n                                        throw new java.io.IOException(\"Can't compare directories, only files\");\n                                    } \n                                    if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n                                        return true;\n                                    } \n                                    java.io.Reader java.io.Reader = null;\n                                    java.io.Reader java.io.Reader = null;\n                                    try {\n                                        if (charsetName == null) {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1));\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2));\n                                        } else {\n                                            input1 = new java.io.InputStreamReader(new java.io.FileInputStream(file1) , charsetName);\n                                            input2 = new java.io.InputStreamReader(new java.io.FileInputStream(file2) , charsetName);\n                                        }\n                                        return org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(input1, input2);\n                                    } finally {\n                                        org.apache.commons.io.IOUtils.closeQuietly(input1);\n                                        org.apache.commons.io.IOUtils.closeQuietly(input2);\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file2":"file2","file1":"file2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOCase:147","type":"CtBinaryOperatorImpl","sourcecode":"(str1 == null) || (str2 == null)"},"failures":[],"tindex":"42ccd4cc-2ebf-11e6-885f-671b8a460d60","method":{"position":"org.apache.commons.io.IOCase:146","type":"CtMethodImpl","sourcecode":"public int checkCompareTo(java.lang.String str1, java.lang.String str2) {\n    if ((str2 == null) || (str1 == null)) {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                throw new java.lang.NullPointerException(\"The strings must not be null\");\n            } \n            return boolean ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"str2","str2":"str1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.input.BOMInputStream:336","type":"CtBinaryOperatorImpl","sourcecode":"b >= 0"},"failures":[],"tindex":"42ccd4cd-2ebf-11e6-885f-4b537d168640","method":{"position":"org.apache.commons.io.output.ClosedOutputStream:47","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int b) throws java.io.IOException {\n    if (b >= 0) {\n        {\n            if (b >= 0) {\n                throw new java.io.IOException();\n            } else {\n                {\n                    throw new java.io.IOException(((\"write(\" + b) + \") failed: stream is closed\"));\n                }\n            }\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.output.StringBuilderWriter:123","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[],"tindex":"42ccd4ce-2ebf-11e6-885f-9ffa930617d2","method":{"position":"org.apache.commons.io.output.StringBuilderWriter:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.io.Writer append(java.lang.CharSequence value) {\n    if (value != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder.append(value);\n                    return org.apache.commons.io.output.StringBuilderWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:96","type":"CtBinaryOperatorImpl","sourcecode":"observer != null"},"failures":[],"tindex":"42ccfbdf-2ebf-11e6-885f-2d23543cdc22","method":{"position":"org.apache.commons.io.monitor.FileAlterationMonitor:106","type":"CtMethodImpl","sourcecode":"public void removeObserver(final org.apache.commons.io.monitor.FileAlterationObserver observer) {\n    if (observer != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (observer != null) {\n                while (java.util.List<org.apache.commons.io.monitor.FileAlterationObserver>.remove(observer)) {\n                }\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"observer":"observer"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileDeleteStrategy:72","type":"CtBinaryOperatorImpl","sourcecode":"(fileToDelete == null) || ((fileToDelete.exists()) == false)"},"failures":[],"tindex":"42ccfbe0-2ebf-11e6-885f-677d8434540b","method":{"position":"org.apache.commons.io.FileDeleteStrategy:71","type":"CtMethodImpl","sourcecode":"public boolean deleteQuietly(java.io.File fileToDelete) {\n    if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n        {\n            if ((fileToDelete == null) || ((fileToDelete.exists()) == false)) {\n                return true;\n            } \n            try {\n                return doDelete(fileToDelete);\n            } catch (java.io.IOException ex) {\n                return false;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fileToDelete":"fileToDelete"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:634","type":"CtBinaryOperatorImpl","sourcecode":"len == 1"},"failures":[],"tindex":"42cd22f1-2ebf-11e6-885f-17c1c6872559","method":{"position":"org.apache.commons.io.output.TeeOutputStream:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (off == 1) {\n        throw new java.io.IOException();\n    } else {\n        {\n            super.write(b, off, len);\n            org.apache.commons.io.output.TeeOutputStream.this.java.io.OutputStream.write(b, off, len);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.IOUtils:1249","type":"CtBinaryOperatorImpl","sourcecode":"data != null"},"failures":[],"tindex":"42cd22f2-2ebf-11e6-885f-23c52a5dafba","method":{"position":"org.apache.commons.io.EndianUtils:142","type":"CtMethodImpl","sourcecode":"public static int readSwappedUnsignedShort(byte[] data, int offset) {\n    if (data != null) {\n        {\n            return (((data[(offset + 0)]) & 255) << 0) + (((data[(offset + 1)]) & 255) << 8);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"data":"data"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.DemuxOutputStream:89","type":"CtBinaryOperatorImpl","sourcecode":"null != output"},"failures":[],"tindex":"42cd22f3-2ebf-11e6-885f-a5c60fae3738","method":{"position":"org.apache.commons.io.IOUtils:1690","type":"CtMethodImpl","sourcecode":"public static void writeLines(java.util.Collection<?> lines, java.lang.String lineEnding, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (null != output) {\n        throw new java.io.IOException();\n    } else {\n        {\n            org.apache.commons.io.IOUtils.writeLines(lines, lineEnding, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"output":"output"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:73","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cd22f4-2ebf-11e6-885f-3bf3ce96cfec","method":{"position":"org.apache.commons.io.comparator.DirectoryFileComparator:72","type":"CtMethodImpl","sourcecode":"private int getType(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (file.isDirectory()) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (file.isDirectory()) {\n                        return 1;\n                    } else {\n                        return 2;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.ProxyWriter:134","type":"CtBinaryOperatorImpl","sourcecode":"chr != null"},"failures":[],"tindex":"42cd4a05-2ebf-11e6-885f-8b3a631ba029","method":{"position":"org.apache.commons.io.output.LockableFileWriter:327","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chr) throws java.io.IOException {\n    if (chr != null) {\n        {\n            java.io.Writer.write(chr);\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chr":"chr"},"type":"special","returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.FilenameUtils:754","type":"CtBinaryOperatorImpl","sourcecode":"len < 0"},"failures":[],"tindex":"42cd4a06-2ebf-11e6-885f-95108946b9be","method":{"position":"org.apache.commons.io.output.ThresholdingOutputStream:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(byte[] b, int off, int len) throws java.io.IOException {\n    if (off < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            checkThreshold(len);\n            getStream().write(b, off, len);\n            long += len;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"off"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.io.FileUtils:2293","type":"CtInvocationImpl","sourcecode":"file.isDirectory()"},"failures":[],"tindex":"42cd4a07-2ebf-11e6-885f-59cc31d0904e","method":{"position":"org.apache.commons.io.filefilter.WildcardFileFilter:167","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean accept(java.io.File file) {\n    if (file.isDirectory()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.String java.lang.String = file.getName();\n            for (java.lang.String java.lang.String : java.lang.String[]) {\n                if (org.apache.commons.io.FilenameUtils.wildcardMatch(name, wildcard, org.apache.commons.io.IOCase)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"file":"file"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.io.output.XmlStreamWriter:190","type":"CtBinaryOperatorImpl","sourcecode":"(encoding) != null"},"failures":[],"tindex":"42cd7118-2ebf-11e6-885f-a12a9404f70b","method":{"position":"org.apache.commons.io.IOUtils:1550","type":"CtMethodImpl","sourcecode":"public static void write(java.lang.String data, java.io.OutputStream output, java.lang.String encoding) throws java.io.IOException {\n    if (encoding != null) {\n        {\n            org.apache.commons.io.IOUtils.write(data, output, org.apache.commons.io.Charsets.toCharset(encoding));\n        }\n    } else {\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"encoding":"encoding"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"commons-io","transformationCount":100,"projectType":"maven","artifactId":"commons-io","generatorVersion":"1.0","version":"2.4"}}
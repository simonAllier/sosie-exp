{"failureDictionary":{"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutAll":58,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":48,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndex":254,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testNullHandling":90,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapClear":27,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":123,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexFirst":214,"org.apache.commons.collections4.map.FixedSizeMapTest.testSimpleSerialization":44,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":73,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndexBoundsChecking2":255,"org.apache.commons.collections4.QueueUtilsTest.testEmptyQueue":314,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorNextRemovePrevious":136,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContains":202,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRetainAll":199,"org.apache.commons.collections4.map.ReferenceMapTest.testMapRemove":59,"org.apache.commons.collections4.PredicateUtilsTest.testAndPredicateEx":6,"org.apache.commons.collections4.list.TreeListTest.testCollectionRemove":189,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":74,"org.apache.commons.collections4.list.TreeListTest.testListIteratorAdd":180,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":103,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.initializationError":170,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorByIndex":263,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToString":312,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":21,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":321,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray2":311,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":2,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetIteratorRemoveChangesMap":34,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":69,"org.apache.commons.collections4.map.UnmodifiableMapTest.testDecorateFactory":4,"org.apache.commons.collections4.list.CursorableLinkedListTest.testClear":197,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAdd":207,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorAdd":211,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAddNodeAfter":246,"org.apache.commons.collections4.map.ReferenceMapTest.testMapIsEmpty":51,"org.apache.commons.collections4.list.TreeListTest.testCollectionAddAll":183,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListEquals":288,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveChangesMap":92,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndex":259,"org.apache.commons.collections4.CollectionUtilsTest.get":97,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddByIterator":227,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAdd":270,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorPreviousRemoveNext":133,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListHashCode":253,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndexBoundsChecking2":258,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIterator":196,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveAll":201,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testHashEntry":67,"org.apache.commons.collections4.list.TreeListTest.testCollectionAdd":182,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddByIterator":228,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIterator":262,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":83,"org.apache.commons.collections4.trie.PatriciaTrieTest.initializationError":171,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":121,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPutNullValue":19,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsKey":151,"org.apache.commons.collections4.map.ReferenceMapTest.testMapToString":56,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveIndex1ByList":218,"org.apache.commons.collections4.list.TreeListTest.testListAddByIndex":172,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastKeySet":146,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContains":305,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIteratorRemove":138,"org.apache.commons.collections4.map.LinkedMapTest.testGetValueByIndex":8,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":71,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorRemove":233,"org.apache.commons.collections4.list.TreeListTest.testListIteratorSet":181,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":319,"org.apache.commons.collections4.ClosureUtilsTest.testChainedClosure":3,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":105,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":76,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRetainAll":31,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":32,"org.apache.commons.collections4.CollectionUtilsTest.getFromMap":100,"org.apache.commons.collections4.list.TreeListTest.testListHashCode":174,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextRemoveIndex1ByList":219,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndex":290,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndex":295,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorSet":209,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndex":261,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray2":283,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListRemoveByIndexBoundsChecking2":260,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove1":80,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":1,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerializeDeserializeThenCompare":285,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":81,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove3":82,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":75,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":124,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapHashCode":154,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContainsAll":274,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSet":194,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":101,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testSerializeDeserializeThenCompare":313,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":24,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveAll":87,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":117,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":118,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesIteratorRemoveChangesMap":148,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":38,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionContainsAll":306,"org.apache.commons.collections4.map.FixedSizeMapTest.testObjectHashCodeEqualsSelfHashCode":46,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetIteratorRemoveChangesMap":93,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorPreviousRemoveNext":264,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIndexOf":256,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRetainAll":14,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextNextRemoveIndex1ByList":221,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorAdd":243,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testAddNodeAfter":129,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testNextKey":144,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetIteratorRemoveChangesMap":18,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndexBoundsChecking2":296,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":72,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListRemove":238,"org.apache.commons.collections4.map.ReferenceMapTest.testNullHandling":84,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionSize":281,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIsEmpty":307,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddBefore":215,"org.apache.commons.collections4.list.TreeListTest.testListGetByIndex":175,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorAdd":299,"org.apache.commons.collections4.list.TreeListTest.testCollectionIsEmpty":186,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionContains":273,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsValue":54,"org.apache.commons.collections4.list.TreeListTest.testListIndexOf":176,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveChangesMap":16,"org.apache.commons.collections4.map.ReferenceMapTest.testMapSize":52,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveNode":247,"org.apache.commons.collections4.list.TreeListTest.testListRemoveByIndex":179,"org.apache.commons.collections4.map.FixedSizeMapTest.testFullMapCompatibility":28,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveByIndex":205,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListAddByIndexBoundsChecking2":250,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":106,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAdd":303,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveAll":166,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToArray":282,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutAll":157,"org.apache.commons.collections4.list.CursorableLinkedListTest.testFullListCompatibility":269,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetIteratorRemoveChangesMap":89,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":7,"org.apache.commons.collections4.list.TreeListTest.testCollectionToArray2":193,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveIndex1ByList":220,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":68,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testShrinkCache":126,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":110,"org.apache.commons.collections4.SplitMapUtilsTest.testAlreadyReadableMap":316,"org.apache.commons.collections4.CollectionUtilsTest.getFromIterator":99,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapToString":155,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorPreviousRemovePrevious":265,"org.apache.commons.collections4.CollectionUtilsTest.getFromIterable":98,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveAll":17,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveAll":33,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListLastIndexOf":293,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddIndex1ByList":224,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndexBoundsChecking2":291,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIteratorSet":300,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPut":156,"org.apache.commons.collections4.list.TreeListTest.testCollectionContainsAll":185,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionAddAll":271,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsKey":53,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":115,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIsEmpty":195,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionAddAll":304,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove2":64,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRemoveChangesMap":20,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove3":65,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove1":63,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":203,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveLast":245,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemove":278,"org.apache.commons.collections4.list.TreeListTest.testCollectionRemoveAll":190,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains1":77,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains2":78,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorByIndex":298,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains3":79,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIndexOf":204,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubList":234,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveNode":130,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveChangesMap":165,"org.apache.commons.collections4.list.TreeListTest.testCollectionToArray":192,"org.apache.commons.collections4.list.CursorableLinkedListTest.testFullListSerialization":268,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextSetByIterator":231,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":317,"org.apache.commons.collections4.map.FixedSizeMapTest.testCanonicalFullCollectionExists":41,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":142,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveByIterator":222,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextAddIndex1ByList":225,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionSize":309,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":109,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemove":139,"org.apache.commons.collections4.list.TreeListTest.testListLastIndexOf":177,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapEquals":153,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRetainAll":39,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorNextRemoveNext":135,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":36,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains2":61,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapIsEmpty":149,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains1":60,"org.apache.commons.collections4.list.TreeListTest.testCollectionRetainAll":191,"org.apache.commons.collections4.list.TreeListTest.testCollectionContains":184,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":113,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIteratorPreviousRemovePrevious":134,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains3":62,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetIteratorRemoveChangesMap":86,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapSize":150,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndexBoundsChecking2":294,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetIteratorRemoveChangesMap":169,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddBegin":236,"org.apache.commons.collections4.map.FixedSizeMapTest.testEqualsNull":42,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":116,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListRemoveByIndex":132,"org.apache.commons.collections4.list.TreeListTest.testCollectionIteratorRemove":188,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":104,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testPut":320,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousSetByIterator":230,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":111,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":107,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionToString":284,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":108,"org.apache.commons.collections4.list.CursorableLinkedListTest.testLongSerialization":242,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":29,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListLastIndexOf":257,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":122,"org.apache.commons.collections4.map.ReferenceMapTest.testMapEquals":55,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorSet":244,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":125,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByListSetByIterator":229,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListIndexOf":292,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains3":11,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapRemove":37,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":9,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsValue":152,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRetainAll":167,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":10,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":70,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddMiddle":237,"org.apache.commons.collections4.list.CursorableLinkedListTest.testGet":206,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":35,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveChangesMap":66,"org.apache.commons.collections4.list.TreeListTest.testCollectionIterator":187,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexMid":213,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesIteratorRemoveChangesMap":12,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastEntrySet":145,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove3":164,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testBasics":91,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove2":163,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove1":162,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":119,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains1":159,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains2":160,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains3":161,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerialization":240,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorNextRemovePrevious":267,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":114,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorRemove":210,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListEquals":252,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListHashCode":289,"org.apache.commons.collections4.list.TreeListTest.testListEquals":173,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddIndex1ByList":226,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddAfter":217,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByIterator":223,"org.apache.commons.collections4.list.CursorableLinkedListTest.testGetNode":248,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsFalsePredicate":143,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":279,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPut":57,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRetainAll":141,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionClear":272,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSerializationWithOpenCursor":241,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorConcurrentModification":212,"org.apache.commons.collections4.map.FixedSizeMapTest.testSerializeDeserializeThenCompare":47,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListAddByIndex":251,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListListIterator":297,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":30,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveAll":94,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":120,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListAddEnd":235,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionClear":137,"org.apache.commons.collections4.list.TreeListTest.testListSetByIndex":178,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testFullListSerialization":301,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":49,"org.apache.commons.collections4.map.FixedSizeMapTest.testObjectHashCodeEqualsContract":45,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRetainAll":88,"org.apache.commons.collections4.map.PredicatedMapTest.testPut":318,"org.apache.commons.collections4.list.CursorableLinkedListTest.testToArray":239,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":315,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListAddByIndexBoundsChecking2":286,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRetainAll":280,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveFirst":249,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveLast":128,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRemoveAll":22,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNavigation":208,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionRemoveAll":140,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorNextRemoveNext":266,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":0,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":102,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionIterator":308,"org.apache.commons.collections4.map.FixedSizeMapTest.testMakeMap":23,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListAddByIndex":287,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":5,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRetainAll":95,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIteratorRemove":277,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveChangesMap":85,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemove":200,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIterator":276,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastValues":147,"org.apache.commons.collections4.map.FixedSizeMapTest.testEmptyMapCompatibility":26,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testGetNode":131,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":50,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetIteratorRemoveChangesMap":168,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorNavigation":232,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":112,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapRemove":158,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testCollectionToArray":310,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPutNullKey":25,"org.apache.commons.collections4.map.FixedSizeMapTest.testObjectEqualsSelf":40,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContainsAll":198,"org.apache.commons.collections4.map.FixedSizeMapTest.testCanonicalEmptyCollectionExists":43,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveFirst":127,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetIteratorRemoveChangesMap":96,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIsEmpty":275,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testFullListCompatibility":302,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveChangesMap":13,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapHashCode":15,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexAddNext":216},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:665","type":"CtBinaryOperatorImpl","sourcecode":"key3 != null"},"failures":[0],"tindex":"7fd72a38-2e8e-11e6-ac4b-85b6917b3d2c","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:102","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int indexOf(final java.lang.Object object) {\n    if (object != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().indexOf(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key3":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:62","type":"CtBinaryOperatorImpl","sourcecode":"nodeList == null"},"failures":[1,2],"tindex":"7fd7ed89-2e8e-11e6-ac4b-df20f56f2420","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:554","type":"CtMethodImpl","sourcecode":"public V get(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3, final java.lang.Object key4, final java.lang.Object key5) {\n    if (key2 == null) {\n        {\n            final int int = hash(key1, key2, key3, key4, key5);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2, key3, key4, key5))) {\n                    return entry.getValue();\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n            }\n            return null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeList":"key2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ChainedClosure:68","type":"CtBinaryOperatorImpl","sourcecode":"closures == null"},"failures":[3],"tindex":"7fd8149a-2e8e-11e6-ac4b-0130b7c7c879","method":{"position":"org.apache.commons.collections4.functors.ChainedClosure:67","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> chainedClosure(final java.util.Collection<org.apache.commons.collections4.Closure<E>> closures) {\n    if (closures == null) {\n        {\n            if (closures == null) {\n                throw new java.lang.IllegalArgumentException(\"Closure collection must not be null\");\n            } \n            if ((closures.size()) == 0) {\n                return org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n            } \n            final org.apache.commons.collections4.Closure<? super E>[] org.apache.commons.collections4.Closure<? super E>[] = new org.apache.commons.collections4.Closure[closures.size()];\n            int int = 0;\n            for (final org.apache.commons.collections4.Closure<? super E> org.apache.commons.collections4.Closure<? super E> : closures) {\n                cmds[(i++)] = closure;\n            }\n            org.apache.commons.collections4.functors.FunctorUtils.validate(cmds);\n            return new org.apache.commons.collections4.functors.ChainedClosure<E>(false , cmds);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"closures"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:142","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[],"tindex":"7fd83bab-2e8e-11e6-ac4b-f949c9cf44b7","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:135","type":"CtMethodImpl","sourcecode":"public boolean containsAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        {\n            if (coll instanceof org.apache.commons.collections4.Bag) {\n                return containsAll(((org.apache.commons.collections4.Bag<?>)(coll)));\n            } \n            return containsAll(new org.apache.commons.collections4.bag.HashBag<java.lang.Object>(coll));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableBidiMap:56","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[4],"tindex":"7fd862bc-2e8e-11e6-ac4b-e945d771ecb2","method":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:62","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.Map<K, V> unmodifiableMap(final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final java.util.Map<K, V> java.util.Map<K, V> = ((java.util.Map<K, V>)(map));\n                return tmpMap;\n            } \n            return new org.apache.commons.collections4.map.UnmodifiableMap<K, V>(map);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:764","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[5],"tindex":"7fd8b0dd-2e8e-11e6-ac4b-e77e2329c265","method":{"position":"org.apache.commons.collections4.ListUtils:546","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> longestCommonSubsequence(final java.util.List<E> a, final java.util.List<E> b, final org.apache.commons.collections4.Equator<? super E> equator) {\n    if (b == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((a == null) || (b == null)) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (equator == null) {\n                throw new java.lang.IllegalArgumentException(\"Equator must not be null\");\n            } \n            final org.apache.commons.collections4.sequence.SequencesComparator<E> org.apache.commons.collections4.sequence.SequencesComparator<E> = new org.apache.commons.collections4.sequence.SequencesComparator<E>(a , b , equator);\n            final org.apache.commons.collections4.sequence.EditScript<E> org.apache.commons.collections4.sequence.EditScript<E> = comparator.getScript();\n            final org.apache.commons.collections4.ListUtils.LcsVisitor<E> org.apache.commons.collections4.ListUtils.LcsVisitor<E> = new org.apache.commons.collections4.ListUtils.LcsVisitor<E>();\n            script.visit(visitor);\n            return visitor.getSubSequence();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"b"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.OrPredicate:50","type":"CtBinaryOperatorImpl","sourcecode":"(predicate1 == null) || (predicate2 == null)"},"failures":[6],"tindex":"7fd9260e-2e8e-11e6-ac4b-dfed863ef459","method":{"position":"org.apache.commons.collections4.PredicateUtils:256","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> andPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate1, final org.apache.commons.collections4.Predicate<? super T> predicate2) {\n    if ((predicate2 == null) || (predicate2 == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.AndPredicate.<T>andPredicate(predicate1, predicate2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate1":"predicate2","predicate2":"predicate2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ComparatorUtils:153","type":"CtBinaryOperatorImpl","sourcecode":"comparator == null"},"failures":[],"tindex":"7fd94d1f-2e8e-11e6-ac4b-5b17ca3da094","method":{"position":"org.apache.commons.collections4.ComparatorUtils:152","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>java.util.Comparator<E> nullLowComparator(java.util.Comparator<E> comparator) {\n    if (comparator == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (comparator == null) {\n                comparator = org.apache.commons.collections4.ComparatorUtils.org.apache.commons.collections4.ComparatorUtils.java.util.Comparator;\n            } \n            return new org.apache.commons.collections4.comparators.NullComparator<E>(comparator , false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:379","type":"CtBinaryOperatorImpl","sourcecode":"k == null"},"failures":[7],"tindex":"7fd97430-2e8e-11e6-ac4b-e97d80de8dec","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"k":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:1102","type":"CtBinaryOperatorImpl","sourcecode":"count > 3"},"failures":[8],"tindex":"7fd99b41-2e8e-11e6-ac4b-0bc83b856a93","method":{"position":"org.apache.commons.collections4.map.LinkedMap:154","type":"CtMethodImpl","sourcecode":"public V getValue(final int index) {\n    if (index > 3) {\n        {\n            return getEntry(index).getValue();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:1757","type":"CtBinaryOperatorImpl","sourcecode":"map == null"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"7fdb7002-2e8e-11e6-ac4b-0f9df04b4a2d","method":{"position":"org.apache.commons.collections4.map.FixedSizeMap:72","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.map.FixedSizeMap<K, V> fixedSizeMap(final java.util.Map<K, V> map) {\n    if (map == null) {\n        {\n            return new org.apache.commons.collections4.map.FixedSizeMap<K, V>(map);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1255","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Map<?, ?>"},"failures":[1,48,2,49,50],"tindex":"7fdb7003-2e8e-11e6-ac4b-050282f28936","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:246","type":"CtMethodImpl","sourcecode":"protected boolean isEqualKey(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> entry, final java.lang.Object key1, final java.lang.Object key2) {\n    if (key1 instanceof java.util.Map<?, ?>) {\n        {\n            final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = entry.getKey();\n            return (((multi.size()) == 2) && ((key1 == (multi.getKey(0))) || ((key1 != null) && (key1.equals(multi.getKey(0)))))) && ((key2 == (multi.getKey(1))) || ((key1 != null) && (key2.equals(multi.getKey(1)))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:575","type":"CtBinaryOperatorImpl","sourcecode":"(a == null) || (b == null)"},"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"tindex":"7fdb7004-2e8e-11e6-ac4b-b577e2686246","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:664","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((obj == null) || (obj == null)) {\n        {\n            if (obj == (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry.this)) {\n                return true;\n            } \n            if ((obj instanceof java.util.Map.Entry) == false) {\n                return false;\n            } \n            final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(obj));\n            final java.lang.Object java.lang.Object = entry.getKey();\n            final java.lang.Object java.lang.Object = entry.getValue();\n            if ((entryKey == null) || (entryValue == null)) {\n                return false;\n            } \n            return (org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.isEqualKey(entryKey, java.lang.Object)) && (org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.isEqualValue(entryValue, getValue()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"obj","b":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1071","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.w3c.dom.NodeList"},"failures":[84,57,58,59,63,64,65,85,86,66,87,88,89,51,52,53,54,55,56,90,91,74,75,76,80,81,82,92,93,83,94,95,96,68,69,70,71,72,73],"tindex":"7fdb9715-2e8e-11e6-ac4b-211a8c847f07","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(final java.lang.Object key) {\n    if (key instanceof org.w3c.dom.NodeList) {\n        {\n            purgeBeforeRead();\n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = getEntry(key);\n            if (entry == null) {\n                return false;\n            } \n            return (entry.getValue()) != null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:971","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(bitIndex)"},"failures":[],"tindex":"7fdbbe26-2e8e-11e6-ac4b-b91a62cf3568","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:133","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E remove(final int index) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(index)) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"index"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:253","type":"CtBinaryOperatorImpl","sourcecode":"nCopies > 0"},"failures":[97,98,99,100],"tindex":"7fdbbe27-2e8e-11e6-ac4b-b1090114b3c7","method":{"position":"org.apache.commons.collections4.CollectionUtils:1176","type":"CtMethodImpl","sourcecode":"public static <T>T get(final java.util.Iterator<T> iterator, final int index) {\n    if (index > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = index;\n            org.apache.commons.collections4.CollectionUtils.checkIndexBounds(i);\n            while (iterator.hasNext()) {\n                i--;\n                if (i == (-1)) {\n                    return iterator.next();\n                } \n                iterator.next();\n            }\n            throw new java.lang.IndexOutOfBoundsException((\"Entry does not exist: \" + i));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nCopies":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.StaticBucketMap:702","type":"CtBinaryOperatorImpl","sourcecode":"r == null"},"failures":[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"tindex":"7fdbbe28-2e8e-11e6-ac4b-3799a85490d8","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:568","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object value) {\n    if (value == null) {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.KeySetView.this.org.apache.commons.collections4.map.ListOrderedMap<K, java.lang.Object>.containsKey(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"r":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:62","type":"CtBinaryOperatorImpl","sourcecode":"nodeList == null"},"failures":[125],"tindex":"7fdbe539-2e8e-11e6-ac4b-a9d7bb19158f","method":{"position":"org.apache.commons.collections4.map.Flat3Map:437","type":"CtMethodImpl","sourcecode":"public V remove(final java.lang.Object key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n                return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.remove(key);\n            } \n            if ((int) == 0) {\n                return null;\n            } \n            if (key == null) {\n                switch (int) {\n                    case 3 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 2;\n                            return old;\n                        } \n                        return null;\n                    case 2 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 1;\n                            return old;\n                        } \n                        if ((K) == null) {\n                            final V V = V;\n                            int = int;\n                            K = K;\n                            V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 1;\n                            return old;\n                        } \n                        return null;\n                    case 1 :\n                        if ((K) == null) {\n                            final V V = V;\n                            int = 0;\n                            K = null;\n                            V = null;\n                            int = 0;\n                            return old;\n                        } \n                }\n            } else {\n                if ((int) > 0) {\n                    final int int = key.hashCode();\n                    switch (int) {\n                        case 3 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 2;\n                                return old;\n                            } \n                            return null;\n                        case 2 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 1;\n                                return old;\n                            } \n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = int;\n                                K = K;\n                                V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 1;\n                                return old;\n                            } \n                            return null;\n                        case 1 :\n                            if (((int) == hashCode) && (key.equals(K))) {\n                                final V V = V;\n                                int = 0;\n                                K = null;\n                                V = null;\n                                int = 0;\n                                return old;\n                            } \n                    }\n                } \n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeList":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:313","type":"CtBinaryOperatorImpl","sourcecode":"node == (header)"},"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"tindex":"7fdc335a-2e8e-11e6-ac4b-d97b1dfbde00","method":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:162","type":"CtMethodImpl","sourcecode":"protected void addNodeToCache(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> node) {\n    if (node == node) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (isCacheFull()) {\n                return ;\n            } \n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n            node.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = null;\n            node.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = nextCachedNode;\n            node.setValue(null);\n            org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = node;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node","header":"node"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:718","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"7fdc335b-2e8e-11e6-ac4b-cfafb9498d56","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1815","type":"CtMethodImpl","sourcecode":"private java.util.Map.Entry<V, K> createEntry(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node) {\n    if (node == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry<V, K>(node.getValue() , node.getKey());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"node"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:292","type":"CtBinaryOperatorImpl","sourcecode":"cur == null"},"failures":[],"tindex":"7fdc5a6c-2e8e-11e6-ac4b-61106858f085","method":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:271","type":"CtMethodImpl","sourcecode":"protected void registerCursor(final org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> cursor) {\n    if (cursor == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>> java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>> = java.util.List<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.iterator() ; it.hasNext() ; ) {\n                final java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> = it.next();\n                if ((ref.get()) == null) {\n                    it.remove();\n                } \n            }\n            java.util.List<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.add(new java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>(cursor));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cur":"cursor"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:697","type":"CtBinaryOperatorImpl","sourcecode":"doubleObject == null"},"failures":[84,90],"tindex":"7fdc817d-2e8e-11e6-ac4b-df6475b0507f","method":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:242","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(final java.lang.Object key) {\n    if (key == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            purgeBeforeRead();\n            final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = getEntry(key);\n            if (entry == null) {\n                return null;\n            } \n            return entry.getValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"doubleObject":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1326","type":"CtBinaryOperatorImpl","sourcecode":"(obj instanceof java.util.Map) == false"},"failures":[],"tindex":"7fdc817e-2e8e-11e6-ac4b-5519069bc29f","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:179","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key instanceof java.util.Map) == false) {\n        {\n            key = convertKey(key);\n            final int int = hash(key);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex(hashCode, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(key, entry.java.lang.Object))) {\n                    return entry.getValue();\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n            }\n            return null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"CtBinaryOperatorImpl","sourcecode":"closure == null"},"failures":[],"tindex":"7fdd6bdf-2e8e-11e6-ac4b-5f2f0cd2d52d","method":{"position":"org.apache.commons.collections4.ClosureUtils:255","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> ifClosure(final org.apache.commons.collections4.Predicate<? super E> predicate, final org.apache.commons.collections4.Closure<? super E> trueClosure, final org.apache.commons.collections4.Closure<? super E> falseClosure) {\n    if (falseClosure == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.IfClosure.<E>ifClosure(predicate, trueClosure, falseClosure);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closure":"falseClosure"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:506","type":"CtBinaryOperatorImpl","sourcecode":"key2 != null"},"failures":[142],"tindex":"7fdd6be0-2e8e-11e6-ac4b-e79bdb44aea2","method":{"position":"org.apache.commons.collections4.SplitMapUtils:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.collections4.SplitMapUtils.WrappedPut.this)) {\n                return true;\n            } \n            return (obj instanceof org.apache.commons.collections4.SplitMapUtils.WrappedPut) && (((org.apache.commons.collections4.SplitMapUtils.WrappedPut<?, ?>)(obj)).org.apache.commons.collections4.Put<?, ?>.equals(org.apache.commons.collections4.SplitMapUtils.WrappedPut.this.org.apache.commons.collections4.Put<K, V>));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.AndPredicate:50","type":"CtBinaryOperatorImpl","sourcecode":"(predicate1 == null) || (predicate2 == null)"},"failures":[143],"tindex":"7fdd6be1-2e8e-11e6-ac4b-113c4c84c44c","method":{"position":"org.apache.commons.collections4.PredicateUtils:502","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsFalsePredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if ((predicate == null) || (predicate == null)) {\n        {\n            return org.apache.commons.collections4.functors.NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate1":"predicate","predicate2":"predicate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"7fdd92f2-2e8e-11e6-ac4b-3d0e8f0845a5","method":{"position":"org.apache.commons.collections4.MapUtils:125","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.String getString(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map != null) {\n                final java.lang.Object java.lang.Object = map.get(key);\n                if (answer != null) {\n                    return answer.toString();\n                } \n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:659","type":"CtBinaryOperatorImpl","sourcecode":"(previous == null) || (start != (previous.predecessor))"},"failures":[144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"tindex":"7fdd92f3-2e8e-11e6-ac4b-e11e79115c07","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:610","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntry(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> node) {\n    if ((node == null) || (node != node)) {\n        {\n            if (node == null) {\n                return firstEntry();\n            } else {\n                return nextEntryImpl(node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, node, null);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"node","start":"node","predecessor":"node"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ComparatorUtils:236","type":"CtBinaryOperatorImpl","sourcecode":"comparator == null"},"failures":[],"tindex":"7fddba04-2e8e-11e6-ac4b-6d2a5b37e738","method":{"position":"org.apache.commons.collections4.ComparatorUtils:215","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>E min(final E o1, final E o2, java.util.Comparator<E> comparator) {\n    if (comparator == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (comparator == null) {\n                comparator = org.apache.commons.collections4.ComparatorUtils.org.apache.commons.collections4.ComparatorUtils.java.util.Comparator;\n            } \n            final int int = comparator.compare(o1, o2);\n            return c < 0 ? o1 : o2;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:1146","type":"CtBinaryOperatorImpl","sourcecode":"(array == null) || ((array.length) == 0)"},"failures":[172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193],"tindex":"7fddba05-2e8e-11e6-ac4b-efbdd0958832","method":{"position":"org.apache.commons.collections4.list.TreeList:452","type":"CtMethodImpl","sourcecode":"void toArray(final java.lang.Object[] array, final int index) {\n    if ((array == null) || (index == 0)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            array[index] = E;\n            if ((getLeftSubTree()) != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(array, (index + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            } \n            if ((getRightSubTree()) != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(array, (index + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array","length":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:278","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[],"tindex":"7fdde116-2e8e-11e6-ac4b-79c5934f74e9","method":{"position":"org.apache.commons.collections4.MapUtils:426","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Number getNumber(final java.util.Map<? super K, ?> map, final K key, final java.lang.Number defaultValue) {\n    if (defaultValue == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Number java.lang.Number = org.apache.commons.collections4.MapUtils.getNumber(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"defaultValue"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.NodeCachingLinkedList:187","type":"CtBinaryOperatorImpl","sourcecode":"cachedNode == null"},"failures":[194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,126,128,129,130,131,127,286,287,288,289,290,291,292,293,294,295,296,132,297,298,133,134,135,136,299,300,301,302,303,304,137,305,306,307,308,138,139,140,141,309,310,311,312,313],"tindex":"7fdde117-2e8e-11e6-ac4b-4f7ab6b68706","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:493","type":"CtMethodImpl","sourcecode":"protected void addNode(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> nodeToInsert, final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> insertBeforeNode) {\n    if (insertBeforeNode == null) {\n        {\n            nodeToInsert.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = insertBeforeNode;\n            nodeToInsert.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = insertBeforeNode.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n            insertBeforeNode.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = nodeToInsert;\n            insertBeforeNode.org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = nodeToInsert;\n            (int)++;\n            (int)++;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cachedNode":"insertBeforeNode"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:245","type":"CtBinaryOperatorImpl","sourcecode":"list1 == list2"},"failures":[],"tindex":"7fde0828-2e8e-11e6-ac4b-7d9b96c48b67","method":{"position":"org.apache.commons.collections4.CollectionUtils:542","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic static boolean isEqualCollection(final java.util.Collection<?> a, final java.util.Collection<?> b, final org.apache.commons.collections4.Equator<?> equator) {\n    if (b == b) {\n        {\n            if (equator == null) {\n                throw new java.lang.IllegalArgumentException(\"equator may not be null\");\n            } \n            if ((a.size()) != (b.size())) {\n                return false;\n            } \n            final org.apache.commons.collections4.Transformer org.apache.commons.collections4.Transformer = new org.apache.commons.collections4.Transformer() {\n                public org.apache.commons.collections4.CollectionUtils.EquatorWrapper<?> transform(final java.lang.Object input) {\n                    return new org.apache.commons.collections4.CollectionUtils.EquatorWrapper(equator , input);\n                }\n            };\n            return org.apache.commons.collections4.CollectionUtils.isEqualCollection(org.apache.commons.collections4.CollectionUtils.collect(a, transformer), org.apache.commons.collections4.CollectionUtils.collect(b, transformer));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"b","list2":"b"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:128","type":"CtBinaryOperatorImpl","sourcecode":"answer != null"},"failures":[314,315],"tindex":"7fde2f39-2e8e-11e6-ac4b-b5130797cc7a","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean add(final java.lang.Object object) {\n    if (object != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:256","type":"CtBinaryOperatorImpl","sourcecode":"mut == null"},"failures":[1,48],"tindex":"7fde2f3a-2e8e-11e6-ac4b-5f4a52b79d3f","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:657","type":"CtMethodImpl","sourcecode":"protected int hash(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3, final java.lang.Object key4, final java.lang.Object key5) {\n    if (key5 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            if (key1 != null) {\n                h ^= key1.hashCode();\n            } \n            if (key2 != null) {\n                h ^= key2.hashCode();\n            } \n            if (key3 != null) {\n                h ^= key3.hashCode();\n            } \n            if (key4 != null) {\n                h ^= key4.hashCode();\n            } \n            if (key5 != null) {\n                h ^= key5.hashCode();\n            } \n            h += ~(h << 9);\n            h ^= h >>> 14;\n            h += h << 4;\n            h ^= h >>> 10;\n            return h;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mut":"key5"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:949","type":"CtBinaryOperatorImpl","sourcecode":"(delegateMap) != null"},"failures":[316,317],"tindex":"7fdf40ab-2e8e-11e6-ac4b-ef3851ce0290","method":{"position":"org.apache.commons.collections4.SplitMapUtils:210","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <K, V>org.apache.commons.collections4.IterableMap<K, V> readableMap(final org.apache.commons.collections4.Get<K, V> get) {\n    if (get != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (get == null) {\n                throw new java.lang.IllegalArgumentException(\"Get must not be null\");\n            } \n            if (get instanceof java.util.Map) {\n                return get instanceof org.apache.commons.collections4.IterableMap ? ((org.apache.commons.collections4.IterableMap<K, V>)(get)) : org.apache.commons.collections4.MapUtils.iterableMap(((java.util.Map<K, V>)(get)));\n            } \n            return new org.apache.commons.collections4.SplitMapUtils.WrappedGet<K, V>(get);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"get"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:675","type":"CtBinaryOperatorImpl","sourcecode":"transform == null"},"failures":[],"tindex":"7fdf67bc-2e8e-11e6-ac4b-f1dae4a2076c","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:203","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic <I, O>org.apache.commons.collections4.Transformer<I, O> coerce(final org.apache.commons.collections4.Transformer<? super I, ? extends O> transformer) {\n    if (transformer == null) {\n        {\n            return ((org.apache.commons.collections4.Transformer<I, O>)(transformer));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transform":"transformer"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[318,319,320,321],"tindex":"7fe02b0d-2e8e-11e6-ac4b-a1442841f70d","method":{"position":"org.apache.commons.collections4.map.PredicatedMap:185","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> mapToCopy) {\n    if (mapToCopy instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : mapToCopy.entrySet()) {\n                validate(entry.getKey(), entry.getValue());\n            }\n            super.putAll(mapToCopy);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":38,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
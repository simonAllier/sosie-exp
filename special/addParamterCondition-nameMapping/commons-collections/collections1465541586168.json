{"failureDictionary":{"org.apache.commons.collections4.map.StaticBucketMapTest.test_containsKey_nullMatchesIncorrectly":176,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":454,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":560,"org.apache.commons.collections4.map.MultiValueMapTest.testMapEquals":404,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":82,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":100,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":636,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking":172,"org.apache.commons.collections4.ListUtilsTest.testIntersectListWithNoOverlapAndDifferentTypes":620,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":586,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":701,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":536,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":596,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":662,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":631,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapClear":274,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapRemove":748,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":670,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemove1":752,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testObjectEqualsSelf":283,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRetainAll":321,"org.apache.commons.collections4.map.CompositeMapTest.testResolveCollision":414,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemove3":754,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemove2":753,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAdd":71,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRetainAll":36,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveChangesMap":323,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":707,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":647,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsKey":726,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":614,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndexBoundsChecking":712,"org.apache.commons.collections4.comparators.ComparatorChainTest.testSimpleSerialization":430,"org.apache.commons.collections4.map.LinkedMapTest.testGetValueByIndex":343,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":580,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":567,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":528,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":544,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":591,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":139,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":491,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareGreater":438,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareGreaterOrEqual":437,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":564,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":102,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":650,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":375,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiGetKey":220,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveAll":59,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":126,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveChangesMap":319,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapPut":188,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":541,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetIteratorRemoveChangesMap":326,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":692,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":490,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":513,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":702,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextNextRemoveIndex1ByList":8,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":680,"org.apache.commons.collections4.ClosureUtilsTest.testInvokeClosure":293,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":112,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapContainsKey":717,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove1":90,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":50,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove2":91,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsKey":275,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove3":92,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":520,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":265,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailDoubleRemove":361,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":697,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesIteratorRemoveChangesMap":205,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":81,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":529,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove3":253,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove2":252,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove1":251,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":502,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":575,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":353,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":340,"org.apache.commons.collections4.map.CompositeMapTest.testPut":413,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":694,"org.apache.commons.collections4.comparators.ComparatorChainTest.testRandomListSort":423,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutAll":731,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPut":280,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":627,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":46,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchClosure":710,"org.apache.commons.collections4.map.LinkedMapTest.testGetByIndex":342,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorPreviousRemovePrevious":20,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains1":149,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains2":150,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains3":151,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiGetKey":228,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":515,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":653,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":510,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveAll":44,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":141,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":527,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiInverse":230,"org.apache.commons.collections4.list.CursorableLinkedListTest.testIndexOf":70,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":630,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":40,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation4":42,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapHashCode":306,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":350,"org.apache.commons.collections4.bag.PredicatedBagTest.testCanonicalEmptyCollectionExists":390,"org.apache.commons.collections4.map.CompositeMapTest.testPutAll":419,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":358,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":585,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":118,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testLocaleIndependence":57,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":113,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiInverse":222,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_getEntry_int":344,"org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Null":0,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate":289,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":379,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":678,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":507,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":639,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":148,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsHashBag":365,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapEquals":719,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContainsAll":548,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":534,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":530,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":119,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":120,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":121,"org.apache.commons.collections4.CollectionUtilsTest.forAllDoCollection":291,"org.apache.commons.collections4.TrieUtilsTest.testUnmodifiableTrie":339,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":572,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":668,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":600,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":494,"org.apache.commons.collections4.CollectionUtilsTest.forAllDoIterator":290,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx2":287,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx3":288,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalAdd":346,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":482,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":610,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapToString":186,"org.apache.commons.collections4.comparators.ComparatorChainTest.testNoopComparatorChain":422,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsSelfHashCode":387,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":38,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testDecoratedMap":245,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":354,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemoveAll":211,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByIterator":10,"org.apache.commons.collections4.list.CursorableLinkedListTest.testGetNode":75,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":159,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":27,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":582,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":559,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":526,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":607,"org.apache.commons.collections4.bag.PredicatedBagTest.testCanonicalFullCollectionExists":391,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":447,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testObjectHashCodeEqualsContract":271,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveAll":328,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsContract":388,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":626,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":453,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapIsEmpty":272,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":97,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByKeySet":61,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToString":384,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove3":170,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":169,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":168,"org.apache.commons.collections4.comparators.ComparatorChainTest.testObjectEqualsSelf":428,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapHashCode":185,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetClearChangesMap":311,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":373,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRetainAll":60,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":506,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":628,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":673,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapRemove":732,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":95,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutNullValue":309,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":522,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testNullHandling":299,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesIteratorRemoveChangesMap":322,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexFirst":4,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":399,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":570,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveAll":35,"org.apache.commons.collections4.map.StaticBucketMapTest.testMakeMap":177,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemoveChangesMap":210,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiModifyEntrySet":236,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":333,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailNoMore":360,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":47,"org.apache.commons.collections4.ListUtilsTest.testPartition":756,"org.apache.commons.collections4.ListUtilsTest.testIntersectNonEmptyWithEmptyList":617,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":571,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":687,"org.apache.commons.collections4.list.CursorableLinkedListTest.testAddNodeAfter":73,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetIteratorRemoveChangesMap":255,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":383,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testHashEntry":297,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapGet":305,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":327,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":367,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveIndex1ByList":5,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiRemove":224,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":487,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":370,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":58,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":556,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutNullKey":308,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":488,"org.apache.commons.collections4.map.HashedMapTest.testMapPut":84,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapSize":741,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":684,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetIteratorRemoveChangesMap":209,"org.apache.commons.collections4.BagUtilsTest.testPredicatedBag":345,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":604,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":442,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiGetKey":217,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":80,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnmodifiable":613,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove1":316,"org.apache.commons.collections4.map.MultiValueMapTest.testTotalSize":402,"org.apache.commons.collections4.map.HashedMapTest.testClone":28,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":317,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":368,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove3":318,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":501,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":241,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":269,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":216,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":267,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":547,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":140,"org.apache.commons.collections4.comparators.ComparatorChainTest.testSerializeDeserializeThenCompare":433,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveChangesMap":109,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":552,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorPreviousRemoveNext":19,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":466,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":129,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":599,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":660,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testAddNodeAfter":65,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":573,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":463,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectEqualsSelf":385,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSubListRemove":18,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":525,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":652,"org.apache.commons.collections4.comparators.ComparatorChainTest.testComparatorIsSerializable":427,"org.apache.commons.collections4.map.Flat3MapTest.testMapPut":395,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains2":104,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareLessOrEqual":436,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":691,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains1":103,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":451,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains3":105,"org.apache.commons.collections4.map.CompositeMapTest.testAddComposited":418,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveChangesMap":93,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":696,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":698,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemove":232,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":455,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":493,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":516,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":658,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":268,"org.apache.commons.collections4.map.LinkedMapTest.testClone":32,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":649,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveChangesMap":254,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":677,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArray":362,"org.apache.commons.collections4.list.CursorableLinkedListTest.testEqualsAndHashCode":68,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":117,"org.apache.commons.collections4.CollectionUtilsTest.forAllDoFailure":292,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapContainsKey":181,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains1":313,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains2":314,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains3":315,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":478,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":651,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveChangesMap":256,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":125,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":562,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testDecorateFactory":621,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":633,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapIsEmpty":724,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":537,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":699,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testDecorateFactory":338,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesRemoveAll":203,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":341,"org.apache.commons.collections4.map.Flat3MapTest.testValuesRemoveChangesMap":396,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":505,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":554,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":475,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesClearChangesMap":310,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":381,"org.apache.commons.collections4.map.Flat3MapTest.testValuesIteratorRemoveChangesMap":397,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":666,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveByListSetByIterator":14,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsValue":727,"org.apache.commons.collections4.bag.SynchronizedBagTest.testEqualsNull":762,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":545,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorNextIndexMid":3,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":551,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove3":738,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":646,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove2":737,"org.apache.commons.collections4.functors.ComparatorPredicateTest.predicateSanityTests":439,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove1":736,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":440,"org.apache.commons.collections4.CollectionUtilsTest.forAllButLastDoCollection":214,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":565,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFullMapCompatibility":307,"org.apache.commons.collections4.comparators.ComparatorChainTest.testComparatorChainOnMinvaluedCompatator":421,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testContainsKey":244,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":467,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":587,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":609,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorConcurrentModification":2,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesRemoveChangesMap":202,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":128,"org.apache.commons.collections4.comparators.ComparatorChainTest.testObjectHashCodeEqualsContract":431,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":543,"org.apache.commons.collections4.ListUtilsTest.testIntersectNonEmptySubset":619,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapPutNullKey":189,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":634,"org.apache.commons.collections4.CollectionUtilsTest.forAllButLastDoIterator":215,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":250,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":667,"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":85,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiGetKeyInverse":239,"org.apache.commons.collections4.comparators.ComparatorChainTest.testComparatorCompatibility":426,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":471,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveLast":64,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":382,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":705,"org.apache.commons.collections4.comparators.ComparatorChainTest.testReverseListSort":424,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":538,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRetainAll":329,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testSerializeDeserializeThenCompare":286,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapContainsValue":743,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapRemove":192,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":264,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":535,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":661,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":258,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":164,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":558,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiGetKeyInverse":229,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiGetKey":225,"org.apache.commons.collections4.ListUtilsTest.testIntersectionOrderInsensitivity":616,"org.apache.commons.collections4.MapUtilsTest.testPopulateMultiMap":757,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":688,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":39,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":332,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapGet":278,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":597,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testEqualsNull":761,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":533,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":160,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":470,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveChangesMap":398,"org.apache.commons.collections4.map.HashedMapTest.testValuesIteratorRemoveChangesMap":393,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":642,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesClearChangesMap":193,"org.apache.commons.collections4.list.CursorableLinkedListTest.testContains":69,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":480,"org.apache.commons.collections4.map.HashedMapTest.testValuesRemoveChangesMap":392,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":495,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapContainsValue":718,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":519,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveAll":324,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":450,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapToString":279,"org.apache.commons.collections4.map.LinkedMapTest.testMapGet":34,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testObjectHashCodeEqualsContract":285,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":99,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":461,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":49,"org.apache.commons.collections4.map.StaticBucketMapTest.test_containsValue_nullMatchesIncorrectly":175,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":532,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":598,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapPutNullValue":190,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":489,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContainsAll":550,"org.apache.commons.collections4.ClosureUtilsTest.testChainedClosure":63,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":115,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":555,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetContains3":751,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":372,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemove":237,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":681,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetContains1":749,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetContains2":750,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":54,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":394,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapClear":304,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":648,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiInverse":235,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":376,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":606,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":706,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndex":335,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":497,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEqualsNull":270,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetClearChangesMap":312,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":539,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":356,"org.apache.commons.collections4.list.CursorableLinkedListTest.testSet":336,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":671,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":663,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiInverse":240,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":83,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":531,"org.apache.commons.collections4.map.MultiValueMapTest.testContainsValue":758,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiInverse":227,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareLess":435,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":635,"org.apache.commons.collections4.map.MultiValueMapTest.testSize_Key":405,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":459,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":25,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":98,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRetainAll":212,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemove":242,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":378,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":78,"org.apache.commons.collections4.map.CompositeMapTest.testGet":412,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapToString":745,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":592,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":500,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndexBoundsChecking":765,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":152,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":611,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":445,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove3":154,"org.apache.commons.collections4.comparators.ComparatorChainTest.testEmptyListSort":425,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":153,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":676,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRetainAll":31,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapContainsKey":742,"org.apache.commons.collections4.set.CompositeSetTest.testAddCompositedCollision":409,"org.apache.commons.collections4.map.StaticBucketMapTest.test_get_nullMatchesIncorrectly":174,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":584,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPut":730,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":131,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetRetainAll":208,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveLast":72,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":257,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContainsAll":355,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":557,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":110,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArrayPopulate":363,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":553,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":675,"org.apache.commons.collections4.map.LinkedMapTest.testRemoveByIndex":33,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":590,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextSetByIterator":16,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":111,"org.apache.commons.collections4.set.CompositeSetTest.testFailedCollisionResolution":411,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRetainAll":45,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":770,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":484,"org.apache.commons.collections4.map.StaticBucketMapTest.testValuesRetainAll":204,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextAddIndex1ByList":12,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutAll":281,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":608,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":579,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":704,"org.apache.commons.collections4.map.MultiValueMapTest.testRemove_KeyItem":403,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":364,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":521,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":124,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapSize":725,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":123,"org.apache.commons.collections4.CollectionUtilsTest.maxSize":295,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListSetByIndexBoundsChecking2":766,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":122,"org.apache.commons.collections4.comparators.ComparatorChainTest.testObjectHashCodeEqualsSelfHashCode":432,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":638,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":86,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutAll":147,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":26,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":261,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":472,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapGet":184,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousSetByIterator":15,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testExpiration":247,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":512,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":542,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":659,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":605,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":132,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":517,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetClearChangesMap":195,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":48,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapEquals":744,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":473,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":496,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiGetKey":233,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorNextRemovePrevious":22,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapSize":716,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCursorRemove":1,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":508,"org.apache.commons.collections4.map.StaticBucketMapTest.testFullMapCompatibility":187,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":625,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":469,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapEquals":277,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":492,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testGet":243,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalDecorate":348,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":693,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":374,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":486,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":700,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":347,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":576,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":682,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":713,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":334,"org.apache.commons.collections4.ClosureUtilsTest.testDoWhileClosure":400,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":569,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":711,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiGetKeyInverse":218,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapEquals":183,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":603,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":171,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":116,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiModifyEntrySet":231,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":581,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":474,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapContainsValue":182,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListListIteratorNextRemoveNext":21,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorRemoveProtectsInvariants":349,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":441,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetIteratorRemoveChangesMap":213,"org.apache.commons.collections4.bag.PredicatedBagTest.testSerializeDeserializeThenCompare":369,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":657,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":444,"org.apache.commons.collections4.map.CompositeMapTest.testRemoveComposited":416,"org.apache.commons.collections4.map.CompositeMapTest.testRemoveFromUnderlying":415,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":589,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":656,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":623,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":456,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testPurgeValues":298,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":51,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":158,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiGetKey":238,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsValue":276,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":29,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":52,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":632,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveComposited":407,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPut":146,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":477,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":540,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastEntrySet":300,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":690,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testZeroTimeToLive":246,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiGetKeyInverse":221,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":679,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetContains2":197,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetContains3":198,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":664,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndex":337,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove3":108,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapPutAll":747,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove2":107,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":460,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove1":106,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndexBoundsChecking2":768,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetContains1":196,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapIsEmpty":740,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutAll":101,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetClearChangesMap":194,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastValues":302,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRetainAll":325,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":406,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":524,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":602,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListIteratorRemove":17,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiModifyEntrySet":223,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":709,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveAll":30,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testValuesRemoveAll":320,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":481,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":157,"org.apache.commons.collections4.PredicateUtilsTest.testTransformedPredicate":420,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListSetByIndexBoundsChecking":767,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":583,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":136,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":137,"org.apache.commons.collections4.map.CompositeMapTest.testRemoveFromComposited":417,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":138,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextRemoveIndex1ByList":6,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":155,"org.apache.commons.collections4.TransformerUtilsTest.testSwitchTransformer":769,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":144,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":410,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":331,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":594,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":443,"org.apache.commons.collections4.ListUtilsTest.testIntersectListWithSelf":615,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":53,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":498,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":145,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":377,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":173,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":518,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":669,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":683,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":577,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":94,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":703,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFail":359,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":130,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testEntrySetContains1":721,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testEntrySetContains2":722,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testEntrySetContains3":723,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":665,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":588,"org.apache.commons.collections4.list.CursorableLinkedListTest.testRemoveNode":74,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":499,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":568,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":260,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":357,"org.apache.commons.collections4.ListUtilsTest.testIntersectEmptyWithEmptyList":618,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":685,"org.apache.commons.collections4.bag.PredicatedBagTest.testEqualsNull":386,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":593,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextRemoveIndex1ByList":7,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagHashCode":366,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":43,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":504,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testClone":55,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":371,"org.apache.commons.collections4.CollectionUtilsTest.testRetainAll":764,"org.apache.commons.collections4.TransformerUtilsTest.testExecutorTransformer":262,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapToString":729,"org.apache.commons.collections4.set.CompositeSetTest.testContains":408,"org.apache.commons.collections4.CollectionUtilsTest.isFull":294,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":163,"org.apache.commons.collections4.functors.ComparatorPredicateTest.compareEquals":434,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousAddIndex1ByList":11,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRemoveChangesMap":62,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":643,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapPutAll":191,"org.apache.commons.collections4.map.MultiValueMapTest.testSize":401,"org.apache.commons.collections4.comparators.ComparatorChainTest.testEqualsNull":429,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":462,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":563,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContainsAll":549,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":695,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiGetKeyInverse":234,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":645,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":79,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemove3":201,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":578,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":629,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testRemoveNode":66,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiGetKeyInverse":226,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetRemoveChangesMap":206,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsTruePredicateEx1":622,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":644,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemove1":199,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsFalsePredicateEx1":77,"org.apache.commons.collections4.map.StaticBucketMapTest.testEntrySetRemove2":200,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextPreviousRemoveByIterator":9,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":263,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapEquals":728,"org.apache.commons.collections4.trie.PatriciaTrieTest.testEntrySetRemoveChangesMap":755,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetIteratorRemoveChangesMap":259,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":546,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiInverse":219,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapClear":180,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":523,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapIsEmpty":178,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":156,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapIsEmpty":715,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testMapToString":720,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":672,"org.apache.commons.collections4.map.Flat3MapTest.testClone4":41,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":485,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":479,"org.apache.commons.collections4.map.StaticBucketMapTest.testMapSize":179,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":248,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":446,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":448,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":468,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":640,"org.apache.commons.collections4.map.StaticBucketMapTest.testKeySetRemoveAll":207,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapRemove":282,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsSelf":351,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":566,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":380,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveChangesMap":739,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEqualsNull":284,"org.apache.commons.collections4.bag.PredicatedBagTest.testSimpleSerialization":389,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testFailFastKeySet":301,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":624,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":654,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":637,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains2":134,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains3":135,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains1":133,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testBasics":296,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains1":733,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains2":734,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains3":735,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":514,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map2":760,"org.apache.commons.collections4.list.CursorableLinkedListTest.testInternalState_CursorNextNextAddIndex1ByList":13,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":76,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map1":759,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":458,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":655,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":142,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionRemoveAll":24,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":465,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":483,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains1":87,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains2":88,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapSize":273,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":561,"org.apache.commons.collections4.map.MultiKeyMapTest.testClone":37,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":686,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":162,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndexBoundsChecking2":714,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":143,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":127,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":452,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":503,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":449,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":457,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":464,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":574,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":266,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":476,"org.apache.commons.collections4.list.CursorableLinkedListTest.testCollectionIteratorRemove":23,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains3":167,"org.apache.commons.collections4.ListUtilsTest.testRetainAll":763,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":511,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemove":352,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":612,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testCaseInsensitive":56,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":601,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testGetNode":67,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains1":165,"org.apache.commons.collections4.trie.PatriciaTrieTest.testMapPut":746,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains2":166,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":249,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":708,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":595,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains3":89,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":96,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":641,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":114,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":674,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":689,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMakeMap":303,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetIteratorRemoveChangesMap":330,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":161,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":509},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:575","type":"CtBinaryOperatorImpl","sourcecode":"(a == null) || (b == null)"},"failures":[0],"tindex":"fbff7d23-2ed7-11e6-bb4f-3b7b7d388cab","method":{"position":"org.apache.commons.collections4.CollectionUtils:1382","type":"CtMethodImpl","sourcecode":"public static boolean sizeIsEmpty(final java.lang.Object object) {\n    if ((object == null) || (object == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return true;\n            } else if (object instanceof java.util.Collection<?>) {\n                return ((java.util.Collection<?>)(object)).isEmpty();\n            } else if (object instanceof java.util.Map<?, ?>) {\n                return ((java.util.Map<?, ?>)(object)).isEmpty();\n            } else if (object instanceof java.lang.Object[]) {\n                return (((java.lang.Object[])(object)).int) == 0;\n            } else if (object instanceof java.util.Iterator<?>) {\n                return (((java.util.Iterator<?>)(object)).hasNext()) == false;\n            } else if (object instanceof java.util.Enumeration<?>) {\n                return (((java.util.Enumeration<?>)(object)).hasMoreElements()) == false;\n            } else {\n                try {\n                    return (java.lang.reflect.Array.getLength(object)) == 0;\n                } catch (final java.lang.IllegalArgumentException ex) {\n                    throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (object.getClass().getName())));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"object","b":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:177","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(bitIndex)"},"failures":[],"tindex":"fc006784-2ed7-11e6-bb4f-3b53ecf5aac6","method":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:204","type":"CtMethodImpl","sourcecode":"public org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> cursor(final int fromIndex) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(fromIndex)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> = new org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>(org.apache.commons.collections4.list.CursorableLinkedList.this , fromIndex);\n            registerCursor(cursor);\n            return cursor;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"fromIndex"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ArrayStack:157","type":"CtBinaryOperatorImpl","sourcecode":"((object == null) && (current == null)) || ((object != null) && (object.equals(current)))"},"failures":[],"tindex":"fc006785-2ed7-11e6-bb4f-036c39946f15","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2057","type":"CtMethodImpl","sourcecode":"public K get(final java.lang.Object key) {\n    if (((key == null) && (key == null)) || ((object != null) && (object.equals(current)))) {\n        {\n            return org.apache.commons.collections4.bidimap.TreeBidiMap.this.getKey(key);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"current":"key","object":"key"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1389","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.lang.Object[]"},"failures":[],"tindex":"fc008e96-2ed7-11e6-bb4f-f7448bf148f8","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:862","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object obj) {\n    if (obj instanceof java.lang.Object[]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((obj instanceof java.util.Map.Entry) == false) {\n                return false;\n            } \n            if ((contains(obj)) == false) {\n                return false;\n            } \n            final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(obj));\n            org.apache.commons.collections4.map.AbstractHashedMap<K, V>.remove(entry.getKey());\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:159","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(bitIndex)"},"failures":[],"tindex":"fc00b5a7-2ed7-11e6-bb4f-09d905b2c3cd","method":{"position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:56","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int bitIndex(final java.lang.String key, final int offsetInBits, final int lengthInBits, final java.lang.String other, final int otherOffsetInBits, final int otherLengthInBits) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(lengthInBits)) {\n        {\n            boolean boolean = true;\n            if (((((offsetInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0) || ((otherOffsetInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) || ((lengthInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) || ((otherLengthInBits % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) {\n                throw new java.lang.IllegalArgumentException(\"The offsets and lengths must be at Character boundaries\");\n            } \n            final int int = offsetInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int);\n            final int int = otherOffsetInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int);\n            final int int = beginIndex1 + (lengthInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int));\n            final int int = beginIndex2 + (otherLengthInBits / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int));\n            final int int = java.lang.Math.max(endIndex1, endIndex2);\n            char char = 0;\n            char char = 0;\n            for (int int = 0 ; i < length ; i++) {\n                final int int = beginIndex1 + i;\n                final int int = beginIndex2 + i;\n                if (index1 >= endIndex1) {\n                    k = 0;\n                } else {\n                    k = key.charAt(index1);\n                }\n                if ((other == null) || (index2 >= endIndex2)) {\n                    f = 0;\n                } else {\n                    f = other.charAt(index2);\n                }\n                if (k != f) {\n                    final int int = k ^ f;\n                    return ((i * (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) + (java.lang.Integer.numberOfLeadingZeros(x))) - (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int);\n                } \n                if (k != 0) {\n                    allNull = false;\n                } \n            }\n            if (allNull) {\n                return org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.int;\n            } \n            return org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"lengthInBits"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.SetUniqueList:217","type":"CtBinaryOperatorImpl","sourcecode":"(pos != (-1)) && (pos != index)"},"failures":[],"tindex":"fc0103c8-2ed7-11e6-bb4f-63a7b713c984","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1097","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> subtree(final K prefix, final int offsetInBits, final int lengthInBits) {\n    if ((lengthInBits != (-1)) && (pos != offsetInBits)) {\n        {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            while (true) {\n                if (((current.int) <= (path.int)) || (lengthInBits < (current.int))) {\n                    break;\n                } \n                path = current;\n                if (!(isBitSet(prefix, (offsetInBits + (current.int)), (offsetInBits + lengthInBits)))) {\n                    current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                } else {\n                    current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                }\n            }\n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = current.isEmpty() ? path : current;\n            if (entry.isEmpty()) {\n                return null;\n            } \n            final int int = offsetInBits + lengthInBits;\n            if ((entry == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) && ((lengthInBits(entry.getKey())) < endIndexInBits)) {\n                return null;\n            } \n            if ((isBitSet(prefix, endIndexInBits, endIndexInBits)) != (isBitSet(entry.K, lengthInBits, lengthInBits(entry.K)))) {\n                return null;\n            } \n            final int int = getKeyAnalyzer().bitIndex(prefix, offsetInBits, lengthInBits, entry.K, 0, lengthInBits(entry.getKey()));\n            if ((bitIndex >= 0) && (bitIndex < lengthInBits)) {\n                return null;\n            } \n            return entry;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"lengthInBits","index":"offsetInBits"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:331","type":"CtBinaryOperatorImpl","sourcecode":"node == (header)"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"fc012ad9-2ed7-11e6-bb4f-3385fc2a782d","method":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:504","type":"CtMethodImpl","sourcecode":"protected void nodeRemoved(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> node) {\n    if (node == node) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((node == (org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)) && (node == (org.apache.commons.collections4.list.AbstractLinkedList.Node<E>))) {\n                org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = node.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n                org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = null;\n                boolean = true;\n            } else if (node == (org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)) {\n                org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = node.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n                boolean = false;\n            } else if (node == (org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)) {\n                org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = null;\n                boolean = true;\n                (int)--;\n            } else {\n                boolean = false;\n                boolean = false;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node","header":"node"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:441","type":"CtBinaryOperatorImpl","sourcecode":"(size) == 0"},"failures":[],"tindex":"fc0178fa-2ed7-11e6-bb4f-490637c12f93","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:245","type":"CtMethodImpl","sourcecode":"public void putAll(int index, final java.util.Map<? extends K, ? extends V> map) {\n    if (index == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index < 0) || (index > (java.util.List<K>.size()))) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Size: \") + (java.util.List<K>.size())));\n            } \n            for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : map.entrySet()) {\n                final K K = entry.getKey();\n                final boolean boolean = containsKey(key);\n                put(index, entry.getKey(), entry.getValue());\n                if (!contains) {\n                    index++;\n                } else {\n                    index = (indexOf(entry.getKey())) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.CompositeCollection:293","type":"CtBinaryOperatorImpl","sourcecode":"(coll.size()) == 0"},"failures":[25],"tindex":"fc01a00b-2ed7-11e6-bb4f-f542515a5fe1","method":{"position":"org.apache.commons.collections4.list.SetUniqueList:246","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) == 0) {\n        {\n            boolean boolean = false;\n            for (final java.lang.Object java.lang.Object : coll) {\n                result |= remove(name);\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:553","type":"CtBinaryOperatorImpl","sourcecode":"index < ((size) / 2)"},"failures":[],"tindex":"fc01c71c-2ed7-11e6-bb4f-0534d6633092","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:456","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> getNearestEntryForKey(final K key, final int lengthInBits) {\n    if (lengthInBits == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lengthInBits < (lengthInBits / 2)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                    while (true) {\n                        if ((current.int) <= (path.int)) {\n                            return current;\n                        } \n                        path = current;\n                        if (!(isBitSet(key, current.int, lengthInBits))) {\n                            current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                        } else {\n                            current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"lengthInBits","index":"lengthInBits"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.LRUMap:208","type":"CtBinaryOperatorImpl","sourcecode":"entry == (header)"},"failures":[],"tindex":"fc01ee2d-2ed7-11e6-bb4f-cfd59b597451","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:713","type":"CtMethodImpl","sourcecode":"protected int entryHashCode(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> entry) {\n    if (entry == entry) {\n        {\n            return entry.int;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry","header":"entry"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:548","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[26,27],"tindex":"fc02153e-2ed7-11e6-bb4f-576ab5f85979","method":{"position":"org.apache.commons.collections4.bag.SynchronizedBag:106","type":"CtMethodImpl","sourcecode":"public int getCount(final java.lang.Object object) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.lang.Object) {\n                return getBag().getCount(object);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:312","type":"CtBinaryOperatorImpl","sourcecode":"(nodeCount) == 0"},"failures":[],"tindex":"fc02153f-2ed7-11e6-bb4f-573b54d0e598","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:456","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> getNearestEntryForKey(final K key, final int lengthInBits) {\n    if (lengthInBits == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lengthInBits < (lengthInBits / 2)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                    while (true) {\n                        if ((current.int) <= (path.int)) {\n                            return current;\n                        } \n                        path = current;\n                        if (!(isBitSet(key, current.int, lengthInBits))) {\n                            current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                        } else {\n                            current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nodeCount":"lengthInBits"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:125","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[],"tindex":"fc023c50-2ed7-11e6-bb4f-cfd3a9130f9c","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:255","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        {\n            boolean boolean = false;\n            final java.util.Iterator<E> java.util.Iterator<E> = iterator();\n            while (it.hasNext()) {\n                if (coll.contains(it.next())) {\n                    it.remove();\n                    modified = true;\n                } \n            }\n            return modified;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:979","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(bitIndex)"},"failures":[],"tindex":"fc026361-2ed7-11e6-bb4f-3fce2b0cacb1","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableSortedBag:140","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean add(final E object, final int count) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(count)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"count"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:359","type":"CtBinaryOperatorImpl","sourcecode":"key1 != null"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"fc028a72-2ed7-11e6-bb4f-bb61d079dd82","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:179","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            key = convertKey(key);\n            final int int = hash(key);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex(hashCode, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(key, entry.java.lang.Object))) {\n                    return entry.getValue();\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key1":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.SetUniqueList:75","type":"CtInvocationImpl","sourcecode":"list.isEmpty()"},"failures":[],"tindex":"fc02b183-2ed7-11e6-bb4f-d97c5b12b236","method":{"position":"org.apache.commons.collections4.ListUtils:386","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> synchronizedList(final java.util.List<E> list) {\n    if (list.isEmpty()) {\n        {\n            return java.util.Collections.synchronizedList(list);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[],"tindex":"fc02b184-2ed7-11e6-bb4f-43b1c22e1638","method":{"position":"org.apache.commons.collections4.collection.TransformedCollection:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().addAll(transform(coll));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:123","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[61,62],"tindex":"fc02d895-2ed7-11e6-bb4f-1b8f83989bd9","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1517","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object o) {\n    if (o == null) {\n        {\n            return (doRemoveValue(o)) != null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"o"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:123","type":"CtBinaryOperatorImpl","sourcecode":"closures == null"},"failures":[63],"tindex":"fc02d896-2ed7-11e6-bb4f-531de8bc7005","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:134","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Closure<?>... closures) {\n    if (closures == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (closures == null) {\n                throw new java.lang.IllegalArgumentException(\"The closure array must not be null\");\n            } \n            for (int int = 0 ; i < (closures.int) ; i++) {\n                if ((closures[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The closure array must not contain a null closure, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"closures"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:331","type":"CtBinaryOperatorImpl","sourcecode":"node == (header)"},"failures":[64,65,66,67,68,69,70,71,72,73,74,75],"tindex":"fc02d897-2ed7-11e6-bb4f-dd9406c29eb8","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:481","type":"CtMethodImpl","sourcecode":"protected void addNodeAfter(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> node, final E value) {\n    if (node == node) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = createNode(value);\n            addNode(newNode, node.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node","header":"node"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.CompositeCollection:293","type":"CtBinaryOperatorImpl","sourcecode":"(coll.size()) == 0"},"failures":[76],"tindex":"fc02ffa8-2ed7-11e6-bb4f-a57a894be01f","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) == 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.TransformedPredicate:56","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[77],"tindex":"fc02ffa9-2ed7-11e6-bb4f-b79f682c7204","method":{"position":"org.apache.commons.collections4.PredicateUtils:502","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsFalsePredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:164","type":"CtBinaryOperatorImpl","sourcecode":"unknownObjectBehavior == null"},"failures":[78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,39,40,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"tindex":"fc02ffaa-2ed7-11e6-bb4f-cfcd034c1c64","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1103","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj == (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry.this)) {\n                return true;\n            } \n            if ((obj instanceof java.util.Map.Entry) == false) {\n                return false;\n            } \n            final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(obj));\n            return ((getKey()) == null ? (other.getKey()) == null : getKey().equals(other.getKey())) && ((getValue()) == null ? (other.getValue()) == null : getValue().equals(other.getValue()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unknownObjectBehavior":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:236","type":"CtBinaryOperatorImpl","sourcecode":"index < ((size) / 2)"},"failures":[172,173],"tindex":"fc0326bb-2ed7-11e6-bb4f-dff1ef691aa6","method":{"position":"org.apache.commons.collections4.list.AbstractListDecorator:70","type":"CtMethodImpl","sourcecode":"public void add(final int index, final E object) {\n    if (index < (index / 2)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            decorated().add(index, object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:126","type":"CtBinaryOperatorImpl","sourcecode":"criterion == null"},"failures":[174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213],"tindex":"fc034dcc-2ed7-11e6-bb4f-212d49c2a426","method":{"position":"org.apache.commons.collections4.map.StaticBucketMap:153","type":"CtMethodImpl","sourcecode":"private int getHash(final java.lang.Object key) {\n    if (key == null) {\n        {\n            if (key == null) {\n                return 0;\n            } \n            int int = key.hashCode();\n            hash += ~(hash << 15);\n            hash ^= hash >>> 10;\n            hash += hash << 3;\n            hash ^= hash >>> 6;\n            hash += ~(hash << 11);\n            hash ^= hash >>> 16;\n            hash %= org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>[].int;\n            return hash < 0 ? hash * (-1) : hash;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"criterion":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:177","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(bitIndex)"},"failures":[],"tindex":"fc034dcd-2ed7-11e6-bb4f-135dcbe7af8d","method":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:169","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.sequence.SequencesComparator.Snake getMiddleSnake(final int start1, final int end1, final int start2, final int end2) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(start2)) {\n        {\n            if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(end1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = end1 - start1;\n                    final int int = end2 - start2;\n                    if ((m == 0) || (n == 0)) {\n                        return null;\n                    } \n                    final int int = m - n;\n                    final int int = n + m;\n                    final int int = ((sum % 2) == 0 ? sum : sum + 1) / 2;\n                    int[][(1 + offset)] = start1;\n                    int[][(1 + offset)] = end1 + 1;\n                    for (int int = 0 ; d <= offset ; ++d) {\n                        for (int int = -d ; k <= d ; k += 2) {\n                            final int int = k + offset;\n                            if ((k == (-d)) || ((k != d) && ((int[][(i - 1)]) < (int[][(i + 1)])))) {\n                                int[][i] = int[][(i + 1)];\n                            } else {\n                                int[][i] = (int[][(i - 1)]) + 1;\n                            }\n                            int int = int[][i];\n                            int int = ((x - start1) + start2) - k;\n                            while (((x < end1) && (y < end2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(x), java.util.List<T>.get(y)))) {\n                                int[][i] = ++x;\n                                ++y;\n                            }\n                            if ((((delta % 2) != 0) && ((delta - d) <= k)) && (k <= (delta + d))) {\n                                if ((int[][(i - delta)]) <= (int[][i])) {\n                                    return buildSnake(int[][(i - delta)], ((k + start1) - start2), end1, end2);\n                                } \n                            } \n                        }\n                        for (int int = delta - d ; k <= (delta + d) ; k += 2) {\n                            final int int = (k + offset) - delta;\n                            if ((k == (delta - d)) || ((k != (delta + d)) && ((int[][(i + 1)]) <= (int[][(i - 1)])))) {\n                                int[][i] = (int[][(i + 1)]) - 1;\n                            } else {\n                                int[][i] = int[][(i - 1)];\n                            }\n                            int int = (int[][i]) - 1;\n                            int int = ((x - start1) + start2) - k;\n                            while (((x >= start1) && (y >= start2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(x), java.util.List<T>.get(y)))) {\n                                int[][i] = x--;\n                                y--;\n                            }\n                            if ((((delta % 2) == 0) && ((-d) <= k)) && (k <= d)) {\n                                if ((int[][i]) <= (int[][(i + delta)])) {\n                                    return buildSnake(int[][i], ((k + start1) - start2), end1, end2);\n                                } \n                            } \n                        }\n                    }\n                    throw new java.lang.RuntimeException(\"Internal Error\");\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"end1"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:726","type":"CtInvocationImpl","sourcecode":"iterator.hasNext()"},"failures":[214,215],"tindex":"fc04864e-2ed7-11e6-bb4f-4d758115a895","method":{"position":"org.apache.commons.collections4.CollectionUtils:722","type":"CtMethodImpl","sourcecode":"public static <T, C extends org.apache.commons.collections4.Closure<? super T>>T forAllButLastDo(final java.util.Iterator<T> iterator, final C closure) {\n    if (iterator.hasNext()) {\n        {\n            if ((iterator != null) && (closure != null)) {\n                while (iterator.hasNext()) {\n                    final T T = iterator.next();\n                    if (iterator.hasNext()) {\n                        closure.execute(element);\n                    } else {\n                        return element;\n                    }\n                }\n            } \n            return null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:282","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[216],"tindex":"fc04864f-2ed7-11e6-bb4f-457c478ce0bc","method":{"position":"org.apache.commons.collections4.collection.IndexedCollection:215","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll == null) {\n        {\n            boolean boolean = false;\n            for (final java.lang.Object java.lang.Object : coll) {\n                changed |= remove(o);\n            }\n            return changed;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:506","type":"CtBinaryOperatorImpl","sourcecode":"key2 != null"},"failures":[],"tindex":"fc04ad60-2ed7-11e6-bb4f-b75b00c76ebf","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:178","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value != null) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkValue(value);\n            return (lookupValue(value)) != null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1077","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Dictionary"},"failures":[217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"fc04ad61-2ed7-11e6-bb4f-9d5bbdebf021","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:221","type":"CtMethodImpl","sourcecode":"public K getKey(final java.lang.Object value) {\n    if (value instanceof java.util.Dictionary) {\n        {\n            return java.util.Map<V, K>.get(value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],"tindex":"fc04d472-2ed7-11e6-bb4f-3d5acd6c183a","method":{"position":"org.apache.commons.collections4.map.PassiveExpiringMap:488","type":"CtMethodImpl","sourcecode":"private void removeIfExpired(final java.lang.Object key, final long now) {\n    if (null == key) {\n        {\n            final java.lang.Long java.lang.Long = java.util.Map<java.lang.Object, java.lang.Long>.get(key);\n            if (isExpired(now, expirationTimeObject)) {\n                remove(key);\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:72","type":"CtBinaryOperatorImpl","sourcecode":"collection == null"},"failures":[],"tindex":"fc04d473-2ed7-11e6-bb4f-f57f8d2ee682","method":{"position":"org.apache.commons.collections4.collection.TransformedCollection:81","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.collection.TransformedCollection<E> transformedCollection(final java.util.Collection<E> collection, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if (collection == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.collection.TransformedCollection<E> org.apache.commons.collections4.collection.TransformedCollection<E> = new org.apache.commons.collections4.collection.TransformedCollection<E>(collection , transformer);\n            if ((collection.size()) > 0) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final E[] E[] = ((E[])(collection.toArray()));\n                collection.clear();\n                for (final E E : values) {\n                    decorated.decorated().add(transformer.transform(value));\n                }\n            } \n            return decorated;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:327","type":"CtBinaryOperatorImpl","sourcecode":"index >= (maxElements)"},"failures":[260,261],"tindex":"fc04fb84-2ed7-11e6-bb4f-7daa627883c4","method":{"position":"org.apache.commons.collections4.list.SetUniqueList:315","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<E> subList(final int fromIndex, final int toIndex) {\n    if (fromIndex >= fromIndex) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.List<E> java.util.List<E> = super.subList(fromIndex, toIndex);\n            final java.util.Set<E> java.util.Set<E> = createSetBasedOnList(java.util.Set<E>, superSubList);\n            return org.apache.commons.collections4.ListUtils.unmodifiableList(new org.apache.commons.collections4.list.SetUniqueList<E>(superSubList , subSet));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"maxElements":"fromIndex","index":"fromIndex"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ClosureTransformer:48","type":"CtBinaryOperatorImpl","sourcecode":"closure == null"},"failures":[262],"tindex":"fc052295-2ed7-11e6-bb4f-e5507d928625","method":{"position":"org.apache.commons.collections4.TransformerUtils:149","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Transformer<T, T> asTransformer(final org.apache.commons.collections4.Closure<? super T> closure) {\n    if (closure == null) {\n        {\n            return org.apache.commons.collections4.functors.ClosureTransformer.closureTransformer(closure);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closure":"closure"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1065","type":"CtBinaryOperatorImpl","sourcecode":"(inputIterator != null) && (transformer != null)"},"failures":[],"tindex":"fc0549a6-2ed7-11e6-bb4f-8d112f411dcb","method":{"position":"org.apache.commons.collections4.IteratorUtils:669","type":"CtMethodImpl","sourcecode":"public static <I, O>java.util.Iterator<O> transformedIterator(final java.util.Iterator<? extends I> iterator, final org.apache.commons.collections4.Transformer<? super I, ? extends O> transform) {\n    if ((iterator != null) && (transform != null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            if (transform == null) {\n                throw new java.lang.NullPointerException(\"Transformer must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.TransformIterator<I, O>(iterator , transform);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inputIterator":"iterator","transformer":"transform"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1204","type":"CtUnaryOperatorImpl","sourcecode":"!(o instanceof java.lang.Comparable)"},"failures":[263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286],"tindex":"fc0549a7-2ed7-11e6-bb4f-0f7aa0b6d3e2","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (!(obj instanceof java.lang.Comparable)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.bidimap.TreeBidiMap.this.doEquals(obj, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:388","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[287,288,289,290,214,291,292,215,293],"tindex":"fc0570b8-2ed7-11e6-bb4f-29f88e3e593a","method":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:53","type":"CtMethodImpl","sourcecode":"public static <I, O>org.apache.commons.collections4.Transformer<I, O> invokerTransformer(final java.lang.String methodName) {\n    if (methodName == null) {\n        {\n            if (methodName == null) {\n                throw new java.lang.IllegalArgumentException(\"The method to invoke must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.InvokerTransformer<I, O>(methodName);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"methodName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:59","type":"CtBinaryOperatorImpl","sourcecode":"bag instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[294,295],"tindex":"fc0570b9-2ed7-11e6-bb4f-554e7bebd45b","method":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:80","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.BoundedCollection<E> unmodifiableBoundedCollection(java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (coll == null) {\n                throw new java.lang.IllegalArgumentException(\"The collection must not be null\");\n            } \n            for (int int = 0 ; i < 1000 ; i++) {\n                if (coll instanceof org.apache.commons.collections4.BoundedCollection) {\n                    break;\n                } \n                if (coll instanceof org.apache.commons.collections4.collection.AbstractCollectionDecorator) {\n                    coll = ((org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>)(coll)).decorated();\n                } else if (coll instanceof org.apache.commons.collections4.collection.SynchronizedCollection) {\n                    coll = ((org.apache.commons.collections4.collection.SynchronizedCollection<E>)(coll)).decorated();\n                } \n            }\n            if ((coll instanceof org.apache.commons.collections4.BoundedCollection) == false) {\n                throw new java.lang.IllegalArgumentException(\"The collection is not a bounded collection\");\n            } \n            return new org.apache.commons.collections4.collection.UnmodifiableBoundedCollection<E>(((org.apache.commons.collections4.BoundedCollection<E>)(coll)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bag":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:174","type":"CtBinaryOperatorImpl","sourcecode":"(m == 0) || (n == 0)"},"failures":[],"tindex":"fc0597ca-2ed7-11e6-bb4f-39cdb37f6cf7","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:77","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void add(final int index, final E object) {\n    if ((index == 0) || (index == 0)) {\n        {\n            throw new java.lang.UnsupportedOperationException(\"List is fixed size\");\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"index","n":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1325","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fc05bedb-2ed7-11e6-bb4f-ed0fa2e5c6dc","method":{"position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object o) {\n    if (o == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o == (org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry.this)) {\n                return true;\n            } else if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(o));\n            if ((org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(K, other.getKey())) && (org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare(V, other.getValue()))) {\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:239","type":"CtBinaryOperatorImpl","sourcecode":"answer instanceof java.lang.Short"},"failures":[76],"tindex":"fc05bedc-2ed7-11e6-bb4f-8b29a636a9e4","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object, final int count) {\n    if (object instanceof java.lang.Short) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:97","type":"CtBinaryOperatorImpl","sourcecode":"(coll instanceof org.apache.commons.collections4.BoundedCollection) == false"},"failures":[],"tindex":"fc05e5ed-2ed7-11e6-bb4f-65faaee95537","method":{"position":"org.apache.commons.collections4.IteratorUtils:744","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.ResettableIterator<E> loopingIterator(final java.util.Collection<? extends E> coll) {\n    if ((coll instanceof org.apache.commons.collections4.BoundedCollection) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (coll == null) {\n                throw new java.lang.NullPointerException(\"Collection must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.LoopingIterator<E>(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:228","type":"CtBinaryOperatorImpl","sourcecode":"key2 != null"},"failures":[296,297,298,299,300,301,302,303,46,47,304,48,49,50,305,306,51,307,52,308,309,53,54,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330],"tindex":"fc05e5ee-2ed7-11e6-bb4f-87227edc93b5","method":{"position":"org.apache.commons.collections4.map.ReferenceIdentityMap:174","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected int hash(final java.lang.Object key) {\n    if (key != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.System.identityHashCode(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1077","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(bitIndex)"},"failures":[],"tindex":"fc060cff-2ed7-11e6-bb4f-f779e65fe914","method":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:169","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.sequence.SequencesComparator.Snake getMiddleSnake(final int start1, final int end1, final int start2, final int end2) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(start2)) {\n        {\n            if (org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(end1)) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final int int = end1 - start1;\n                    final int int = end2 - start2;\n                    if ((m == 0) || (n == 0)) {\n                        return null;\n                    } \n                    final int int = m - n;\n                    final int int = n + m;\n                    final int int = ((sum % 2) == 0 ? sum : sum + 1) / 2;\n                    int[][(1 + offset)] = start1;\n                    int[][(1 + offset)] = end1 + 1;\n                    for (int int = 0 ; d <= offset ; ++d) {\n                        for (int int = -d ; k <= d ; k += 2) {\n                            final int int = k + offset;\n                            if ((k == (-d)) || ((k != d) && ((int[][(i - 1)]) < (int[][(i + 1)])))) {\n                                int[][i] = int[][(i + 1)];\n                            } else {\n                                int[][i] = (int[][(i - 1)]) + 1;\n                            }\n                            int int = int[][i];\n                            int int = ((x - start1) + start2) - k;\n                            while (((x < end1) && (y < end2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(x), java.util.List<T>.get(y)))) {\n                                int[][i] = ++x;\n                                ++y;\n                            }\n                            if ((((delta % 2) != 0) && ((delta - d) <= k)) && (k <= (delta + d))) {\n                                if ((int[][(i - delta)]) <= (int[][i])) {\n                                    return buildSnake(int[][(i - delta)], ((k + start1) - start2), end1, end2);\n                                } \n                            } \n                        }\n                        for (int int = delta - d ; k <= (delta + d) ; k += 2) {\n                            final int int = (k + offset) - delta;\n                            if ((k == (delta - d)) || ((k != (delta + d)) && ((int[][(i + 1)]) <= (int[][(i - 1)])))) {\n                                int[][i] = (int[][(i + 1)]) - 1;\n                            } else {\n                                int[][i] = int[][(i - 1)];\n                            }\n                            int int = (int[][i]) - 1;\n                            int int = ((x - start1) + start2) - k;\n                            while (((x >= start1) && (y >= start2)) && (org.apache.commons.collections4.Equator<? super T>.equate(java.util.List<T>.get(x), java.util.List<T>.get(y)))) {\n                                int[][i] = x--;\n                                y--;\n                            }\n                            if ((((delta % 2) == 0) && ((-d) <= k)) && (k <= d)) {\n                                if ((int[][i]) <= (int[][(i + delta)])) {\n                                    return buildSnake(int[][i], ((k + start1) - start2), end1, end2);\n                                } \n                            } \n                        }\n                    }\n                    throw new java.lang.RuntimeException(\"Internal Error\");\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"start2"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:336","type":"CtBinaryOperatorImpl","sourcecode":"cursor == null"},"failures":[],"tindex":"fc065b20-2ed7-11e6-bb4f-35092d1e6032","method":{"position":"org.apache.commons.collections4.list.CursorableLinkedList:271","type":"CtMethodImpl","sourcecode":"protected void registerCursor(final org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> cursor) {\n    if (cursor == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (final java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>> java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>> = java.util.List<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.iterator() ; it.hasNext() ; ) {\n                final java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> = it.next();\n                if ((ref.get()) == null) {\n                    it.remove();\n                } \n            }\n            java.util.List<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.add(new java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>(cursor));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cursor":"cursor"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:542","type":"CtBinaryOperatorImpl","sourcecode":"(object instanceof org.apache.commons.collections4.Bag) == false"},"failures":[],"tindex":"fc068231-2ed7-11e6-bb4f-436d19c788c0","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:412","type":"CtMethodImpl","sourcecode":"protected boolean isEqualKey(final java.lang.Object key1, final java.lang.Object key2) {\n    if ((key1 instanceof org.apache.commons.collections4.Bag) == false) {\n        {\n            return (key1 == key2) || (key1.equals(key2));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key1"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1069","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(bitIndex)"},"failures":[],"tindex":"fc068232-2ed7-11e6-bb4f-57a5526297c1","method":{"position":"org.apache.commons.collections4.bag.CollectionBag:163","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean add(final E object, final int count) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(count)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            decorated().add(object, count);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"count"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:824","type":"CtBinaryOperatorImpl","sourcecode":"floatObject == null"},"failures":[331,332,333,334],"tindex":"fc06a943-2ed7-11e6-bb4f-299db9bade7c","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:357","type":"CtMethodImpl","sourcecode":"protected int hash(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key2 instanceof java.util.Enumeration<?>) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key3 == null) {\n                {\n                    int int = 0;\n                    if (key1 != null) {\n                        h ^= key1.hashCode();\n                    } \n                    if (key2 != null) {\n                        h ^= key2.hashCode();\n                    } \n                    if (key3 != null) {\n                        h ^= key3.hashCode();\n                    } \n                    h += ~(h << 9);\n                    h ^= h >>> 14;\n                    h += h << 4;\n                    h ^= h >>> 10;\n                    return h;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"floatObject":"key3"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.TransformedPredicate:56","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[77],"tindex":"fc06a944-2ed7-11e6-bb4f-55e358e03131","method":{"position":"org.apache.commons.collections4.functors.NullIsFalsePredicate:45","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsFalsePredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.NullIsFalsePredicate<T>(predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:313","type":"CtBinaryOperatorImpl","sourcecode":"node == (header)"},"failures":[335,336,337],"tindex":"fc06d055-2ed7-11e6-bb4f-c930d31230fe","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:427","type":"CtMethodImpl","sourcecode":"protected void updateNode(final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> node, final E value) {\n    if (node == node) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.setValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node","header":"node"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:161","type":"CtBinaryOperatorImpl","sourcecode":"(end) == (start)"},"failures":[],"tindex":"fc06d056-2ed7-11e6-bb4f-1d1c5499b944","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:477","type":"CtMethodImpl","sourcecode":"protected java.util.Collection<V> createCollection(final int size) {\n    if (size == size) {\n        {\n            return org.apache.commons.collections4.Factory<? extends java.util.Collection<V>>.create();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"size","end":"size"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.UnmodifiableTrie:55","type":"CtBinaryOperatorImpl","sourcecode":"trie instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[338,339],"tindex":"fc06f767-2ed7-11e6-bb4f-a1abc95fd29d","method":{"position":"org.apache.commons.collections4.trie.UnmodifiableTrie:54","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.Trie<K, V> unmodifiableTrie(final org.apache.commons.collections4.Trie<K, ? extends V> trie) {\n    if (trie instanceof org.apache.commons.collections4.Unmodifiable) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (trie instanceof org.apache.commons.collections4.Unmodifiable) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final org.apache.commons.collections4.Trie<K, V> org.apache.commons.collections4.Trie<K, V> = ((org.apache.commons.collections4.Trie<K, V>)(trie));\n                return tmpTrie;\n            } \n            return new org.apache.commons.collections4.trie.UnmodifiableTrie<K, V>(trie);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"trie":"trie"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1201","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(start.predecessor.left, start.predecessor)"},"failures":[],"tindex":"fc06f768-2ed7-11e6-bb4f-333981d87f98","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:610","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntry(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> node) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(node, start.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n        {\n            if (node == null) {\n                return firstEntry();\n            } else {\n                return nextEntryImpl(node.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, node, null);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","start":"node","predecessor":"node"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:367","type":"CtInvocationImpl","sourcecode":"coll2.isEmpty()"},"failures":[340,341],"tindex":"fc071e79-2ed7-11e6-bb4f-c7189b78fe9e","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:174","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll.isEmpty()) {\n        {\n            synchronized(java.lang.Object) {\n                return decorated().removeAll(coll);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll2":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:236","type":"CtBinaryOperatorImpl","sourcecode":"index < ((size) / 2)"},"failures":[33,342,343,344],"tindex":"fc07458a-2ed7-11e6-bb4f-5394aa088c6c","method":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:228","type":"CtMethodImpl","sourcecode":"protected org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> getEntry(final int index) {\n    if (index < (index / 2)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException(((\"Index \" + index) + \" is less than zero\"));\n            } \n            if (index >= (int)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index \" + index) + \" is invalid for size \") + (int)));\n            } \n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            if (index < ((int) / 2)) {\n                entry = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                for (int int = 0 ; currentIndex < index ; currentIndex++) {\n                    entry = entry.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                }\n            } else {\n                entry = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                for (int int = int ; currentIndex > index ; currentIndex--) {\n                    entry = entry.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n                }\n            }\n            return entry;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.sequence.SequencesComparator:230","type":"CtBinaryOperatorImpl","sourcecode":"(((delta % 2) == 0) && ((-d) <= k)) && (k <= d)"},"failures":[],"tindex":"fc076c9b-2ed7-11e6-bb4f-430d653fae2d","method":{"position":"org.apache.commons.collections4.list.TreeList:709","type":"CtMethodImpl","sourcecode":"private int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n    if ((((newOffest % 2) == 0) && ((-newOffest) <= newOffest)) && (k <= d)) {\n        {\n            if (node == null) {\n                return 0;\n            } \n            final int int = getOffset(node);\n            node.int = newOffest;\n            return oldOffset;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"newOffest","delta":"newOffest","k":"newOffest"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:724","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391],"tindex":"fc0793ac-2ed7-11e6-bb4f-6528d68c32bd","method":{"position":"org.apache.commons.collections4.bag.PredicatedBag:60","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.bag.PredicatedBag<E> predicatedBag(final org.apache.commons.collections4.Bag<E> bag, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (predicate == null) {\n        {\n            return new org.apache.commons.collections4.bag.PredicatedBag<E>(bag , predicate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:128","type":"CtBinaryOperatorImpl","sourcecode":"answer != null"},"failures":[81,84,392,393,394,129,395,396,397,143,146,398,399],"tindex":"fc07babd-2ed7-11e6-bb4f-85b9dbc17bd1","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:240","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsValue(final java.lang.Object value) {\n    if (value != null) {\n        {\n            if (value == null) {\n                for (final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> : org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[]) {\n                    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = element;\n                    while (entry != null) {\n                        if ((entry.getValue()) == null) {\n                            return true;\n                        } \n                        entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n                    }\n                }\n            } else {\n                for (final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> : org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[]) {\n                    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = element;\n                    while (entry != null) {\n                        if (isEqualValue(value, entry.getValue())) {\n                            return true;\n                        } \n                        entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n                    }\n                }\n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.WhileClosure:55","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[400],"tindex":"fc07e1ce-2ed7-11e6-bb4f-8958332c9758","method":{"position":"org.apache.commons.collections4.ClosureUtils:145","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> doWhileClosure(final org.apache.commons.collections4.Closure<? super E> closure, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (predicate == null) {\n        {\n            return org.apache.commons.collections4.functors.WhileClosure.<E>whileClosure(predicate, closure, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.SingletonMap:538","type":"CtBinaryOperatorImpl","sourcecode":"(obj instanceof java.util.Map) == false"},"failures":[401,402,403,404,405],"tindex":"fc0808df-2ed7-11e6-bb4f-7b5421b6c5a7","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:210","type":"CtMethodImpl","sourcecode":"public boolean removeMapping(final java.lang.Object key, final java.lang.Object value) {\n    if ((key instanceof java.util.Map) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Collection<V> java.util.Collection<V> = getCollection(key);\n            if (valuesForKey == null) {\n                return false;\n            } \n            final boolean boolean = valuesForKey.remove(value);\n            if (removed == false) {\n                return false;\n            } \n            if (valuesForKey.isEmpty()) {\n                remove(key);\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PermutationIterator:77","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[],"tindex":"fc0808e0-2ed7-11e6-bb4f-ddbfc24a2898","method":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:126","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:157","type":"CtBinaryOperatorImpl","sourcecode":"answer instanceof java.lang.String"},"failures":[406,407,408,409,410,411,412,413,414,415,416,417,418,419],"tindex":"fc0808e1-2ed7-11e6-bb4f-1f558c1a0146","method":{"position":"org.apache.commons.collections4.CollectionUtils:89","type":"CtMethodImpl","sourcecode":"public final int min(final java.lang.Object obj) {\n    if (obj instanceof java.lang.String) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Math.min(freqA(obj), freqB(obj));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NotPredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[420],"tindex":"fc082ff2-2ed7-11e6-bb4f-b5ada0051ef5","method":{"position":"org.apache.commons.collections4.PredicateUtils:535","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> transformedPredicate(final org.apache.commons.collections4.Transformer<? super T, ? extends T> transformer, final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        {\n            return org.apache.commons.collections4.functors.TransformedPredicate.<T>transformedPredicate(transformer, predicate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.SingletonListIterator:133","type":"CtBinaryOperatorImpl","sourcecode":"(!(nextCalled)) || (removed)"},"failures":[421,422,423,424,425,426,427,428,429,430,431,432,433],"tindex":"fc082ff3-2ed7-11e6-bb4f-a5d2f13eef7b","method":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:149","type":"CtMethodImpl","sourcecode":"public void addComparator(final java.util.Comparator<E> comparator, final boolean reverse) {\n    if ((!reverse) || reverse) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            checkLocked();\n            java.util.List<java.util.Comparator<E>>.add(comparator);\n            if (reverse == true) {\n                java.util.BitSet.set(((java.util.List<java.util.Comparator<E>>.size()) - 1));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"removed":"reverse","nextCalled":"reverse"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:799","type":"CtBinaryOperatorImpl","sourcecode":"collection instanceof java.util.List<?>"},"failures":[],"tindex":"fc085704-2ed7-11e6-bb4f-7de4e2bc2cb4","method":{"position":"org.apache.commons.collections4.collection.IndexedCollection:86","type":"CtMethodImpl","sourcecode":"public static <K, C>org.apache.commons.collections4.collection.IndexedCollection<K, C> nonUniqueIndexedCollection(final java.util.Collection<C> coll, final org.apache.commons.collections4.Transformer<C, K> keyTransformer) {\n    if (coll instanceof java.util.List<?>) {\n        {\n            return new org.apache.commons.collections4.collection.IndexedCollection<K, C>(coll , keyTransformer , org.apache.commons.collections4.map.MultiValueMap.<K, C>multiValueMap(new java.util.HashMap<K, java.util.Collection<C>>()) , false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"coll"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:123","type":"CtBinaryOperatorImpl","sourcecode":"comparator == null"},"failures":[434,435,436,437,438,439],"tindex":"fc087e15-2ed7-11e6-bb4f-41d32fe91769","method":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:121","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> comparatorPredicate(final T object, final java.util.Comparator<T> comparator, final org.apache.commons.collections4.functors.ComparatorPredicate.Criterion criterion) {\n    if (comparator == null) {\n        {\n            if (comparator == null) {\n                throw new java.lang.IllegalArgumentException(\"Comparator must not be null.\");\n            } \n            if (criterion == null) {\n                throw new java.lang.IllegalArgumentException(\"Criterion must not be null.\");\n            } \n            return new org.apache.commons.collections4.functors.ComparatorPredicate<T>(object , comparator , criterion);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:282","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,355,549,550,551,552,553,554,555,556,557,263,264,265,266,267,268,269,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612],"tindex":"fc087e16-2ed7-11e6-bb4f-d112cc4d3199","method":{"position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:135","type":"CtMethodImpl","sourcecode":"public boolean containsAll(final java.util.Collection<?> coll) {\n    if (coll == null) {\n        {\n            return decorated().containsAll(coll);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[613,614],"tindex":"fc08a527-2ed7-11e6-bb4f-adb9282c7edb","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:87","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.UnmodifiableList:55","type":"CtBinaryOperatorImpl","sourcecode":"list instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[615,616,617,618,619,620],"tindex":"fc08a528-2ed7-11e6-bb4f-f102228e4c91","method":{"position":"org.apache.commons.collections4.ListUtils:89","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> intersection(final java.util.List<? extends E> list1, final java.util.List<? extends E> list2) {\n    if (list1 instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n            java.util.List<? extends E> java.util.List<? extends E> = list1;\n            java.util.List<? extends E> java.util.List<? extends E> = list2;\n            if ((list1.size()) > (list2.size())) {\n                smaller = list2;\n                larger = list1;\n            } \n            final java.util.HashSet<E> java.util.HashSet<E> = new java.util.HashSet<E>(smaller);\n            for (final E E : larger) {\n                if (hashSet.contains(e)) {\n                    result.add(e);\n                    hashSet.remove(e);\n                } \n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.SingletonIterator:105","type":"CtFieldReadImpl","sourcecode":"removeAllowed"},"failures":[],"tindex":"fc08cc39-2ed7-11e6-bb4f-09cddc457abc","method":{"position":"org.apache.commons.collections4.map.Flat3Map:801","type":"CtMethodImpl","sourcecode":"void setRemoved(final boolean flag) {\n    if (flag) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.map.Flat3Map.FlatMapEntry.this.boolean = flag;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"removeAllowed":"flag"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:56","type":"CtBinaryOperatorImpl","sourcecode":"set instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[621],"tindex":"fc08cc3a-2ed7-11e6-bb4f-6f6cb56a9018","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:55","type":"CtMethodImpl","sourcecode":"public static <E>java.util.SortedSet<E> unmodifiableSortedSet(final java.util.SortedSet<E> set) {\n    if (set instanceof org.apache.commons.collections4.Unmodifiable) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (set instanceof org.apache.commons.collections4.Unmodifiable) {\n                return set;\n            } \n            return new org.apache.commons.collections4.set.UnmodifiableSortedSet<E>(set);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:245","type":"CtBinaryOperatorImpl","sourcecode":"list1 == list2"},"failures":[],"tindex":"fc08f34b-2ed7-11e6-bb4f-21fc05280fb3","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:102","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll == coll) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list1":"coll","list2":"coll"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.OrPredicate:50","type":"CtBinaryOperatorImpl","sourcecode":"(predicate1 == null) || (predicate2 == null)"},"failures":[622],"tindex":"fc08f34c-2ed7-11e6-bb4f-bf5c50b9a5a4","method":{"position":"org.apache.commons.collections4.functors.NullIsTruePredicate:45","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsTruePredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if ((predicate == null) || (predicate == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.NullIsTruePredicate<T>(predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate1":"predicate","predicate2":"predicate"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:359","type":"CtBinaryOperatorImpl","sourcecode":"key1 != null"},"failures":[623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,370,371,373,374,376,379,382,689,690,691,692,693,694,695,696,697,698,699,700,27,701,702,703,704,705,706,707,708],"tindex":"fc091a5d-2ed7-11e6-bb4f-ef075b5a12e8","method":{"position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:107","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.Object object) {\n    if (object != null) {\n        {\n            return decorated().contains(object);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key1":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsTruePredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[],"tindex":"fc091a5e-2ed7-11e6-bb4f-0fa993236b61","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:69","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic <T>org.apache.commons.collections4.Predicate<T> coerce(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((org.apache.commons.collections4.Predicate<T>)(predicate));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.IfClosure:73","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[345],"tindex":"fc09416f-2ed7-11e6-bb4f-cdd9b0d5b50e","method":{"position":"org.apache.commons.collections4.BagUtils:116","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Bag<E> predicatedBag(final org.apache.commons.collections4.Bag<E> bag, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (predicate == null) {\n        {\n            return org.apache.commons.collections4.bag.PredicatedBag.predicatedBag(bag, predicate);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:806","type":"CtBinaryOperatorImpl","sourcecode":"node == null"},"failures":[216,709],"tindex":"fc094170-2ed7-11e6-bb4f-f965957a062b","method":{"position":"org.apache.commons.collections4.collection.IndexedCollection:206","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object == null) {\n        {\n            final boolean boolean = super.remove(object);\n            if (removed) {\n                removeFromIndex(((C)(object)));\n            } \n            return removed;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.SwitchClosure:90","type":"CtBinaryOperatorImpl","sourcecode":"predicatesAndClosures == null"},"failures":[710],"tindex":"fc094171-2ed7-11e6-bb4f-d3805a910eaa","method":{"position":"org.apache.commons.collections4.ClosureUtils:331","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> switchClosure(final java.util.Map<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> predicatesAndClosures) {\n    if (predicatesAndClosures == null) {\n        {\n            return org.apache.commons.collections4.functors.SwitchClosure.switchClosure(predicatesAndClosures);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicatesAndClosures":"predicatesAndClosures"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:236","type":"CtBinaryOperatorImpl","sourcecode":"index < ((size) / 2)"},"failures":[711,712,713,714],"tindex":"fc096882-2ed7-11e6-bb4f-99d7174d0e5e","method":{"position":"org.apache.commons.collections4.list.TransformedList:155","type":"CtMethodImpl","sourcecode":"public E set(final int index, E object) {\n    if (index < (index / 2)) {\n        {\n            object = transform(object);\n            return getList().set(index, object);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"index","index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.SetUniqueList:97","type":"CtBinaryOperatorImpl","sourcecode":"set == null"},"failures":[],"tindex":"fc096883-2ed7-11e6-bb4f-43cf2aba2b8d","method":{"position":"org.apache.commons.collections4.set.CompositeSet:367","type":"CtMethodImpl","sourcecode":"public void addComposited(final java.util.Set<E> set1, final java.util.Set<E> set2) {\n    if (set2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            addComposited(set1);\n            addComposited(set2);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:151","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"fc098f94-2ed7-11e6-bb4f-f5e44c2187a8","method":{"position":"org.apache.commons.collections4.MapUtils:125","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.String getString(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map != null) {\n                final java.lang.Object java.lang.Object = map.get(key);\n                if (answer != null) {\n                    return answer.toString();\n                } \n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:420","type":"CtBinaryOperatorImpl","sourcecode":"k == null"},"failures":[715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755],"tindex":"fc098f95-2ed7-11e6-bb4f-79979e81f367","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1405","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object o) {\n    if (o == null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = getEntry(((java.util.Map.Entry<?, ?>)(o)).getKey());\n            return (candidate != null) && (candidate.equals(o));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"k":"o"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.sequence.ReplacementsFinder:90","type":"CtBinaryOperatorImpl","sourcecode":"(pendingDeletions.isEmpty()) && (pendingInsertions.isEmpty())"},"failures":[756],"tindex":"fc09b6a6-2ed7-11e6-bb4f-1bb343c7950b","method":{"position":"org.apache.commons.collections4.ListUtils:654","type":"CtMethodImpl","sourcecode":"public static <T>java.util.List<java.util.List<T>> partition(final java.util.List<T> list, final int size) {\n    if ((list.isEmpty()) && (list.isEmpty())) {\n        {\n            if (list == null) {\n                throw new java.lang.IllegalArgumentException(\"List must not be null\");\n            } \n            if (size <= 0) {\n                throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\");\n            } \n            return new org.apache.commons.collections4.ListUtils.Partition<T>(list , size);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingDeletions":"list","pendingInsertions":"list"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiValueMap:290","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.MultiMap"},"failures":[],"tindex":"fc0a04c7-2ed7-11e6-bb4f-ff699a10259e","method":{"position":"org.apache.commons.collections4.MapUtils:546","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Double getDouble(final java.util.Map<? super K, ?> map, final K key, final java.lang.Double defaultValue) {\n    if (map instanceof org.apache.commons.collections4.MultiMap) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Double java.lang.Double = org.apache.commons.collections4.MapUtils.getDouble(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:388","type":"CtBinaryOperatorImpl","sourcecode":"answer == null"},"failures":[332,331],"tindex":"fc0a2bd8-2ed7-11e6-bb4f-b1ca8505843c","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:532","type":"CtMethodImpl","sourcecode":"protected boolean isEqualKey(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> entry, final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3, final java.lang.Object key4) {\n    if (key2 == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = entry.getKey();\n            return (((((multi.size()) == 4) && ((key1 == (multi.getKey(0))) || ((key1 != null) && (key1.equals(multi.getKey(0)))))) && ((key2 == (multi.getKey(1))) || ((key2 != null) && (key2.equals(multi.getKey(1)))))) && ((key3 == (multi.getKey(2))) || ((key3 != null) && (key3.equals(multi.getKey(2)))))) && ((key4 == (multi.getKey(3))) || ((key4 != null) && (key4.equals(multi.getKey(3)))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:229","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[757,758,759,760],"tindex":"fc0a2bd9-2ed7-11e6-bb4f-2b8da2a15bc9","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:235","type":"CtMethodImpl","sourcecode":"@java.lang.Override\n@java.lang.SuppressWarnings(value = \"unchecked\")\npublic boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        {\n            final java.util.Set<java.util.Map.Entry<K, java.lang.Object>> java.util.Set<java.util.Map.Entry<K, java.lang.Object>> = decorated().entrySet();\n            if (pairs != null) {\n                for (final java.util.Map.Entry<K, java.lang.Object> java.util.Map.Entry<K, java.lang.Object> : pairs) {\n                    if (((java.util.Collection<V>)(entry.getValue())).contains(value)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:643","type":"CtBinaryOperatorImpl","sourcecode":"integerObject == null"},"failures":[],"tindex":"fc0a52ea-2ed7-11e6-bb4f-514d131808b3","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:413","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((obj instanceof org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger) == false) {\n                return false;\n            } \n            return (((org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger)(obj)).int) == (int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"integerObject":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.FilterListIterator:228","type":"CtBinaryOperatorImpl","sourcecode":"(iterator) == null"},"failures":[],"tindex":"fc0a52eb-2ed7-11e6-bb4f-2930ac8f7a3e","method":{"position":"org.apache.commons.collections4.IteratorUtils:938","type":"CtMethodImpl","sourcecode":"public static <E>java.util.ListIterator<E> toListIterator(final java.util.Iterator<? extends E> iterator) {\n    if (iterator == null) {\n        {\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.ListIteratorWrapper<E>(iterator);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:229","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[761,762],"tindex":"fc0a79fc-2ed7-11e6-bb4f-b73976fa3cd6","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.lang.Object) {\n                if (object == (org.apache.commons.collections4.collection.SynchronizedCollection.this)) {\n                    return true;\n                } \n                return (object == (org.apache.commons.collections4.collection.SynchronizedCollection.this)) || (decorated().equals(object));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.ListOrderedSet:120","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[763,764],"tindex":"fc0a79fd-2ed7-11e6-bb4f-0d38aac8db37","method":{"position":"org.apache.commons.collections4.ListUtils:318","type":"CtMethodImpl","sourcecode":"public static <E>java.util.List<E> retainAll(final java.util.Collection<E> collection, final java.util.Collection<?> retain) {\n    if (collection == null) {\n        {\n            final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>(java.lang.Math.min(collection.size(), retain.size()));\n            for (final E E : collection) {\n                if (retain.contains(obj)) {\n                    list.add(obj);\n                } \n            }\n            return list;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"collection"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.SetUniqueList:217","type":"CtBinaryOperatorImpl","sourcecode":"(pos != (-1)) && (pos != index)"},"failures":[],"tindex":"fc0aa10e-2ed7-11e6-bb4f-9bdbd302af73","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:542","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V set(final int index, final V value) {\n    if ((index != (-1)) && (pos != index)) {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.ValuesView.this.org.apache.commons.collections4.map.ListOrderedMap<java.lang.Object, V>.setValue(index, value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"index","index":"index"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[765,766,767,768],"tindex":"fc0aa10f-2ed7-11e6-bb4f-2142a7b31174","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:290","type":"CtMethodImpl","sourcecode":"public E set(final int index, final E value) {\n    if (index < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = getNode(index, false);\n            final E E = node.getValue();\n            updateNode(node, value);\n            return oldValue;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.TransformedMap:198","type":"CtInvocationImpl","sourcecode":"map.isEmpty()"},"failures":[],"tindex":"fc0ac820-2ed7-11e6-bb4f-d1cd6dbbf38d","method":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:122","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> mapToCopy) {\n    if (mapToCopy.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1062","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.Object[]"},"failures":[],"tindex":"fc0ac821-2ed7-11e6-bb4f-8d66ee7a31cc","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSet:95","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (object instanceof java.lang.Object[]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.CollatingIterator:365","type":"CtBinaryOperatorImpl","sourcecode":"(comparator) == null"},"failures":[],"tindex":"fc0ac822-2ed7-11e6-bb4f-6b7c7b00c145","method":{"position":"org.apache.commons.collections4.IteratorUtils:566","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> collatedIterator(final java.util.Comparator<? super E> comparator, final java.util.Iterator<? extends E>... iterators) {\n    if (comparator == null) {\n        {\n            return new org.apache.commons.collections4.iterators.CollatingIterator<E>(comparator , iterators);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:675","type":"CtBinaryOperatorImpl","sourcecode":"transform == null"},"failures":[769],"tindex":"fc0aef33-2ed7-11e6-bb4f-63d068ff8177","method":{"position":"org.apache.commons.collections4.TransformerUtils:227","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <I, O>org.apache.commons.collections4.Transformer<I, O> switchTransformer(final org.apache.commons.collections4.Predicate<? super I> predicate, final org.apache.commons.collections4.Transformer<? super I, ? extends O> trueTransformer, final org.apache.commons.collections4.Transformer<? super I, ? extends O> falseTransformer) {\n    if (trueTransformer == null) {\n        {\n            return org.apache.commons.collections4.functors.SwitchTransformer.switchTransformer(new org.apache.commons.collections4.Predicate[]{ predicate }, new org.apache.commons.collections4.Transformer[]{ trueTransformer }, falseTransformer);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transform":"trueTransformer"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:506","type":"CtBinaryOperatorImpl","sourcecode":"key2 != null"},"failures":[],"tindex":"fc0aef34-2ed7-11e6-bb4f-09ca59c4460d","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.bidimap.TreeBidiMap.this.doEquals(obj, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"obj"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1346","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Enumeration<?>"},"failures":[],"tindex":"fc0b1645-2ed7-11e6-bb4f-f5b24e874c71","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:357","type":"CtMethodImpl","sourcecode":"protected int hash(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key2 instanceof java.util.Enumeration<?>) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key3 == null) {\n                {\n                    int int = 0;\n                    if (key1 != null) {\n                        h ^= key1.hashCode();\n                    } \n                    if (key2 != null) {\n                        h ^= key2.hashCode();\n                    } \n                    if (key3 != null) {\n                        h ^= key3.hashCode();\n                    } \n                    h += ~(h << 9);\n                    h ^= h >>> 14;\n                    h += h << 4;\n                    h ^= h >>> 10;\n                    return h;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key2"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.splitmap.TransformedSplitMap:184","type":"CtInvocationImpl","sourcecode":"map.isEmpty()"},"failures":[770],"tindex":"fc0b1646-2ed7-11e6-bb4f-71d3633e3f55","method":{"position":"org.apache.commons.collections4.splitmap.TransformedSplitMap:210","type":"CtMethodImpl","sourcecode":"public void putAll(final java.util.Map<? extends J, ? extends U> mapToCopy) {\n    if (mapToCopy.isEmpty()) {\n        {\n            decorated().putAll(transformMap(mapToCopy));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"mapToCopy"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
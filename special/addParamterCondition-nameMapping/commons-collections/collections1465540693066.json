{"failureDictionary":{"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapClear":44,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToString":16,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToString":20,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutNullValue":54,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemovePrevious":81,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":4,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveChangesMap":66,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesIteratorRemoveChangesMap":69,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetIteratorRemoveChangesMap":77,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMakeMap":41,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":14,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testLocaleIndependence":37,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveAll":71,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPut":52,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionClear":25,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutNullKey":53,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":87,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":24,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":6,"org.apache.commons.collections4.IteratorUtilsTest.testAsMultipleIterable":0,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemoveNext":96,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRetainAll":72,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":56,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":28,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutAll":55,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":84,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":1,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":86,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":100,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":15,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastEntrySet":38,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":13,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":82,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRetainAll":68,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFullMapCompatibility":51,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":95,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":48,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":26,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testPutAll":36,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":12,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":31,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":88,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":94,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":101,"org.apache.commons.collections4.CollectionUtilsTest.getFromMap":32,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":79,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":30,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":74,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":47,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":21,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":105,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testNullHandling":33,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveAll":75,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":19,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":83,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemoveNext":89,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapHashCode":49,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":98,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetRemoveChangesMap":70,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":42,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":45,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":106,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":11,"org.apache.commons.collections4.bag.SynchronizedBagTest.testSerializeDeserializeThenCompare":2,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":7,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":50,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesClearChangesMap":57,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastKeySet":39,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetIteratorRemoveChangesMap":73,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndexBoundsChecking2":91,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":80,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":10,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testSerializeDeserializeThenCompare":29,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":3,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":8,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":102,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":107,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":23,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":90,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":99,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":46,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":97,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":93,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":22,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":78,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":27,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":109,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":5,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":9,"org.apache.commons.collections4.collection.CompositeCollectionTest.testContainsAll":108,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":18,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testKeySetClearChangesMap":58,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":63,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove3":65,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":64,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testClone":34,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testCaseInsensitive":35,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemovePrevious":92,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains1":60,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testValuesRemoveAll":67,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains2":61,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains3":62,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndexBoundsChecking":85,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":17,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRetainAll":76,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":104,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":103,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testFailFastValues":40,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetClearChangesMap":59,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":43},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:165","type":"CtInvocationImpl","sourcecode":"org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(bitIndex)"},"failures":[],"tindex":"e7aa2cf7-2ed5-11e6-a6c4-dd70f4e0d5e6","method":{"position":"org.apache.commons.collections4.ClosureUtils:113","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.Closure<E> forClosure(final int count, final org.apache.commons.collections4.Closure<? super E> closure) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(count)) {\n        {\n            return org.apache.commons.collections4.functors.ForClosure.forClosure(count, closure);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bitIndex":"count"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.UnmodifiableListIterator:46","type":"CtBinaryOperatorImpl","sourcecode":"iterator == null"},"failures":[0],"tindex":"e7ab1758-2ed5-11e6-a6c4-c11e88c4d7a3","method":{"position":"org.apache.commons.collections4.IteratorUtils:920","type":"CtMethodImpl","sourcecode":"public static <E>java.lang.Iterable<E> asMultipleUseIterable(final java.util.Iterator<? extends E> iterator) {\n    if (iterator == null) {\n        {\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.IteratorIterable<E>(iterator , true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:139","type":"CtInvocationImpl","sourcecode":"root.isEmpty()"},"failures":[],"tindex":"e7ab1759-2ed5-11e6-a6c4-7db1a0924cf2","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:651","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> nextEntryImpl(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> start, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> previous, final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> tree) {\n    if (previous.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = start;\n            if ((previous == null) || (start != (previous.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n                while (!(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty())) {\n                    if (previous == (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                        break;\n                    } \n                    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current)) {\n                        return current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                    } \n                    current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                }\n            } \n            if (current.isEmpty()) {\n                return null;\n            } \n            if ((current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n                return null;\n            } \n            if (previous != (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current)) {\n                    return current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n                } \n                return nextEntryImpl(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, previous, tree);\n            } \n            while (current == (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                if (current == tree) {\n                    return null;\n                } \n                current = current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            }\n            if (current == tree) {\n                return null;\n            } \n            if ((current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n                return null;\n            } \n            if ((previous != (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n                return current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            } \n            if ((current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == (current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                return null;\n            } \n            return nextEntryImpl(current.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, previous, tree);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"previous"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:81","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"tindex":"e7abb39a-2ed5-11e6-a6c4-e73ec85558ed","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:111","type":"CtMethodImpl","sourcecode":"public boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            synchronized(java.lang.Object) {\n                return decorated().addAll(coll);\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:505","type":"CtBinaryOperatorImpl","sourcecode":"cmp < 0"},"failures":[32],"tindex":"e7abb39b-2ed5-11e6-a6c4-77481e3c5618","method":{"position":"org.apache.commons.collections4.CollectionUtils:1194","type":"CtMethodImpl","sourcecode":"private static void checkIndexBounds(final int index) {\n    if (index < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException((\"Index cannot be negative: \" + index));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cmp":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:256","type":"CtBinaryOperatorImpl","sourcecode":"(index < 0) || (index >= sz)"},"failures":[],"tindex":"e7abdaac-2ed5-11e6-a6c4-957b1c962bd1","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:542","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V set(final int index, final V value) {\n    if ((index < 0) || (index >= index)) {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.ValuesView.this.org.apache.commons.collections4.map.ListOrderedMap<java.lang.Object, V>.setValue(index, value);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sz":"index","index":"index"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:306","type":"CtBinaryOperatorImpl","sourcecode":"null != (comparatorChain)"},"failures":[],"tindex":"e7ac01bd-2ed5-11e6-a6c4-db9cab9bd881","method":{"position":"org.apache.commons.collections4.ComparatorUtils:103","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E extends java.lang.Comparable<? super E>>java.util.Comparator<E> chainedComparator(final java.util.Collection<java.util.Comparator<E>> comparators) {\n    if (null != comparators) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.ComparatorUtils.chainedComparator(((java.util.Comparator<E>[])(comparators.toArray(new java.util.Comparator[comparators.size()]))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparatorChain":"comparators"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:952","type":"CtBinaryOperatorImpl","sourcecode":"((deletedNode.getLeft(dataElement)) != null) && ((deletedNode.getRight(dataElement)) != null)"},"failures":[],"tindex":"e7ac28ce-2ed5-11e6-a6c4-393125331442","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:879","type":"CtMethodImpl","sourcecode":"private void doRedBlackInsert(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> insertedNode, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n    if (((insertedNode.getLeft(dataElement)) != null) && ((deletedNode.getRight(dataElement)) != null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = insertedNode;\n            org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(currentNode, dataElement);\n            while (((currentNode != null) && (currentNode != (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][dataElement.ordinal()]))) && (org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(currentNode.getParent(dataElement), dataElement))) {\n                if (currentNode.isLeftChild(dataElement)) {\n                    final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n                    if (org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(y, dataElement)) {\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(getParent(currentNode, dataElement), dataElement);\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(y, dataElement);\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(getGrandParent(currentNode, dataElement), dataElement);\n                        currentNode = getGrandParent(currentNode, dataElement);\n                    } else {\n                        if (currentNode.isRightChild(dataElement)) {\n                            currentNode = getParent(currentNode, dataElement);\n                            rotateLeft(currentNode, dataElement);\n                        } \n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(getParent(currentNode, dataElement), dataElement);\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(getGrandParent(currentNode, dataElement), dataElement);\n                        if ((getGrandParent(currentNode, dataElement)) != null) {\n                            rotateRight(getGrandParent(currentNode, dataElement), dataElement);\n                        } \n                    }\n                } else {\n                    final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = getLeftChild(getGrandParent(currentNode, dataElement), dataElement);\n                    if (org.apache.commons.collections4.bidimap.TreeBidiMap.isRed(y, dataElement)) {\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(getParent(currentNode, dataElement), dataElement);\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(y, dataElement);\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(getGrandParent(currentNode, dataElement), dataElement);\n                        currentNode = getGrandParent(currentNode, dataElement);\n                    } else {\n                        if (currentNode.isLeftChild(dataElement)) {\n                            currentNode = getParent(currentNode, dataElement);\n                            rotateRight(currentNode, dataElement);\n                        } \n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(getParent(currentNode, dataElement), dataElement);\n                        org.apache.commons.collections4.bidimap.TreeBidiMap.makeRed(getGrandParent(currentNode, dataElement), dataElement);\n                        if ((getGrandParent(currentNode, dataElement)) != null) {\n                            rotateLeft(getGrandParent(currentNode, dataElement), dataElement);\n                        } \n                    }\n                }\n            }\n            org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][dataElement.ordinal()], dataElement);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dataElement":"dataElement","deletedNode":"insertedNode"},"type":"special","returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:128","type":"CtBinaryOperatorImpl","sourcecode":"answer != null"},"failures":[],"tindex":"e7ac76ef-2ed5-11e6-a6c4-838cf6116f5a","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:362","type":"CtMethodImpl","sourcecode":"public int size(final java.lang.Object key) {\n    if (key != null) {\n        {\n            final java.util.Collection<V> java.util.Collection<V> = getCollection(key);\n            if (coll == null) {\n                return 0;\n            } \n            return coll.size();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"answer":"key"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1261","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.util.Iterator<?>"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"e7ac9e00-2ed5-11e6-a6c4-2fab2cb12996","method":{"position":"org.apache.commons.collections4.map.CaseInsensitiveMap:123","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.lang.Object convertKey(final java.lang.Object key) {\n    if (key instanceof java.util.Iterator<?>) {\n        {\n            if (key != null) {\n                final char[] char[] = key.toString().toCharArray();\n                for (int int = (chars.int) - 1 ; i >= 0 ; i--) {\n                    chars[i] = java.lang.Character.toLowerCase(java.lang.Character.toUpperCase(chars[i]));\n                }\n                return new java.lang.String(chars);\n            } \n            return org.apache.commons.collections4.map.AbstractHashedMap.org.apache.commons.collections4.map.AbstractHashedMap.java.lang.Object;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"key"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:341","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"e7acc511-2ed5-11e6-a6c4-bf552cd3739d","method":{"position":"org.apache.commons.collections4.list.TransformedList:119","type":"CtMethodImpl","sourcecode":"public E get(final int index) {\n    if (index < 0) {\n        {\n            return getList().get(index);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:582","type":"CtBinaryOperatorImpl","sourcecode":"(h.parent.left) == h"},"failures":[],"tindex":"e7acc512-2ed5-11e6-a6c4-9d0e04a731ae","method":{"position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:499","type":"CtMethodImpl","sourcecode":"private void removeExternalEntry(final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> h) {\n    if (h == h) {\n        {\n            if (h == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n                throw new java.lang.IllegalArgumentException(\"Cannot delete root Entry!\");\n            } else if (!(h.isExternalNode())) {\n                throw new java.lang.IllegalArgumentException((h + \" is not an external Entry!\"));\n            } \n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = (h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == h ? h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> : h.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n            if ((parent.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == h) {\n                parent.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = child;\n            } else {\n                parent.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = child;\n            }\n            if ((child.int) > (parent.int)) {\n                child.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = parent;\n            } else {\n                child.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = parent;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"h","left":"h","h":"h"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:55","type":"CtBinaryOperatorImpl","sourcecode":"queue instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[],"tindex":"e7ad1333-2ed5-11e6-a6c4-cbeb84b3111e","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:215","type":"CtMethodImpl","sourcecode":"public boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.Unmodifiable) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return addAll(int, coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"queue":"coll"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:547","type":"CtBinaryOperatorImpl","sourcecode":"(a.size()) != (b.size())"},"failures":[108,109],"tindex":"e7ad3a44-2ed5-11e6-a6c4-17634943fcfd","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:254","type":"CtMethodImpl","sourcecode":"public boolean containsAll(final java.util.Collection<?> coll) {\n    if ((coll.size()) != (coll.size())) {\n        {\n            for (final java.lang.Object java.lang.Object : coll) {\n                if ((contains(item)) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"coll","b":"coll"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:665","type":"CtBinaryOperatorImpl","sourcecode":"key3 != null"},"failures":[],"tindex":"e7ad3a45-2ed5-11e6-a6c4-75e2ecdac36c","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:547","type":"CtMethodImpl","sourcecode":"private K doRemoveValue(final java.lang.Object value) {\n    if (value != null) {\n        {\n            final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = lookupValue(value);\n            if (node == null) {\n                return null;\n            } \n            doRedBlackDelete(node);\n            return node.getKey();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key3":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:665","type":"CtBinaryOperatorImpl","sourcecode":"proposedCapacity > (org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY)"},"failures":[],"tindex":"e7ad6156-2ed5-11e6-a6c4-d35c3767a5e4","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:438","type":"CtMethodImpl","sourcecode":"protected int hashIndex(final int hashCode, final int dataSize) {\n    if (dataSize > dataSize) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return hashCode & (dataSize - 1);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"org.apache.commons.collections4.map.AbstractHashedMap.MAXIMUM_CAPACITY":"dataSize","proposedCapacity":"dataSize"},"type":"special","returnInThen":false,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":16,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
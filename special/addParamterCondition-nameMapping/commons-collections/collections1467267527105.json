{"failureDictionary":{"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByEntrySet":90,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":246,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":714,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetIteratorRemoveChangesMap":98,"org.apache.commons.collections4.map.LinkedMapTest.testMapPut":439,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":920,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking":142,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":214,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesIteratorRemoveChangesMap":883,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":36,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":180,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testObjectHashCodeEqualsSelfHashCode":56,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":139,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapClear":325,"org.apache.commons.collections4.CollectionUtilsTest.collect":511,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":605,"org.apache.commons.collections4.map.LRUMapTest.testFailFastKeySet":377,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRetainAll":111,"org.apache.commons.collections4.list.TreeListTest.testListRemoveByIndexBoundsChecking2":476,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsContract":600,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":7,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMakeMap":285,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetRemoveChangesMap":950,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":806,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":851,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRetainAll":680,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":774,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testFullMapCompatibility":292,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":532,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":821,"org.apache.commons.collections4.map.LRUMapTest.testInternalState_Buckets":957,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiClear":279,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":300,"org.apache.commons.collections4.map.LinkedMapTest.testGetValueByIndex":420,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFailFastValues":320,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":208,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testLastKey":274,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectEqualsSelf":653,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testPutAll":113,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testDecorateFactory":271,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectHashCodeEqualsContract":639,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":175,"org.apache.commons.collections4.list.TreeListTest.testListHashCode":219,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":557,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveChangesMap":972,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRetainAll":347,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":443,"org.apache.commons.collections4.collection.CompositeCollectionTest.testAddAllMutator":39,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRemoveAll":458,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":779,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiGetKey":81,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":387,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectEqualsSelf":611,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveAll":115,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":959,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetIteratorRemoveChangesMap":462,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRemoveAll":669,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":141,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":745,"org.apache.commons.collections4.list.GrowthListTest.testObjectHashCodeEqualsContract":758,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":772,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":907,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":12,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testKeySetIteratorRemoveChangesMap":951,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":2,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":44,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":873,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutNullValue":333,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRetainAll":689,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testCanonicalFullCollectionExists":59,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":1014,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove1":928,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsKey":92,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove2":929,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":938,"org.apache.commons.collections4.collection.IndexedCollectionTest.testObjectEqualsSelf":837,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemove3":930,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":31,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":86,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsSelf":649,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToString":265,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListCompatibility":761,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":861,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":919,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToString":853,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":463,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":190,"org.apache.commons.collections4.map.LRUMapTest.testKeySetClearChangesMap":397,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiMapIteratorSet":318,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":576,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":767,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveChangesMap":892,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":14,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapHashCode":290,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":626,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRetainAll":696,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":706,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":245,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPut":93,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":534,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMap":167,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchClosure":158,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":934,"org.apache.commons.collections4.list.TreeListTest.testListListIteratorByIndex":478,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveAll":677,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":241,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":197,"org.apache.commons.collections4.map.LinkedMapTest.testGetByIndex":419,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClear":202,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains1":1005,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains2":1006,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiGetKey":73,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetContains3":1007,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":646,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":46,"org.apache.commons.collections4.bag.TransformedBagTest.testSerializeDeserializeThenCompare":250,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":733,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":747,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":255,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":715,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":915,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":570,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove2":988,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove3":989,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemove1":987,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemoveAll":107,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":997,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":572,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRetainAll":88,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiInverse":75,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":125,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetRetainAll":672,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRemoveAll":343,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveChangesMap":409,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":509,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearBySubMap":166,"org.apache.commons.collections4.map.LinkedMapTest.testIndexOf":417,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveAll":687,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":574,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionSize":852,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":213,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":578,"org.apache.commons.collections4.list.TreeListTest.testInsertBefore":467,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":1020,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":1015,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":270,"org.apache.commons.collections4.list.TreeListTest.testListListIteratorNextRemovePrevious":482,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":786,"org.apache.commons.collections4.list.TreeListTest.testListLastIndexOf":222,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRetainAll":685,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRemoveChangesMap":97,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiInverse":83,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRetainAll":692,"org.apache.commons.collections4.collection.IndexedCollectionTest.testObjectHashCodeEqualsContract":838,"org.apache.commons.collections4.list.TreeListTest.testCollectionRetainAll":236,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":28,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":787,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":530,"org.apache.commons.collections4.map.LRUMapTest.testMakeMap":382,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsHashBag":656,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":1004,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutNullKey":440,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":492,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListCompatibility":793,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectEqualsSelf":647,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRetainAll":306,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutNullKey":332,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":1021,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":911,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":1022,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":1023,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":258,"org.apache.commons.collections4.queue.TransformedQueueTest.testObjectEqualsSelf":831,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectEqualsSelf":628,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":102,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":187,"org.apache.commons.collections4.map.LinkedMapTest.testPreviousKey":425,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":609,"org.apache.commons.collections4.list.TreeListTest.testIterationOrder":470,"org.apache.commons.collections4.map.Flat3MapTest.testMapPutAll":1031,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRemoveAll":695,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":184,"org.apache.commons.collections4.map.LinkedMapTest.testFirstKey":422,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":759,"org.apache.commons.collections4.map.LRUMapTest.testMapClear":383,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testObjectEqualsSelf":839,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":145,"org.apache.commons.collections4.list.TreeListTest.testCollectionIterator":232,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToString":358,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveChangesMap":992,"org.apache.commons.collections4.set.PredicatedSetTest.testSimpleSerialization":868,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectHashCodeEqualsSelfHashCode":869,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testBagEqualsSelf":625,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":261,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":496,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":807,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListCompatibility":707,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":244,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapClear":286,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":385,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testPreviousKey":37,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRetainAll":688,"org.apache.commons.collections4.list.TransformedListTest.testObjectHashCodeEqualsContract":784,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":35,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":210,"org.apache.commons.collections4.TransformerUtilsTest.testChainedTransformer":1028,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveChangesMap":405,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":351,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":526,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":725,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":524,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveAll":953,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":737,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemove":91,"org.apache.commons.collections4.queue.TransformedQueueTest.testObjectHashCodeEqualsContract":832,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsContract":659,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":606,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesIteratorRemoveChangesMap":303,"org.apache.commons.collections4.MapUtilsTest.testIsNotEmptyWithNonEmptyMap":551,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":640,"org.apache.commons.collections4.set.PredicatedSetTest.testCanonicalEmptyCollectionExists":867,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByEntrySet":204,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testObjectHashCodeEqualsContract":55,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveAll":301,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapIsEmpty":322,"org.apache.commons.collections4.map.LRUMapTest.testFullMapCompatibility":390,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":434,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":154,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiRemoveByKeySet":89,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":791,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testKeySetRemoveAll":699,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove3":404,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove2":403,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemove1":402,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetRemoveChangesMap":990,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsHashBag":631,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectHashCodeEqualsContract":624,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesIteratorRemoveChangesMap":898,"org.apache.commons.collections4.map.LRUMapTest.testReset":372,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":140,"org.apache.commons.collections4.CollectionUtilsTest.exists":157,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListCompatibility":818,"org.apache.commons.collections4.list.FixedSizeListTest.testObjectEqualsSelf":802,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":25,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRetainAll":116,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectEqualsSelf":638,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":430,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":508,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRemoveAll":679,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiGetKeyInverse":314,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddReplacing":519,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastKeySet":426,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":614,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":40,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectHashCodeEqualsContract":648,"org.apache.commons.collections4.map.LRUMapTest.testFirstKey":373,"org.apache.commons.collections4.map.LinkedMapTest.testReset":418,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":185,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":586,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveAll":110,"org.apache.commons.collections4.map.LRUMapTest.testMapHashCode":388,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testObjectHashCodeEqualsContract":836,"org.apache.commons.collections4.map.ReferenceMapTest.testMapRemove":983,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":349,"org.apache.commons.collections4.map.LRUMapTest.testValuesIteratorRemoveChangesMap":408,"org.apache.commons.collections4.list.TreeListTest.testCollectionRemove":234,"org.apache.commons.collections4.list.TreeListTest.testListIteratorAdd":225,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":854,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":741,"org.apache.commons.collections4.list.TreeListTest.testCollectionClear":483,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":151,"org.apache.commons.collections4.list.UnmodifiableListTest.testObjectEqualsSelf":827,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiModifyEntrySet":63,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":1034,"org.apache.commons.collections4.list.TreeListTest.testObjectHashCodeEqualsSelfHashCode":486,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndexBoundsChecking":590,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":935,"org.apache.commons.collections4.map.LRUMapTest.testValuesRetainAll":407,"org.apache.commons.collections4.ListUtilsTest.testPartition":582,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetHashCode":523,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":502,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":186,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":21,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEqualsNull":53,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContains":361,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":723,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":720,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":710,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":137,"org.apache.commons.collections4.list.TreeListTest.testCollectionAdd":227,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapGet":939,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemoveChangesMap":952,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":657,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":504,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetRetainAll":684,"org.apache.commons.collections4.list.TreeListTest.testListAddByIndex":217,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":762,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRemoveAll":454,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiRemove":85,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":23,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":114,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":824,"org.apache.commons.collections4.map.HashedMapTest.testMapPut":922,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetRetainAll":676,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":18,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":765,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":768,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesIteratorRemoveChangesMap":871,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiGetKey":78,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":722,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":644,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":918,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testKeySetRemoveAll":667,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove1":947,"org.apache.commons.collections4.list.GrowthListTest.testSerializeDeserializeThenCompare":755,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":580,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove2":948,"org.apache.commons.collections4.map.HashedMapTest.testClone":1029,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRemove3":949,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testNextKey":312,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":903,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagAdd":566,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":71,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":291,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":288,"org.apache.commons.collections4.list.TransformedListTest.testObjectEqualsSelf":783,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":897,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRetainAll":666,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":996,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":150,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemoveChangesMap":461,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":608,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":147,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":792,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":371,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":621,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":962,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":183,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection_2":560,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiPut":169,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveChangesMap":899,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":188,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectEqualsSelf":658,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":194,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":782,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":749,"org.apache.commons.collections4.list.TreeListTest.testListGetByIndex":220,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":168,"org.apache.commons.collections4.list.TreeListTest.testCollectionIsEmpty":231,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":11,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains2":448,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":729,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains1":447,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":819,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetContains3":449,"org.apache.commons.collections4.CollectionUtilsTest.emptyCollection":660,"org.apache.commons.collections4.list.TreeListTest.testListRemoveByIndex":224,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFailFastKeySet":319,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastEntrySet":428,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":30,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveChangesMap":931,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":32,"org.apache.commons.collections4.map.LinkedMapTest.testMakeMap":431,"org.apache.commons.collections4.ListUtilsTest.testDefaultIfNull":592,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemove":77,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesRemoveAll":673,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiMapIteratorSet":282,"org.apache.commons.collections4.list.TreeListTest.testCollectionToArray2":238,"org.apache.commons.collections4.MapUtilsTest.testIterableSortedMap":556,"org.apache.commons.collections4.MapUtilsTest.testIsEmptyWithNonEmptyMap":549,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":47,"org.apache.commons.collections4.list.TreeListTest.testListListIterator":477,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetIteratorRemoveChangesMap":460,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":736,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRetainAll":459,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testObjectHashCodeEqualsContract":840,"org.apache.commons.collections4.list.TreeListTest.testBug35258":468,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEmptyMapCompatibility":50,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":756,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":289,"org.apache.commons.collections4.map.LinkedMapTest.testClone":1032,"org.apache.commons.collections4.list.TreeListTest.testCollectionContainsAll":230,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testValuesRemoveAll":697,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":701,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":268,"org.apache.commons.collections4.list.TreeListTest.testCollectionToString":484,"org.apache.commons.collections4.list.PredicatedListTest.testObjectHashCodeEqualsContract":731,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":583,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":1019,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":622,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":632,"org.apache.commons.collections4.map.TransformedSortedMapTest.testValuesIteratorRemoveChangesMap":905,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testPreviousKey":38,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains1":944,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains2":945,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetContains3":946,"org.apache.commons.collections4.map.LRUMapTest.testFailFastValues":378,"org.apache.commons.collections4.list.TransformedListTest.testSerializeDeserializeThenCompare":781,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":119,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveAll":305,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":804,"org.apache.commons.collections4.map.LRUMapTest.testLastKey":374,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking":554,"org.apache.commons.collections4.map.LRUMapTest.testAccessOrder":956,"org.apache.commons.collections4.collection.TransformedCollectionTest.testObjectHashCodeEqualsContract":842,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetRemoveAll":671,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":1027,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveAll":87,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":33,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":746,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapRemove":296,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testKeySetRetainAll":700,"org.apache.commons.collections4.map.LinkedMapTest.testFullMapCompatibility":438,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":525,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":299,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":298,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":652,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":297,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":870,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":259,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":769,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":880,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":752,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetIteratorRemoveChangesMap":307,"org.apache.commons.collections4.map.LRUMapTest.testNextKey":375,"org.apache.commons.collections4.bag.SynchronizedBagTest.testEqualsNull":516,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToString":498,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":788,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":593,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":739,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMap":196,"org.apache.commons.collections4.TransformerUtilsTest.testSwitchMapTransformer":487,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":584,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":495,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":240,"org.apache.commons.collections4.queue.PredicatedQueueTest.testObjectHashCodeEqualsContract":830,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":801,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":568,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":812,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectEqualsSelf":633,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMap":193,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPut":981,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":215,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":790,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectEqualsSelf":833,"org.apache.commons.collections4.map.LinkedMapTest.testFailFastValues":427,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":155,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":961,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByHeadMap":192,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByTailMap":195,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectHashCodeEqualsContract":642,"org.apache.commons.collections4.list.TreeListTest.testListListIteratorPreviousRemovePrevious":480,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":239,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemove":567,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":601,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":773,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":908,"org.apache.commons.collections4.MapUtilsTest.testIsEmptyWithEmptyMap":548,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearBySubMap":198,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":798,"org.apache.commons.collections4.map.HashedMapTest.testMapPutAll":923,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRetainAll":994,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiGetKeyInverse":69,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":365,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":536,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":5,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":29,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":148,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":257,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIsEmpty":362,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetClearChangesMap":398,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRemoveAll":690,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":248,"org.apache.commons.collections4.list.TreeListTest.testObjectHashCodeEqualsContract":485,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetRetainAll":954,"org.apache.commons.collections4.list.FixedSizeListTest.testObjectHashCodeEqualsContract":803,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":754,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFailFastEntrySet":321,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":742,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testLastKey":311,"org.apache.commons.collections4.map.LRUMapTest.testValuesClearChangesMap":396,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapPutNullValue":294,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":855,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":284,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesRetainAll":662,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":256,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":826,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRetainAll":693,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":395,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiGetKeyInverse":74,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiGetKey":65,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":22,"org.apache.commons.collections4.set.MapBackedSet2Test.testOrdering":352,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":354,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutAll":982,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":564,"org.apache.commons.collections4.map.LRUMapTest.testValuesRemoveAll":406,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRemoveChangesMap":453,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":120,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":181,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapGet":328,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testEqualsNull":517,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":386,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":894,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveChangesMap":913,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":538,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndexBoundsChecking2":589,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":789,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":863,"org.apache.commons.collections4.map.LazyMapTest.testValuesIteratorRemoveChangesMap":887,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetClearChangesMap":337,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testBagEqualsSelf":635,"org.apache.commons.collections4.list.TreeListTest.testCollectionAddAll":228,"org.apache.commons.collections4.map.ReferenceMapTest.testMapIsEmpty":974,"org.apache.commons.collections4.set.ListOrderedSetTest.testCanonicalEmptyCollectionExists":543,"org.apache.commons.collections4.collection.TransformedCollectionTest.testObjectEqualsSelf":841,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testSerializeDeserializeThenCompare":52,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":744,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapToString":330,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testObjectEqualsSelf":843,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFullMapCompatibility":331,"org.apache.commons.collections4.map.LinkedMapTest.testMapClear":432,"org.apache.commons.collections4.map.LinkedMapTest.testMapGet":109,"org.apache.commons.collections4.list.GrowthListTest.testFullListCompatibility":743,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":862,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":703,"org.apache.commons.collections4.map.ReferenceMapTest.testMapToString":980,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":437,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAddAll":364,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":937,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":182,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":895,"org.apache.commons.collections4.ClosureUtilsTest.testChainedClosure":585,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesIteratorRemoveChangesMap":914,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":1017,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemove":64,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":718,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":943,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":491,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":117,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":775,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":857,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiInverse":62,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetRemoveAll":663,"org.apache.commons.collections4.list.TreeListTest.testListAddByIndexBoundsChecking2":473,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":27,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":6,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiRemove":280,"org.apache.commons.collections4.list.TreeListTest.testIterationOrderAfterAddAll":471,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMap":199,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":902,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":856,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":906,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":577,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveChangesMap":888,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToString":527,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionClear":253,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesRetainAll":674,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveChangesMap":876,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":817,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testCanonicalEmptyCollectionExists":58,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":617,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":165,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":269,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":815,"org.apache.commons.collections4.list.UnmodifiableListTest.testSerializeDeserializeThenCompare":825,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetContains2":340,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":636,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetContains3":341,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetContains1":339,"org.apache.commons.collections4.set.TransformedSetTest.testSerializeDeserializeThenCompare":594,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":780,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSerializeDeserializeThenCompare":507,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiInverse":70,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRetainAll":411,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":735,"org.apache.commons.collections4.list.SetUniqueListTest.testObjectHashCodeEqualsContract":810,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":921,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiInverse":67,"org.apache.commons.collections4.map.LRUMapTest.testKeySetIteratorRemoveChangesMap":412,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":124,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testValuesRetainAll":698,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagSize":569,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":760,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":121,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionSize":262,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":149,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":435,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByHeadMap":160,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":360,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsValue":977,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":131,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":785,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemove":72,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiKeySetValuesOrder":317,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":254,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":916,"org.apache.commons.collections4.map.ReferenceMapTest.testPurgeValues":973,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicateEx1":515,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":176,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiClear":316,"org.apache.commons.collections4.set.ListOrderedSetTest.testSimpleSerialization":544,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove1":1008,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetIteratorRemoveChangesMap":309,"org.apache.commons.collections4.map.LinkedMapTest.testMapHashCode":436,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectHashCodeEqualsContract":654,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":260,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetIteratorRemoveChangesMap":995,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove3":1010,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemove2":1009,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":370,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapHashCode":48,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByKeySet":171,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRetainAll":105,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContainsAll":355,"org.apache.commons.collections4.map.LRUMapTest.testPreviousKey":376,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetClearChangesMap":445,"org.apache.commons.collections4.list.NodeCachingLinkedListTest.testListGetByIndexBoundsChecking2":591,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectHashCodeEqualsContract":834,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiInverse":315,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveAll":100,"org.apache.commons.collections4.list.UnmodifiableListTest.testObjectHashCodeEqualsContract":828,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveChangesMap":881,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection":559,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":212,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":506,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAddAll":848,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":964,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":805,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":505,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveChangesMap":872,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":1012,"org.apache.commons.collections4.list.TreeListTest.testCollectionRemoveAll":235,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":816,"org.apache.commons.collections4.map.LinkedMapTest.testRemoveByIndex":421,"org.apache.commons.collections4.list.PredicatedListTest.testLegalAddAll":552,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":174,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetClearChangesMap":338,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":1013,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":708,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":814,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRetainAll":108,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapHashCode":329,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":727,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":520,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapPutAll":334,"org.apache.commons.collections4.list.TreeListTest.testRemove":465,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveChangesMap":884,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":4,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":207,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains2":985,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains1":984,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testSerializeDeserializeThenCompare":266,"org.apache.commons.collections4.list.TreeListTest.testCollectionContains":229,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMakeMap":324,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":579,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetContains3":986,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":263,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":1026,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutNullValue":441,"org.apache.commons.collections4.CollectionUtilsTest.maxSize":489,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":1025,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":1024,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":724,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":529,"org.apache.commons.collections4.set.PredicatedSetTest.testSetHashCode":849,"org.apache.commons.collections4.list.TreeListTest.testListGetByIndexBoundsChecking2":474,"org.apache.commons.collections4.list.TreeListTest.testListAddByIndexBoundsChecking":472,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":924,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPutAll":1003,"org.apache.commons.collections4.list.PredicatedListTest.testFullListCompatibility":716,"org.apache.commons.collections4.ArrayStackTest.testSearch":510,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectEqualsSelf":615,"org.apache.commons.collections4.list.TreeListTest.testCollectionIteratorRemove":233,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":126,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":122,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":133,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":42,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove3":96,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testFirstKey":310,"org.apache.commons.collections4.map.LinkedMapTest.testLastKey":423,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove2":95,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemove1":94,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRemoveAll":681,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":822,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRetainAll":670,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveAll":414,"org.apache.commons.collections4.map.LRUMapTest.testClone":958,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":497,"org.apache.commons.collections4.map.LinkedMapTest.testValuesIteratorRemoveChangesMap":456,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetClearChangesMap":446,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":965,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":49,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":251,"org.apache.commons.collections4.list.TransformedListTest.testFullListCompatibility":770,"org.apache.commons.collections4.map.LRUMapTest.testFailFastEntrySet":379,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":796,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":936,"org.apache.commons.collections4.map.TransformedMapTest.testValuesIteratorRemoveChangesMap":891,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchMapClosure":581,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":860,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":732,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectHashCodeEqualsContract":629,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiGetKey":60,"org.apache.commons.collections4.set.PredicatedSetTest.testCanonicalFullCollectionExists":865,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":493,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRemoveAll":694,"org.apache.commons.collections4.map.LinkedMapTest.testKeySetRemoveChangesMap":457,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectEqualsSelf":540,"org.apache.commons.collections4.set.ListOrderedSetTest.testCanonicalFullCollectionExists":541,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":610,"org.apache.commons.collections4.list.TreeListTest.testListEquals":218,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapEquals":327,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":874,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":890,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":13,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":26,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":34,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":776,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectHashCodeEqualsContract":604,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":503,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":191,"org.apache.commons.collections4.list.SetUniqueListTest.testObjectEqualsSelf":809,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":16,"org.apache.commons.collections4.list.TreeListTest.testListSetByIndex":223,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectEqualsSelf":599,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":766,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":1035,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiPut":201,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesIteratorRemoveChangesMap":875,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetRemoveAll":683,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":712,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":267,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiGetKeyInverse":79,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":518,"org.apache.commons.collections4.MapUtilsTest.testPredicatedMap":562,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRemoveChangesMap":413,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":1018,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiModifyEntrySet":76,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":209,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRemoveChangesMap":99,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":813,"org.apache.commons.collections4.list.GrowthListTest.testObjectEqualsSelf":757,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":514,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":704,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectHashCodeEqualsContract":616,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":734,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":571,"org.apache.commons.collections4.set.PredicatedSetTest.testEqualsNull":866,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectEqualsSelf":623,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectHashCodeEqualsContract":620,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKeyInverse":277,"org.apache.commons.collections4.MapUtilsTest.testIsNotEmptyWithEmptyMap":550,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testKeySetRemoveAll":346,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectHashCodeEqualsContract":634,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":738,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":173,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":753,"org.apache.commons.collections4.map.LinkedMapTest.testValuesRetainAll":455,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":152,"org.apache.commons.collections4.list.TreeListTest.testIndexOf":464,"org.apache.commons.collections4.list.CursorableLinkedListTest.testListGetByIndexBoundsChecking":588,"org.apache.commons.collections4.set.TransformedSetTest.testObjectHashCodeEqualsContract":596,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsContract":545,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":558,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToString":249,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsSelf":643,"org.apache.commons.collections4.list.PredicatedListTest.testObjectEqualsSelf":730,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetIteratorRemoveChangesMap":416,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":864,"org.apache.commons.collections4.SetUtilsTest.testpredicatedSet":845,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testPurgeValues":933,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":384,"org.apache.commons.collections4.list.TreeListTest.testBugCollections447":469,"org.apache.commons.collections4.ListUtilsTest.testHashCode":547,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":940,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiGetKey":68,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapContainsValue":326,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":103,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectHashCodeEqualsContract":612,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPut":941,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMap":164,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapPut":1002,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionClear":363,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndexBoundsChecking":0,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":138,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":764,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":900,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking2":555,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":10,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":726,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":146,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionSize":357,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":573,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiGetKeyInverse":82,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSerializeDeserializeThenCompare":602,"org.apache.commons.collections4.set.PredicatedSetTest.testGetSet":847,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":777,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiGetKey":313,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":513,"org.apache.commons.collections4.set.TransformedSetTest.testObjectEqualsSelf":595,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove3":452,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":367,"org.apache.commons.collections4.map.LinkedMapTest.testValuesClearChangesMap":444,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove2":451,"org.apache.commons.collections4.map.LinkedMapTest.testEntrySetRemove1":450,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesRemoveAll":661,"org.apache.commons.collections4.map.LinkedMapTest.testMapPutAll":442,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testObjectEqualsSelf":835,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapPutNullKey":293,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsHashBag":651,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiModifyEntrySet":84,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":123,"org.apache.commons.collections4.list.TreeListTest.testListIteratorSet":226,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetEquals":353,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndexBoundsChecking2":1,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":500,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetRemoveAll":104,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":597,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":886,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":381,"org.apache.commons.collections4.PredicateUtilsTest.testTransformedPredicate":565,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRetainAll":678,"org.apache.commons.collections4.CollectionUtilsTest.getFromMap":488,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":211,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove1":969,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove2":970,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetRemove3":971,"org.apache.commons.collections4.TransformerUtilsTest.testSwitchTransformer":159,"org.apache.commons.collections4.list.PredicatedListTest.testSerializeDeserializeThenCompare":728,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testEntrySetRemoveChangesMap":1011,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":1000,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":178,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":563,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray2":356,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMakeMap":43,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutAll":942,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testEntrySetRetainAll":101,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectEqualsSelf":607,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":136,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":763,"org.apache.commons.collections4.map.ReferenceMapTest.testEntrySetRemoveAll":993,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":350,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullKey":392,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetRetainAll":415,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByEntrySet":172,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":1001,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":51,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":144,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testObjectHashCodeEqualsContract":844,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":17,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":537,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":162,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":205,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":429,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":3,"org.apache.commons.collections4.map.LRUMapTest.testKeySetRemoveAll":410,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testUnmodifiable":272,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":750,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":963,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsHashBag":645,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":494,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectEqualsSelf":619,"org.apache.commons.collections4.list.TreeListTest.testListListIteratorNextRemoveNext":481,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveChangesMap":909,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":132,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":200,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":216,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectEqualsSelf":603,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClear":170,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiKeySetValuesOrder":281,"org.apache.commons.collections4.list.TreeListTest.testListIndexOf":221,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":243,"org.apache.commons.collections4.map.ReferenceMapTest.testMapSize":975,"org.apache.commons.collections4.list.PredicatedListTest.testIllegalAddAll":553,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":627,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testObjectEqualsSelf":54,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":130,"org.apache.commons.collections4.CollectionUtilsTest.predicatedCollection":348,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":129,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray":369,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByTailMap":163,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveChangesMap":308,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":19,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetRetainAll":664,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":177,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionAdd":366,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testNextKey":275,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":795,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":106,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":705,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":521,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":24,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testClone":1033,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":128,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":877,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":359,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveAll":691,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":711,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":252,"org.apache.commons.collections4.map.LRUMapTest.testMapPutAll":394,"org.apache.commons.collections4.list.TreeListTest.testListSetByIndexBoundsChecking2":475,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsSelfHashCode":546,"org.apache.commons.collections4.map.LinkedMapTest.testNextKey":424,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRemoveChangesMap":342,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":539,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":135,"org.apache.commons.collections4.map.ReferenceMapTest.testMapContainsKey":976,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":858,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":15,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiGetKeyInverse":61,"org.apache.commons.collections4.list.TreeListTest.testAddMultiple":466,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":917,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":206,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionClear":242,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":613,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiGetKeyInverse":66,"org.apache.commons.collections4.list.TreeListTest.testCollectionToArray":237,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByKeySet":203,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectEqualsSelf":641,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":797,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":811,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":283,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRetainAll":302,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapPutAll":295,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":896,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiInverse":80,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionSize":247,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":901,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":823,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiGetKey":276,"org.apache.commons.collections4.map.ReferenceMapTest.testKeySetIteratorRemoveChangesMap":991,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":799,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":127,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":501,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":143,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":380,"org.apache.commons.collections4.map.Flat3MapTest.testClone4":1030,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":885,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":153,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":850,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":650,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":912,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":794,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAdd":846,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveChangesMap":304,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveAll":665,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":893,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":533,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesRetainAll":344,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapRemove":335,"org.apache.commons.collections4.map.ReferenceMapTest.testMapGet":979,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsSelf":655,"org.apache.commons.collections4.map.ReferenceMapTest.testMapEquals":978,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testBidiPut":561,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":740,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":702,"org.apache.commons.collections4.list.FixedSizeListTest.testSerializeDeserializeThenCompare":800,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":264,"org.apache.commons.collections4.map.LRUMapTest.testMapPutNullValue":393,"org.apache.commons.collections4.list.CursorableLinkedListTest.testGet":587,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsSelf":630,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":748,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":889,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesIteratorRemoveChangesMap":910,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains2":967,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains3":968,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testBasics":932,"org.apache.commons.collections4.map.Flat3MapTest.testEntrySetContains1":966,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testNullHandling":112,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":879,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":637,"org.apache.commons.collections4.set.ListOrderedSetTest.testEqualsNull":542,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":45,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesClearChangesMap":336,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":878,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":808,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":499,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":751,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":998,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":156,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testValuesIteratorRemoveChangesMap":345,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains1":925,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":531,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains2":926,"org.apache.commons.collections4.bidimap.TreeBidiMapTest.testMapSize":323,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":713,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":820,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":859,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testTransformedMap":118,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":20,"org.apache.commons.collections4.map.LRUMapTest.testMapPut":391,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRetainAll":682,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiInverse":278,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testSimpleSerialization":57,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":512,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testFirstKey":273,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":999,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":134,"org.apache.commons.collections4.queue.PredicatedQueueTest.testObjectEqualsSelf":829,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":960,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":528,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":717,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":771,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRemoveAll":686,"org.apache.commons.collections4.IteratorUtilsTest.testToArray":490,"org.apache.commons.collections4.map.TransformedSortedMapTest.testValuesRemoveChangesMap":904,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":189,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":287,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains3":401,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":721,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":41,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":598,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemove":575,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMap":161,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains1":399,"org.apache.commons.collections4.map.LRUMapTest.testEntrySetContains2":400,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":719,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":8,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":179,"org.apache.commons.collections4.map.HashedMapTest.testEntrySetContains3":927,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":433,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":535,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":1016,"org.apache.commons.collections4.list.TreeListTest.testListListIteratorPreviousRemoveNext":479,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testKeySetRetainAll":668,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":9,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetRemoveAll":675,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":778,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":709,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesIteratorRemoveChangesMap":882,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testEntrySetIteratorRemoveChangesMap":955,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":368,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":522,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSerializeDeserializeThenCompare":618,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":389},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[0,1],"tindex":"80f3f799-3e8a-11e6-bfb7-212d0f6f135d","method":{"position":"org.apache.commons.collections4.list.PredicatedList:132","type":"CtMethodImpl","sourcecode":"public E set(final int index, final E object) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            validate(object);\n            return decorated().set(index, object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionBag:125","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[],"tindex":"80f445ba-3e8a-11e6-bfb7-b18d2006525a","method":{"position":"org.apache.commons.collections4.queue.UnmodifiableQueue:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PeekingIterator:59","type":"CtBinaryOperatorImpl","sourcecode":"iterator == null"},"failures":[],"tindex":"80f46ccb-3e8a-11e6-bfb7-bf22018837d2","method":{"position":"org.apache.commons.collections4.iterators.IteratorIterable:69","type":"CtMethodImpl","sourcecode":"private static <E>java.util.Iterator<E> createTypesafeIterator(final java.util.Iterator<? extends E> iterator) {\n    if (iterator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.util.Iterator<E>() {\n                public boolean hasNext() {\n                    return iterator.hasNext();\n                }\n\n                public E next() {\n                    return iterator.next();\n                }\n\n                public void remove() {\n                    iterator.remove();\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1285","type":"CtBinaryOperatorImpl","sourcecode":"object == null"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"80f46ccc-3e8a-11e6-bfb7-97b0621f8a2c","method":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:125","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.containsKey(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:540","type":"CtBinaryOperatorImpl","sourcecode":"node == null"},"failures":[37,38],"tindex":"80f493dd-3e8a-11e6-bfb7-4738e59d9faf","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:631","type":"CtMethodImpl","sourcecode":"private org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> nextSmaller(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n    if (node == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n            if (node == null) {\n                rval = null;\n            } else if ((node.getLeft(dataElement)) != null) {\n                rval = greatestNode(node.getLeft(dataElement), dataElement);\n            } else {\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = node.getParent(dataElement);\n                org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = node;\n                while ((parent != null) && (child == (parent.getLeft(dataElement)))) {\n                    child = parent;\n                    parent = parent.getParent(dataElement);\n                }\n                rval = parent;\n            }\n            return rval;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:66","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[],"tindex":"80f5090e-3e8a-11e6-bfb7-1df60dca6ad8","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:379","type":"CtMethodImpl","sourcecode":"public void removeComposited(final java.util.Collection<E> coll) {\n    if (coll == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<java.util.Collection<E>>.remove(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1056","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Iterator"},"failures":[],"tindex":"80f5301f-3e8a-11e6-bfb7-8ff2758c2496","method":{"position":"org.apache.commons.collections4.functors.ConstantTransformer:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.collections4.functors.ConstantTransformer.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.collections4.functors.ConstantTransformer) == false) {\n                return false;\n            } \n            final java.lang.Object java.lang.Object = ((org.apache.commons.collections4.functors.ConstantTransformer<?, ?>)(obj)).getConstant();\n            return (otherConstant == (getConstant())) || ((otherConstant != null) && (otherConstant.equals(getConstant())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[39,40],"tindex":"80f53020-3e8a-11e6-bfb7-4f6e2e42363d","method":{"position":"org.apache.commons.collections4.collection.CompositeCollection:275","type":"CtMethodImpl","sourcecode":"public boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            if ((org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E>) == null) {\n                throw new java.lang.UnsupportedOperationException(\"addAll() is not supported on CompositeCollection without a CollectionMutator strategy\");\n            } \n            return org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E>.addAll(org.apache.commons.collections4.collection.CompositeCollection.this, java.util.List<java.util.Collection<E>>, coll);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.TransformedSortedMap:95","type":"CtBinaryOperatorImpl","sourcecode":"(map.size()) > 0"},"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"80f53021-3e8a-11e6-bfb7-6daed9c2a5b5","method":{"position":"org.apache.commons.collections4.map.FixedSizeSortedMap:74","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.map.FixedSizeSortedMap<K, V> fixedSizeSortedMap(final java.util.SortedMap<K, V> map) {\n    if ((map.size()) > 0) {\n        {\n            return new org.apache.commons.collections4.map.FixedSizeSortedMap<K, V>(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:141","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"tindex":"80f53022-3e8a-11e6-bfb7-adfcabb3c0cb","method":{"position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:221","type":"CtMethodImpl","sourcecode":"public K getKey(final java.lang.Object value) {\n    if (value == null) {\n        {\n            return java.util.Map<V, K>.get(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:90","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.collection.AbstractCollectionDecorator"},"failures":[],"tindex":"80f53023-3e8a-11e6-bfb7-7d5e75b1dcbb","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:215","type":"CtMethodImpl","sourcecode":"public boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll instanceof org.apache.commons.collections4.collection.AbstractCollectionDecorator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return addAll(int, coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InvokerTransformer:123","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[],"tindex":"80f55734-3e8a-11e6-bfb7-5fd0abf7e16e","method":{"position":"org.apache.commons.collections4.CollectionUtils:552","type":"CtMethodImpl","sourcecode":"public org.apache.commons.collections4.CollectionUtils.EquatorWrapper<?> transform(final java.lang.Object input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.CollectionUtils.EquatorWrapper(equator , input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.CaseInsensitiveMap:124","type":"CtBinaryOperatorImpl","sourcecode":"key != null"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"tindex":"80f55735-3e8a-11e6-bfb7-b3276326bc51","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:163","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkKey(key);\n            return (lookupKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:201","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"tindex":"80f55736-3e8a-11e6-bfb7-49c4427d137f","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:179","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            key = convertKey(key);\n            final int int = hash(key);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex(hashCode, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(key, entry.java.lang.Object))) {\n                    return entry.getValue();\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:248","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[118,119],"tindex":"80f55737-3e8a-11e6-bfb7-e177cd19925b","method":{"position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:67","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        {\n            return decorated().containsValue(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[120,121,122],"tindex":"80f57e48-3e8a-11e6-bfb7-db899d54fbfe","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                {\n                    for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : map.entrySet()) {\n                        put(entry.getKey(), entry.getValue());\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:229","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156],"tindex":"80f57e49-3e8a-11e6-bfb7-af837a2fa9fa","method":{"position":"org.apache.commons.collections4.list.SetUniqueList:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void add(final int index, final E object) {\n    if (index < 0) {\n        {\n            if ((java.util.Set<E>.contains(object)) == false) {\n                super.add(index, object);\n                java.util.Set<E>.add(object);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.keyvalue.MultiKey:264","type":"CtBinaryOperatorImpl","sourcecode":"key != null"},"failures":[91],"tindex":"80f57e4a-3e8a-11e6-bfb7-59b3d58626ae","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2111","type":"CtMethodImpl","sourcecode":"public K remove(final java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.bidimap.TreeBidiMap.this.removeValue(key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"80f57e4b-3e8a-11e6-bfb7-3b598f80e2a7","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:1043","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.ListIterator<E> listIterator(final int index) {\n    if (index < 0) {\n        {\n            rangeCheck(index, ((int) + 1));\n            checkModCount();\n            return org.apache.commons.collections4.list.AbstractLinkedList<E>.createSubListListIterator(org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList.this, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:229","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"80f57e4c-3e8a-11e6-bfb7-1bb8bdf9ae33","method":{"position":"org.apache.commons.collections4.map.LinkedMap:248","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic K remove(final int index) {\n    if (index < 0) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:876","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[157],"tindex":"80f5a55d-3e8a-11e6-bfb7-af45cd2408a4","method":{"position":"org.apache.commons.collections4.CollectionUtils:846","type":"CtMethodImpl","sourcecode":"public static <C>boolean exists(final java.lang.Iterable<C> input, final org.apache.commons.collections4.Predicate<? super C> predicate) {\n    if (input != null) {\n        {\n            if ((input != null) && (predicate != null)) {\n                for (final C C : input) {\n                    if (predicate.evaluate(o)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.SwitchClosure:90","type":"CtBinaryOperatorImpl","sourcecode":"predicatesAndClosures == null"},"failures":[158],"tindex":"80f5a55e-3e8a-11e6-bfb7-07ec8c9b7d3e","method":{"position":"org.apache.commons.collections4.functors.SwitchClosure:89","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> switchClosure(final java.util.Map<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> predicatesAndClosures) {\n    if (predicatesAndClosures == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicatesAndClosures == null) {\n                throw new java.lang.IllegalArgumentException(\"The predicate and closure map must not be null\");\n            } \n            final org.apache.commons.collections4.Closure<? super E> org.apache.commons.collections4.Closure<? super E> = predicatesAndClosures.remove(null);\n            final int int = predicatesAndClosures.size();\n            if (size == 0) {\n                return ((org.apache.commons.collections4.Closure<E>)(defaultClosure == null ? org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure() : defaultClosure));\n            } \n            final org.apache.commons.collections4.Closure<E>[] org.apache.commons.collections4.Closure<E>[] = new org.apache.commons.collections4.Closure[size];\n            final org.apache.commons.collections4.Predicate<E>[] org.apache.commons.collections4.Predicate<E>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> java.util.Map.Entry<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>> : predicatesAndClosures.entrySet()) {\n                preds[i] = entry.getKey();\n                closures[i] = entry.getValue();\n                i++;\n            }\n            return new org.apache.commons.collections4.functors.SwitchClosure<E>(false , preds , closures , defaultClosure);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicatesAndClosures":"predicatesAndClosures"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:50","type":"CtBinaryOperatorImpl","sourcecode":"predicates == null"},"failures":[159],"tindex":"80f5a55f-3e8a-11e6-bfb7-c96656e02d49","method":{"position":"org.apache.commons.collections4.TransformerUtils:250","type":"CtMethodImpl","sourcecode":"public static <I, O>org.apache.commons.collections4.Transformer<I, O> switchTransformer(final org.apache.commons.collections4.Predicate<? super I>[] predicates, final org.apache.commons.collections4.Transformer<? super I, ? extends O>[] transformers) {\n    if (predicates == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.SwitchTransformer.<I, O>switchTransformer(predicates, transformers, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:151","type":"CtBinaryOperatorImpl","sourcecode":"(normalMap) instanceof org.apache.commons.collections4.OrderedMap"},"failures":[160,161,162,163,164,165,166,167,168,169,61,62,63,170,64,171,172,173,174,175,176,177,178,179,180,181,182,183,184,66,67,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,74,75,76,202,77,203,204,205,206,207,208,209,210,211,212,213,214,215,216],"tindex":"80f5a560-3e8a-11e6-bfb7-a154d8fd82c6","method":{"position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.collections4.bidimap.DualTreeBidiMap<V, K> createBidiMap(final java.util.Map<V, K> normalMap, final java.util.Map<K, V> reverseMap, final org.apache.commons.collections4.BidiMap<K, V> inverseMap) {\n    if (reverseMap instanceof org.apache.commons.collections4.OrderedMap) {\n        {\n            return new org.apache.commons.collections4.bidimap.DualTreeBidiMap<V, K>(normalMap , reverseMap , inverseMap);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"normalMap":"reverseMap"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],"tindex":"80f5cc71-3e8a-11e6-bfb7-c7bf18b237b3","method":{"position":"org.apache.commons.collections4.list.TreeList:452","type":"CtMethodImpl","sourcecode":"void toArray(final java.lang.Object[] array, final int index) {\n    if (index < 0) {\n        {\n            array[index] = E;\n            if ((getLeftSubTree()) != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(array, (index + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            } \n            if ((getRightSubTree()) != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(array, (index + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.UnmodifiableMap:63","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[],"tindex":"80f5cc72-3e8a-11e6-bfb7-c3d9a0354f04","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:245","type":"CtMethodImpl","sourcecode":"public void putAll(int index, final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index < 0) || (index > (java.util.List<K>.size()))) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Size: \") + (java.util.List<K>.size())));\n            } \n            for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : map.entrySet()) {\n                final K K = entry.getKey();\n                final boolean boolean = containsKey(key);\n                put(index, entry.getKey(), entry.getValue());\n                if (!contains) {\n                    index++;\n                } else {\n                    index = (indexOf(entry.getKey())) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PermutationIterator:77","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[239,240,241,17,242,18,19,243,20,244,245,21,246,247,22,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270],"tindex":"80f5cc73-3e8a-11e6-bfb7-19de72504076","method":{"position":"org.apache.commons.collections4.collection.TransformedCollection:151","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            return decorated().addAll(transform(coll));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:756","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[271,272,273,274,275,37,276,277,278,279,280,281,282,283,284,285,286,86,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,87,88,309,310,311,312,38,313,314,315,316,91,317,89,90,318,319,320,321,322,323,324,325,92,326,327,328,329,330,331,93,332,333,334,335,336,337,338,339,340,341,94,95,96,342,343,344,345,97,346,347,98,99,100,101,102],"tindex":"80f5f384-3e8a-11e6-bfb7-473b19412821","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:734","type":"CtMethodImpl","sourcecode":"private static boolean isRed(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<?, ?> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n    if (node != null) {\n        {\n            return (node != null) && (node.isRed(dataElement));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.PredicateTransformer:48","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[348],"tindex":"80f5f385-3e8a-11e6-bfb7-9bb1378a09ef","method":{"position":"org.apache.commons.collections4.collection.PredicatedCollection:62","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.collection.PredicatedCollection<T> predicatedCollection(final java.util.Collection<T> coll, final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.collection.PredicatedCollection<T>(coll , predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1338","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof java.lang.Object[]"},"failures":[349,350,351,35],"tindex":"80f5f386-3e8a-11e6-bfb7-c588c145c0e5","method":{"position":"org.apache.commons.collections4.bag.SynchronizedBag:93","type":"CtMethodImpl","sourcecode":"public boolean remove(final java.lang.Object object, final int count) {\n    if (object instanceof java.lang.Object[]) {\n        {\n            synchronized(java.lang.Object) {\n                return getBag().remove(object, count);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"80f5f387-3e8a-11e6-bfb7-91e6de315bad","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:138","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic E set(final int index, final E object) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:57","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[],"tindex":"80f5f388-3e8a-11e6-bfb7-8d679dda9d55","method":{"position":"org.apache.commons.collections4.map.ListOrderedMap:231","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n                {\n                    for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : map.entrySet()) {\n                        put(entry.getKey(), entry.getValue());\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:341","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"80f61a99-3e8a-11e6-bfb7-1b484e2021d8","method":{"position":"org.apache.commons.collections4.MapUtils:213","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Byte getByte(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Number java.lang.Number = org.apache.commons.collections4.MapUtils.getNumber(map, key);\n            if (answer == null) {\n                return null;\n            } \n            if (answer instanceof java.lang.Byte) {\n                return ((java.lang.Byte)(answer));\n            } \n            return java.lang.Byte.valueOf(answer.byteValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1053","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[283,284,86,287,288,291,322,323,92,326,327,330,93,334,335],"tindex":"80f61a9a-3e8a-11e6-bfb7-5b7fae19a91c","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1484","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkNonNullComparable(obj, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n            return (lookupKey(obj)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:245","type":"CtBinaryOperatorImpl","sourcecode":"(entry.getValue()) == null"},"failures":[352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,109,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,110,111,462,463],"tindex":"80f61a9b-3e8a-11e6-bfb7-5196171c5578","method":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:262","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void addEntry(final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> entry, final int hashIndex) {\n    if ((entry.getValue()) == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = ((org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)(entry));\n            link.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            link.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>;\n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = link;\n            org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = link;\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex] = link;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"entry":"entry"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:341","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[464,465,466,467,468,469,470,471,472,473,217,218,219,220,474,221,222,475,223,476,224,477,478,479,480,481,482,225,226,227,228,483,229,230,231,232,233,234,235,236,238,484,485,486],"tindex":"80f668bc-3e8a-11e6-bfb7-03829d7028e6","method":{"position":"org.apache.commons.collections4.list.TreeList:286","type":"CtMethodImpl","sourcecode":"private void checkInterval(final int index, final int startIndex, final int endIndex) {\n    if (endIndex < 0) {\n        {\n            if ((index < startIndex) || (index > endIndex)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Invalid index:\" + index) + \", size=\") + (size())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.TransformerUtils:326","type":"CtBinaryOperatorImpl","sourcecode":"objectsAndTransformers == null"},"failures":[487],"tindex":"80f668bd-3e8a-11e6-bfb7-71fd6a1dd092","method":{"position":"org.apache.commons.collections4.TransformerUtils:323","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <I, O>org.apache.commons.collections4.Transformer<I, O> switchMapTransformer(final java.util.Map<I, org.apache.commons.collections4.Transformer<I, O>> objectsAndTransformers) {\n    if (objectsAndTransformers == null) {\n        {\n            if (objectsAndTransformers == null) {\n                throw new java.lang.IllegalArgumentException(\"The object and transformer map must not be null\");\n            } \n            final org.apache.commons.collections4.Transformer<? super I, ? extends O> org.apache.commons.collections4.Transformer<? super I, ? extends O> = objectsAndTransformers.remove(null);\n            final int int = objectsAndTransformers.size();\n            final org.apache.commons.collections4.Transformer<? super I, ? extends O>[] org.apache.commons.collections4.Transformer<? super I, ? extends O>[] = new org.apache.commons.collections4.Transformer[size];\n            final org.apache.commons.collections4.Predicate<I>[] org.apache.commons.collections4.Predicate<I>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<I, org.apache.commons.collections4.Transformer<I, O>> java.util.Map.Entry<I, org.apache.commons.collections4.Transformer<I, O>> : objectsAndTransformers.entrySet()) {\n                preds[i] = org.apache.commons.collections4.functors.EqualPredicate.<I>equalPredicate(entry.getKey());\n                trs[(i++)] = entry.getValue();\n            }\n            return org.apache.commons.collections4.TransformerUtils.<I, O>switchTransformer(preds, trs, def);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsAndTransformers":"objectsAndTransformers"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[488],"tindex":"80f6b6de-3e8a-11e6-bfb7-5bf4af2e1925","method":{"position":"org.apache.commons.collections4.CollectionUtils:1194","type":"CtMethodImpl","sourcecode":"private static void checkIndexBounds(final int index) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException((\"Index cannot be negative: \" + index));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1501","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.BoundedCollection"},"failures":[489],"tindex":"80f6b6df-3e8a-11e6-bfb7-75971be52e83","method":{"position":"org.apache.commons.collections4.CollectionUtils:1497","type":"CtMethodImpl","sourcecode":"public static int maxSize(final java.util.Collection<? extends java.lang.Object> coll) {\n    if (coll instanceof org.apache.commons.collections4.BoundedCollection) {\n        {\n            if (coll == null) {\n                throw new java.lang.NullPointerException(\"The collection must not be null\");\n            } \n            if (coll instanceof org.apache.commons.collections4.BoundedCollection) {\n                return ((org.apache.commons.collections4.BoundedCollection<?>)(coll)).maxSize();\n            } \n            try {\n                final org.apache.commons.collections4.BoundedCollection<?> org.apache.commons.collections4.BoundedCollection<?> = org.apache.commons.collections4.collection.UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n                return bcoll.maxSize();\n            } catch (final java.lang.IllegalArgumentException ex) {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:956","type":"CtBinaryOperatorImpl","sourcecode":"iterator == null"},"failures":[490],"tindex":"80f70500-3e8a-11e6-bfb7-b74f64a561b1","method":{"position":"org.apache.commons.collections4.IteratorUtils:955","type":"CtMethodImpl","sourcecode":"public static java.lang.Object[] toArray(final java.util.Iterator<?> iterator) {\n    if (iterator == null) {\n        {\n            if (iterator == null) {\n                throw new java.lang.NullPointerException(\"Iterator must not be null\");\n            } \n            final java.util.List<?> java.util.List<?> = org.apache.commons.collections4.IteratorUtils.toList(iterator, 100);\n            return list.toArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterator":"iterator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.TransformedSortedMap:95","type":"CtBinaryOperatorImpl","sourcecode":"(map.size()) > 0"},"failures":[],"tindex":"80f72c11-3e8a-11e6-bfb7-630decf8da2f","method":{"position":"org.apache.commons.collections4.MapUtils:1588","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.SortedMap<K, V> fixedSizeSortedMap(final java.util.SortedMap<K, V> map) {\n    if ((map.size()) > 0) {\n        {\n            return org.apache.commons.collections4.map.FixedSizeSortedMap.fixedSizeSortedMap(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.PermutationIterator:77","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,252],"tindex":"80f72c12-3e8a-11e6-bfb7-a98a62ba2d51","method":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:108","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean addAll(final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            boolean boolean = false;\n            final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = coll.iterator();\n            while (i.hasNext()) {\n                final boolean boolean = add(i.next(), 1);\n                changed = changed || added;\n            }\n            return changed;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionBag:125","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[],"tindex":"80f72c13-3e8a-11e6-bfb7-31ffe79c462f","method":{"position":"org.apache.commons.collections4.set.MapBackedSet:140","type":"CtMethodImpl","sourcecode":"public boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        {\n            return java.util.Map<E, ? super V>.keySet().retainAll(coll);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:542","type":"CtBinaryOperatorImpl","sourcecode":"(object instanceof org.apache.commons.collections4.Bag) == false"},"failures":[510],"tindex":"80f72c14-3e8a-11e6-bfb7-e7a99d57afff","method":{"position":"org.apache.commons.collections4.ArrayStack:152","type":"CtMethodImpl","sourcecode":"public int search(final java.lang.Object object) {\n    if ((object instanceof org.apache.commons.collections4.Bag) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (size()) - 1;\n            int int = 1;\n            while (i >= 0) {\n                final java.lang.Object java.lang.Object = get(i);\n                if (((object == null) && (current == null)) || ((object != null) && (object.equals(current)))) {\n                    return n;\n                } \n                i--;\n                n++;\n            }\n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1065","type":"CtBinaryOperatorImpl","sourcecode":"(inputIterator != null) && (transformer != null)"},"failures":[511],"tindex":"80f72c15-3e8a-11e6-bfb7-4184996d4d9d","method":{"position":"org.apache.commons.collections4.CollectionUtils:1063","type":"CtMethodImpl","sourcecode":"public static <I, O, R extends java.util.Collection<? super O>>R collect(final java.util.Iterator<? extends I> inputIterator, final org.apache.commons.collections4.Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n    if ((inputIterator != null) && (transformer != null)) {\n        {\n            if ((inputIterator != null) && (transformer != null)) {\n                while (inputIterator.hasNext()) {\n                    final I I = inputIterator.next();\n                    final O O = transformer.transform(item);\n                    outputCollection.add(value);\n                }\n            } \n            return outputCollection;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"inputIterator":"inputIterator","transformer":"transformer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1201","type":"CtBinaryOperatorImpl","sourcecode":"o == null"},"failures":[512],"tindex":"80f75326-3e8a-11e6-bfb7-9d1e83f109ab","method":{"position":"org.apache.commons.collections4.iterators.ArrayListIterator:187","type":"CtMethodImpl","sourcecode":"public void set(final java.lang.Object o) {\n    if (o == null) {\n        {\n            if ((org.apache.commons.collections4.iterators.ArrayListIterator.this.int) == (-1)) {\n                throw new java.lang.IllegalStateException(\"must call next() or previous() before a call to set()\");\n            } \n            java.lang.reflect.Array.set(org.apache.commons.collections4.iterators.ArrayListIterator.this.java.lang.Object, org.apache.commons.collections4.iterators.ArrayListIterator.this.int, o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:1102","type":"CtBinaryOperatorImpl","sourcecode":"count > 3"},"failures":[513,514],"tindex":"80f75327-3e8a-11e6-bfb7-4f1a4407c28e","method":{"position":"org.apache.commons.collections4.map.MultiValueMap:429","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.util.Iterator<? extends java.util.Map.Entry<K, V>> nextIterator(int count) {\n    if (count > 3) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(keyIterator.hasNext())) {\n                return null;\n            } \n            final K K = keyIterator.next();\n            final org.apache.commons.collections4.Transformer<V, java.util.Map.Entry<K, V>> org.apache.commons.collections4.Transformer<V, java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.Transformer<V, java.util.Map.Entry<K, V>>() {\n                public java.util.Map.Entry<K, V> transform(final V input) {\n                    return new java.util.Map.Entry<K, V>() {\n                        public K getKey() {\n                            return key;\n                        }\n\n                        public V getValue() {\n                            return input;\n                        }\n\n                        public V setValue(V value) {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n            return new org.apache.commons.collections4.iterators.TransformIterator<V, java.util.Map.Entry<K, V>>(new ValuesIterator(key) , transformer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsTruePredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[515],"tindex":"80f77a38-3e8a-11e6-bfb7-0728281f71e4","method":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:46","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> nullIsExceptionPredicate(final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n            } \n            return new org.apache.commons.collections4.functors.NullIsExceptionPredicate<T>(predicate);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[516,517],"tindex":"80f77a39-3e8a-11e6-bfb7-8bbbd0fa18b1","method":{"position":"org.apache.commons.collections4.collection.SynchronizedCollection:193","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if (null == object) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.lang.Object) {\n                if (object == (org.apache.commons.collections4.collection.SynchronizedCollection.this)) {\n                    return true;\n                } \n                return (object == (org.apache.commons.collections4.collection.SynchronizedCollection.this)) || (decorated().equals(object));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"80f77a3a-3e8a-11e6-bfb7-9bcfb485d5ba","method":{"position":"org.apache.commons.collections4.list.UnmodifiableList:123","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void add(final int index, final E object) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.ListOrderedSet:77","type":"CtBinaryOperatorImpl","sourcecode":"set == null"},"failures":[518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546],"tindex":"80f7c85b-3e8a-11e6-bfb7-8706aa2c413f","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:100","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.set.ListOrderedSet<E> listOrderedSet(final java.util.Set<E> set) {\n    if (set == null) {\n        {\n            return new org.apache.commons.collections4.set.ListOrderedSet<E>(set);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:282","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[547],"tindex":"80f7c85c-3e8a-11e6-bfb7-0993df5150e4","method":{"position":"org.apache.commons.collections4.ListUtils:281","type":"CtMethodImpl","sourcecode":"public static int hashCodeForList(final java.util.Collection<?> list) {\n    if (list == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (list == null) {\n                return 0;\n            } \n            int int = 1;\n            final java.util.Iterator<?> java.util.Iterator<?> = list.iterator();\n            while (it.hasNext()) {\n                final java.lang.Object java.lang.Object = it.next();\n                hashCode = (31 * hashCode) + (obj == null ? 0 : obj.hashCode());\n            }\n            return hashCode;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:189","type":"CtBinaryOperatorImpl","sourcecode":"(transformer) != null"},"failures":[],"tindex":"80f7ef6d-3e8a-11e6-bfb7-a36ffb5f6bd7","method":{"position":"org.apache.commons.collections4.IteratorUtils:649","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Iterator<E> objectGraphIterator(final E root, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if (transformer != null) {\n        {\n            return new org.apache.commons.collections4.iterators.ObjectGraphIterator<E>(root , transformer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformer":"transformer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[421],"tindex":"80f7ef6e-3e8a-11e6-bfb7-c5bf6ae50e15","method":{"position":"org.apache.commons.collections4.map.LinkedMap:183","type":"CtMethodImpl","sourcecode":"public V remove(final int index) {\n    if (index < 0) {\n        {\n            return remove(get(index));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:972","type":"CtBinaryOperatorImpl","sourcecode":"map == null"},"failures":[548,549,550,551],"tindex":"80f7ef6f-3e8a-11e6-bfb7-61cec177b49a","method":{"position":"org.apache.commons.collections4.MapUtils:1204","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final java.util.Map<?, ?> map) {\n    if (map == null) {\n        {\n            return (map == null) || (map.isEmpty());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:344","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[],"tindex":"80f7ef70-3e8a-11e6-bfb7-738d2e887b33","method":{"position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:99","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:745","type":"CtBinaryOperatorImpl","sourcecode":"coll == null"},"failures":[552,553],"tindex":"80f7ef71-3e8a-11e6-bfb7-e945ecf2486a","method":{"position":"org.apache.commons.collections4.list.PredicatedList:117","type":"CtMethodImpl","sourcecode":"public boolean addAll(final int index, final java.util.Collection<? extends E> coll) {\n    if (coll == null) {\n        {\n            for (final E E : coll) {\n                validate(aColl);\n            }\n            return decorated().addAll(index, coll);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:362","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.Bag"},"failures":[],"tindex":"80f81682-3e8a-11e6-bfb7-f5d8ea472923","method":{"position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:141","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:229","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"80f83d93-3e8a-11e6-bfb7-fd70a938eda3","method":{"position":"org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator:69","type":"CtMethodImpl","sourcecode":"public K getKey(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().getKey(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractLinkedMap:229","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[554,555],"tindex":"80f864a4-3e8a-11e6-bfb7-c94e59bf653e","method":{"position":"org.apache.commons.collections4.list.GrowthList:121","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void add(final int index, final E element) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = decorated().size();\n            if (index > size) {\n                decorated().addAll(java.util.Collections.<E>nCopies((index - size), null));\n            } \n            decorated().add(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:863","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"80f864a5-3e8a-11e6-bfb7-817bb959d72c","method":{"position":"org.apache.commons.collections4.MapUtils:1422","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.OrderedMap<K, V> orderedMap(final java.util.Map<K, V> map) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.ListOrderedMap.listOrderedMap(map);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.SetUniqueList:97","type":"CtBinaryOperatorImpl","sourcecode":"set == null"},"failures":[],"tindex":"80f864a6-3e8a-11e6-bfb7-1976c1675b91","method":{"position":"org.apache.commons.collections4.SetUtils:246","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Set<E> orderedSet(final java.util.Set<E> set) {\n    if (set == null) {\n        {\n            return org.apache.commons.collections4.set.ListOrderedSet.listOrderedSet(set);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:1773","type":"CtBinaryOperatorImpl","sourcecode":"sortedMap == null"},"failures":[556],"tindex":"80f864a7-3e8a-11e6-bfb7-d36fc345343f","method":{"position":"org.apache.commons.collections4.MapUtils:1772","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.IterableSortedMap<K, V> iterableSortedMap(final java.util.SortedMap<K, V> sortedMap) {\n    if (sortedMap == null) {\n        {\n            if (sortedMap == null) {\n                throw new java.lang.IllegalArgumentException(\"Map must not be null\");\n            } \n            return sortedMap instanceof org.apache.commons.collections4.IterableSortedMap ? ((org.apache.commons.collections4.IterableSortedMap<K, V>)(sortedMap)) : new org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>(sortedMap) {            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sortedMap":"sortedMap"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.ReverseComparator:113","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[557],"tindex":"80f864a8-3e8a-11e6-bfb7-3d8bff8dcbe6","method":{"position":"org.apache.commons.collections4.set.UnmodifiableSet:95","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(final java.lang.Object object) {\n    if (null == object) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:142","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[558,529],"tindex":"80f864a9-3e8a-11e6-bfb7-ed4d411875ca","method":{"position":"org.apache.commons.collections4.set.ListOrderedSet:220","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            for (final java.lang.Object java.lang.Object : coll) {\n                result |= remove(name);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.collection.TransformedCollection:110","type":"CtBinaryOperatorImpl","sourcecode":"transformer == null"},"failures":[559,560],"tindex":"80f88bba-3e8a-11e6-bfb7-0542fafac0f8","method":{"position":"org.apache.commons.collections4.CollectionUtils:1770","type":"CtMethodImpl","sourcecode":"public static <E>java.util.Collection<E> transformingCollection(final java.util.Collection<E> collection, final org.apache.commons.collections4.Transformer<? super E, ? extends E> transformer) {\n    if (transformer == null) {\n        {\n            return org.apache.commons.collections4.collection.TransformedCollection.transformingCollection(collection, transformer);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformer":"transformer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:538","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[464,466,467,468,469,470,471,465,217,218,219,220,221,222,223,224,477,478,479,480,481,482,225,226,227,228,229,230,231,232,233,234,235,236,238,484],"tindex":"80f88bbb-3e8a-11e6-bfb7-414dfe7ade8c","method":{"position":"org.apache.commons.collections4.list.TreeList:413","type":"CtMethodImpl","sourcecode":"org.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n    if (index < 0) {\n        {\n            final int int = index - (int);\n            if (indexRelativeToMe == 0) {\n                return org.apache.commons.collections4.list.TreeList.AVLNode.this;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = indexRelativeToMe < 0 ? getLeftSubTree() : getRightSubTree();\n            if (nextNode == null) {\n                return null;\n            } \n            return nextNode.get(indexRelativeToMe);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.iterators.NodeListIterator:48","type":"CtBinaryOperatorImpl","sourcecode":"node == null"},"failures":[],"tindex":"80f88bbc-3e8a-11e6-bfb7-4de78eea237b","method":{"position":"org.apache.commons.collections4.IteratorUtils:805","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.collections4.iterators.NodeListIterator nodeListIterator(final org.w3c.dom.Node node) {\n    if (node == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node == null) {\n                throw new java.lang.NullPointerException(\"Node must not be null\");\n            } \n            return new org.apache.commons.collections4.iterators.NodeListIterator(node);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:126","type":"CtBinaryOperatorImpl","sourcecode":"criterion == null"},"failures":[],"tindex":"80f88bbd-3e8a-11e6-bfb7-b3564de998ea","method":{"position":"org.apache.commons.collections4.functors.ComparatorPredicate:121","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> comparatorPredicate(final T object, final java.util.Comparator<T> comparator, final org.apache.commons.collections4.functors.ComparatorPredicate.Criterion criterion) {\n    if (criterion == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (comparator == null) {\n                throw new java.lang.IllegalArgumentException(\"Comparator must not be null.\");\n            } \n            if (criterion == null) {\n                throw new java.lang.IllegalArgumentException(\"Criterion must not be null.\");\n            } \n            return new org.apache.commons.collections4.functors.ComparatorPredicate<T>(object , comparator , criterion);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"criterion":"criterion"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:248","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[276,277,278,561,313,314,315,91],"tindex":"80f8b2ce-3e8a-11e6-bfb7-b5437ee90fa5","method":{"position":"org.apache.commons.collections4.bidimap.TreeBidiMap:283","type":"CtMethodImpl","sourcecode":"public K getKey(final java.lang.Object value) {\n    if (value == null) {\n        {\n            org.apache.commons.collections4.bidimap.TreeBidiMap.checkValue(value);\n            final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = lookupValue(value);\n            return node == null ? null : node.getKey();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:365","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[562],"tindex":"80f8b2cf-3e8a-11e6-bfb7-6f363a930d73","method":{"position":"org.apache.commons.collections4.MapUtils:1283","type":"CtMethodImpl","sourcecode":"public static <K, V>org.apache.commons.collections4.IterableMap<K, V> predicatedMap(final java.util.Map<K, V> map, final org.apache.commons.collections4.Predicate<? super K> keyPred, final org.apache.commons.collections4.Predicate<? super V> valuePred) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.map.PredicatedMap.predicatedMap(map, keyPred, valuePred);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:506","type":"CtBinaryOperatorImpl","sourcecode":"key2 != null"},"failures":[563,564],"tindex":"80f8b2d0-3e8a-11e6-bfb7-9deb4ad3c847","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:357","type":"CtMethodImpl","sourcecode":"protected int hash(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key3 != null) {\n        {\n            int int = 0;\n            if (key1 != null) {\n                h ^= key1.hashCode();\n            } \n            if (key2 != null) {\n                h ^= key2.hashCode();\n            } \n            if (key3 != null) {\n                h ^= key3.hashCode();\n            } \n            h += ~(h << 9);\n            h ^= h >>> 14;\n            h += h << 4;\n            h ^= h >>> 10;\n            return h;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key2":"key3"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:47","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[565],"tindex":"80f8b2d1-3e8a-11e6-bfb7-35427ef8178f","method":{"position":"org.apache.commons.collections4.PredicateUtils:535","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> transformedPredicate(final org.apache.commons.collections4.Transformer<? super T, ? extends T> transformer, final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.collections4.functors.TransformedPredicate.<T>transformedPredicate(transformer, predicate);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.TransformingComparator:118","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,28],"tindex":"80f8b2d2-3e8a-11e6-bfb7-83ba22e4e7c5","method":{"position":"org.apache.commons.collections4.bag.PredicatedBag:105","type":"CtMethodImpl","sourcecode":"public int getCount(final java.lang.Object object) {\n    if (null == object) {\n        {\n            return decorated().getCount(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ClosureUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"objectsAndClosures == null"},"failures":[581],"tindex":"80f8d9e3-3e8a-11e6-bfb7-a394d3eaa70b","method":{"position":"org.apache.commons.collections4.ClosureUtils:354","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> switchMapClosure(final java.util.Map<? extends E, org.apache.commons.collections4.Closure<E>> objectsAndClosures) {\n    if (objectsAndClosures == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (objectsAndClosures == null) {\n                throw new java.lang.IllegalArgumentException(\"The object and closure map must not be null\");\n            } \n            final org.apache.commons.collections4.Closure<? super E> org.apache.commons.collections4.Closure<? super E> = objectsAndClosures.remove(null);\n            final int int = objectsAndClosures.size();\n            final org.apache.commons.collections4.Closure<? super E>[] org.apache.commons.collections4.Closure<? super E>[] = new org.apache.commons.collections4.Closure[size];\n            final org.apache.commons.collections4.Predicate<E>[] org.apache.commons.collections4.Predicate<E>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<? extends E, org.apache.commons.collections4.Closure<E>> java.util.Map.Entry<? extends E, org.apache.commons.collections4.Closure<E>> : objectsAndClosures.entrySet()) {\n                preds[i] = org.apache.commons.collections4.functors.EqualPredicate.<E>equalPredicate(entry.getKey());\n                trs[i] = entry.getValue();\n                i++;\n            }\n            return org.apache.commons.collections4.ClosureUtils.<E>switchClosure(preds, trs, def);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsAndClosures":"objectsAndClosures"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.queue.CircularFifoQueue:341","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[582],"tindex":"80f8d9e4-3e8a-11e6-bfb7-d3ade465c829","method":{"position":"org.apache.commons.collections4.ListUtils:678","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.List<T> get(final int index) {\n    if (index < 0) {\n        {\n            final int int = size();\n            if (listSize < 0) {\n                throw new java.lang.IllegalArgumentException((\"negative size: \" + listSize));\n            } \n            if (index < 0) {\n                throw new java.lang.IndexOutOfBoundsException(((\"Index \" + index) + \" must not be negative\"));\n            } \n            if (index >= listSize) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index \" + index) + \" must be less than size \") + listSize));\n            } \n            final int int = index * (int);\n            final int int = java.lang.Math.min((start + (int)), java.util.List<T>.size());\n            return java.util.List<T>.subList(start, end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"80f8d9e5-3e8a-11e6-bfb7-d92456d436ce","method":{"position":"org.apache.commons.collections4.MapUtils:782","type":"CtMethodImpl","sourcecode":"public static <K>int getIntValue(final java.util.Map<? super K, ?> map, final K key, final int defaultValue) {\n    if (map != null) {\n        {\n            final java.lang.Integer java.lang.Integer = org.apache.commons.collections4.MapUtils.getInteger(map, key);\n            if (integerObject == null) {\n                return defaultValue;\n            } \n            return integerObject.intValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ComparatorUtils:173","type":"CtBinaryOperatorImpl","sourcecode":"comparator == null"},"failures":[],"tindex":"80f8d9e6-3e8a-11e6-bfb7-c719b38f2e34","method":{"position":"org.apache.commons.collections4.comparators.ComparatorChain:138","type":"CtMethodImpl","sourcecode":"public void addComparator(final java.util.Comparator<E> comparator) {\n    if (comparator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            addComparator(comparator, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparator":"comparator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:659","type":"CtBinaryOperatorImpl","sourcecode":"key1 != null"},"failures":[583],"tindex":"80f900f7-3e8a-11e6-bfb7-3b2d0850e282","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:714","type":"CtMethodImpl","sourcecode":"public boolean removeAll(final java.lang.Object key1) {\n    if (key1 != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            final org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = mapIterator();\n            while (it.hasNext()) {\n                final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> = it.next();\n                if (((multi.size()) >= 1) && (key1 == null ? (multi.getKey(0)) == null : key1.equals(multi.getKey(0)))) {\n                    it.remove();\n                    modified = true;\n                } \n            }\n            return modified;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key1":"key1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.IteratorUtils:1062","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.lang.Object[]"},"failures":[584,352,367],"tindex":"80f900f8-3e8a-11e6-bfb7-75de2dd61e7f","method":{"position":"org.apache.commons.collections4.set.MapBackedSet:130","type":"CtMethodImpl","sourcecode":"public boolean remove(final java.lang.Object obj) {\n    if (obj instanceof java.lang.Object[]) {\n        {\n            final int int = java.util.Map<E, ? super V>.size();\n            java.util.Map<E, ? super V>.remove(obj);\n            return (java.util.Map<E, ? super V>.size()) != size;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.TransformedPredicate:56","type":"CtBinaryOperatorImpl","sourcecode":"predicate == null"},"failures":[],"tindex":"80f900f9-3e8a-11e6-bfb7-cd67e8690dd5","method":{"position":"org.apache.commons.collections4.PredicateUtils:535","type":"CtMethodImpl","sourcecode":"public static <T>org.apache.commons.collections4.Predicate<T> transformedPredicate(final org.apache.commons.collections4.Transformer<? super T, ? extends T> transformer, final org.apache.commons.collections4.Predicate<? super T> predicate) {\n    if (predicate == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (predicate == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.collections4.functors.TransformedPredicate.<T>transformedPredicate(transformer, predicate);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicate":"predicate"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractReferenceMap:424","type":"CtBinaryOperatorImpl","sourcecode":"key == null"},"failures":[280,296],"tindex":"80f900fa-3e8a-11e6-bfb7-17d9b8b10f16","method":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:94","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(final java.lang.Object key) {\n    if (key == null) {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.CollectionSortedBag:125","type":"CtBinaryOperatorImpl","sourcecode":"coll != null"},"failures":[],"tindex":"80f900fb-3e8a-11e6-bfb7-03daa87a1ff3","method":{"position":"org.apache.commons.collections4.bag.UnmodifiableBag:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean removeAll(final java.util.Collection<?> coll) {\n    if (coll != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:79","type":"CtBinaryOperatorImpl","sourcecode":"predicates == null"},"failures":[581,158],"tindex":"80f900fc-3e8a-11e6-bfb7-7f0545ad3d67","method":{"position":"org.apache.commons.collections4.functors.SwitchClosure:56","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> switchClosure(final org.apache.commons.collections4.Predicate<? super E>[] predicates, final org.apache.commons.collections4.Closure<? super E>[] closures, final org.apache.commons.collections4.Closure<? super E> defaultClosure) {\n    if (predicates == null) {\n        {\n            org.apache.commons.collections4.functors.FunctorUtils.validate(predicates);\n            org.apache.commons.collections4.functors.FunctorUtils.validate(closures);\n            if ((predicates.int) != (closures.int)) {\n                throw new java.lang.IllegalArgumentException(\"The predicate and closure arrays must be the same size\");\n            } \n            if ((predicates.int) == 0) {\n                return ((org.apache.commons.collections4.Closure<E>)(defaultClosure == null ? org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure() : defaultClosure));\n            } \n            return new org.apache.commons.collections4.functors.SwitchClosure<E>(predicates , closures , defaultClosure);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"predicates":"predicates"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:123","type":"CtBinaryOperatorImpl","sourcecode":"closures == null"},"failures":[585,581,158],"tindex":"80f9280d-3e8a-11e6-bfb7-a1e2d9e45774","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:134","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Closure<?>... closures) {\n    if (closures == null) {\n        {\n            if (closures == null) {\n                throw new java.lang.IllegalArgumentException(\"The closure array must not be null\");\n            } \n            for (int int = 0 ; i < (closures.int) ; i++) {\n                if ((closures[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The closure array must not contain a null closure, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"closures"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.ForClosure:55","type":"CtBinaryOperatorImpl","sourcecode":"count == 1"},"failures":[586],"tindex":"80f9280e-3e8a-11e6-bfb7-b38c6b47a42f","method":{"position":"org.apache.commons.collections4.functors.ForClosure:51","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> forClosure(final int count, final org.apache.commons.collections4.Closure<? super E> closure) {\n    if (count == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((count <= 0) || (closure == null)) {\n                return org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n            } \n            if (count == 1) {\n                return ((org.apache.commons.collections4.Closure<E>)(closure));\n            } \n            return new org.apache.commons.collections4.functors.ForClosure<E>(count , closure);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.InstanceofPredicate:46","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[],"tindex":"80f9280f-3e8a-11e6-bfb7-b93409505528","method":{"position":"org.apache.commons.collections4.PredicateUtils:174","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.collections4.Predicate<java.lang.Object> instanceofPredicate(final java.lang.Class<?> type) {\n    if (type == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.DefaultedMap:105","type":"CtBinaryOperatorImpl","sourcecode":"factory == null"},"failures":[],"tindex":"80f92810-3e8a-11e6-bfb7-e7285a3a6806","method":{"position":"org.apache.commons.collections4.MapUtils:1623","type":"CtMethodImpl","sourcecode":"public static <K, V>java.util.SortedMap<K, V> lazySortedMap(final java.util.SortedMap<K, V> map, final org.apache.commons.collections4.Factory<? extends V> factory) {\n    if (factory == null) {\n        {\n            return org.apache.commons.collections4.map.LazySortedMap.lazySortedMap(map, factory);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.CollectionUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[587,588,589,590,591],"tindex":"80f92811-3e8a-11e6-bfb7-b78fb8d525e1","method":{"position":"org.apache.commons.collections4.list.AbstractLinkedList:111","type":"CtMethodImpl","sourcecode":"public E get(final int index) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = getNode(index, false);\n            return node.getValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ListUtils:655","type":"CtBinaryOperatorImpl","sourcecode":"list == null"},"failures":[592],"tindex":"80f92812-3e8a-11e6-bfb7-5591b56b8c09","method":{"position":"org.apache.commons.collections4.ListUtils:75","type":"CtMethodImpl","sourcecode":"public static <T>java.util.List<T> defaultIfNull(final java.util.List<T> list, final java.util.List<T> defaultList) {\n    if (list == null) {\n        {\n            return list == null ? defaultList : list;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"list":"list"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:151","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"80f92813-3e8a-11e6-bfb7-e59f8a119391","method":{"position":"org.apache.commons.collections4.MapUtils:695","type":"CtMethodImpl","sourcecode":"public static <K>double getDoubleValue(final java.util.Map<? super K, ?> map, final K key) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Double java.lang.Double = org.apache.commons.collections4.MapUtils.getDouble(map, key);\n            if (doubleObject == null) {\n                return 0.0;\n            } \n            return doubleObject.doubleValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.comparators.FixedOrderComparator:283","type":"CtBinaryOperatorImpl","sourcecode":"null == object"},"failures":[593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,522,537,540,545,621,622,623,624,625,626,627,628,629,630,571,631,632,572,633,634,635,636,637,638,639,640,494,641,642,643,644,645,646,241,647,648,649,650,651,652,251,653,654,655,579,656,657,580,658,659,660,301,302,305,306,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,268,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,134,138,139,806,140,141,143,145,146,807,147,148,149,150,151,152,153,154,155,808,156,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844],"tindex":"80f94f24-3e8a-11e6-bfb7-41f523f8d56e","method":{"position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:148","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object object) {\n    if (null == object) {\n        {\n            return (object == (org.apache.commons.collections4.collection.AbstractCollectionDecorator.this)) || (decorated().equals(object));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:56","type":"CtBinaryOperatorImpl","sourcecode":"set instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[845,846,847,848,613,849,850,851,852,853,854,855,856,857,858,859,860,861,862,614,863,864,615,865,866,867,868,616,869],"tindex":"80f94f25-3e8a-11e6-bfb7-6f253fd2df89","method":{"position":"org.apache.commons.collections4.set.PredicatedSet:59","type":"CtMethodImpl","sourcecode":"public static <E>org.apache.commons.collections4.set.PredicatedSet<E> predicatedSet(final java.util.Set<E> set, final org.apache.commons.collections4.Predicate<? super E> predicate) {\n    if (set instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            return new org.apache.commons.collections4.set.PredicatedSet<E>(set , predicate);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"set":"set"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:1325","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,45,51,117,911,912,913,914,915],"tindex":"80f94f26-3e8a-11e6-bfb7-4f22823bff3f","method":{"position":"org.apache.commons.collections4.map.AbstractMapDecorator:85","type":"CtMethodImpl","sourcecode":"public boolean containsValue(final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return decorated().containsValue(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.keyvalue.MultiKey:264","type":"CtBinaryOperatorImpl","sourcecode":"key != null"},"failures":[916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,375,376,380,381,384,385,386,387,389,391,394,395,399,400,401,402,403,404,413,414,415,959,960,961,962,963,964,965,966,967,968,969,970,971,972,424,425,429,430,433,434,435,437,439,442,443,447,448,449,450,451,452,461,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027],"tindex":"80f97637-3e8a-11e6-bfb7-d75d700547e5","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:453","type":"CtMethodImpl","sourcecode":"protected org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> getEntry(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            key = convertKey(key);\n            final int int = hash(key);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][hashIndex(hashCode, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(key, entry.java.lang.Object))) {\n                    return entry;\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.MapUtils:341","type":"CtBinaryOperatorImpl","sourcecode":"map != null"},"failures":[],"tindex":"80f97638-3e8a-11e6-bfb7-a5c49f82391b","method":{"position":"org.apache.commons.collections4.MapUtils:446","type":"CtMethodImpl","sourcecode":"public static <K>java.lang.Byte getByte(final java.util.Map<? super K, ?> map, final K key, final java.lang.Byte defaultValue) {\n    if (map != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Byte java.lang.Byte = org.apache.commons.collections4.MapUtils.getByte(map, key);\n            if (answer == null) {\n                answer = defaultValue;\n            } \n            return answer;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:181","type":"CtBinaryOperatorImpl","sourcecode":"transformers == null"},"failures":[1028],"tindex":"80f9eb69-3e8a-11e6-bfb7-f90f814a3e24","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:180","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Transformer<?, ?>... transformers) {\n    if (transformers == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (transformers == null) {\n                throw new java.lang.IllegalArgumentException(\"The transformer array must not be null\");\n            } \n            for (int int = 0 ; i < (transformers.int) ; i++) {\n                if ((transformers[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The transformer array must not contain a null transformer, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"transformers":"transformers"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bidimap.UnmodifiableBidiMap:56","type":"CtBinaryOperatorImpl","sourcecode":"map instanceof org.apache.commons.collections4.Unmodifiable"},"failures":[1029,923,942,958,394,1030,1031,1032,442,982,1033,1003,1019],"tindex":"80f9eb6a-3e8a-11e6-bfb7-55bad26c4f8f","method":{"position":"org.apache.commons.collections4.map.AbstractHashedMap:302","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void putAll(final java.util.Map<? extends K, ? extends V> map) {\n    if (map instanceof org.apache.commons.collections4.Unmodifiable) {\n        {\n            _putAll(map);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.MultiKeyMap:509","type":"CtBinaryOperatorImpl","sourcecode":"key3 != null"},"failures":[564,1034,1035],"tindex":"80f9eb6b-3e8a-11e6-bfb7-35648df944a8","method":{"position":"org.apache.commons.collections4.map.MultiKeyMap:285","type":"CtMethodImpl","sourcecode":"public boolean containsKey(final java.lang.Object key1, final java.lang.Object key2, final java.lang.Object key3) {\n    if (key1 != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = hash(key1, key2, key3);\n            org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][decorated().hashIndex(hashCode, decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[].int)];\n            while (entry != null) {\n                if (((entry.int) == hashCode) && (isEqualKey(entry, key1, key2, key3))) {\n                    return true;\n                } \n                entry = entry.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"key3":"key1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.bag.AbstractMapBag:136","type":"CtBinaryOperatorImpl","sourcecode":"coll instanceof org.apache.commons.collections4.Bag"},"failures":[],"tindex":"80fa127c-3e8a-11e6-bfb7-9de97749f2aa","method":{"position":"org.apache.commons.collections4.list.FixedSizeList:142","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean retainAll(final java.util.Collection<?> coll) {\n    if (coll instanceof org.apache.commons.collections4.Bag) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263407849/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.UnsupportedOperationException(\"List is fixed size\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"coll":"coll"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
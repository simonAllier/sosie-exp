{"failureDictionary":{"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":18,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemoveByKeySet":7,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":14,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":16,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiClear":5,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":20,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiPut":10,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":21,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchMapClosure":0,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiInverse":3,"org.apache.commons.collections4.ClosureUtilsTest.testSwitchClosure":2,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":19,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":12,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemove":6,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiRemoveByEntrySet":8,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiGetKeyInverse":11,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":22,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":9,"org.apache.commons.collections4.ClosureUtilsTest.testChainedClosure":1,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":13,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":15,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":17,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":4},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.ClosureUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"objectsAndClosures == null"},"failures":[0],"tindex":"98c84a48-2e90-11e6-920c-dddc05289477","method":{"position":"org.apache.commons.collections4.ClosureUtils:354","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic static <E>org.apache.commons.collections4.Closure<E> switchMapClosure(final java.util.Map<? extends E, org.apache.commons.collections4.Closure<E>> objectsAndClosures) {\n    if (objectsAndClosures == null) {\n        {\n            if (objectsAndClosures == null) {\n                throw new java.lang.IllegalArgumentException(\"The object and closure map must not be null\");\n            } \n            final org.apache.commons.collections4.Closure<? super E> org.apache.commons.collections4.Closure<? super E> = objectsAndClosures.remove(null);\n            final int int = objectsAndClosures.size();\n            final org.apache.commons.collections4.Closure<? super E>[] org.apache.commons.collections4.Closure<? super E>[] = new org.apache.commons.collections4.Closure[size];\n            final org.apache.commons.collections4.Predicate<E>[] org.apache.commons.collections4.Predicate<E>[] = new org.apache.commons.collections4.Predicate[size];\n            int int = 0;\n            for (final java.util.Map.Entry<? extends E, org.apache.commons.collections4.Closure<E>> java.util.Map.Entry<? extends E, org.apache.commons.collections4.Closure<E>> : objectsAndClosures.entrySet()) {\n                preds[i] = org.apache.commons.collections4.functors.EqualPredicate.<E>equalPredicate(entry.getKey());\n                trs[i] = entry.getValue();\n                i++;\n            }\n            return org.apache.commons.collections4.ClosureUtils.<E>switchClosure(preds, trs, def);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"objectsAndClosures":"objectsAndClosures"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.functors.FunctorUtils:135","type":"CtBinaryOperatorImpl","sourcecode":"closures == null"},"failures":[1,0,2],"tindex":"98ca9439-2e90-11e6-920c-63332f75baf5","method":{"position":"org.apache.commons.collections4.functors.FunctorUtils:134","type":"CtMethodImpl","sourcecode":"static void validate(final org.apache.commons.collections4.Closure<?>... closures) {\n    if (closures == null) {\n        {\n            if (closures == null) {\n                throw new java.lang.IllegalArgumentException(\"The closure array must not be null\");\n            } \n            for (int int = 0 ; i < (closures.int) ; i++) {\n                if ((closures[i]) == null) {\n                    throw new java.lang.IllegalArgumentException(((\"The closure array must not contain a null closure, index \" + i) + \" was null\"));\n                } \n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"closures":"closures"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.collections4.map.Flat3Map:291","type":"CtBinaryOperatorImpl","sourcecode":"(delegateMap) != null"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"98cb096a-2e90-11e6-920c-3fbc762d3dc2","method":{"position":"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.collections4.BidiMap<V, K> createBidiMap(final java.util.Map<V, K> normalMap, final java.util.Map<K, V> reverseMap, final org.apache.commons.collections4.BidiMap<K, V> inverseBidiMap) {\n    if (reverseMap != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap<V, K>(normalMap , reverseMap , inverseBidiMap);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegateMap":"reverseMap"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":3,"projectType":"maven","artifactId":"commons-collections4","generatorVersion":"1.0","version":"4.0"}}
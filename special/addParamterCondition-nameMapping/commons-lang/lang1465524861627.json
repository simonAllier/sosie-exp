{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":282,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":123,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":118,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedFieldForceAccess":399,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":41,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":43,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":283,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":229,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":36,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticField":143,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":179,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":115,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":379,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":228,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":110,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash":357,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":57,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":197,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":327,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":355,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":291,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex":340,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":54,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":160,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":12,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":280,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":255,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":365,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiLongArray":77,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":106,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":347,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException4":388,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":107,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException2":387,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":241,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":80,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMixedArray":75,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissingIgnoreCase":208,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":253,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedFormats":84,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":232,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Class":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":382,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":8,"org.apache.commons.lang3.math.FractionTest.testDivide":312,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":45,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEscapedQuote_LANG_477":82,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":198,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":191,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":60,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":309,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleTolerance":335,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":400,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":87,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":163,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":51,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException2":395,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":116,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":42,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Object":185,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":134,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":231,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":117,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":65,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":292,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":307,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":33,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiIntArray":76,"org.apache.commons.lang3.ArrayUtilsTest.testContains":363,"org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig":391,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":61,"org.apache.commons.lang3.text.StrMatcherTest.testSpaceMatcher":100,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccessIllegalArgumentException2":392,"org.apache.commons.lang3.text.StrMatcherTest.testCharMatcher_char":95,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":289,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":345,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder":381,"org.apache.commons.lang3.RangeTest.testContainsRange":344,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":273,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":173,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":48,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":59,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":218,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":316,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticFieldForceAccess":141,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":286,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":350,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance":336,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":349,"org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_charArray":104,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":321,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":189,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":30,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testIntArray":203,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_null":278,"org.apache.commons.lang3.text.StrMatcherTest.testDoubleQuoteMatcher":103,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":376,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":126,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":88,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":244,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":225,"org.apache.commons.lang3.text.FormattableUtilsTest.testEllipsis":311,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":174,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":31,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":63,"org.apache.commons.lang3.RandomUtilsTest.testNextDoubleNegative":20,"org.apache.commons.lang3.StringUtilsTest.testIsNotBlank":405,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadFieldForceAccess":151,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":112,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiByteArray":72,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":109,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":290,"org.apache.commons.lang3.ValidateTest.testMatchesPattern_withMessage":277,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":47,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":269,"org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives":188,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":304,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":161,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":386,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":353,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactStaticMethod":164,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":7,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":226,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":270,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessiblePublicMethod":156,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":242,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray":331,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":288,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsNotBlank":383,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":359,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":52,"org.apache.commons.lang3.RandomUtilsTest.testExtremeRangeDouble":19,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":295,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":276,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess":404,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":171,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructorFromDescription":167,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":138,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":10,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiDoubleArray":78,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":39,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":28,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticFieldForceAccess":147,"org.apache.commons.lang3.text.StrMatcherTest.testTabMatcher":98,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":308,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleTolerance":338,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":298,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":324,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":114,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_String":186,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":284,"org.apache.commons.lang3.CharSetTest.testConstructor_String_combo":358,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":233,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":370,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":235,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":234,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":237,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":236,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":239,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":238,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":56,"org.apache.commons.lang3.ClassUtilsTest.test_convertClassesToClassNames_List":0,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble":407,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":86,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField":394,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":6,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":325,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":176,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testExtendedAndBuiltInFormats":85,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":131,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":256,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleInterfaceMethodFromDescription":153,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":217,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField":145,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":351,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":25,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":320,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":122,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":154,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleMethodPrivateInterface":158,"org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character":2,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedField":148,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":50,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt":213,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":354,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":26,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":328,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":105,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testNullArgument":169,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":11,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiCharArray":70,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiShortArray":79,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEmbeddedPatternInChoice":83,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray":73,"org.apache.commons.lang3.RandomUtilsTest.testNextLong":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":192,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":135,"org.apache.commons.lang3.StringUtilsIsTest.testIsAlphaspace":274,"org.apache.commons.lang3.mutable.MutableBooleanTest.testEquals":210,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":66,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":133,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_String":215,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":139,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredField":149,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testOverriddenBuiltinFormat":81,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":111,"org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":193,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":58,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance":337,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":38,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":137,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":5,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":178,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":9,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":227,"org.apache.commons.lang3.text.StrMatcherTest.testSingleQuoteMatcher":92,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":34,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_char":343,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":326,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompare":374,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase":4,"org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String":99,"org.apache.commons.lang3.text.StrMatcherTest.testNoneMatcher":97,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":55,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementIntArray":180,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_ThrowableArray":14,"org.apache.commons.lang3.RandomUtilsTest.testNextDouble":22,"org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectArray":69,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementDoubleArray":342,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessiblePublicMethodFromDescription":165,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":200,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":32,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiFloatArray":74,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":378,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListener":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":195,"org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar":406,"org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleTolerance":332,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_String":183,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":264,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":380,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":287,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":348,"org.apache.commons.lang3.RandomUtilsTest.testExtremeRangeLong":17,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles":303,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":265,"org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_Boolean_int_int_int":1,"org.apache.commons.lang3.text.StrMatcherTest.testCommaMatcher":94,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":266,"org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull":315,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":267,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":268,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":64,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":190,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":367,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":35,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":296,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuilder":3,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":46,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Class":184,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":257,"org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull":313,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissing":207,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":258,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":40,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDouble":339,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":175,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException4":398,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":366,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException2":397,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":177,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":384,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":285,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":299,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":240,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":53,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullCalendar":302,"org.apache.commons.lang3.RandomUtilsTest.testNextDoubleMinimalRange":18,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":67,"org.apache.commons.lang3.ArrayUtilsTest.testReverseByte":181,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":371,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":196,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":377,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":125,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":155,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":37,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":369,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":211,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":15,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase":301,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_Throwable":13,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":352,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":129,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":91,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":279,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedField":393,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":385,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":281,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":132,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":297,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedFieldForceAccess":144,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":119,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":230,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleMethodInaccessible":159,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":294,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField":401,"org.apache.commons.lang3.ConversionTest.testHexToInt":300,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccess":150,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDouble":334,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_String":212,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField":146,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":322,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":346,"org.apache.commons.lang3.StringUtilsTest.testSplit_String":209,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":128,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":305,"org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes":314,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testIntArrayAsObject":202,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringArray":214,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":317,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG972":318,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":293,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":130,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":194,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":108,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":172,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":219,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":329,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":271,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":272,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":113,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":44,"org.apache.commons.lang3.text.StrMatcherTest.testSplitMatcher":102,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":222,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException2":402,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":223,"org.apache.commons.lang3.text.StrMatcherTest.testQuoteMatcher":101,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":361,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissingIgnoreCase":89,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException4":403,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":372,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":121,"org.apache.commons.lang3.CharSetTest.testStatics":362,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":319,"org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_String":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":199,"org.apache.commons.lang3.text.StrTokenizerTest.test8":252,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":62,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactMethod":162,"org.apache.commons.lang3.text.StrTokenizerTest.test5":249,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField":140,"org.apache.commons.lang3.text.StrTokenizerTest.test4":248,"org.apache.commons.lang3.text.StrTokenizerTest.test7":251,"org.apache.commons.lang3.text.StrTokenizerTest.test6":250,"org.apache.commons.lang3.text.StrTokenizerTest.test1":245,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":243,"org.apache.commons.lang3.text.StrTokenizerTest.test3":247,"org.apache.commons.lang3.text.StrTokenizerTest.test2":246,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":368,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticFieldForceAccess":204,"org.apache.commons.lang3.ArrayUtilsTest.testContainsDouble":341,"org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType":310,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndex":333,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":275,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":68,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticField":206,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":220,"org.apache.commons.lang3.RandomUtilsTest.testNextDoubleLowerGreaterUpper":21,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":221,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":375,"org.apache.commons.lang3.reflect.MethodUtilsTest.testNullArgument":157,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor":170,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":364,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException2":389,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldForceAccessIllegalArgumentException4":390,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic":216,"org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt":306,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object":182,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntStringI":90,"org.apache.commons.lang3.ArrayUtilsTest.testHashCode":201,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":224,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":168,"org.apache.commons.lang3.text.StrMatcherTest.testTrimMatcher":93,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":263,"org.apache.commons.lang3.HashSetvBitSetTest.testTimesExtractOrBitset":24,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccess":396,"org.apache.commons.lang3.builder.CompareToBuilderTest.testRaggedArray":71,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":124,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveIntArray":330,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":29,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticField":205,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":373,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":254,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":261,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleInterfaceMethod":152,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":260,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":262,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":259,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":356,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":360,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":49,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":166,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":127,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess":142,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":27,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":323},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:425","type":"CtBinaryOperatorImpl","sourcecode":"classes == null"},"failures":[0],"tindex":"0b6423ee-2eb1-11e6-a704-a51d2a3332ea","method":{"position":"org.apache.commons.lang3.ClassUtils:424","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.String> convertClassesToClassNames(final java.util.List<java.lang.Class<?>> classes) {\n    if (classes == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (classes == null) {\n                return null;\n            } \n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>(classes.size());\n            for (final java.lang.Class<?> java.lang.Class<?> : classes) {\n                if (cls == null) {\n                    classNames.add(null);\n                } else {\n                    classNames.add(cls.getName());\n                }\n            }\n            return classNames;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"classes"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[1],"tindex":"0b64e73f-2eb1-11e6-a704-058f04296a33","method":{"position":"org.apache.commons.lang3.BooleanUtils:465","type":"CtMethodImpl","sourcecode":"public static int toInteger(final java.lang.Boolean bool, final int trueValue, final int falseValue, final int nullValue) {\n    if (bool == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bool == null) {\n                return nullValue;\n            } \n            return bool.booleanValue() ? trueValue : falseValue;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:332","type":"CtBinaryOperatorImpl","sourcecode":"ch == null"},"failures":[2],"tindex":"0b650e50-2eb1-11e6-a704-5fe12e70fb61","method":{"position":"org.apache.commons.lang3.CharUtils:262","type":"CtMethodImpl","sourcecode":"public static int toIntValue(final java.lang.Character ch) {\n    if (ch == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch == null) {\n                throw new java.lang.IllegalArgumentException(\"The character must not be null\");\n            } \n            return org.apache.commons.lang3.CharUtils.toIntValue(ch.charValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:831","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof byte[]"},"failures":[3],"tindex":"0b650e51-2eb1-11e6-a704-3ff6c5e39c99","method":{"position":"org.apache.commons.lang3.ObjectUtils:364","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuilder builder, final java.lang.Object object) {\n    if (object instanceof byte[]) {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            builder.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6505","type":"CtBinaryOperatorImpl","sourcecode":"str2 == null"},"failures":[4],"tindex":"0b653562-2eb1-11e6-a704-7d547fe9d208","method":{"position":"org.apache.commons.lang3.StringUtils:828","type":"CtMethodImpl","sourcecode":"public static boolean equalsIgnoreCase(final java.lang.CharSequence str1, final java.lang.CharSequence str2) {\n    if (str2 == str1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str1 == null) {\n                {\n                    if ((str1 == null) || (str2 == null)) {\n                        return str1 == str2;\n                    } else if (str1 == str2) {\n                        return true;\n                    } else if ((str1.length()) != (str2.length())) {\n                        return false;\n                    } else {\n                        return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str2":"str1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1454","type":"CtFieldReadImpl","sourcecode":"useShortClassName"},"failures":[5,6,7,8,9,10,11,12],"tindex":"0b655c73-2eb1-11e6-a704-3f855846002b","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setUseShortClassName(final boolean useShortClassName) {\n    if (useShortClassName) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setUseShortClassName(useShortClassName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"useShortClassName":"useShortClassName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:489","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[13,14],"tindex":"0b655c74-2eb1-11e6-a704-41c93f460d75","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:141","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.Throwable getCause(final java.lang.Throwable throwable, java.lang.String[] methodNames) {\n    if (throwable == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (throwable == null) {\n                return null;\n            } \n            if (methodNames == null) {\n                methodNames = org.apache.commons.lang3.exception.ExceptionUtils.org.apache.commons.lang3.exception.ExceptionUtils.java.lang.String[];\n            } \n            for (final java.lang.String java.lang.String : methodNames) {\n                if (methodName != null) {\n                    final java.lang.Throwable java.lang.Throwable = org.apache.commons.lang3.exception.ExceptionUtils.getCauseUsingMethodName(throwable, methodName);\n                    if (cause != null) {\n                        return cause;\n                    } \n                } \n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3765","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[15],"tindex":"0b658385-2eb1-11e6-a704-2fe9116bdd3c","method":{"position":"org.apache.commons.lang3.ArrayUtils:3762","type":"CtMethodImpl","sourcecode":"public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n    if (array1 == null) {\n        {\n            if (array2 == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array1 == null) {\n                        return org.apache.commons.lang3.ArrayUtils.clone(array2);\n                    } else if (array2 == null) {\n                        return org.apache.commons.lang3.ArrayUtils.clone(array1);\n                    } \n                    final boolean[] boolean[] = new boolean[(array1.int) + (array2.int)];\n                    java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n                    java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n                    return joinedArray;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5122","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[16],"tindex":"0b65aa96-2eb1-11e6-a704-2b1524a3a82a","method":{"position":"org.apache.commons.lang3.StringUtils:4319","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeEndIgnoreCase(final java.lang.String str, final java.lang.String remove) {\n    if (remove == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {\n                return str;\n            } \n            if (org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(str, remove)) {\n                return str.substring(0, ((str.length()) - (remove.length())));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"remove"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.mutable.MutableShort:246","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.apache.commons.lang3.mutable.MutableShort"},"failures":[],"tindex":"0b65d1a7-2eb1-11e6-a704-1b9af2515995","method":{"position":"org.apache.commons.lang3.ObjectUtils:396","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(final java.lang.Object obj) {\n    if (obj instanceof org.apache.commons.lang3.mutable.MutableShort) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return obj == null ? \"\" : obj.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:142","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endInclusive"},"failures":[17,18,19,20,21,22,23,24],"tindex":"0b65d1a8-2eb1-11e6-a704-cb620f5c2fee","method":{"position":"org.apache.commons.lang3.RandomUtils:137","type":"CtMethodImpl","sourcecode":"public static double nextDouble(double startInclusive, double endInclusive) {\n    if (startInclusive == startInclusive) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endInclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endInclusive) {\n                return startInclusive;\n            } \n            return startInclusive + ((endInclusive - startInclusive) * (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextDouble()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"startInclusive","endInclusive":"startInclusive"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"tindex":"0b65f8b9-2eb1-11e6-a704-4d7909bf94f9","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:850","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (buffer == null) {\n        {\n            if (value < 100) {\n                for (int int = int ; (--i) >= 2 ; ) {\n                    buffer.append('0');\n                }\n                buffer.append(((char)((value / 10) + '0')));\n                buffer.append(((char)((value % 10) + '0')));\n            } else {\n                int int;\n                if (value < 1000) {\n                    digits = 3;\n                } else {\n                    org.apache.commons.lang3.Validate.isTrue((value > (-1)), \"Negative values should not be possible\", value);\n                    digits = java.lang.Integer.toString(value).length();\n                }\n                for (int int = int ; (--i) >= digits ; ) {\n                    buffer.append('0');\n                }\n                buffer.append(java.lang.Integer.toString(value));\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:881","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[69,70,71,72,73,74,75,76,77,78,79],"tindex":"0b661fca-2eb1-11e6-a704-fda1eec5468d","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:620","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final java.lang.Object[] lhs, final java.lang.Object[] rhs) {\n    if (!(java.util.Arrays.equals(rhs, rhs))) {\n        {\n            return append(lhs, rhs, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[80,81,82,83,84,85],"tindex":"0b661fcb-2eb1-11e6-a704-51dc7c670a79","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:370","type":"CtMethodImpl","sourcecode":"private java.lang.String parseFormatDescription(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if (pattern == null) {\n        {\n            final int int = pos.getIndex();\n            seekNonWs(pattern, pos);\n            final int int = pos.getIndex();\n            int int = 1;\n            for ( ; (pos.getIndex()) < (pattern.length()) ; next(pos)) {\n                switch (pattern.charAt(pos.getIndex())) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth++;\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth--;\n                        if (depth == 0) {\n                            return pattern.substring(text, pos.getIndex());\n                        } \n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        getQuotedString(pattern, pos, false);\n                        break;\n                    default :\n                        break;\n                }\n            }\n            throw new java.lang.IllegalArgumentException((\"Unterminated format element at position \" + start));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:168","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endInclusive"},"failures":[],"tindex":"0b666dec-2eb1-11e6-a704-33ccb4232155","method":{"position":"org.apache.commons.lang3.RandomUtils:163","type":"CtMethodImpl","sourcecode":"public static float nextFloat(float startInclusive, float endInclusive) {\n    if (endInclusive == endInclusive) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endInclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endInclusive) {\n                return startInclusive;\n            } \n            return startInclusive + ((endInclusive - startInclusive) * (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextFloat()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"endInclusive","endInclusive":"endInclusive"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"0b666ded-2eb1-11e6-a704-d13a9805c249","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:618","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.util.Map<?, ?> map) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(map);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3937","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[15],"tindex":"0b6694fe-2eb1-11e6-a704-f1c670d33498","method":{"position":"org.apache.commons.lang3.ArrayUtils:3936","type":"CtMethodImpl","sourcecode":"public static float[] addAll(final float[] array1, final float... array2) {\n    if (array2 == null) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final float[] float[] = new float[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array2"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:518","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"0b6694ff-2eb1-11e6-a704-617cd0a48033","method":{"position":"org.apache.commons.lang3.time.DateUtils:629","type":"CtMethodImpl","sourcecode":"public static java.util.Date setMilliseconds(final java.util.Date date, final int amount) {\n    if (date == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1648","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[31,86,32,33,41,87,42,43,44,88,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"0b66bc10-2eb1-11e6-a704-b3ddd02233d7","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:423","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Date date) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(date);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[89],"tindex":"0b66bc11-2eb1-11e6-a704-9b22ce7fd337","method":{"position":"org.apache.commons.lang3.StringUtils:7497","type":"CtMethodImpl","sourcecode":"public static java.lang.String appendIfMissingIgnoreCase(final java.lang.String str, final java.lang.CharSequence suffix, final java.lang.CharSequence... suffixes) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.appendIfMissing(str, suffix, true, suffixes);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1499","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[90,91],"tindex":"0b66e322-2eb1-11e6-a704-851da35ceb8e","method":{"position":"org.apache.commons.lang3.math.NumberUtils:120","type":"CtMethodImpl","sourcecode":"public static int toInt(final java.lang.String str, final int defaultValue) {\n    if (str != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Integer.parseInt(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:335","type":"CtBinaryOperatorImpl","sourcecode":"pos < 0"},"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,80,81,82,83,84,85],"tindex":"0b670a33-2eb1-11e6-a704-3ff1e078406f","method":{"position":"org.apache.commons.lang3.text.StrMatcher:267","type":"CtMethodImpl","sourcecode":"public int isMatch(final char[] buffer, final int pos) {\n    if (pos < 0) {\n        {\n            return isMatch(buffer, pos, 0, buffer.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"pos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"0b670a34-2eb1-11e6-a704-89d478bcb417","method":{"position":"org.apache.commons.lang3.builder.RecursiveToStringStyle:82","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected void appendDetail(java.lang.StringBuffer buffer, java.lang.String fieldName, java.util.Collection<?> coll) {\n    if (fieldName == null) {\n        {\n            appendClassName(buffer, coll);\n            appendIdentityHashCode(buffer, coll);\n            appendDetail(buffer, fieldName, coll.toArray());\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"(nullText != null) && (nullText.isEmpty())"},"failures":[],"tindex":"0b673145-2eb1-11e6-a704-a90d078724ca","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1969","type":"CtMethodImpl","sourcecode":"protected void setNullText(java.lang.String nullText) {\n    if ((nullText != null) && (nullText.isEmpty())) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (nullText == null) {\n                nullText = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = nullText;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"nullText"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:527","type":"CtBinaryOperatorImpl","sourcecode":"m == null"},"failures":[136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"tindex":"0b673146-2eb1-11e6-a704-ef3499f2507e","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:84","type":"CtMethodImpl","sourcecode":"static boolean isAccessible(final java.lang.reflect.Member m) {\n    if (m == null) {\n        {\n            if (m == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (m == null) {\n                        {\n                            return ((m != null) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (!(m.isSynthetic()));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"m"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1679","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"0b677f67-2eb1-11e6-a704-01aa562db3fc","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:696","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final double[] array, final boolean fullDetail) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1792","type":"CtBinaryOperatorImpl","sourcecode":"arraySeparator == null"},"failures":[5,6,7,8,9,10,11,12],"tindex":"0b67a678-2eb1-11e6-a704-5b8f3af6be37","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1791","type":"CtMethodImpl","sourcecode":"protected void setArraySeparator(java.lang.String arraySeparator) {\n    if (arraySeparator == null) {\n        {\n            if (arraySeparator == null) {\n                arraySeparator = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = arraySeparator;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arraySeparator":"arraySeparator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3528","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[172],"tindex":"0b67a679-2eb1-11e6-a704-a5cfc45d8410","method":{"position":"org.apache.commons.lang3.ArrayUtils:4544","type":"CtMethodImpl","sourcecode":"public static double[] add(final double[] array, final int index, final double element) {\n    if (array == null) {\n        {\n            return ((double[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Double.valueOf(element), java.lang.Double.java.lang.Double.java.lang.Class<java.lang.Double>)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:514","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[173,174,175,176,177,178,154],"tindex":"0b67cd8a-2eb1-11e6-a704-c744e0f43794","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:311","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.Type toType) {\n    if (toType == null) {\n        {\n            return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, toType, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toType"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1464","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[179,180],"tindex":"0b67cd8b-2eb1-11e6-a704-a7c5fce06ee9","method":{"position":"org.apache.commons.lang3.ArrayUtils:3520","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final int[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:527","type":"CtBinaryOperatorImpl","sourcecode":"m == null"},"failures":[],"tindex":"0b67cd8c-2eb1-11e6-a704-0faa17253628","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:84","type":"CtMethodImpl","sourcecode":"static boolean isAccessible(final java.lang.reflect.Member m) {\n    if (m == null) {\n        {\n            if (m == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (m == null) {\n                        {\n                            return ((m != null) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (!(m.isSynthetic()));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"m"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1364","type":"CtBinaryOperatorImpl","sourcecode":"typeArguments == null"},"failures":[],"tindex":"0b67cd8d-2eb1-11e6-a704-fba4c3d5d863","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1406","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type[] unrollBounds(final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type[] bounds) {\n    if (typeArguments == null) {\n        {\n            if (typeArguments == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type[] java.lang.reflect.Type[] = bounds;\n                    int int = 0;\n                    for ( ; i < (result.int) ; i++) {\n                        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, result[i]);\n                        if (unrolled == null) {\n                            result = org.apache.commons.lang3.ArrayUtils.remove(result, (i--));\n                        } else {\n                            result[i] = unrolled;\n                        }\n                    }\n                    return result;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeArguments":"typeArguments"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1609","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[181],"tindex":"0b67f49e-2eb1-11e6-a704-295bc97ef69e","method":{"position":"org.apache.commons.lang3.ArrayUtils:1505","type":"CtMethodImpl","sourcecode":"public static void reverse(final byte[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1096","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[173,174,175,176,177,178,154],"tindex":"0b67f49f-2eb1-11e6-a704-c143ba88ec42","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:324","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.Type toType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((toType == null) || (toType instanceof java.lang.Class<?>)) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.Class<?>)(toType)));\n            } \n            if (toType instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.ParameterizedType)(toType)), typeVarAssigns);\n            } \n            if (toType instanceof java.lang.reflect.GenericArrayType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.GenericArrayType)(toType)), typeVarAssigns);\n            } \n            if (toType instanceof java.lang.reflect.WildcardType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.WildcardType)(toType)), typeVarAssigns);\n            } \n            if (toType instanceof java.lang.reflect.TypeVariable<?>) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, ((java.lang.reflect.TypeVariable<?>)(toType)), typeVarAssigns);\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + toType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1121","type":"CtInvocationImpl","sourcecode":"className.startsWith(\"L\")"},"failures":[182,183,184,185,186,187],"tindex":"0b67f4a0-2eb1-11e6-a704-a3f58976c0b4","method":{"position":"org.apache.commons.lang3.ClassUtils:1108","type":"CtMethodImpl","sourcecode":"private static java.lang.String getCanonicalName(java.lang.String className) {\n    if (className.startsWith(\"L\")) {\n        {\n            className = org.apache.commons.lang3.StringUtils.deleteWhitespace(className);\n            if (className == null) {\n                return null;\n            } else {\n                int int = 0;\n                while (className.startsWith(\"[\")) {\n                    dim++;\n                    className = className.substring(1);\n                }\n                if (dim < 1) {\n                    return className;\n                } else {\n                    if (className.startsWith(\"L\")) {\n                        className = className.substring(1, (className.endsWith(\";\") ? (className.length()) - 1 : className.length()));\n                    } else {\n                        if ((className.length()) > 0) {\n                            className = org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.get(className.substring(0, 1));\n                        } \n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(className);\n                    for (int int = 0 ; i < dim ; i++) {\n                        canonicalClassNameBuffer.append(\"[]\");\n                    }\n                    return canonicalClassNameBuffer.toString();\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3070","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[188],"tindex":"0b681bb1-2eb1-11e6-a704-6d2978bc1a61","method":{"position":"org.apache.commons.lang3.ArrayUtils:3610","type":"CtMethodImpl","sourcecode":"public static boolean isNotEmpty(final long[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array != null) && ((array.int) != 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:70","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"0b681bb2-2eb1-11e6-a704-0f08fcf9d333","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:238","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (pattern == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(calendar, pattern, timeZone, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:423","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[189,189,190,190,191,191,192,193,194,195,196,197,198,199,200,200],"tindex":"0b681bb3-2eb1-11e6-a704-e580ff8ca35d","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:829","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float value) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1031","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[201,202,203],"tindex":"0b6842c4-2eb1-11e6-a704-dd78ddc516ca","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:757","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final int[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final int int : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"(nullText != null) && (nullText.isEmpty())"},"failures":[5,6,7,8,9,10,11,12],"tindex":"0b6842c5-2eb1-11e6-a704-9fa57a11a927","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:430","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setNullText(final java.lang.String nullText) {\n    if ((nullText != null) && (nullText.isEmpty())) {\n        {\n            super.setNullText(nullText);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"nullText"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:770","type":"CtVariableReadImpl","sourcecode":"value"},"failures":[204,145,205,206],"tindex":"0b6842c6-2eb1-11e6-a704-e7e4a19757d9","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:508","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (forceAccess) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"The field must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(java.lang.reflect.Modifier.isStatic(field.getModifiers()), \"The field %s.%s is not static\", field.getDeclaringClass().getName(), field.getName());\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(field, ((java.lang.Object)(null)), value, forceAccess);\n        }\n    } else {\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"forceAccess"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7513","type":"CtBinaryOperatorImpl","sourcecode":"((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(prefix))) || (org.apache.commons.lang3.StringUtils.startsWith(str, prefix, ignoreCase))"},"failures":[207,208],"tindex":"0b6869d7-2eb1-11e6-a704-05a439667974","method":{"position":"org.apache.commons.lang3.StringUtils:7512","type":"CtMethodImpl","sourcecode":"private static java.lang.String prependIfMissing(final java.lang.String str, final java.lang.CharSequence prefix, final boolean ignoreCase, final java.lang.CharSequence... prefixes) {\n    if (((prefix == null) || (org.apache.commons.lang3.StringUtils.isEmpty(prefix))) || (org.apache.commons.lang3.StringUtils.startsWith(str, prefix, ignoreCase))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(prefix))) || (org.apache.commons.lang3.StringUtils.startsWith(str, prefix, ignoreCase))) {\n                return str;\n            } \n            if ((prefixes != null) && ((prefixes.int) > 0)) {\n                for (final java.lang.CharSequence java.lang.CharSequence : prefixes) {\n                    if (org.apache.commons.lang3.StringUtils.startsWith(str, p, ignoreCase)) {\n                        return str;\n                    } \n                }\n            } \n            return (prefix.toString()) + str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"prefix","prefix":"prefix","ignoreCase":"ignoreCase"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:525","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[209],"tindex":"0b6869d8-2eb1-11e6-a704-993c477118cf","method":{"position":"org.apache.commons.lang3.StringUtils:2574","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] split(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.split(str, null, (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:527","type":"CtBinaryOperatorImpl","sourcecode":"m == null"},"failures":[],"tindex":"0b6869d9-2eb1-11e6-a704-d793d89101bc","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:84","type":"CtMethodImpl","sourcecode":"static boolean isAccessible(final java.lang.reflect.Member m) {\n    if (m == null) {\n        {\n            if (m == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (m == null) {\n                        {\n                            return ((m != null) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (!(m.isSynthetic()));\n                        }\n                    } else {\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"m":"m"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.tuple.Pair:134","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Map.Entry<?, ?>"},"failures":[210],"tindex":"0b6890ea-2eb1-11e6-a704-5fd78aecda8a","method":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:172","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.util.Map.Entry<?, ?>) {\n        {\n            if (obj instanceof org.apache.commons.lang3.mutable.MutableBoolean) {\n                return (boolean) == (((org.apache.commons.lang3.mutable.MutableBoolean)(obj)).booleanValue());\n            } \n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1364","type":"CtBinaryOperatorImpl","sourcecode":"typeArguments == null"},"failures":[],"tindex":"0b6890eb-2eb1-11e6-a704-112aff7f423d","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1406","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type[] unrollBounds(final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type[] bounds) {\n    if (typeArguments == null) {\n        {\n            if (typeArguments == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type[] java.lang.reflect.Type[] = bounds;\n                    int int = 0;\n                    for ( ; i < (result.int) ; i++) {\n                        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, result[i]);\n                        if (unrolled == null) {\n                            result = org.apache.commons.lang3.ArrayUtils.remove(result, (i--));\n                        } else {\n                            result[i] = unrolled;\n                        }\n                    }\n                    return result;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeArguments":"typeArguments"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:456","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[105,211,107,109,110,112,116,117,122,125,127,129,132],"tindex":"0b68b7fc-2eb1-11e6-a704-77b414333b72","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:433","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final char[] source) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(source.int).append(source);\n            substitute(buf, 0, source.int);\n            return buf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5847","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(cs)"},"failures":[212,213,214,215],"tindex":"0b68b7fd-2eb1-11e6-a704-a54a128e1773","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:94","type":"CtMethodImpl","sourcecode":"static int indexOf(final java.lang.CharSequence cs, final java.lang.CharSequence searchChar, final int start) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(searchChar)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return cs.toString().indexOf(searchChar.toString(), start);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"searchChar"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:265","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[216,217],"tindex":"0b69061e-2eb1-11e6-a704-c9fb2775b679","method":{"position":"org.apache.commons.lang3.RandomStringUtils:96","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomAlphabetic(final int count) {\n    if (count == 0) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, true, false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl","sourcecode":"ignored != null"},"failures":[218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273],"tindex":"0b69061f-2eb1-11e6-a704-532aeb0171cf","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:956","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(final org.apache.commons.lang3.text.StrMatcher ignored) {\n    if (ignored != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ignored != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = ignored;\n            } \n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"ignored"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5952","type":"CtBinaryOperatorImpl","sourcecode":"cs == null"},"failures":[274],"tindex":"0b692d30-2eb1-11e6-a704-4b24054eabd1","method":{"position":"org.apache.commons.lang3.StringUtils:5881","type":"CtMethodImpl","sourcecode":"public static boolean isAlphaSpace(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if (((java.lang.Character.isLetter(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:109","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[275],"tindex":"0b692d31-2eb1-11e6-a704-7d9292fbd8d9","method":{"position":"org.apache.commons.lang3.StringUtils:5610","type":"CtMethodImpl","sourcecode":"public static java.lang.String upperCase(final java.lang.String str, final java.util.Locale locale) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toUpperCase(locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConstantInitializer:110","type":"CtUnaryOperatorImpl","sourcecode":"!(obj instanceof org.apache.commons.lang3.concurrent.ConstantInitializer<?>)"},"failures":[],"tindex":"0b692d32-2eb1-11e6-a704-eff5fd9edda5","method":{"position":"org.apache.commons.lang3.CharRange:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (!(obj instanceof org.apache.commons.lang3.concurrent.ConstantInitializer<?>)) {\n        {\n            if (obj == (org.apache.commons.lang3.CharRange.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.CharRange) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.CharRange org.apache.commons.lang3.CharRange = ((org.apache.commons.lang3.CharRange)(obj));\n            return (((char) == (other.char)) && ((char) == (other.char))) && ((boolean) == (other.boolean));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1154","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(seq)"},"failures":[213],"tindex":"0b695443-2eb1-11e6-a704-97da3edb2015","method":{"position":"org.apache.commons.lang3.StringUtils:966","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchSeq, startPos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1764","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[276],"tindex":"0b695444-2eb1-11e6-a704-0bdb462e7ac1","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1647","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final float value) {\n    if (index >= 0) {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:474","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[277],"tindex":"0b695445-2eb1-11e6-a704-7f1a84efda93","method":{"position":"org.apache.commons.lang3.Validate:872","type":"CtMethodImpl","sourcecode":"public static void matchesPattern(final java.lang.CharSequence input, final java.lang.String pattern, final java.lang.String message, final java.lang.Object... values) {\n    if ((java.util.regex.Pattern.matches(input, input)) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (message != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.util.regex.Pattern.matches(pattern, input)) == false) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"message"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:603","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[278],"tindex":"0b697b56-2eb1-11e6-a704-f3cf5e36c8c0","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:256","type":"CtMethodImpl","sourcecode":"public static java.lang.Throwable[] getThrowables(final java.lang.Throwable throwable) {\n    if (throwable == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.List<java.lang.Throwable> java.util.List<java.lang.Throwable> = org.apache.commons.lang3.exception.ExceptionUtils.getThrowableList(throwable);\n            return list.toArray(new java.lang.Throwable[list.size()]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:465","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299],"tindex":"0b697b57-2eb1-11e6-a704-b5fa706ec40e","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:295","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final char lhs, final char rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Character>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Character getLeft() {\n                        return java.lang.Character.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Character getRight() {\n                        return java.lang.Character.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:717","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[140,142],"tindex":"0b69a268-2eb1-11e6-a704-9f1fbb213cfe","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:467","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readDeclaredField(final java.lang.Object target, final java.lang.String fieldName, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((target != null), \"target object must not be null\");\n            final java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getDeclaredField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate declared field %s.%s\", cls, fieldName);\n            return org.apache.commons.lang3.reflect.FieldUtils.readField(field, target, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:905","type":"CtBinaryOperatorImpl","sourcecode":"0 == nHex"},"failures":[300],"tindex":"0b69c979-2eb1-11e6-a704-4582a27b3176","method":{"position":"org.apache.commons.lang3.Conversion:938","type":"CtMethodImpl","sourcecode":"public static int hexToInt(final java.lang.String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {\n    if (0 == srcPos) {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 32\");\n            } \n            int int = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final int int = (15 & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final int int = 15 << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nHex":"srcPos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1014","type":"CtBinaryOperatorImpl","sourcecode":"object == null"},"failures":[],"tindex":"0b69f08a-2eb1-11e6-a704-0346b5cacda5","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:394","type":"CtMethodImpl","sourcecode":"public void appendEnd(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.this.boolean) == false) {\n                removeLastFieldSeparator(buffer);\n            } \n            appendContentEnd(buffer);\n            org.apache.commons.lang3.builder.ToStringStyle.unregister(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4835","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[301],"tindex":"0b69f08b-2eb1-11e6-a704-cde64d19fab8","method":{"position":"org.apache.commons.lang3.StringUtils:3203","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByCharacterTypeCamelCase(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[302],"tindex":"0b69f08c-2eb1-11e6-a704-0f24efb3d12c","method":{"position":"org.apache.commons.lang3.time.DateUtils:1592","type":"CtMethodImpl","sourcecode":"public static long getFragmentInHours(final java.util.Calendar calendar, final int fragment) {\n    if (calendar == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(calendar, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1275","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[303],"tindex":"0b6a179d-2eb1-11e6-a704-6998ae23b123","method":{"position":"org.apache.commons.lang3.StringUtils:3527","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final double[] array, final char separator) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:517","type":"CtBinaryOperatorImpl","sourcecode":"classArray == null"},"failures":[304],"tindex":"0b6a179e-2eb1-11e6-a704-d9853ab8b343","method":{"position":"org.apache.commons.lang3.ClassUtils:477","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?>[] classArray, final java.lang.Class<?>... toClassArray) {\n    if (classArray == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(classArray, toClassArray, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classArray":"classArray"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3968","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[15],"tindex":"0b6a179f-2eb1-11e6-a704-153fbb806500","method":{"position":"org.apache.commons.lang3.ArrayUtils:3965","type":"CtMethodImpl","sourcecode":"public static double[] addAll(final double[] array1, final double... array2) {\n    if (array1 == null) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final double[] double[] = new double[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[305],"tindex":"0b6a3eb0-2eb1-11e6-a704-6163400773e3","method":{"position":"org.apache.commons.lang3.StringUtils:5549","type":"CtMethodImpl","sourcecode":"public static java.lang.String center(java.lang.String str, final int size, java.lang.String padStr) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || (size <= 0)) {\n                return str;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {\n                padStr = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padStr);\n            str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr);\n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3765","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[],"tindex":"0b6a3eb1-2eb1-11e6-a704-8db3fd52198f","method":{"position":"org.apache.commons.lang3.ArrayUtils:3762","type":"CtMethodImpl","sourcecode":"public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n    if (array1 == null) {\n        {\n            if (array2 == null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array1 == null) {\n                        return org.apache.commons.lang3.ArrayUtils.clone(array2);\n                    } else if (array2 == null) {\n                        return org.apache.commons.lang3.ArrayUtils.clone(array1);\n                    } \n                    final boolean[] boolean[] = new boolean[(array1.int) + (array2.int)];\n                    java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n                    java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n                    return joinedArray;\n                }\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3823","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[15],"tindex":"0b6a65c2-2eb1-11e6-a704-83995d176d7b","method":{"position":"org.apache.commons.lang3.ArrayUtils:3820","type":"CtMethodImpl","sourcecode":"public static byte[] addAll(final byte[] array1, final byte... array2) {\n    if (array1 == null) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final byte[] byte[] = new byte[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7364","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[306],"tindex":"0b6a65c3-2eb1-11e6-a704-190a8b1b0fb6","method":{"position":"org.apache.commons.lang3.StringUtils:6353","type":"CtMethodImpl","sourcecode":"public static java.lang.String abbreviate(final java.lang.String str, final int maxWidth) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.abbreviate(str, 0, maxWidth);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:227","type":"CtInvocationImpl","sourcecode":"type.isArray()"},"failures":[307,308,309,310],"tindex":"0b6a65c4-2eb1-11e6-a704-1fe6cef26a1d","method":{"position":"org.apache.commons.lang3.AnnotationUtils:223","type":"CtMethodImpl","sourcecode":"public static boolean isValidAnnotationMemberType(java.lang.Class<?> type) {\n    if (type.isArray()) {\n        {\n            if (type == null) {\n                return false;\n            } \n            if (type.isArray()) {\n                type = type.getComponentType();\n            } \n            return ((((type.isPrimitive()) || (type.isEnum())) || (type.isAnnotation())) || (java.lang.String.java.lang.String.java.lang.Class.equals(type))) || (java.lang.Class.java.lang.Class.java.lang.Class.equals(type));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1386","type":"CtBinaryOperatorImpl","sourcecode":"width > 0"},"failures":[311],"tindex":"0b6a8cd5-2eb1-11e6-a704-3fda43de889e","method":{"position":"org.apache.commons.lang3.text.FormattableUtils:116","type":"CtMethodImpl","sourcecode":"public static java.util.Formatter append(final java.lang.CharSequence seq, final java.util.Formatter formatter, final int flags, final int width, final int precision, final java.lang.CharSequence ellipsis) {\n    if (precision > 0) {\n        {\n            return org.apache.commons.lang3.text.FormattableUtils.append(seq, formatter, flags, width, precision, ' ', ellipsis);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"width":"precision"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:741","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[312],"tindex":"0b6a8cd6-2eb1-11e6-a704-6fee8d6c3b8c","method":{"position":"org.apache.commons.lang3.math.Fraction:822","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction divideBy(final org.apache.commons.lang3.math.Fraction fraction) {\n    if (fraction == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fraction == null) {\n                throw new java.lang.IllegalArgumentException(\"The fraction must not be null\");\n            } \n            if ((fraction.int) == 0) {\n                throw new java.lang.ArithmeticException(\"The fraction to divide by must not be zero\");\n            } \n            return multiplyBy(fraction.invert());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6078","type":"CtBinaryOperatorImpl","sourcecode":"count > 0"},"failures":[],"tindex":"0b6a8cd7-2eb1-11e6-a704-33fc1a431dfc","method":{"position":"org.apache.commons.lang3.RandomStringUtils:110","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomAlphanumeric(final int count) {\n    if (count > 0) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, true, true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:126","type":"CtBinaryOperatorImpl","sourcecode":"(a1 == null) || (a2 == null)"},"failures":[313,314,315],"tindex":"0b6a8cd8-2eb1-11e6-a704-dd8af26b1624","method":{"position":"org.apache.commons.lang3.AnnotationUtils:122","type":"CtMethodImpl","sourcecode":"public static boolean equals(final java.lang.annotation.Annotation a1, final java.lang.annotation.Annotation a2) {\n    if ((a1 == null) || (a2 == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (a1 == a2) {\n                return true;\n            } \n            if ((a1 == null) || (a2 == null)) {\n                return false;\n            } \n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a1.annotationType();\n            final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = a2.annotationType();\n            org.apache.commons.lang3.Validate.notNull(type, \"Annotation %s with null annotationType()\", a1);\n            org.apache.commons.lang3.Validate.notNull(type2, \"Annotation %s with null annotationType()\", a2);\n            if (!(type.equals(type2))) {\n                return false;\n            } \n            try {\n                for (final java.lang.reflect.Method java.lang.reflect.Method : type.getDeclaredMethods()) {\n                    if (((m.getParameterTypes().int) == 0) && (org.apache.commons.lang3.AnnotationUtils.isValidAnnotationMemberType(m.getReturnType()))) {\n                        final java.lang.Object java.lang.Object = m.invoke(a1);\n                        final java.lang.Object java.lang.Object = m.invoke(a2);\n                        if (!(org.apache.commons.lang3.AnnotationUtils.memberEquals(m.getReturnType(), v1, v2))) {\n                            return false;\n                        } \n                    } \n                }\n            } catch (final java.lang.IllegalAccessException ex) {\n                return false;\n            } catch (final java.lang.reflect.InvocationTargetException ex) {\n                return false;\n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a1":"a1","a2":"a2"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:451","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[316,317,318,319,320,321,322,323,324],"tindex":"0b6ab3e9-2eb1-11e6-a704-5732aa1893f1","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n            } \n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n            int int = 0;\n            for (final java.lang.String java.lang.String : hex_prefixes) {\n                if (str.startsWith(pfx)) {\n                    pfxLen += pfx.length();\n                    break;\n                } \n            }\n            if (pfxLen > 0) {\n                char char = 0;\n                for (int int = pfxLen ; i < (str.length()) ; i++) {\n                    firstSigDigit = str.charAt(i);\n                    if (firstSigDigit == '0') {\n                        pfxLen++;\n                    } else {\n                        break;\n                    }\n                }\n                final int int = (str.length()) - pfxLen;\n                if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                } \n                if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } \n                return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n            } \n            final char char = str.charAt(((str.length()) - 1));\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            final int int = str.indexOf('.');\n            final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n            int int = 0;\n            if (decPos > (-1)) {\n                if (expPos > (-1)) {\n                    if ((expPos < decPos) || (expPos > (str.length()))) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    dec = str.substring((decPos + 1), expPos);\n                } else {\n                    dec = str.substring((decPos + 1));\n                }\n                mant = str.substring(0, decPos);\n                numDecimals = dec.length();\n            } else {\n                if (expPos > (-1)) {\n                    if (expPos > (str.length())) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    mant = str.substring(0, expPos);\n                } else {\n                    mant = str;\n                }\n                dec = null;\n            }\n            if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                    exp = str.substring((expPos + 1), ((str.length()) - 1));\n                } else {\n                    exp = null;\n                }\n                final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                switch (lastChar) {\n                    case 'l' :\n                    case 'L' :\n                        if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                            try {\n                                return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                            } catch (final java.lang.NumberFormatException nfe) {\n                            }\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                        } \n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    case 'f' :\n                    case 'F' :\n                        try {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                    case 'd' :\n                    case 'D' :\n                        try {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                            if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                        } catch (final java.lang.NumberFormatException e) {\n                        }\n                    default :\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                }\n            } \n            if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                exp = str.substring((expPos + 1), str.length());\n            } else {\n                exp = null;\n            }\n            if ((dec == null) && (exp == null)) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n            } \n            final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n            try {\n                if (numDecimals <= 7) {\n                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                        return f;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            try {\n                if (numDecimals <= 16) {\n                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                    if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                        return d;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n        }\n    } else {\n        throw new java.lang.NumberFormatException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:874","type":"CtBinaryOperatorImpl","sourcecode":"(java.util.regex.Pattern.matches(pattern, input)) == false"},"failures":[],"tindex":"0b6b020a-2eb1-11e6-a704-01c2ddca46f5","method":{"position":"org.apache.commons.lang3.Validate:872","type":"CtMethodImpl","sourcecode":"public static void matchesPattern(final java.lang.CharSequence input, final java.lang.String pattern, final java.lang.String message, final java.lang.Object... values) {\n    if ((java.util.regex.Pattern.matches(input, input)) == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (message != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.util.regex.Pattern.matches(pattern, input)) == false) {\n                        throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input","pattern":"input"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:860","type":"CtBinaryOperatorImpl","sourcecode":"delim == null"},"failures":[218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273],"tindex":"0b6b020b-2eb1-11e6-a704-4177669ee09b","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:859","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(final org.apache.commons.lang3.text.StrMatcher delim) {\n    if (delim == null) {\n        {\n            if (delim == null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = org.apache.commons.lang3.text.StrMatcher.noneMatcher();\n            } else {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = delim;\n            }\n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delim":"delim"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:391","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[68],"tindex":"0b6b291c-2eb1-11e6-a704-47d135616632","method":{"position":"org.apache.commons.lang3.time.FastDateParser:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object parseObject(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        {\n            return parse(source, pos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:198","type":"CtBinaryOperatorImpl","sourcecode":"(locale.getVariant().length()) > 0"},"failures":[325,326,327,328,329],"tindex":"0b6b502d-2eb1-11e6-a704-1f88996cd152","method":{"position":"org.apache.commons.lang3.time.FormatCache:142","type":"CtMethodImpl","sourcecode":"F getDateTimeInstance(final int dateStyle, final int timeStyle, final java.util.TimeZone timeZone, java.util.Locale locale) {\n    if ((locale.getVariant().length()) > 0) {\n        {\n            return getDateTimeInstance(java.lang.Integer.valueOf(dateStyle), java.lang.Integer.valueOf(timeStyle), timeZone, locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7013","type":"CtBinaryOperatorImpl","sourcecode":"(first == null) || (second == null)"},"failures":[],"tindex":"0b6b502e-2eb1-11e6-a704-ed6593d23682","method":{"position":"org.apache.commons.lang3.StringUtils:7086","type":"CtMethodImpl","sourcecode":"private static java.lang.String getSetOfMatchingCharacterWithin(final java.lang.CharSequence first, final java.lang.CharSequence second, final int limit) {\n    if ((first == null) || (first == null)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(second);\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                final char char = first.charAt(i);\n                boolean boolean = false;\n                for (int int = java.lang.Math.max(0, (i - limit)) ; (!found) && (j < (java.lang.Math.min((i + limit), second.length()))) ; j++) {\n                    if ((copy.charAt(j)) == ch) {\n                        found = true;\n                        common.append(ch);\n                        copy.setCharAt(j, '*');\n                    } \n                }\n            }\n            return common.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"first","second":"first"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:355","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[330],"tindex":"0b6b502f-2eb1-11e6-a704-c1847c9dbcf0","method":{"position":"org.apache.commons.lang3.ArrayUtils:5002","type":"CtMethodImpl","sourcecode":"public static int[] remove(final int[] array, final int index) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((int[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:711","type":"CtBinaryOperatorImpl","sourcecode":"(cls != null) && (cls.isPrimitive())"},"failures":[137,138,139,153,154,158,161,162,164,165],"tindex":"0b6b9e50-2eb1-11e6-a704-836466013f7d","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:336","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getAccessibleMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if ((cls != null) && (cls.isPrimitive())) {\n        {\n            try {\n                return org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(cls.getMethod(methodName, parameterTypes));\n            } catch (final java.lang.NoSuchMethodException e) {\n                return null;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:39","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[331,332,333,334,179,335,336,337,338,339,340,341,342],"tindex":"0b6bc561-2eb1-11e6-a704-13ab00bd3537","method":{"position":"org.apache.commons.lang3.ArrayUtils:3564","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final double[] array) {\n    if (array == null) {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:896","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(seq)"},"failures":[343],"tindex":"0b6bc562-2eb1-11e6-a704-c185b1b43b6c","method":{"position":"org.apache.commons.lang3.StringUtils:1153","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final int searchChar) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:351","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[344],"tindex":"0b6bec73-2eb1-11e6-a704-d51320aee6d3","method":{"position":"org.apache.commons.lang3.Range:314","type":"CtMethodImpl","sourcecode":"public boolean containsRange(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (otherRange == null) {\n                return false;\n            } \n            return (contains(otherRange.T)) && (contains(otherRange.T));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:522","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof char[]"},"failures":[345,346,347,10,348,348,349,350,351,352,353,353,354,355,356],"tindex":"0b6bec74-2eb1-11e6-a704-2fddc8eff1e5","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:631","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object value) {\n    if (value instanceof char[]) {\n        {\n            buffer.append(java.lang.String);\n            buffer.append(getShortClassName(value.getClass()));\n            buffer.append(java.lang.String);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:906","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,279,280,281,282,283,284,285,286,287,288,290,291,376,292,293,294,295,296,297,298,299,377,378,379,380],"tindex":"0b6bec75-2eb1-11e6-a704-cf78d892106f","method":{"position":"org.apache.commons.lang3.ArrayUtils:1987","type":"CtMethodImpl","sourcecode":"public static boolean contains(final java.lang.Object[] array, final java.lang.Object objectToFind) {\n    if (objectToFind == null) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, objectToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"objectToFind"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:696","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[381],"tindex":"0b6c1386-2eb1-11e6-a704-15d074b5e6a6","method":{"position":"org.apache.commons.lang3.text.StrBuilder:954","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final org.apache.commons.lang3.text.StrBuilder str) {\n    if (str == null) {\n        {\n            return append(str).appendNewLine();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:831","type":"CtBinaryOperatorImpl","sourcecode":"str1 == str2"},"failures":[],"tindex":"0b6c1387-2eb1-11e6-a704-cd032ea3698a","method":{"position":"org.apache.commons.lang3.StringUtils:828","type":"CtMethodImpl","sourcecode":"public static boolean equalsIgnoreCase(final java.lang.CharSequence str1, final java.lang.CharSequence str2) {\n    if (str2 == str1) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str1 == null) {\n                {\n                    if ((str1 == null) || (str2 == null)) {\n                        return str1 == str2;\n                    } else if (str1 == str2) {\n                        return true;\n                    } else if ((str1.length()) != (str2.length())) {\n                        return false;\n                    } else {\n                        return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());\n                    }\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"str2","str2":"str1"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:214","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[382,382],"tindex":"0b6c1388-2eb1-11e6-a704-1d3cae409027","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:731","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final byte value) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:5890","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))"},"failures":[342],"tindex":"0b6c1389-2eb1-11e6-a704-0b6adc3ef11b","method":{"position":"org.apache.commons.lang3.ArrayUtils:5889","type":"CtMethodImpl","sourcecode":"public static double[] removeElements(final double[] array, final double... values) {\n    if ((org.apache.commons.lang3.ArrayUtils.isEmpty(values)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Double, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Double, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Double, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final double double : values) {\n                final java.lang.Double java.lang.Double = java.lang.Double.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Double, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Double, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Double java.lang.Double = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.doubleValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((double[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"values","values":"values"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:550","type":"CtInvocationImpl","sourcecode":"value.getClass().isArray()"},"failures":[],"tindex":"0b6c3a9a-2eb1-11e6-a704-3f9e5e448ad1","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:466","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (value.getClass().isArray()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.Class) {\n                if ((org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry()) == null) {\n                    org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.builder.IDKey>>.set(new java.util.HashSet<org.apache.commons.lang3.builder.IDKey>());\n                } \n            }\n            org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry().add(new org.apache.commons.lang3.builder.IDKey(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[80,81,82,83,84,85],"tindex":"0b6c3a9b-2eb1-11e6-a704-d74fe2e05f71","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:447","type":"CtMethodImpl","sourcecode":"private void seekNonWs(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if (pattern == null) {\n        {\n            int int = 0;\n            final char[] char[] = pattern.toCharArray();\n            do {\n                len = org.apache.commons.lang3.text.StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());\n                pos.setIndex(((pos.getIndex()) + len));\n            } while ((len > 0) && ((pos.getIndex()) < (pattern.length())) );\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.mutable.MutableByte:246","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.apache.commons.lang3.mutable.MutableByte"},"failures":[],"tindex":"0b6c61ac-2eb1-11e6-a704-c77fd006eacd","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof org.apache.commons.lang3.mutable.MutableByte) {\n        {\n            return (obj == (org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeImpl.this)) || ((obj instanceof java.lang.reflect.WildcardType) && (org.apache.commons.lang3.reflect.TypeUtils.equals(org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(obj)))));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:654","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[],"tindex":"0b6c61ad-2eb1-11e6-a704-33f20c77e7e3","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:388","type":"CtMethodImpl","sourcecode":"private static void reflectionAppend(final java.lang.Object lhs, final java.lang.Object rhs, final java.lang.Class<?> clazz, final org.apache.commons.lang3.builder.EqualsBuilder builder, final boolean useTransients, final java.lang.String[] excludeFields) {\n    if (lhs == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(lhs, rhs)) {\n                return ;\n            } \n            try {\n                org.apache.commons.lang3.builder.EqualsBuilder.register(lhs, rhs);\n                final java.lang.reflect.Field[] java.lang.reflect.Field[] = clazz.getDeclaredFields();\n                java.lang.reflect.AccessibleObject.setAccessible(fields, true);\n                for (int int = 0 ; (i < (fields.int)) && (builder.boolean) ; i++) {\n                    final java.lang.reflect.Field java.lang.reflect.Field = fields[i];\n                    if ((((!(org.apache.commons.lang3.ArrayUtils.contains(excludeFields, f.getName()))) && ((f.getName().indexOf('$')) == (-1))) && (useTransients || (!(java.lang.reflect.Modifier.isTransient(f.getModifiers()))))) && (!(java.lang.reflect.Modifier.isStatic(f.getModifiers())))) {\n                        try {\n                            builder.append(f.get(lhs), f.get(rhs));\n                        } catch (final java.lang.IllegalAccessException e) {\n                            throw new java.lang.InternalError(\"Unexpected IllegalAccessException\");\n                        }\n                    } \n                }\n            } finally {\n                org.apache.commons.lang3.builder.EqualsBuilder.unregister(lhs, rhs);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1810","type":"CtBinaryOperatorImpl","sourcecode":"(cs.length()) == 0"},"failures":[383,384,140,385,141,142,386,387,388,143,204,389,390,391,392,393,144,145,394,395,396,146,205,397,398,399,400,401,402,403,147,148,149,150,151,404,405],"tindex":"0b6c88be-2eb1-11e6-a704-cfe5e1e8ffcb","method":{"position":"org.apache.commons.lang3.StringUtils:336","type":"CtMethodImpl","sourcecode":"public static boolean isNotBlank(final java.lang.CharSequence cs) {\n    if ((cs.length()) == 0) {\n        {\n            return !(org.apache.commons.lang3.StringUtils.isBlank(cs));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3225","type":"CtInvocationImpl","sourcecode":"str.isEmpty()"},"failures":[],"tindex":"0b6c88bf-2eb1-11e6-a704-774817873611","method":{"position":"org.apache.commons.lang3.text.StrBuilder:877","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.String str, final int startIndex, final int length) {\n    if (str.isEmpty()) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str, startIndex, length).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1389","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[406],"tindex":"0b6c88c0-2eb1-11e6-a704-f348a39d6f24","method":{"position":"org.apache.commons.lang3.StringUtils:6309","type":"CtMethodImpl","sourcecode":"public static java.lang.String reverseDelimited(final java.lang.String str, final char separatorChar) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            final java.lang.String[] java.lang.String[] = org.apache.commons.lang3.StringUtils.split(str, separatorChar);\n            org.apache.commons.lang3.ArrayUtils.reverse(strs);\n            return org.apache.commons.lang3.StringUtils.join(strs, separatorChar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5374","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[407],"tindex":"0b6c88c1-2eb1-11e6-a704-4fe60a8fc1a0","method":{"position":"org.apache.commons.lang3.math.NumberUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.Double createDouble(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Double.valueOf(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
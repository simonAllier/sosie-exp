{"failureDictionary":{"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":358,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":228,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":352,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":222,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBoolean":20,"org.apache.commons.lang3.exception.ContextedExceptionTest.testNullExceptionPassing":283,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveBooleanArray":241,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfter_StringString":0,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":40,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":43,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":149,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticField":298,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":349,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":135,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":148,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleEmptyArray":421,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":344,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":59,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":105,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":78,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultIsExceptionUnknown":335,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":198,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullDoubleArray":249,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":56,"org.apache.commons.lang3.ArrayUtilsTest.testContainsFloat":262,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml10":194,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml11":195,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray":5,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":340,"org.apache.commons.lang3.CharRangeTest.testContains_Char":122,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":325,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":341,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":219,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissingIgnoreCase":423,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":106,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":170,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testTimeZoneMatches":36,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":152,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript":200,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii":336,"org.apache.commons.lang3.ClassUtilsTest.test_convertClassNamesToClasses_List":130,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash":193,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testTimeZoneMatches":109,"org.apache.commons.lang3.EnumUtilsTest.test_getEnum":388,"org.apache.commons.lang3.RandomUtilsTest.testNextIntLowerGreaterUpper":381,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":134,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloat":263,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":221,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":309,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":39,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":278,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionThrowable":284,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":46,"org.apache.commons.lang3.mutable.MutableDoubleTest.testSetNull":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":314,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":188,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeEx":331,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":63,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder":269,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":41,"org.apache.commons.lang3.ConversionTest.testLongToShortArray":8,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":53,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity":205,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetValueDelimiter":367,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":350,"org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs":210,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString":407,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testToStringContainsName":33,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":42,"org.apache.commons.lang3.CharSetTest.testConstructor_String_simple":113,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":151,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":374,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":351,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":68,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":61,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":289,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":267,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD":276,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":38,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiIntArray":394,"org.apache.commons.lang3.RandomUtilsTest.testNextIntMinimalRange":383,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":64,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":94,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_int":236,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":12,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":96,"org.apache.commons.lang3.CharSetTest.testContains_Char":115,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":318,"org.apache.commons.lang3.CharRangeTest.testSerialization":120,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":229,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":256,"org.apache.commons.lang3.RangeTest.testContainsRange":424,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":215,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang720":199,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowableContext":285,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":50,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":62,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":95,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":131,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testPatternMatches":37,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":410,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml":202,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":203,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords":399,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":385,"org.apache.commons.lang3.CharRangeTest.testIterator":124,"org.apache.commons.lang3.RandomUtilsTest.testExtremeRangeInt":380,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":275,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt":408,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":104,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":30,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":417,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLocaleMatches":27,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":361,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":45,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloatWithStartIndex":264,"org.apache.commons.lang3.mutable.MutableFloatTest.testSetNull":296,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":145,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":412,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":214,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":103,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":324,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetEscape":370,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString":401,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.test_Equality_Hash":99,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":66,"org.apache.commons.lang3.StringUtilsTest.testDefault_StringString":312,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex":259,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4":189,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadFieldForceAccess":307,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":346,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":343,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":416,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":1,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":74,"org.apache.commons.lang3.math.FractionTest.testAdd":128,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":49,"org.apache.commons.lang3.builder.DiffBuilderTest.testSameObjectIgnoresAppends":418,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testPatternMatches":110,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":191,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":217,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":227,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":146,"org.apache.commons.lang3.RandomUtilsTest.testNextIntNegative":379,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":184,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":116,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullFloatArray":253,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":386,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":16,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":100,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":54,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveObjectArray":238,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter":402,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullCharArray":255,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullShortArray":247,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveCharArray":240,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowable":287,"org.apache.commons.lang3.time.FastDateFormatTest.testLang954":72,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArray":265,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":101,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":26,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":93,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":187,"org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString":293,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String_nullValue":398,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":320,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":348,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode":201,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":7,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetExceptionUnknown":328,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":153,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":155,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":154,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":157,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":156,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":159,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":158,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":223,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":58,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":32,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":71,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":84,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":231,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":11,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":281,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":378,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":136,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher":133,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":368,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringStringarray":6,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":290,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":172,"org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class":260,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":73,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_String":384,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":88,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":337,"org.apache.commons.lang3.RandomUtilsTest.testNextInt":382,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":86,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField":299,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString":403,"org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean":258,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":23,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":233,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":357,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":226,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean":257,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":80,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":225,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedField":305,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":52,"org.apache.commons.lang3.CharSetTest.testHashCode":118,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNot":308,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":411,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String":76,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":356,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":24,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":79,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":338,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionString":286,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_String":390,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana":206,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int":137,"org.apache.commons.lang3.ValidateTest.testExclusiveBetween_withMessage":282,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions":204,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiBooleanArray":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":129,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":29,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Same":121,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":83,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":376,"org.apache.commons.lang3.StringUtilsIsTest.testIsAlphaspace":295,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":415,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":69,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":371,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":230,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String":268,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredField":306,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleNull":420,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":92,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":345,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Normal":125,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":319,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":60,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream":425,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":77,"org.apache.commons.lang3.CharSetTest.testEquals_Object":114,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":3,"org.apache.commons.lang3.exception.ContextedExceptionTest.testAddContextValue":288,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetPrefix":373,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_StringInt":389,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":147,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":75,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetSuffix":375,"org.apache.commons.lang3.StringUtilsTest.testRemove_String":405,"org.apache.commons.lang3.text.StrMatcherTest.testNoneMatcher":138,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":57,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858":211,"org.apache.commons.lang3.LocaleUtilsTest.testCountriesByLanguage":294,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullIntArray":252,"org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString":406,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":235,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":35,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":102,"org.apache.commons.lang3.time.FastDateParserTest.testParseZone":270,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmpty":372,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":313,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":179,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int":292,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNested":329,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":180,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":181,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":182,"org.apache.commons.lang3.ClassUtilsTest.testIsPrimitiveOrWrapper":419,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":183,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml":190,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD":271,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":234,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":224,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":67,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":354,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":322,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveLongArray":245,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testCharArrayAsObject":266,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean":13,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetResultObjectUnknown":334,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":14,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":47,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":173,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords":400,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC":272,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissing":422,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":174,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":208,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":55,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":70,"org.apache.commons.lang3.ArrayUtilsTest.testReverseByte":111,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":321,"org.apache.commons.lang3.ArrayUtilsTest.testReverseShortRange":392,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter":404,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":209,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":360,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String":397,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testToStringContainsName":97,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":339,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":4,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":413,"org.apache.commons.lang3.ArrayUtilsTest.testReverseShort":393,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":218,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullLongArray":254,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":365,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner":391,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":323,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang313":197,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean":310,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Reversed":126,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":369,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":220,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":213,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":274,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":353,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArray":21,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":150,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":132,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong":18,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray":261,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":85,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullObjectArray":250,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters":196,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeExternalExec":333,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":409,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField":300,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables":362,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":364,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":81,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":366,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":107,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":414,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":342,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":139,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":387,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":82,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":185,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":186,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":347,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":44,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC":277,"org.apache.commons.lang3.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject":22,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsWhitespace":311,"org.apache.commons.lang3.CharSetTest.testSerialization":112,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":90,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":142,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException2":302,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":143,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException1":301,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":119,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException4":304,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetDeclaredFieldAccessIllegalArgumentException3":303,"org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArrayHiddenByObject":395,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":273,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":15,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":355,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":216,"org.apache.commons.lang3.text.StrTokenizerTest.test8":169,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":315,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":65,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveDoubleArray":237,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":91,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":98,"org.apache.commons.lang3.text.StrTokenizerTest.test5":166,"org.apache.commons.lang3.text.StrTokenizerTest.test4":165,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField":297,"org.apache.commons.lang3.text.StrTokenizerTest.test7":168,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":316,"org.apache.commons.lang3.text.StrTokenizerTest.test6":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":317,"org.apache.commons.lang3.text.StrTokenizerTest.test1":162,"org.apache.commons.lang3.ConversionTest.testIntToShortArray":212,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":161,"org.apache.commons.lang3.text.StrTokenizerTest.test3":164,"org.apache.commons.lang3.text.StrTokenizerTest.test2":163,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullByteArray":248,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":207,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToEmpty_String":291,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":2,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticField":377,"org.apache.commons.lang3.CharRangeTest.testContains_Charrange":123,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":140,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":141,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":192,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultInitializerNamesModify":327,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveFloatArray":239,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":34,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetInitializerUnknown":332,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveByteArray":242,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveShortArray":243,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong_emptyArray":17,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":144,"org.apache.commons.lang3.time.FastDateParserTest.testParses":280,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":178,"org.apache.commons.lang3.ConversionTest.testLongToIntArray":326,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":359,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveIntArray":244,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":28,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testByteArray":127,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":171,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":177,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":176,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeTempExec":330,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":175,"org.apache.commons.lang3.ArrayUtilsTest.testGetLength":246,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":117,"org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArray":396,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":232,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullBooleanArray":251,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":51,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocaleMatches":87,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":363,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":25,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":10},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:451","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[0],"tindex":"c88bc65c-2e9f-11e6-9472-45f66fcfac79","method":{"position":"org.apache.commons.lang3.StringUtils:2331","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringAfter(final java.lang.String str, final java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            if (separator == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.indexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return str.substring((pos + (separator.length())));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"separator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffResult:92","type":"CtBinaryOperatorImpl","sourcecode":"style == null"},"failures":[1],"tindex":"c88cb0bd-2e9f-11e6-9472-75beecfa4db3","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:135","type":"CtMethodImpl","sourcecode":"public static void setDefaultStyle(final org.apache.commons.lang3.builder.ToStringStyle style) {\n    if (style == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (style == null) {\n                throw new java.lang.IllegalArgumentException(\"The style must not be null\");\n            } \n            org.apache.commons.lang3.builder.ToStringBuilder.org.apache.commons.lang3.builder.ToStringBuilder.org.apache.commons.lang3.builder.ToStringStyle = style;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"style":"style"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:518","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[2],"tindex":"c88cd7ce-2e9f-11e6-9472-19978e70376e","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Date date, final java.lang.StringBuffer buf) {\n    if (date == null) {\n        {\n            final java.util.Calendar java.util.Calendar = newCalendar();\n            c.setTime(date);\n            return applyRules(c, buf);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSetUtils:242","type":"CtBinaryOperatorImpl","sourcecode":"strings != null"},"failures":[3,4,5,6,7],"tindex":"c88cd7cf-2e9f-11e6-9472-89d0ceeb7b41","method":{"position":"org.apache.commons.lang3.CharSetUtils:241","type":"CtMethodImpl","sourcecode":"private static boolean deepEmpty(final java.lang.String[] strings) {\n    if (strings != null) {\n        {\n            if (strings != null) {\n                for (final java.lang.String java.lang.String : strings) {\n                    if (org.apache.commons.lang3.StringUtils.isNotEmpty(s)) {\n                        return false;\n                    } \n                }\n            } \n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"strings":"strings"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1479","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[2],"tindex":"c88cfee0-2e9f-11e6-9472-d7405a98a004","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:400","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.lang.Object obj, final java.lang.StringBuffer toAppendTo, final java.text.FieldPosition pos) {\n    if (obj == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(obj, toAppendTo, pos);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1749","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"c88cfee1-2e9f-11e6-9472-05b46886c196","method":{"position":"org.apache.commons.lang3.ArrayUtils:5943","type":"CtMethodImpl","sourcecode":"public static boolean[] removeAll(final boolean[] array, final int... indices) {\n    if (indices == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((boolean[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"indices"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:727","type":"CtBinaryOperatorImpl","sourcecode":"(((nShorts - 1) * 16) + dstPos) >= 64"},"failures":[8],"tindex":"c88d25f2-2e9f-11e6-9472-03115b1a19e5","method":{"position":"org.apache.commons.lang3.Conversion:1221","type":"CtMethodImpl","sourcecode":"public static short[] longToShortArray(final long src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if ((((dstPos - 1) * 16) + nShorts) >= 64) {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"nShorts","nShorts":"dstPos"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:290","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[9],"tindex":"c88d4d03-2e9f-11e6-9472-2f6221375242","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Number value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double = value.doubleValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:549","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[10,10,11],"tindex":"c88d4d04-2e9f-11e6-9472-a31f39def06a","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:717","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short value) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                {\n                    buffer.append(value);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1083","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"c88d7415-2e9f-11e6-9472-6d19dd3a6abc","method":{"position":"org.apache.commons.lang3.Validate:1081","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void exclusiveBetween(long start, long end, long value) {\n    if ((end <= end) || (value >= start)) {\n        {\n            if ((value <= start) || (value >= end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"end","end":"start","value":"end"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1478","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[12],"tindex":"c88d7416-2e9f-11e6-9472-5ba13384c75f","method":{"position":"org.apache.commons.lang3.ArrayUtils:5444","type":"CtMethodImpl","sourcecode":"public static short[] removeElements(final short[] array, final short... values) {\n    if (array == null) {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final short short : values) {\n                final java.lang.Short java.lang.Short = java.lang.Short.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Short, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Short java.lang.Short = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.shortValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((short[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4805","type":"CtUnaryOperatorImpl","sourcecode":"!repeat"},"failures":[13],"tindex":"c88dc237-2e9f-11e6-9472-8db83221d744","method":{"position":"org.apache.commons.lang3.StringUtils:4684","type":"CtMethodImpl","sourcecode":"private static java.lang.String replaceEach(final java.lang.String text, final java.lang.String[] searchList, final java.lang.String[] replacementList, final boolean repeat, final int timeToLive) {\n    if (timeToLive <= 0) {\n        {\n            if (!repeat) {\n                {\n                    if ((((((text == null) || (text.isEmpty())) || (searchList == null)) || ((searchList.int) == 0)) || (replacementList == null)) || ((replacementList.int) == 0)) {\n                        return text;\n                    } \n                    if (timeToLive < 0) {\n                        throw new java.lang.IllegalStateException((\"Aborting to protect against StackOverflowError - \" + \"output of one loop is the input of another\"));\n                    } \n                    final int int = searchList.int;\n                    final int int = replacementList.int;\n                    if (searchLength != replacementLength) {\n                        throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don't match: \" + searchLength) + \" vs \") + replacementLength));\n                    } \n                    final boolean[] boolean[] = new boolean[searchLength];\n                    int int = -1;\n                    int int = -1;\n                    int int = -1;\n                    for (int int = 0 ; i < searchLength ; i++) {\n                        if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                            continue;\n                        } \n                        tempIndex = text.indexOf(searchList[i]);\n                        if (tempIndex == (-1)) {\n                            noMoreMatchesForReplIndex[i] = true;\n                        } else {\n                            if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                                textIndex = tempIndex;\n                                replaceIndex = i;\n                            } \n                        }\n                    }\n                    if (textIndex == (-1)) {\n                        return text;\n                    } \n                    int int = 0;\n                    int int = 0;\n                    for (int int = 0 ; i < (searchList.int) ; i++) {\n                        if (((searchList[i]) == null) || ((replacementList[i]) == null)) {\n                            continue;\n                        } \n                        final int int = (replacementList[i].length()) - (searchList[i].length());\n                        if (greater > 0) {\n                            increase += 3 * greater;\n                        } \n                    }\n                    increase = java.lang.Math.min(increase, ((text.length()) / 5));\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n                    while (textIndex != (-1)) {\n                        for (int int = start ; i < textIndex ; i++) {\n                            buf.append(text.charAt(i));\n                        }\n                        buf.append(replacementList[replaceIndex]);\n                        start = textIndex + (searchList[replaceIndex].length());\n                        textIndex = -1;\n                        replaceIndex = -1;\n                        tempIndex = -1;\n                        for (int int = 0 ; i < searchLength ; i++) {\n                            if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                                continue;\n                            } \n                            tempIndex = text.indexOf(searchList[i], start);\n                            if (tempIndex == (-1)) {\n                                noMoreMatchesForReplIndex[i] = true;\n                            } else {\n                                if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                                    textIndex = tempIndex;\n                                    replaceIndex = i;\n                                } \n                            }\n                        }\n                    }\n                    final int int = text.length();\n                    for (int int = start ; i < textLength ; i++) {\n                        buf.append(text.charAt(i));\n                    }\n                    final java.lang.String java.lang.String = buf.toString();\n                    if (!repeat) {\n                        return result;\n                    } \n                    return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"repeat":"repeat"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1764","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[14,15,16],"tindex":"c88e1058-2e9f-11e6-9472-895052ccc32d","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index >= 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = ((input.length()) - index) - 1;\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            if ((((input.charAt(index)) == '\\\\') && (remaining > 0)) && (isOctalDigit(input.charAt((index + 1))))) {\n                int int = index + 1;\n                int int = index + 2;\n                int int = index + 3;\n                builder.append(input.charAt(next));\n                if ((remaining > 1) && (isOctalDigit(input.charAt(next2)))) {\n                    builder.append(input.charAt(next2));\n                    if (((remaining > 2) && (isZeroToThree(input.charAt(next)))) && (isOctalDigit(input.charAt(next3)))) {\n                        builder.append(input.charAt(next3));\n                    } \n                } \n                out.write(java.lang.Integer.parseInt(builder.toString(), 8));\n                return 1 + (builder.length());\n            } \n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2065","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[17,18],"tindex":"c88e5e79-2e9f-11e6-9472-736bee653a4f","method":{"position":"org.apache.commons.lang3.math.NumberUtils:936","type":"CtMethodImpl","sourcecode":"public static long max(final long[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            long long = array[0];\n            for (int int = 1 ; j < (array.int) ; j++) {\n                if ((array[j]) > max) {\n                    max = array[j];\n                } \n            }\n            return max;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1364","type":"CtBinaryOperatorImpl","sourcecode":"typeArguments == null"},"failures":[],"tindex":"c88e5e7a-2e9f-11e6-9472-39aad6df7dc5","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1406","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type[] unrollBounds(final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type[] bounds) {\n    if (typeArguments == null) {\n        {\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = bounds;\n            int int = 0;\n            for ( ; i < (result.int) ; i++) {\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, result[i]);\n                if (unrolled == null) {\n                    result = org.apache.commons.lang3.ArrayUtils.remove(result, (i--));\n                } else {\n                    result[i] = unrolled;\n                }\n            }\n            return result;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeArguments":"typeArguments"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:588","type":"CtBinaryOperatorImpl","sourcecode":"lhs == rhs"},"failures":[19,20,21,22],"tindex":"c88e858b-2e9f-11e6-9472-1ba48517a97b","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean lhs, final boolean rhs) {\n    if (rhs == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lhs == rhs) {\n                {\n                    if ((int) != 0) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == rhs) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == false) {\n                        int = -1;\n                    } else {\n                        int = +1;\n                    }\n                    return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:657","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"c88eac9c-2e9f-11e6-9472-f708901a5d40","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1236","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:70","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,2,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"c88ed3ad-2e9f-11e6-9472-e97413a5973c","method":{"position":"org.apache.commons.lang3.time.FormatCache:69","type":"CtMethodImpl","sourcecode":"public F getInstance(final java.lang.String pattern, java.util.TimeZone timeZone, java.util.Locale locale) {\n    if (pattern == null) {\n        {\n            if (pattern == null) {\n                throw new java.lang.NullPointerException(\"pattern must not be null\");\n            } \n            if (timeZone == null) {\n                timeZone = java.util.TimeZone.getDefault();\n            } \n            if (locale == null) {\n                locale = java.util.Locale.getDefault();\n            } \n            final org.apache.commons.lang3.time.FormatCache.MultipartKey org.apache.commons.lang3.time.FormatCache.MultipartKey = new org.apache.commons.lang3.time.FormatCache.MultipartKey(pattern , timeZone , locale);\n            F F = java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, F>.get(key);\n            if (format == null) {\n                format = createInstance(pattern, timeZone, locale);\n                final F F = java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, F>.putIfAbsent(key, format);\n                if (previousValue != null) {\n                    format = previousValue;\n                } \n            } \n            return format;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:403","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[111],"tindex":"c88f21ce-2e9f-11e6-9472-6b7146f740a5","method":{"position":"org.apache.commons.lang3.ArrayUtils:1505","type":"CtMethodImpl","sourcecode":"public static void reverse(final byte[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharRange:69","type":"CtBinaryOperatorImpl","sourcecode":"start > end"},"failures":[112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"tindex":"c88f48df-2e9f-11e6-9472-3d67c78813f6","method":{"position":"org.apache.commons.lang3.CharRange:126","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isNotIn(final char start, final char end) {\n    if (start > start) {\n        {\n            return new org.apache.commons.lang3.CharRange(start , end , true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"start","end":"start"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1609","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[127],"tindex":"c88f6ff0-2e9f-11e6-9472-633a54562d56","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:622","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final byte[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final byte byte : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1745","type":"CtBinaryOperatorImpl","sourcecode":"(c.getEnclosingClass()) != null"},"failures":[],"tindex":"c88f6ff1-2e9f-11e6-9472-d70d67c91ffe","method":{"position":"org.apache.commons.lang3.ClassUtils:1222","type":"CtMethodImpl","sourcecode":"private void walkInterfaces(java.util.Set<java.lang.Class<?>> addTo, java.lang.Class<?> c) {\n    if ((c.getEnclosingClass()) == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((c.getEnclosingClass()) != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (java.lang.Class<?> java.lang.Class<?> : c.getInterfaces()) {\n                        if (!(seenInterfaces.contains(iface))) {\n                            addTo.add(iface);\n                        } \n                        walkInterfaces(addTo, iface);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:823","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[128],"tindex":"c88f9702-2e9f-11e6-9472-bd9242858638","method":{"position":"org.apache.commons.lang3.math.Fraction:712","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.math.Fraction add(final org.apache.commons.lang3.math.Fraction fraction) {\n    if (fraction == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return addSub(fraction, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:831","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof byte[]"},"failures":[129],"tindex":"c88f9703-2e9f-11e6-9472-b9db8c536c4a","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:376","type":"CtMethodImpl","sourcecode":"public void appendStart(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object instanceof byte[]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object != null) {\n                appendClassName(buffer, object);\n                appendIdentityHashCode(buffer, object);\n                appendContentStart(buffer);\n                if (boolean) {\n                    appendFieldSeparator(buffer);\n                } \n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:398","type":"CtBinaryOperatorImpl","sourcecode":"classNames == null"},"failures":[130],"tindex":"c88fbe14-2e9f-11e6-9472-3389c2a6d512","method":{"position":"org.apache.commons.lang3.ClassUtils:397","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Class<?>> convertClassNamesToClasses(final java.util.List<java.lang.String> classNames) {\n    if (classNames == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (classNames == null) {\n                {\n                    if (classNames == null) {\n                        return null;\n                    } \n                    final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>(classNames.size());\n                    for (final java.lang.String java.lang.String : classNames) {\n                        try {\n                            classes.add(java.lang.Class.forName(className));\n                        } catch (final java.lang.Exception ex) {\n                            classes.add(null);\n                        }\n                    }\n                    return classes;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classNames":"classNames"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:281","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[],"tindex":"c88fe525-2e9f-11e6-9472-9faf04f5d108","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:957","type":"CtMethodImpl","sourcecode":"public static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> determineTypeArguments(final java.lang.Class<?> cls, final java.lang.reflect.ParameterizedType superType) {\n    if (cls == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(cls, \"cls is null\");\n            org.apache.commons.lang3.Validate.notNull(superType, \"superType is null\");\n            final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(superType);\n            if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls, superClass))) {\n                return null;\n            } \n            if (cls.equals(superClass)) {\n                return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(superType, superClass, null);\n            } \n            final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(cls, superClass);\n            if (midType instanceof java.lang.Class<?>) {\n                return org.apache.commons.lang3.reflect.TypeUtils.determineTypeArguments(((java.lang.Class<?>)(midType)), superType);\n            } \n            final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(midType));\n            final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(midParameterizedType);\n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.determineTypeArguments(midClass, superType);\n            org.apache.commons.lang3.reflect.TypeUtils.mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\n            return typeVarAssigns;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2057","type":"CtBinaryOperatorImpl","sourcecode":"pos > 0"},"failures":[131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186],"tindex":"c8900c36-2e9f-11e6-9472-f964bc76ce62","method":{"position":"org.apache.commons.lang3.text.StrMatcher:403","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int isMatch(final char[] buffer, final int pos, final int bufferStart, final int bufferEnd) {\n    if (bufferEnd > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"bufferEnd"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.text.translate.CharSequenceTranslator:79","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[187,15,188,189,190,191,192,193,194,195,196,197,198,199,16,200,201,202,203,204,205,206,207,208,209,210,211],"tindex":"c8903347-2e9f-11e6-9472-0b92881a721b","method":{"position":"org.apache.commons.lang3.text.translate.AggregateTranslator:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (input == null) {\n                {\n                    for (final org.apache.commons.lang3.text.translate.CharSequenceTranslator org.apache.commons.lang3.text.translate.CharSequenceTranslator : org.apache.commons.lang3.text.translate.CharSequenceTranslator[]) {\n                        final int int = translator.translate(input, index, out);\n                        if (consumed != 0) {\n                            return consumed;\n                        } \n                    }\n                    return 0;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1260","type":"CtBinaryOperatorImpl","sourcecode":"(((nShorts - 1) * 16) + srcPos) >= 32"},"failures":[212],"tindex":"c8903348-2e9f-11e6-9472-131974284b95","method":{"position":"org.apache.commons.lang3.Conversion:1255","type":"CtMethodImpl","sourcecode":"public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if ((((nShorts - 1) * 16) + srcPos) >= 32) {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 32\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"srcPos","nShorts":"nShorts"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[],"tindex":"c8905a59-2e9f-11e6-9472-ad4aaa8d18cf","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:404","type":"CtMethodImpl","sourcecode":"private java.lang.String insertFormats(final java.lang.String pattern, final java.util.ArrayList<java.lang.String> customPatterns) {\n    if (pattern == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(containsElements(customPatterns))) {\n                return pattern;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((pattern.length()) * 2));\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            int int = -1;\n            int int = 0;\n            while ((pos.getIndex()) < (pattern.length())) {\n                final char char = pattern.charAt(pos.getIndex());\n                switch (c) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        appendQuotedString(pattern, pos, sb, false);\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth++;\n                        sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(readArgumentIndex(pattern, next(pos)));\n                        if (depth == 1) {\n                            fe++;\n                            final java.lang.String java.lang.String = customPatterns.get(fe);\n                            if (customPattern != null) {\n                                sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(customPattern);\n                            } \n                        } \n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth--;\n                    default :\n                        sb.append(c);\n                        next(pos);\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:713","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"c890816a-2e9f-11e6-9472-4f5a04a6b599","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:230","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceSystemProperties(final java.lang.Object source) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.text.StrSubstitutor(org.apache.commons.lang3.text.StrLookup.systemPropertiesLookup()).replace(source);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:549","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[213,213,214,215,216,216,217,218,219,1,220,221,222,223,223,224,225,226,227,228,229,230,231,232,233,234,235],"tindex":"c890a87b-2e9f-11e6-9472-d746fb37bae6","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1175","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final byte[] array) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1031","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[236],"tindex":"c890cf8c-2e9f-11e6-9472-9529f21e13d7","method":{"position":"org.apache.commons.lang3.ArrayUtils:3137","type":"CtMethodImpl","sourcecode":"public static java.lang.Integer[] toObject(final int[] array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Integer[];\n            } \n            final java.lang.Integer[] java.lang.Integer[] = new java.lang.Integer[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Integer.valueOf(array[i]);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:829","type":"CtBinaryOperatorImpl","sourcecode":"object instanceof char[]"},"failures":[],"tindex":"c890cf8d-2e9f-11e6-9472-f398ddc0b55a","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:237","type":"CtMethodImpl","sourcecode":"public static int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final java.lang.Object object) {\n    if (object instanceof char[]) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:797","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[208],"tindex":"c890f69e-2e9f-11e6-9472-ab0fdb40b8bb","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:424","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.ParameterizedType toParameterizedType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toParameterizedType == null) {\n                return false;\n            } \n            if (toParameterizedType.equals(type)) {\n                return true;\n            } \n            final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(toParameterizedType);\n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(type, toClass, null);\n            if (fromTypeVarAssigns == null) {\n                return false;\n            } \n            if (fromTypeVarAssigns.isEmpty()) {\n                return true;\n            } \n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(toParameterizedType, toClass, typeVarAssigns);\n            for (final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> : toTypeVarAssigns.keySet()) {\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(var, toTypeVarAssigns);\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(var, fromTypeVarAssigns);\n                if (((fromTypeArg != null) && (!(toTypeArg.equals(fromTypeArg)))) && (!((toTypeArg instanceof java.lang.reflect.WildcardType) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(fromTypeArg, toTypeArg, typeVarAssigns))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2065","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"tindex":"c8911daf-2e9f-11e6-9472-19224456c2e8","method":{"position":"org.apache.commons.lang3.ArrayUtils:1401","type":"CtMethodImpl","sourcecode":"public static int getLength(final java.lang.Object array) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return 0;\n            } \n            return java.lang.reflect.Array.getLength(array);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[256,257,258,259],"tindex":"c8911db0-2e9f-11e6-9472-bbdef2990b4b","method":{"position":"org.apache.commons.lang3.ArrayUtils:2869","type":"CtMethodImpl","sourcecode":"public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:236","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[260],"tindex":"c89144c1-2e9f-11e6-9472-ed9a64ef8591","method":{"position":"org.apache.commons.lang3.ClassUtils:802","type":"CtMethodImpl","sourcecode":"public static boolean isInnerClass(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (cls != null) && ((cls.getEnclosingClass()) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2766","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[261,262,263,264],"tindex":"c89144c2-2e9f-11e6-9472-7f048eac7ca0","method":{"position":"org.apache.commons.lang3.ArrayUtils:2765","type":"CtMethodImpl","sourcecode":"public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3464","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[265,266],"tindex":"c89144c3-2e9f-11e6-9472-130fa33cc875","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:656","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final char[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                int = (int) * (int);\n            } else {\n                for (final char char : array) {\n                    append(element);\n                }\n            }\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7364","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[267,268,269],"tindex":"c8916bd4-2e9f-11e6-9472-750064ac20f8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:509","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:661","type":"CtBinaryOperatorImpl","sourcecode":"falseString == null"},"failures":[],"tindex":"c8916bd5-2e9f-11e6-9472-31439f006985","method":{"position":"org.apache.commons.lang3.BooleanUtils:881","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final boolean bool, final java.lang.String trueString, final java.lang.String falseString) {\n    if (trueString == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return bool ? trueString : falseString;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"falseString":"trueString"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5125","type":"CtBinaryOperatorImpl","sourcecode":"repeat <= 0"},"failures":[],"tindex":"c8916bd6-2e9f-11e6-9472-49495109f9cc","method":{"position":"org.apache.commons.lang3.StringUtils:4684","type":"CtMethodImpl","sourcecode":"private static java.lang.String replaceEach(final java.lang.String text, final java.lang.String[] searchList, final java.lang.String[] replacementList, final boolean repeat, final int timeToLive) {\n    if (timeToLive <= 0) {\n        {\n            if (!repeat) {\n                {\n                    if ((((((text == null) || (text.isEmpty())) || (searchList == null)) || ((searchList.int) == 0)) || (replacementList == null)) || ((replacementList.int) == 0)) {\n                        return text;\n                    } \n                    if (timeToLive < 0) {\n                        throw new java.lang.IllegalStateException((\"Aborting to protect against StackOverflowError - \" + \"output of one loop is the input of another\"));\n                    } \n                    final int int = searchList.int;\n                    final int int = replacementList.int;\n                    if (searchLength != replacementLength) {\n                        throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don't match: \" + searchLength) + \" vs \") + replacementLength));\n                    } \n                    final boolean[] boolean[] = new boolean[searchLength];\n                    int int = -1;\n                    int int = -1;\n                    int int = -1;\n                    for (int int = 0 ; i < searchLength ; i++) {\n                        if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                            continue;\n                        } \n                        tempIndex = text.indexOf(searchList[i]);\n                        if (tempIndex == (-1)) {\n                            noMoreMatchesForReplIndex[i] = true;\n                        } else {\n                            if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                                textIndex = tempIndex;\n                                replaceIndex = i;\n                            } \n                        }\n                    }\n                    if (textIndex == (-1)) {\n                        return text;\n                    } \n                    int int = 0;\n                    int int = 0;\n                    for (int int = 0 ; i < (searchList.int) ; i++) {\n                        if (((searchList[i]) == null) || ((replacementList[i]) == null)) {\n                            continue;\n                        } \n                        final int int = (replacementList[i].length()) - (searchList[i].length());\n                        if (greater > 0) {\n                            increase += 3 * greater;\n                        } \n                    }\n                    increase = java.lang.Math.min(increase, ((text.length()) / 5));\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n                    while (textIndex != (-1)) {\n                        for (int int = start ; i < textIndex ; i++) {\n                            buf.append(text.charAt(i));\n                        }\n                        buf.append(replacementList[replaceIndex]);\n                        start = textIndex + (searchList[replaceIndex].length());\n                        textIndex = -1;\n                        replaceIndex = -1;\n                        tempIndex = -1;\n                        for (int int = 0 ; i < searchLength ; i++) {\n                            if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                                continue;\n                            } \n                            tempIndex = text.indexOf(searchList[i], start);\n                            if (tempIndex == (-1)) {\n                                noMoreMatchesForReplIndex[i] = true;\n                            } else {\n                                if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                                    textIndex = tempIndex;\n                                    replaceIndex = i;\n                                } \n                            }\n                        }\n                    }\n                    final int int = text.length();\n                    for (int int = start ; i < textLength ; i++) {\n                        buf.append(text.charAt(i));\n                    }\n                    final java.lang.String java.lang.String = buf.toString();\n                    if (!repeat) {\n                        return result;\n                    } \n                    return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"repeat":"timeToLive"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[270,271,272,273,274,275,276,277,278,279,280,2,89,92,93,100,101,102,103,104,105,106,281],"tindex":"c89192e7-2e9f-11e6-9472-311398e7b609","method":{"position":"org.apache.commons.lang3.time.FastDateParser:781","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value == null) {\n        {\n            java.util.TimeZone java.util.TimeZone;\n            if (((value.charAt(0)) == '+') || ((value.charAt(0)) == '-')) {\n                tz = java.util.TimeZone.getTimeZone((\"GMT\" + value));\n            } else if (value.startsWith(\"GMT\")) {\n                tz = java.util.TimeZone.getTimeZone(value);\n            } else {\n                tz = java.util.SortedMap<java.lang.String, java.util.TimeZone>.get(value);\n                if (tz == null) {\n                    throw new java.lang.IllegalArgumentException((value + \" is not a supported timezone name\"));\n                } \n            }\n            cal.setTimeZone(tz);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[282],"tindex":"c891b9f8-2e9f-11e6-9472-1d4eee18c899","method":{"position":"org.apache.commons.lang3.Validate:1060","type":"CtMethodImpl","sourcecode":"public static <T>void exclusiveBetween(final T start, final T end, final java.lang.Comparable<T> value, final java.lang.String message, final java.lang.Object... values) {\n    if (message == null) {\n        {\n            if (((value.compareTo(start)) <= 0) || ((value.compareTo(end)) >= 0)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"message"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[],"tindex":"c891b9f9-2e9f-11e6-9472-db12f6a5ff63","method":{"position":"org.apache.commons.lang3.text.CompositeFormat:112","type":"CtMethodImpl","sourcecode":"public java.lang.String reformat(final java.lang.String input) throws java.text.ParseException {\n    if (input != null) {\n        {\n            return format(parseObject(input));\n        }\n    } else {\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:198","type":"CtBinaryOperatorImpl","sourcecode":"(locale.getVariant().length()) > 0"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,2,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"c891e10a-2e9f-11e6-9472-e304f367dd38","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected org.apache.commons.lang3.time.FastDateFormat createInstance(final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if ((locale.getVariant().length()) > 0) {\n        {\n            return new org.apache.commons.lang3.time.FastDateFormat(pattern , timeZone , locale);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:129","type":"CtBinaryOperatorImpl","sourcecode":"baseMessage != null"},"failures":[283,284,285,286,287,288,289],"tindex":"c891e10b-2e9f-11e6-9472-259b491187f9","method":{"position":"org.apache.commons.lang3.exception.ContextedException:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String getFormattedExceptionMessage(final java.lang.String baseMessage) {\n    if (baseMessage != null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ExceptionContext.getFormattedExceptionMessage(baseMessage);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"baseMessage":"baseMessage"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:591","type":"CtBinaryOperatorImpl","sourcecode":"lhs == false"},"failures":[],"tindex":"c891e10c-2e9f-11e6-9472-69f1eb3f1c48","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean lhs, final boolean rhs) {\n    if (rhs == false) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lhs == rhs) {\n                {\n                    if ((int) != 0) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == rhs) {\n                        return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                    } \n                    if (lhs == false) {\n                        int = -1;\n                    } else {\n                        int = +1;\n                    }\n                    return org.apache.commons.lang3.builder.CompareToBuilder.this;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:692","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable<?>"},"failures":[],"tindex":"c892081d-2e9f-11e6-9472-0bde05628892","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:311","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.Type toType) {\n    if (toType instanceof java.lang.reflect.TypeVariable<?>) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, toType, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toType"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl","sourcecode":"fieldNameValueSeparator == null"},"failures":[],"tindex":"c892081e-2e9f-11e6-9472-eff61cbd20bb","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:328","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setFieldNameValueSeparator(final java.lang.String fieldNameValueSeparator) {\n    if (fieldNameValueSeparator == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setFieldNameValueSeparator(fieldNameValueSeparator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"fieldNameValueSeparator"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:759","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"c892081f-2e9f-11e6-9472-332ea3c911a0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:717","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short value) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                {\n                    buffer.append(value);\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1492","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[290],"tindex":"c8922f30-2e9f-11e6-9472-8954098fb5f3","method":{"position":"org.apache.commons.lang3.ArrayUtils:4836","type":"CtMethodImpl","sourcecode":"public static char[] removeElement(final char[] array, final char element) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5080","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[291],"tindex":"c8922f31-2e9f-11e6-9472-a9ba4468736e","method":{"position":"org.apache.commons.lang3.StringUtils:554","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripToEmpty(final java.lang.String str) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return str == null ? org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String : org.apache.commons.lang3.StringUtils.strip(str, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2068","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[292],"tindex":"c8922f32-2e9f-11e6-9472-1968d0c56d2f","method":{"position":"org.apache.commons.lang3.text.StrBuilder:744","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final char[] chars, final int startIndex, final int length) {\n    if (length < 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chars == null) {\n                return appendNull();\n            } \n            if ((startIndex < 0) || (startIndex > (chars.int))) {\n                throw new java.lang.StringIndexOutOfBoundsException((\"Invalid startIndex: \" + length));\n            } \n            if ((length < 0) || ((startIndex + length) > (chars.int))) {\n                throw new java.lang.StringIndexOutOfBoundsException((\"Invalid length: \" + length));\n            } \n            if (length > 0) {\n                final int int = length();\n                ensureCapacity((len + length));\n                java.lang.System.arraycopy(chars, startIndex, char[], len, length);\n                int += length;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"length"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:656","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[293],"tindex":"c8925643-2e9f-11e6-9472-ed04afe5c119","method":{"position":"org.apache.commons.lang3.StringUtils:5298","type":"CtMethodImpl","sourcecode":"public static java.lang.String rightPad(final java.lang.String str, final int size, java.lang.String padStr) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {\n                padStr = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = padStr.length();\n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr.charAt(0));\n            } \n            if (pads == padLen) {\n                return str.concat(padStr);\n            } else if (pads < padLen) {\n                return str.concat(padStr.substring(0, pads));\n            } else {\n                final char[] char[] = new char[pads];\n                final char[] char[] = padStr.toCharArray();\n                for (int int = 0 ; i < pads ; i++) {\n                    padding[i] = padChars[(i % padLen)];\n                }\n                return str.concat(new java.lang.String(padding));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:414","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"c8925644-2e9f-11e6-9472-f1e968d2acc1","method":{"position":"org.apache.commons.lang3.time.FastDateParser:298","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object parseObject(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return parse(source, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:293","type":"CtBinaryOperatorImpl","sourcecode":"languageCode == null"},"failures":[294],"tindex":"c8925645-2e9f-11e6-9472-ffb9e81015ac","method":{"position":"org.apache.commons.lang3.LocaleUtils:292","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.util.Locale> countriesByLanguage(final java.lang.String languageCode) {\n    if (languageCode == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (languageCode == null) {\n                return java.util.Collections.emptyList();\n            } \n            java.util.List<java.util.Locale> java.util.List<java.util.Locale> = org.apache.commons.lang3.LocaleUtils.org.apache.commons.lang3.LocaleUtils.java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<java.util.Locale>>.get(languageCode);\n            if (countries == null) {\n                countries = new java.util.ArrayList<java.util.Locale>();\n                final java.util.List<java.util.Locale> java.util.List<java.util.Locale> = org.apache.commons.lang3.LocaleUtils.availableLocaleList();\n                for (int int = 0 ; i < (locales.size()) ; i++) {\n                    final java.util.Locale java.util.Locale = locales.get(i);\n                    if (((languageCode.equals(locale.getLanguage())) && ((locale.getCountry().length()) != 0)) && (locale.getVariant().isEmpty())) {\n                        countries.add(locale);\n                    } \n                }\n                countries = java.util.Collections.unmodifiableList(countries);\n                org.apache.commons.lang3.LocaleUtils.org.apache.commons.lang3.LocaleUtils.java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<java.util.Locale>>.putIfAbsent(languageCode, countries);\n                countries = org.apache.commons.lang3.LocaleUtils.org.apache.commons.lang3.LocaleUtils.java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<java.util.Locale>>.get(languageCode);\n            } \n            return countries;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"languageCode":"languageCode"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6168","type":"CtBinaryOperatorImpl","sourcecode":"(cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))"},"failures":[295],"tindex":"c8927d56-2e9f-11e6-9472-3b8df506652b","method":{"position":"org.apache.commons.lang3.StringUtils:5881","type":"CtMethodImpl","sourcecode":"public static boolean isAlphaSpace(final java.lang.CharSequence cs) {\n    if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if (((java.lang.Character.isLetter(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2228","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[],"tindex":"c8927d57-2e9f-11e6-9472-3b437edea58b","method":{"position":"org.apache.commons.lang3.text.translate.AggregateTranslator:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index < 0) {\n        throw new java.io.IOException();\n    } else {\n        {\n            if (input == null) {\n                {\n                    for (final org.apache.commons.lang3.text.translate.CharSequenceTranslator org.apache.commons.lang3.text.translate.CharSequenceTranslator : org.apache.commons.lang3.text.translate.CharSequenceTranslator[]) {\n                        final int int = translator.translate(input, index, out);\n                        if (consumed != 0) {\n                            return consumed;\n                        } \n                    }\n                    return 0;\n                }\n            } else {\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:290","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[296],"tindex":"c8927d58-2e9f-11e6-9472-3107a8d8d889","method":{"position":"org.apache.commons.lang3.mutable.MutableFloat:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Number value) {\n    if (value == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableFloat.this.float = value.floatValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:173","type":"CtVariableReadImpl","sourcecode":"forceAccess"},"failures":[297,298,299,300,301,302,303,304,305,306,307],"tindex":"c892a469-2e9f-11e6-9472-5b5509c1d3ce","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:166","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getDeclaredField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if (forceAccess) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            try {\n                final java.lang.reflect.Field java.lang.reflect.Field = cls.getDeclaredField(fieldName);\n                if (!(org.apache.commons.lang3.reflect.MemberUtils.isAccessible(field))) {\n                    if (forceAccess) {\n                        field.setAccessible(true);\n                    } else {\n                        return null;\n                    }\n                } \n                return field;\n            } catch (final java.lang.NoSuchFieldException e) {\n            }\n            return null;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"forceAccess":"forceAccess"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5780","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isTitleCase(ch)"},"failures":[113,117,119,308,123,124,309],"tindex":"c892a46a-2e9f-11e6-9472-816e417be9a5","method":{"position":"org.apache.commons.lang3.CharRange:100","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.CharRange isNot(final char ch) {\n    if (java.lang.Character.isTitleCase(ch)) {\n        {\n            return new org.apache.commons.lang3.CharRange(ch , ch , true);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2413","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[310],"tindex":"c892a46b-2e9f-11e6-9472-65fb58ce45af","method":{"position":"org.apache.commons.lang3.StringUtils:2692","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByWholeSeparator(final java.lang.String str, final java.lang.String separator) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(separator)) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), false);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"separator"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:863","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(seq)"},"failures":[311],"tindex":"c892cb7c-2e9f-11e6-9472-ebcce9a630ea","method":{"position":"org.apache.commons.lang3.StringUtils:1498","type":"CtMethodImpl","sourcecode":"public static boolean containsWhitespace(final java.lang.CharSequence seq) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return false;\n            } \n            final int int = seq.length();\n            for (int int = 0 ; i < strLen ; i++) {\n                if (java.lang.Character.isWhitespace(seq.charAt(i))) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:593","type":"CtBinaryOperatorImpl","sourcecode":"v > 0"},"failures":[],"tindex":"c892cb7d-2e9f-11e6-9472-3305ae202308","method":{"position":"org.apache.commons.lang3.ObjectUtils:877","type":"CtMethodImpl","sourcecode":"public static int CONST(final int v) {\n    if (v > 0) {\n        {\n            return v;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"v":"v"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:222","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[312],"tindex":"c892cb7e-2e9f-11e6-9472-bf41189e7109","method":{"position":"org.apache.commons.lang3.StringUtils:6219","type":"CtMethodImpl","sourcecode":"public static java.lang.String defaultString(final java.lang.String str, final java.lang.String defaultStr) {\n    if (defaultStr == null) {\n        {\n            return str == null ? defaultStr : str;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"defaultStr"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:255","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[313,313,314,314,315,316,317,318,319,320,321,322,323,323,324,325,216,217,218,219,1,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235],"tindex":"c892cb7f-2e9f-11e6-9472-b7dab4a36421","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1114","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short[] array) {\n    if (fieldName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1127","type":"CtBinaryOperatorImpl","sourcecode":"(value <= start) || (value >= end)"},"failures":[],"tindex":"c892f290-2e9f-11e6-9472-1b8a1b9b33c6","method":{"position":"org.apache.commons.lang3.Validate:1010","type":"CtMethodImpl","sourcecode":"public static void inclusiveBetween(double start, double end, double value, java.lang.String message) {\n    if ((value <= value) || (value >= start)) {\n        {\n            if ((value < start) || (value > end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message));\n            } \n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"value","end":"start","value":"value"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1692","type":"CtBinaryOperatorImpl","sourcecode":"(c.getEnclosingClass()) == null"},"failures":[],"tindex":"c892f291-2e9f-11e6-9472-61c90b9792be","method":{"position":"org.apache.commons.lang3.ClassUtils:1222","type":"CtMethodImpl","sourcecode":"private void walkInterfaces(java.util.Set<java.lang.Class<?>> addTo, java.lang.Class<?> c) {\n    if ((c.getEnclosingClass()) == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((c.getEnclosingClass()) != null) {\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (java.lang.Class<?> java.lang.Class<?> : c.getInterfaces()) {\n                        if (!(seenInterfaces.contains(iface))) {\n                            addTo.add(iface);\n                        } \n                        walkInterfaces(addTo, iface);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1189","type":"CtBinaryOperatorImpl","sourcecode":"0 == nInts"},"failures":[326],"tindex":"c892f292-2e9f-11e6-9472-3db02334827a","method":{"position":"org.apache.commons.lang3.Conversion:1188","type":"CtMethodImpl","sourcecode":"public static int[] longToIntArray(final long src, final int srcPos, final int[] dst, final int dstPos, final int nInts) {\n    if (0 == nInts) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nInts) {\n                return dst;\n            } \n            if ((((nInts - 1) * 32) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nInts-1)*32+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nInts ; i++) {\n                shift = (i * 32) + srcPos;\n                dst[(dstPos + i)] = ((int)(-1 & (src >> shift)));\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nInts":"nInts"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:135","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[327,328,329,330,331,332,333,334,335],"tindex":"c89319a3-2e9f-11e6-9472-61a8a0b4812b","method":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:342","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.concurrent.BackgroundInitializer<?> checkName(final java.lang.String name) {\n    if (name == null) {\n        {\n            final org.apache.commons.lang3.concurrent.BackgroundInitializer<?> org.apache.commons.lang3.concurrent.BackgroundInitializer<?> = java.util.Map<java.lang.String, org.apache.commons.lang3.concurrent.BackgroundInitializer<?>>.get(name);\n            if (init == null) {\n                throw new java.util.NoSuchElementException((\"No child initializer with name \" + name));\n            } \n            return init;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6085","type":"CtBinaryOperatorImpl","sourcecode":"count > 0"},"failures":[336,337],"tindex":"c89319a4-2e9f-11e6-9472-7571c83d5573","method":{"position":"org.apache.commons.lang3.RandomStringUtils:82","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomAscii(final int count) {\n    if (count > 0) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, 32, 127, false, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1491","type":"CtBinaryOperatorImpl","sourcecode":"(raw.getEnclosingClass()) == null"},"failures":[],"tindex":"c89319a5-2e9f-11e6-9472-712020a3d1ce","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1518","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(final java.lang.reflect.Type owner, final java.lang.Class<?> raw, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArgMappings) {\n    if ((raw.getEnclosingClass()) == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            org.apache.commons.lang3.Validate.notNull(typeArgMappings, \"typeArgMappings is null\");\n            return org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(owner, raw, org.apache.commons.lang3.reflect.TypeUtils.extractTypeArgumentsFrom(typeArgMappings, raw.getTypeParameters()));\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1040","type":"CtBinaryOperatorImpl","sourcecode":"suffixMatcher == null"},"failures":[338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376],"tindex":"c89340b6-2e9f-11e6-9472-69b2226ca969","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1039","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setVariableSuffixMatcher(final org.apache.commons.lang3.text.StrMatcher suffixMatcher) {\n    if (suffixMatcher == null) {\n        {\n            if (suffixMatcher == null) {\n                throw new java.lang.IllegalArgumentException(\"Variable suffix matcher must not be null!\");\n            } \n            org.apache.commons.lang3.text.StrSubstitutor.this.org.apache.commons.lang3.text.StrMatcher = suffixMatcher;\n            return org.apache.commons.lang3.text.StrSubstitutor.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"suffixMatcher":"suffixMatcher"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:501","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof int[]"},"failures":[377],"tindex":"c89340b7-2e9f-11e6-9472-5593fc990d94","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (value instanceof int[]) {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    } else {\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1272","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[208,378],"tindex":"c89340b8-2e9f-11e6-9472-2dbeeca464e8","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:588","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.WildcardType toWildcardType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toWildcardType == null) {\n                return false;\n            } \n            if (toWildcardType.equals(type)) {\n                return true;\n            } \n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(toWildcardType);\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(toWildcardType);\n            if (type instanceof java.lang.reflect.WildcardType) {\n                final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType);\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType);\n                for (java.lang.reflect.Type java.lang.reflect.Type : toUpperBounds) {\n                    toBound = org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns);\n                    for (final java.lang.reflect.Type java.lang.reflect.Type : upperBounds) {\n                        if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toBound, typeVarAssigns))) {\n                            return false;\n                        } \n                    }\n                }\n                for (java.lang.reflect.Type java.lang.reflect.Type : toLowerBounds) {\n                    toBound = org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns);\n                    for (final java.lang.reflect.Type java.lang.reflect.Type : lowerBounds) {\n                        if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(toBound, bound, typeVarAssigns))) {\n                            return false;\n                        } \n                    }\n                }\n                return true;\n            } \n            for (final java.lang.reflect.Type java.lang.reflect.Type : toUpperBounds) {\n                if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns))) {\n                    return false;\n                } \n            }\n            for (final java.lang.reflect.Type java.lang.reflect.Type : toLowerBounds) {\n                if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomUtils:89","type":"CtBinaryOperatorImpl","sourcecode":"startInclusive == endExclusive"},"failures":[379,380,381,382,383],"tindex":"c89367c9-2e9f-11e6-9472-1b1695e698f6","method":{"position":"org.apache.commons.lang3.RandomUtils:84","type":"CtMethodImpl","sourcecode":"public static int nextInt(int startInclusive, int endExclusive) {\n    if (endExclusive == endExclusive) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((endExclusive >= startInclusive), \"Start value must be smaller or equal to end value.\");\n            org.apache.commons.lang3.Validate.isTrue((startInclusive >= 0), \"Both range values must be non-negative.\");\n            if (startInclusive == endExclusive) {\n                return startInclusive;\n            } \n            return startInclusive + (org.apache.commons.lang3.RandomUtils.org.apache.commons.lang3.RandomUtils.java.util.Random.nextInt((endExclusive - startInclusive)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startInclusive":"endExclusive","endExclusive":"endExclusive"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1499","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[384],"tindex":"c89367ca-2e9f-11e6-9472-9d8924a8051f","method":{"position":"org.apache.commons.lang3.StringUtils:497","type":"CtMethodImpl","sourcecode":"public static java.lang.String strip(final java.lang.String str) {\n    if (str != null) {\n        {\n            return org.apache.commons.lang3.StringUtils.strip(str, null);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:317","type":"CtBinaryOperatorImpl","sourcecode":"object == null"},"failures":[385],"tindex":"c89367cb-2e9f-11e6-9472-e90e996fc8c3","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:164","type":"CtMethodImpl","sourcecode":"public static java.lang.String reflectionToString(final java.lang.Object object, final org.apache.commons.lang3.builder.ToStringStyle style) {\n    if (object == null) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:282","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[386],"tindex":"c8938edc-2e9f-11e6-9472-e13dca7ab6d6","method":{"position":"org.apache.commons.lang3.time.DateUtils:883","type":"CtMethodImpl","sourcecode":"public static java.util.Date ceiling(final java.util.Date date, final int field) {\n    if (date == null) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(date);\n            org.apache.commons.lang3.time.DateUtils.modify(gval, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return gval.getTime();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1749","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[387],"tindex":"c8938edd-2e9f-11e6-9472-876b187bbacd","method":{"position":"org.apache.commons.lang3.ArrayUtils:4559","type":"CtMethodImpl","sourcecode":"private static java.lang.Object add(final java.lang.Object array, final int index, final java.lang.Object element, final java.lang.Class<?> clss) {\n    if (array == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                if (index != 0) {\n                    throw new java.lang.IndexOutOfBoundsException(((\"Index: \" + index) + \", Length: 0\"));\n                } \n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, 1);\n                java.lang.reflect.Array.set(joinedArray, 0, element);\n                return joinedArray;\n            } \n            final int int = java.lang.reflect.Array.getLength(array);\n            if ((index > length) || (index < 0)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Length: \") + length));\n            } \n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, (length + 1));\n            java.lang.System.arraycopy(array, 0, result, 0, index);\n            java.lang.reflect.Array.set(result, index, element);\n            if (index < length) {\n                java.lang.System.arraycopy(array, index, result, (index + 1), (length - index));\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.EnumUtils:91","type":"CtBinaryOperatorImpl","sourcecode":"enumName == null"},"failures":[388],"tindex":"c8938ede-2e9f-11e6-9472-af14923b0927","method":{"position":"org.apache.commons.lang3.EnumUtils:113","type":"CtMethodImpl","sourcecode":"public static <E extends java.lang.Enum<E>>E getEnum(final java.lang.Class<E> enumClass, final java.lang.String enumName) {\n    if (enumName == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (enumName == null) {\n                return null;\n            } \n            try {\n                return java.lang.Enum.valueOf(enumClass, enumName);\n            } catch (final java.lang.IllegalArgumentException ex) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"enumName":"enumName"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[],"tindex":"c8938edf-2e9f-11e6-9472-3da2615a269b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1481","type":"CtMethodImpl","sourcecode":"protected void appendContentStart(final java.lang.StringBuffer buffer) {\n    if (buffer == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.reflect.InvocationTargetException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:360","type":"CtInvocationImpl","sourcecode":"java.lang.reflect.Modifier.isPublic(cls.getModifiers())"},"failures":[],"tindex":"c893b5f0-2e9f-11e6-9472-a5849a161594","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:253","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (java.lang.reflect.Modifier.isPublic(cls.getModifiers())) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeStaticMethod(cls, methodName, args, parameterTypes);\n        }\n    } else {\n        throw new java.lang.reflect.InvocationTargetException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:206","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[389,390],"tindex":"c893b5f1-2e9f-11e6-9472-f909926a2511","method":{"position":"org.apache.commons.lang3.StringUtils:1371","type":"CtMethodImpl","sourcecode":"public static int lastIndexOfIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, int startPos) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str == null) || (searchStr == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if (startPos > ((str.length()) - (searchStr.length()))) {\n                startPos = (str.length()) - (searchStr.length());\n            } \n            if (startPos < 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((searchStr.length()) == 0) {\n                return startPos;\n            } \n            for (int int = startPos ; i >= 0 ; i--) {\n                if (org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1494","type":"CtBinaryOperatorImpl","sourcecode":"owner == null"},"failures":[391],"tindex":"c893b5f2-2e9f-11e6-9472-e9f6865fdf65","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1487","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(final java.lang.reflect.Type owner, final java.lang.Class<?> raw, final java.lang.reflect.Type... typeArguments) {\n    if (owner == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            final java.lang.reflect.Type java.lang.reflect.Type;\n            if ((raw.getEnclosingClass()) == null) {\n                org.apache.commons.lang3.Validate.isTrue((owner == null), \"no owner allowed for top-level %s\", raw);\n                useOwner = null;\n            } else if (owner == null) {\n                useOwner = raw.getEnclosingClass();\n            } else {\n                org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(owner, raw.getEnclosingClass()), \"%s is invalid owner type for parameterized %s\", owner, raw);\n                useOwner = owner;\n            }\n            org.apache.commons.lang3.Validate.noNullElements(typeArguments, \"null type argument at index %s\");\n            org.apache.commons.lang3.Validate.isTrue(((raw.getTypeParameters().int) == (typeArguments.int)), \"invalid number of type parameters specified: expected %s, got %s\", raw.getTypeParameters().int, typeArguments.int);\n            return new org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl(raw , useOwner , typeArguments);\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"owner":"owner"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:998","type":"CtBinaryOperatorImpl","sourcecode":"startIndexInclusive < 0"},"failures":[392,393],"tindex":"c893dd03-2e9f-11e6-9472-115d0a1c1b95","method":{"position":"org.apache.commons.lang3.ArrayUtils:1853","type":"CtMethodImpl","sourcecode":"public static void reverse(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive < 0) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            short short;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"startIndexInclusive"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:708","type":"CtBinaryOperatorImpl","sourcecode":"(lhs == null) || (rhs == null)"},"failures":[394,395,396],"tindex":"c893dd04-2e9f-11e6-9472-79dfddee8acf","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:727","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final int[] lhs, final int[] rhs) {\n    if ((rhs == null) || (lhs == null)) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:557","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[397,398],"tindex":"c8940415-2e9f-11e6-9472-c992e3272f3e","method":{"position":"org.apache.commons.lang3.BooleanUtils:656","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final java.lang.String str, final java.lang.String trueString, final java.lang.String falseString, final java.lang.String nullString) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                if (trueString == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (falseString == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (nullString == null) {\n                    return null;\n                } \n            } else if (str.equals(trueString)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (str.equals(falseString)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (str.equals(nullString)) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException(\"The String did not match any specified value\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4533","type":"CtBinaryOperatorImpl","sourcecode":"(--max) == 0"},"failures":[399,400,401,402,403,404,405,406,407,408],"tindex":"c8940416-2e9f-11e6-9472-8307d2095180","method":{"position":"org.apache.commons.lang3.StringUtils:4516","type":"CtMethodImpl","sourcecode":"public static java.lang.String replace(final java.lang.String text, final java.lang.String searchString, final java.lang.String replacement, int max) {\n    if ((--max) == 0) {\n        {\n            if ((((org.apache.commons.lang3.StringUtils.isEmpty(text)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchString))) || (replacement == null)) || (max == 0)) {\n                return text;\n            } \n            int int = 0;\n            int int = text.indexOf(searchString, start);\n            if (end == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return text;\n            } \n            final int int = searchString.length();\n            int int = (replacement.length()) - replLength;\n            increase = increase < 0 ? 0 : increase;\n            increase *= max < 0 ? 16 : max > 64 ? 64 : max;\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n            while (end != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                buf.append(text.substring(start, end)).append(replacement);\n                start = end + replLength;\n                if ((--max) == 0) {\n                    break;\n                } \n                end = text.indexOf(searchString, start);\n            }\n            buf.append(text.substring(start));\n            return buf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"max"},"type":"special","returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:138","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[409,410,411,412,413,414,415,416,417,418],"tindex":"c8942b27-2e9f-11e6-9472-3dcb4b987505","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:129","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final boolean lhs, final boolean rhs) {\n    if (rhs != lhs) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Boolean>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Boolean getLeft() {\n                        return java.lang.Boolean.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Boolean getRight() {\n                        return java.lang.Boolean.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:398","type":"CtBinaryOperatorImpl","sourcecode":"classNames == null"},"failures":[],"tindex":"c8942b28-2e9f-11e6-9472-97fe12cd72be","method":{"position":"org.apache.commons.lang3.ClassUtils:397","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Class<?>> convertClassNamesToClasses(final java.util.List<java.lang.String> classNames) {\n    if (classNames == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (classNames == null) {\n                {\n                    if (classNames == null) {\n                        return null;\n                    } \n                    final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>(classNames.size());\n                    for (final java.lang.String java.lang.String : classNames) {\n                        try {\n                            classes.add(java.lang.Class.forName(className));\n                        } catch (final java.lang.Exception ex) {\n                            classes.add(null);\n                        }\n                    }\n                    return classes;\n                }\n            } else {\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classNames":"classNames"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:542","type":"CtBinaryOperatorImpl","sourcecode":"type == null"},"failures":[419],"tindex":"c8945239-2e9f-11e6-9472-15495640d5a4","method":{"position":"org.apache.commons.lang3.ClassUtils:541","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitiveOrWrapper(final java.lang.Class<?> type) {\n    if (type == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return false;\n            } \n            return (type.isPrimitive()) || (org.apache.commons.lang3.ClassUtils.isPrimitiveWrapper(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2591","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[420,421],"tindex":"c894523a-2e9f-11e6-9472-5bee55493296","method":{"position":"org.apache.commons.lang3.ArrayUtils:632","type":"CtMethodImpl","sourcecode":"public static double[] nullToEmpty(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:373","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[422,423],"tindex":"c894523b-2e9f-11e6-9472-3501c53381a6","method":{"position":"org.apache.commons.lang3.StringUtils:7512","type":"CtMethodImpl","sourcecode":"private static java.lang.String prependIfMissing(final java.lang.String str, final java.lang.CharSequence prefix, final boolean ignoreCase, final java.lang.CharSequence... prefixes) {\n    if (str == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(prefix))) || (org.apache.commons.lang3.StringUtils.startsWith(str, prefix, ignoreCase))) {\n                return str;\n            } \n            if ((prefixes != null) && ((prefixes.int) > 0)) {\n                for (final java.lang.CharSequence java.lang.CharSequence : prefixes) {\n                    if (org.apache.commons.lang3.StringUtils.startsWith(str, p, ignoreCase)) {\n                        return str;\n                    } \n                }\n            } \n            return (prefix.toString()) + str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[],"tindex":"c894523c-2e9f-11e6-9472-a57c8aa4cda1","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = (calendar.get(java.util.Calendar.java.util.Calendar.int)) + (calendar.get(java.util.Calendar.java.util.Calendar.int));\n            if (offset < 0) {\n                buffer.append('-');\n                offset = -offset;\n            } else {\n                buffer.append('+');\n            }\n            final int int = offset / ((60 * 60) * 1000);\n            buffer.append(((char)((hours / 10) + '0')));\n            buffer.append(((char)((hours % 10) + '0')));\n            if (boolean) {\n                buffer.append(':');\n            } \n            final int int = (offset / (60 * 1000)) - (60 * hours);\n            buffer.append(((char)((minutes / 10) + '0')));\n            buffer.append(((char)((minutes % 10) + '0')));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:351","type":"CtBinaryOperatorImpl","sourcecode":"otherRange == null"},"failures":[424],"tindex":"c894794d-2e9f-11e6-9472-199a9416583d","method":{"position":"org.apache.commons.lang3.Range:314","type":"CtMethodImpl","sourcecode":"public boolean containsRange(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (otherRange == null) {\n                return false;\n            } \n            return (contains(otherRange.T)) && (contains(otherRange.T));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1364","type":"CtBinaryOperatorImpl","sourcecode":"length >= 0"},"failures":[],"tindex":"c894794e-2e9f-11e6-9472-ed7cf3e9f089","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:413","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.String source, final int offset, final int length) {\n    if (offset >= 0) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            if ((substitute(buf, 0, length)) == false) {\n                return source.substring(offset, (offset + length));\n            } \n            return buf.toString();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"offset"},"type":"special","returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:142","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[425],"tindex":"c894794f-2e9f-11e6-9472-1be43330bb0d","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:455","type":"CtMethodImpl","sourcecode":"public static void printRootCauseStackTrace(final java.lang.Throwable throwable, final java.io.PrintStream stream) {\n    if (throwable == null) {\n        {\n            if (throwable == null) {\n                return ;\n            } \n            if (stream == null) {\n                throw new java.lang.IllegalArgumentException(\"The PrintStream must not be null\");\n            } \n            final java.lang.String[] java.lang.String[] = org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(throwable);\n            for (final java.lang.String java.lang.String : trace) {\n                stream.println(element);\n            }\n            stream.flush();\n        }\n    } else {\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":183,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":152,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":363,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":38,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":241,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":3,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean":385,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":184,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":76,"org.apache.commons.lang3.ValidateTest.testIsTrue5":64,"org.apache.commons.lang3.ArrayUtilsTest.testContainsLong":12,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":35,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":19,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":178,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":75,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar":162,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":271,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":30,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash":209,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":329,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":368,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":22,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":396,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":191,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":366,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D":409,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":337,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":181,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":102,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":169,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":364,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":139,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException3":223,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":394,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException4":224,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException1":222,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":27,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":88,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":143,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissingIgnoreCase":353,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOf":206,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":100,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":79,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithCalendar":7,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Class":264,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceDisjoint":255,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":235,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":351,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":312,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":146,"org.apache.commons.lang3.ValidateTest.testIsInstanceOf":246,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":360,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithCalendar":4,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":404,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":128,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":323,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceNullParentNullChild":253,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":275,"org.apache.commons.lang3.CharUtilsTest.testToString_char":164,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace":23,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":401,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":338,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray":14,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong":124,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException2":226,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":36,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":118,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Object":262,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":55,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":78,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":320,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":37,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":193,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":273,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayChar":281,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Boolean":116,"org.apache.commons.lang3.ArrayUtilsTest.testContains":205,"org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig":225,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":319,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWith":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":304,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":132,"org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble":242,"org.apache.commons.lang3.math.NumberUtilsTest.testMinLong":166,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":270,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":153,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":393,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":307,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":115,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":65,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":119,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":284,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":187,"org.apache.commons.lang3.ArrayUtilsTest.testReverse":266,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Unboxing_Widening":348,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfDayWithCalendar":10,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":299,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":298,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":122,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":361,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":303,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":229,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt":333,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":318,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":192,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":317,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":46,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":403,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":91,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Autoboxing":350,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":306,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt":331,"org.apache.commons.lang3.ArrayUtilsTest.testContainsChar":387,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":138,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayCharSeparator":268,"org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong":390,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow":161,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":292,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":358,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":370,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetAllFields":239,"org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString":269,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceGreaterThanZero":252,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":32,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":29,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":190,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":144,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":340,"org.apache.commons.lang3.StringUtilsIsTest.testIsAlphanumeric":2,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":112,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray":347,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":141,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":221,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":151,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeExactStaticMethod":405,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":73,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":113,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLong":383,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":18,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":296,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":89,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx":330,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":189,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":211,"org.apache.commons.lang3.ClassUtilsTest.testGetClassInvalidArguments":217,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":231,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong":375,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":196,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort":0,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":219,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer":126,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":335,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":392,"org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation":274,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":199,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":134,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithCalendar":11,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":34,"org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_String":263,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":185,"org.apache.commons.lang3.CharSetTest.testConstructor_String_combo":210,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitive":341,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":80,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":174,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":82,"org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble_emptyArray":240,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":81,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceNullParent":254,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":84,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":83,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives":342,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":86,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":85,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":147,"org.apache.commons.lang3.ConversionTest.testLongToBinary":117,"org.apache.commons.lang3.ArrayUtilsTest.testCloneFloat":234,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":321,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":155,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":311,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_Autoboxing":343,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":52,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":389,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":103,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":289,"org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase":354,"org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class":276,"org.apache.commons.lang3.StringUtilsIsTest.testIsAsciiPrintable_String":398,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble":377,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringIntInt":386,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceEqual":256,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":300,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":291,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":121,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":157,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":42,"org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar":15,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":286,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":150,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double_double":165,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":149,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull":346,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedField":280,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt":406,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":287,"org.apache.commons.lang3.mutable.MutableIntTest.testSetNull":1,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":391,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":24,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean":376,"org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds":160,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayInt":371,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLong":13,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":285,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays":407,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":324,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":56,"org.apache.commons.lang3.math.NumberUtilsTest.testMinShort":233,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":54,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":154,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":362,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":325,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullArrayElement":380,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":133,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":17,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":359,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceEqualObject":257,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":357,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":74,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompare":203,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayObject":378,"org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String":58,"org.apache.commons.lang3.text.StrMatcherTest.testMatcherIndices":57,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":159,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":290,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":177,"org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar":267,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":327,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":369,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_String":260,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":127,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfYearWithCalendar":5,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":107,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":179,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase":355,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":188,"org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle":332,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":297,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":108,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":109,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfWithStartIndex":207,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":110,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":111,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":158,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":148,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":136,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":302,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":309,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":288,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":171,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":197,"org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_emptyArray":232,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":104,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Class":261,"org.apache.commons.lang3.StringUtilsTest.testPrependIfMissing":352,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":105,"org.apache.commons.lang3.ValidateTest.testIsInstanceOfExceptionMessage":247,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfChar":388,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":339,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":170,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":220,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":186,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":200,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening":345,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":87,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullCalendar":238,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses":408,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":175,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":314,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":367,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":135,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":328,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithCalendar":9,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":176,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceReverseParentChild":251,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementObjectArray":215,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":21,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":45,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":336,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte":374,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":173,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":25,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort":373,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":228,"org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase":216,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":315,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":142,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":301,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":50,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":20,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":137,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":180,"org.apache.commons.lang3.ObjectUtilsTest.testToString_ObjectString":272,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":322,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithCalendar":8,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":182,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":53,"org.apache.commons.lang3.math.NumberUtilsTest.testMinLong_emptyArray":167,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":198,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":145,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedFieldForceAccess":279,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":305,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":39,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":77,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short":245,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":195,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":16,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField":227,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray":236,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":123,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceNullChild":250,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":395,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables":47,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":49,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":120,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":194,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":51,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":230,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":326,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":28,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":66,"org.apache.commons.lang3.CharUtilsTest.testToString_Character":163,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":114,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":63,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny":243,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":293,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":402,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiPrintable_char":399,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding":356,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":69,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":70,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":213,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":316,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":201,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":41,"org.apache.commons.lang3.CharSetTest.testStatics":214,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":140,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongEmptyArray":384,"org.apache.commons.lang3.text.StrTokenizerTest.test8":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":129,"org.apache.commons.lang3.text.StrTokenizerTest.test5":96,"org.apache.commons.lang3.text.StrTokenizerTest.test4":95,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField":277,"org.apache.commons.lang3.text.StrTokenizerTest.test7":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":130,"org.apache.commons.lang3.ValidateTest.testNoNullElementsArray2":382,"org.apache.commons.lang3.text.StrTokenizerTest.test6":97,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":131,"org.apache.commons.lang3.ValidateTest.testNoNullElementsArray1":381,"org.apache.commons.lang3.text.StrTokenizerTest.test1":92,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":90,"org.apache.commons.lang3.text.StrTokenizerTest.test3":94,"org.apache.commons.lang3.text.StrTokenizerTest.test2":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":308,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":172,"org.apache.commons.lang3.builder.ToStringStyleTest.testSetFieldSeparator":248,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullArrayElement":379,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":258,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteStaticField":249,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":67,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull":344,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":68,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":204,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":400,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":168,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":295,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testNullDate":265,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object":259,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNoWrapper":349,"org.apache.commons.lang3.StringUtilsTest.testReverse_String":237,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayFloat":372,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":71,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfMonthWithCalendar":6,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":294,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":44,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":202,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":61,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":101,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean":282,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":60,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":62,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":59,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":397,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":212,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":156,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":313,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementsObjectArray":208,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":334,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":48,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess":278,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":218,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":310,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":125,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":365},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:874","type":"CtBinaryOperatorImpl","sourcecode":"startIndexInclusive < 0"},"failures":[0],"tindex":"28f95814-3e89-11e6-b18f-2d1bf8c3aad4","method":{"position":"org.apache.commons.lang3.ArrayUtils:994","type":"CtMethodImpl","sourcecode":"public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"startIndexInclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[],"tindex":"28fa4275-3e89-11e6-b18f-db68df4705f3","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:214","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.StrTokenizer getTSVInstance(final java.lang.String input) {\n    if (input != null) {\n        {\n            final org.apache.commons.lang3.text.StrTokenizer org.apache.commons.lang3.text.StrTokenizer = org.apache.commons.lang3.text.StrTokenizer.getTSVClone();\n            tok.reset(input);\n            return tok;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:591","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"28fa4276-3e89-11e6-b18f-59596a2a3939","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1053","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int[] array) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:339","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"28fa6987-3e89-11e6-b18f-8338e651c6d8","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:767","type":"CtMethodImpl","sourcecode":"public static void writeDeclaredField(final java.lang.Object target, final java.lang.String fieldName, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeDeclaredField(target, fieldName, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:290","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1],"tindex":"28fa9098-3e89-11e6-b18f-35ab33c48b0f","method":{"position":"org.apache.commons.lang3.mutable.MutableInt:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableInt.this.int = value.intValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6104","type":"CtBinaryOperatorImpl","sourcecode":"cs == null"},"failures":[2],"tindex":"28fa9099-3e89-11e6-b18f-8978ff091006","method":{"position":"org.apache.commons.lang3.StringUtils:5916","type":"CtMethodImpl","sourcecode":"public static boolean isAlphanumeric(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(cs)) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isLetterOrDigit(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[3,3],"tindex":"28fab7aa-3e89-11e6-b18f-0b99a35121fc","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:787","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[4,5,6,7,8,9,10,11],"tindex":"28fadebb-3e89-11e6-b18f-8f28ea4655e6","method":{"position":"org.apache.commons.lang3.time.DateUtils:1592","type":"CtMethodImpl","sourcecode":"public static long getFragmentInHours(final java.util.Calendar calendar, final int fragment) {\n    if (calendar == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(calendar, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3070","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[12,13,14],"tindex":"28fadebc-3e89-11e6-b18f-3bb7143adb7a","method":{"position":"org.apache.commons.lang3.ArrayUtils:2003","type":"CtMethodImpl","sourcecode":"public static int indexOf(final long[] array, final long valueToFind) {\n    if (array == null) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3076","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[15],"tindex":"28fb05cd-3e89-11e6-b18f-7165c68a5e71","method":{"position":"org.apache.commons.lang3.StringUtils:4834","type":"CtMethodImpl","sourcecode":"public static java.lang.String replaceChars(final java.lang.String str, final char searchChar, final char replaceChar) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.replace(searchChar, replaceChar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:325","type":"CtBinaryOperatorImpl","sourcecode":"pos >= 0"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"28fb2cde-3e89-11e6-b18f-d5c3f867cf85","method":{"position":"org.apache.commons.lang3.text.StrMatcher:366","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) {\n    if (bufferEnd >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = char[].int;\n            if ((pos + len) > bufferEnd) {\n                return 0;\n            } \n            for (int int = 0 ; i < (char[].int) ; i++ , pos++) {\n                if ((char[][i]) != (buffer[pos])) {\n                    return 0;\n                } \n            }\n            return len;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"bufferEnd"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:770","type":"CtVariableReadImpl","sourcecode":"value"},"failures":[64],"tindex":"28fb53ef-3e89-11e6-b18f-370fde45df54","method":{"position":"org.apache.commons.lang3.Validate:129","type":"CtMethodImpl","sourcecode":"public static void isTrue(final boolean expression, final java.lang.String message, final double value) {\n    if (expression) {\n        {\n            if (expression == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, java.lang.Double.valueOf(value)));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"expression"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl","sourcecode":"ignored != null"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,59,60,61,62,106,107,108,109,110,111,112,113,114,63,115],"tindex":"28fb7b00-3e89-11e6-b18f-ddaf0a29aed8","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:956","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(final org.apache.commons.lang3.text.StrMatcher ignored) {\n    if (ignored != null) {\n        {\n            if (ignored != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (ignored != null) {\n                        org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = ignored;\n                    } \n                    return org.apache.commons.lang3.text.StrTokenizer.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"ignored"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[116],"tindex":"28fba211-3e89-11e6-b18f-abb3d27a28e1","method":{"position":"org.apache.commons.lang3.BooleanUtils:158","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final java.lang.Boolean bool) {\n    if (bool == null) {\n        {\n            return (bool != null) && (bool.booleanValue());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1655","type":"CtBinaryOperatorImpl","sourcecode":"0 == nBools"},"failures":[117],"tindex":"28fba212-3e89-11e6-b18f-bb8c80395eb7","method":{"position":"org.apache.commons.lang3.Conversion:1550","type":"CtMethodImpl","sourcecode":"public static boolean[] longToBinary(final long src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n    if (0 == dstPos) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nBools) {\n                return dst;\n            } \n            if (((nBools - 1) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + srcPos;\n                dst[(dstPos + i)] = (1 & (src >> shift)) != 0;\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:121","type":"CtBinaryOperatorImpl","sourcecode":"locale == null"},"failures":[118],"tindex":"28fbc923-3e89-11e6-b18f-03c30883b120","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (locale == null) {\n        {\n            final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n            return df.format(calendar);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4938","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[119,120,121,122,123,124,125],"tindex":"28fbf034-3e89-11e6-b18f-c5bc1b6fd491","method":{"position":"org.apache.commons.lang3.math.NumberUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.Long createLong(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Long.decode(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:239","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[126],"tindex":"28fbf035-3e89-11e6-b18f-356957467fa2","method":{"position":"org.apache.commons.lang3.BooleanUtils:356","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final java.lang.Integer value, final java.lang.Integer trueValue, final java.lang.Integer falseValue, final java.lang.Integer nullValue) {\n    if (falseValue == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                if (trueValue == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (falseValue == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (nullValue == null) {\n                    return null;\n                } \n            } else if (value.equals(trueValue)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (value.equals(falseValue)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (value.equals(nullValue)) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException(\"The Integer did not match any specified value\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"falseValue"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1854","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[127,127,128,128,129,130,131,132,133,134,135,136,137,137,138,139,140,141,142,143,144,145,146,3,147,148,149,150,151,152,153,154,155,156,157,158,159],"tindex":"28fc1746-3e89-11e6-b18f-bfa328802ce8","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1114","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short[] array) {\n    if (array == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1648","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[160],"tindex":"28fc3e57-3e89-11e6-b18f-d77422c8c299","method":{"position":"org.apache.commons.lang3.time.DateUtils:488","type":"CtMethodImpl","sourcecode":"public static java.util.Date addSeconds(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:121","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 15"},"failures":[161],"tindex":"28fc6568-3e89-11e6-b18f-757595da4ebb","method":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:63","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.NumericEntityEscaper below(final int codepoint) {\n    if (codepoint > 15) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.translate.NumericEntityEscaper.outsideOf(codepoint, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[162],"tindex":"28fc6569-3e89-11e6-b18f-e520b1afd17f","method":{"position":"org.apache.commons.lang3.StringUtils:2930","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str, final char separatorChar) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChar, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:474","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[],"tindex":"28fd01aa-3e89-11e6-b18f-953621230563","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:728","type":"CtMethodImpl","sourcecode":"public static java.lang.String escapeXml11(final java.lang.String input) {\n    if (input != null) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:308","type":"CtBinaryOperatorImpl","sourcecode":"ch < 128"},"failures":[163,164],"tindex":"28fd01ab-3e89-11e6-b18f-5df6aa7b9ca3","method":{"position":"org.apache.commons.lang3.CharUtils:307","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final char ch) {\n    if (ch < 128) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch < 128) {\n                return org.apache.commons.lang3.CharUtils.org.apache.commons.lang3.CharUtils.java.lang.String[][ch];\n            } \n            return new java.lang.String(new char[]{ ch });\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3320","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[165],"tindex":"28fd28bc-3e89-11e6-b18f-ffbe6c0927b7","method":{"position":"org.apache.commons.lang3.ArrayUtils:3319","type":"CtMethodImpl","sourcecode":"public static double[] toPrimitive(final java.lang.Double[] array, final double valueForNull) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            final double[] double[] = new double[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Double java.lang.Double = array[i];\n                result[i] = b == null ? valueForNull : b.doubleValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:724","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[],"tindex":"28fd28bd-3e89-11e6-b18f-5152ee10c32a","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:536","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final short lhs, final short rhs) {\n    if (lhs != lhs) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:915","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[166,167],"tindex":"28fd4fce-3e89-11e6-b18f-bfe129831bc9","method":{"position":"org.apache.commons.lang3.math.NumberUtils:788","type":"CtMethodImpl","sourcecode":"public static long min(final long[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            long long = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) < min) {\n                    min = array[i];\n                } \n            }\n            return min;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3478","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215],"tindex":"28fd4fcf-3e89-11e6-b18f-d54a41a87fd7","method":{"position":"org.apache.commons.lang3.ArrayUtils:1902","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.Object[] array, final java.lang.Object objectToFind, int startIndex) {\n    if (objectToFind == null) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            if (objectToFind == null) {\n                for (int int = startIndex ; i < (array.int) ; i++) {\n                    if ((array[i]) == null) {\n                        return i;\n                    } \n                }\n            } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n                for (int int = startIndex ; i < (array.int) ; i++) {\n                    if (objectToFind.equals(array[i])) {\n                        return i;\n                    } \n                }\n            } \n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"objectToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4997","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[216],"tindex":"28fd4fd0-3e89-11e6-b18f-35e2cbb81015","method":{"position":"org.apache.commons.lang3.StringUtils:3203","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitByCharacterTypeCamelCase(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.ClassUtils:195","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(className)"},"failures":[217],"tindex":"28fd76e1-3e89-11e6-b18f-51884830c479","method":{"position":"org.apache.commons.lang3.ClassUtils:891","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.String className, final boolean initialize) throws java.lang.ClassNotFoundException {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(className)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ClassNotFoundException();\n    } else {\n        {\n            final java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread.currentThread().getContextClassLoader();\n            final java.lang.ClassLoader java.lang.ClassLoader = contextCL == null ? org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.lang.Class.getClassLoader() : contextCL;\n            return org.apache.commons.lang3.ClassUtils.getClass(loader, className, initialize);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1913","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[218,219],"tindex":"28fd76e2-3e89-11e6-b18f-7bb2e3349889","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2800","type":"CtMethodImpl","sourcecode":"protected void validateIndex(final int index) {\n    if (index >= 0) {\n        {\n            if ((index < 0) || (index > (int))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:717","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[220,221,222,223,224,225,226,227],"tindex":"28fd9df3-3e89-11e6-b18f-13526af1399b","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:61","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName) {\n    if (!(java.lang.reflect.Modifier.isPublic(cls.getModifiers()))) {\n        {\n            if (fieldName == null) {\n                {\n                    final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, false);\n                    org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n                    return field;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3908","type":"CtBinaryOperatorImpl","sourcecode":"array1 == null"},"failures":[228],"tindex":"28fd9df4-3e89-11e6-b18f-bd56da2a8a5e","method":{"position":"org.apache.commons.lang3.ArrayUtils:3907","type":"CtMethodImpl","sourcecode":"public static long[] addAll(final long[] array1, final long... array2) {\n    if (array2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final long[] long[] = new long[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:465","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[229,230,231],"tindex":"28fdc505-3e89-11e6-b18f-c5dca6ad63c4","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:606","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.util.Collection<?> coll) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:995","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[232,233],"tindex":"28fdc506-3e89-11e6-b18f-bdb3e483699e","method":{"position":"org.apache.commons.lang3.math.NumberUtils:834","type":"CtMethodImpl","sourcecode":"public static short min(final short[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            short short = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) < min) {\n                    min = array[i];\n                } \n            }\n            return min;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:182","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[228,234,235,236],"tindex":"28fdc507-3e89-11e6-b18f-e3bc572dfcd2","method":{"position":"org.apache.commons.lang3.ArrayUtils:434","type":"CtMethodImpl","sourcecode":"public static float[] clone(final float[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[237],"tindex":"28fdec18-3e89-11e6-b18f-8b99daa74ad8","method":{"position":"org.apache.commons.lang3.StringUtils:6283","type":"CtMethodImpl","sourcecode":"public static java.lang.String reverse(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return new java.lang.StringBuilder(str).reverse().toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[238],"tindex":"28fdec19-3e89-11e6-b18f-87cee69ca699","method":{"position":"org.apache.commons.lang3.time.DateUtils:1667","type":"CtMethodImpl","sourcecode":"private static long getFragment(final java.util.Calendar calendar, final int fragment, final java.util.concurrent.TimeUnit unit) {\n    if (calendar == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (calendar == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            long long = 0;\n            int int = unit == (java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit) ? 0 : 1;\n            switch (fragment) {\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(((calendar.get(java.util.Calendar.java.util.Calendar.int)) - offset), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(((calendar.get(java.util.Calendar.java.util.Calendar.int)) - offset), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                default :\n                    break;\n            }\n            switch (fragment) {\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                case java.util.Calendar.java.util.Calendar.int :\n                    result += unit.convert(calendar.get(java.util.Calendar.java.util.Calendar.int), java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n                    break;\n                case java.util.Calendar.java.util.Calendar.int :\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The fragment \" + fragment) + \" is not supported\"));\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:905","type":"CtInvocationImpl","sourcecode":"cls.isPrimitive()"},"failures":[239],"tindex":"28fe132a-3e89-11e6-b18f-0baf3ec4d918","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:196","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field[] getAllFields(java.lang.Class<?> cls) {\n    if (cls.isPrimitive()) {\n        {\n            final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.apache.commons.lang3.reflect.FieldUtils.getAllFieldsList(cls);\n            return allFieldsList.toArray(new java.lang.reflect.Field[allFieldsList.size()]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3342","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[240,241,242],"tindex":"28fe132b-3e89-11e6-b18f-db251396c526","method":{"position":"org.apache.commons.lang3.math.NumberUtils:881","type":"CtMethodImpl","sourcecode":"public static double min(final double[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            double double = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if (java.lang.Double.isNaN(array[i])) {\n                    return java.lang.Double.java.lang.Double.double;\n                } \n                if ((array[i]) < min) {\n                    min = array[i];\n                } \n            }\n            return min;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6393","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[243,244],"tindex":"28fe132c-3e89-11e6-b18f-13a0ce0b0f6d","method":{"position":"org.apache.commons.lang3.StringUtils:7161","type":"CtMethodImpl","sourcecode":"public static boolean startsWith(final java.lang.CharSequence str, final java.lang.CharSequence prefix) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:154","type":"CtBinaryOperatorImpl","sourcecode":"srcClass == null"},"failures":[],"tindex":"28fe3a3d-3e89-11e6-b18f-d927e9d9113d","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:167","type":"CtMethodImpl","sourcecode":"private static float getPrimitivePromotionCost(final java.lang.Class<?> srcClass, final java.lang.Class<?> destClass) {\n    if (destClass == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            float float = 0.0F;\n            java.lang.Class<?> java.lang.Class<?> = srcClass;\n            if (!(cls.isPrimitive())) {\n                cost += 0.1F;\n                cls = org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(cls);\n            } \n            for (int int = 0 ; (cls != destClass) && (i < (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int)) ; i++) {\n                if (cls == (org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][i])) {\n                    cost += 0.1F;\n                    if (i < ((org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[].int) - 1)) {\n                        cls = org.apache.commons.lang3.reflect.MemberUtils.org.apache.commons.lang3.reflect.MemberUtils.java.lang.Class<?>[][(i + 1)];\n                    } \n                } \n            }\n            return cost;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcClass":"destClass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3162","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[245],"tindex":"28fe3a3e-3e89-11e6-b18f-ed5120425aa0","method":{"position":"org.apache.commons.lang3.ArrayUtils:3161","type":"CtMethodImpl","sourcecode":"public static short[] toPrimitive(final java.lang.Short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = array[i].shortValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2690","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[],"tindex":"28fe3a3f-3e89-11e6-b18f-5b3ae6c17bd0","method":{"position":"org.apache.commons.lang3.StringUtils:3561","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final char separator, final int startIndex, final int endIndex) {\n    if (endIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                if ((array[i]) != null) {\n                    buf.append(array[i]);\n                } \n            }\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"endIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:383","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Calendar"},"failures":[246,247],"tindex":"28fe6150-3e89-11e6-b18f-dd1d299b9f40","method":{"position":"org.apache.commons.lang3.Validate:1174","type":"CtMethodImpl","sourcecode":"public static void isInstanceOf(final java.lang.Class<?> type, final java.lang.Object obj) {\n    if (obj instanceof java.util.Calendar) {\n        {\n            if ((type.isInstance(obj)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, type.getName(), (obj == null ? \"null\" : obj.getClass().getName())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:647","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"28fe6151-3e89-11e6-b18f-552ff05246d9","method":{"position":"org.apache.commons.lang3.text.StrBuilder:914","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.StringBuilder str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1464","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"28fe8862-3e89-11e6-b18f-0bfdc7a17b8b","method":{"position":"org.apache.commons.lang3.ArrayUtils:5858","type":"CtMethodImpl","sourcecode":"public static double[] removeAll(final double[] array, final int... indices) {\n    if (indices == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((double[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"indices"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1896","type":"CtBinaryOperatorImpl","sourcecode":"fieldSeparator == null"},"failures":[248],"tindex":"28fe8863-3e89-11e6-b18f-012e7c02ac1a","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1895","type":"CtMethodImpl","sourcecode":"protected void setFieldSeparator(java.lang.String fieldSeparator) {\n    if (fieldSeparator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldSeparator == null) {\n                fieldSeparator = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = fieldSeparator;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldSeparator":"fieldSeparator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:424","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.lang.StringBuilder"},"failures":[249],"tindex":"28fe8864-3e89-11e6-b18f-91487ec24539","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:488","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.reflect.Field field, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (value instanceof java.lang.StringBuilder) {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(field, value, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:647","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"28feaf75-3e89-11e6-b18f-4f3227cbee88","method":{"position":"org.apache.commons.lang3.time.DateUtils:538","type":"CtMethodImpl","sourcecode":"public static java.util.Date setYears(final java.util.Date date, final int amount) {\n    if (date == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:54","type":"CtInvocationImpl","sourcecode":"child.equals(parent)"},"failures":[250,251,252,253,254,255,256,257],"tindex":"28feaf76-3e89-11e6-b18f-f1e7b8fd5b61","method":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:49","type":"CtMethodImpl","sourcecode":"public static int distance(final java.lang.Class<?> child, final java.lang.Class<?> parent) {\n    if (parent.equals(parent)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((child == null) || (parent == null)) {\n                return -1;\n            } \n            if (child.equals(parent)) {\n                return 0;\n            } \n            final java.lang.Class<?> java.lang.Class<?> = child.getSuperclass();\n            int int = org.apache.commons.lang3.BooleanUtils.toInteger(parent.equals(cParent));\n            if (d == 1) {\n                return d;\n            } else {\n                d += org.apache.commons.lang3.reflect.InheritanceUtils.distance(cParent, parent);\n                return d > 0 ? d + 1 : -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"parent","child":"parent"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:94","type":"CtInvocationImpl","sourcecode":"str.isEmpty()"},"failures":[258],"tindex":"28feaf77-3e89-11e6-b18f-8f8483fc4643","method":{"position":"org.apache.commons.lang3.StringUtils:5636","type":"CtMethodImpl","sourcecode":"public static java.lang.String lowerCase(final java.lang.String str) {\n    if (str.isEmpty()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:202","type":"CtInvocationImpl","sourcecode":"className.startsWith(\"[\")"},"failures":[259,260,261,262,263,264],"tindex":"28fed688-3e89-11e6-b18f-1f613ab476b9","method":{"position":"org.apache.commons.lang3.ClassUtils:1108","type":"CtMethodImpl","sourcecode":"private static java.lang.String getCanonicalName(java.lang.String className) {\n    if (className.startsWith(\"[\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            className = org.apache.commons.lang3.StringUtils.deleteWhitespace(className);\n            if (className == null) {\n                return null;\n            } else {\n                int int = 0;\n                while (className.startsWith(\"[\")) {\n                    dim++;\n                    className = className.substring(1);\n                }\n                if (dim < 1) {\n                    return className;\n                } else {\n                    if (className.startsWith(\"L\")) {\n                        className = className.substring(1, (className.endsWith(\";\") ? (className.length()) - 1 : className.length()));\n                    } else {\n                        if ((className.length()) > 0) {\n                            className = org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.get(className.substring(0, 1));\n                        } \n                    }\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(className);\n                    for (int int = 0 ; i < dim ; i++) {\n                        canonicalClassNameBuffer.append(\"[]\");\n                    }\n                    return canonicalClassNameBuffer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:518","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[265],"tindex":"28fed689-3e89-11e6-b18f-bb4827535e3c","method":{"position":"org.apache.commons.lang3.time.DateUtils:1289","type":"CtMethodImpl","sourcecode":"public static long getFragmentInMilliseconds(final java.util.Date date, final int fragment) {\n    if (date == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(date, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3094","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[266,267],"tindex":"28fefd9a-3e89-11e6-b18f-c3fdc22ce0c0","method":{"position":"org.apache.commons.lang3.ArrayUtils:1435","type":"CtMethodImpl","sourcecode":"public static void reverse(final java.lang.Object[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3366","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[267,268],"tindex":"28ff24ab-3e89-11e6-b18f-21fb2387ce8d","method":{"position":"org.apache.commons.lang3.StringUtils:3303","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final char separator) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7013","type":"CtBinaryOperatorImpl","sourcecode":"(first == null) || (second == null)"},"failures":[269],"tindex":"28ff4bbc-3e89-11e6-b18f-a9d661229dbd","method":{"position":"org.apache.commons.lang3.StringUtils:7030","type":"CtMethodImpl","sourcecode":"private static double score(final java.lang.CharSequence first, final java.lang.CharSequence second) {\n    if ((first == null) || (first == null)) {\n        {\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            if ((first.length()) > (second.length())) {\n                longer = first.toString().toLowerCase();\n                shorter = second.toString().toLowerCase();\n            } else {\n                longer = second.toString().toLowerCase();\n                shorter = first.toString().toLowerCase();\n            }\n            final int int = ((shorter.length()) / 2) + 1;\n            final java.lang.String java.lang.String = org.apache.commons.lang3.StringUtils.getSetOfMatchingCharacterWithin(shorter, longer, halflength);\n            final java.lang.String java.lang.String = org.apache.commons.lang3.StringUtils.getSetOfMatchingCharacterWithin(longer, shorter, halflength);\n            if (((m1.length()) == 0) || ((m2.length()) == 0)) {\n                return 0.0;\n            } \n            if ((m1.length()) != (m2.length())) {\n                return 0.0;\n            } \n            final int int = org.apache.commons.lang3.StringUtils.transpositions(m1, m2);\n            final double double = ((((m1.length()) / ((double)(shorter.length()))) + ((m2.length()) / ((double)(longer.length())))) + (((m1.length()) - transpositions) / ((double)(m1.length())))) / 3.0;\n            return dist;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"first","second":"first"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:297","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[180,181,182,183,184,185,186,187,188,189,270,190,191,193,271,194,195,196,197,198,199,200],"tindex":"28ff4bbd-3e89-11e6-b18f-bf0e8471b2a8","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:673","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final long[] lhs, final long[] rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Long[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Long[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Long[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1479","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[272],"tindex":"28ff99de-3e89-11e6-b18f-67c480702a6f","method":{"position":"org.apache.commons.lang3.ObjectUtils:422","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(final java.lang.Object obj, final java.lang.String nullStr) {\n    if (obj == null) {\n        {\n            return obj == null ? nullStr : obj.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:823","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable<?>"},"failures":[273,274,275],"tindex":"28ff99df-3e89-11e6-b18f-87d40386629e","method":{"position":"org.apache.commons.lang3.AnnotationUtils:263","type":"CtMethodImpl","sourcecode":"private static boolean memberEquals(final java.lang.Class<?> type, final java.lang.Object o1, final java.lang.Object o2) {\n    if (o1 instanceof java.lang.reflect.TypeVariable<?>) {\n        {\n            if (o1 == o2) {\n                return true;\n            } \n            if ((o1 == null) || (o2 == null)) {\n                return false;\n            } \n            if (type.isArray()) {\n                return org.apache.commons.lang3.AnnotationUtils.arrayMemberEquals(type.getComponentType(), o1, o2);\n            } \n            if (type.isAnnotation()) {\n                return org.apache.commons.lang3.AnnotationUtils.equals(((java.lang.annotation.Annotation)(o1)), ((java.lang.annotation.Annotation)(o2)));\n            } \n            return o1.equals(o2);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:176","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[276],"tindex":"28ffc0f0-3e89-11e6-b18f-0b4ede6ef0d5","method":{"position":"org.apache.commons.lang3.ClassUtils:802","type":"CtMethodImpl","sourcecode":"public static boolean isInnerClass(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        {\n            return (cls != null) && ((cls.getEnclosingClass()) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[277,278,279,280],"tindex":"28ffc0f1-3e89-11e6-b18f-7568243664e6","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:467","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readDeclaredField(final java.lang.Object target, final java.lang.String fieldName, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((target != null), \"target object must not be null\");\n            final java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getDeclaredField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate declared field %s.%s\", cls, fieldName);\n            return org.apache.commons.lang3.reflect.FieldUtils.readField(field, target, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3002","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[281],"tindex":"28ffc0f2-3e89-11e6-b18f-bd5ef873724a","method":{"position":"org.apache.commons.lang3.ArrayUtils:4097","type":"CtMethodImpl","sourcecode":"public static char[] add(final char[] array, final char element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = ((char[])(org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(array, java.lang.Character.java.lang.Character.java.lang.Class<java.lang.Character>)));\n            newArray[((newArray.int) - 1)] = element;\n            return newArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1195","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[282],"tindex":"28ffe803-3e89-11e6-b18f-c1af174bb0ad","method":{"position":"org.apache.commons.lang3.ArrayUtils:2895","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[283,284,285,286,287,288,289,290,291,292,292,293,294,295,296,297,298,299,300,301,127,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,318,319,320,321,322,323,324,325,326,327,328,329,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,3,147,148,149,150,151,152,153,154,155,156,157,158,159],"tindex":"28ffe804-3e89-11e6-b18f-2d6de1be5547","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:843","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean value) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"29000f15-3e89-11e6-b18f-83c4884680ae","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:742","type":"CtMethodImpl","sourcecode":"public static void writeField(final java.lang.Object target, final java.lang.String fieldName, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((target != null), \"target object must not be null\");\n            final java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate declared field %s.%s\", cls.getName(), fieldName);\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(field, target, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:761","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[330,331,332,333],"tindex":"29000f16-3e89-11e6-b18f-1948d710fcca","method":{"position":"org.apache.commons.lang3.StringUtils:5119","type":"CtMethodImpl","sourcecode":"public static java.lang.String repeat(final java.lang.String str, final int repeat) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (repeat <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            if ((repeat == 1) || (inputLength == 0)) {\n                return str;\n            } \n            if ((inputLength == 1) && (repeat <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n            } \n            final int int = inputLength * repeat;\n            switch (inputLength) {\n                case 1 :\n                    return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n                case 2 :\n                    final char char = str.charAt(0);\n                    final char char = str.charAt(1);\n                    final char[] char[] = new char[outputLength];\n                    for (int int = (repeat * 2) - 2 ; i >= 0 ; i-- , i--) {\n                        output2[i] = ch0;\n                        output2[(i + 1)] = ch1;\n                    }\n                    return new java.lang.String(output2);\n                default :\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(outputLength);\n                    for (int int = 0 ; i < repeat ; i++) {\n                        buf.append(str);\n                    }\n                    return buf.toString();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.NoSuchMethodException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:170","type":"CtUnaryOperatorImpl","sourcecode":"!(cls.isPrimitive())"},"failures":[],"tindex":"29003627-3e89-11e6-b18f-556b7d31c736","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:283","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (!(cls.isPrimitive())) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(cls, methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on class: \") + (cls.getName())));\n            } \n            return method.invoke(null, args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NoSuchMethodException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:711","type":"CtBinaryOperatorImpl","sourcecode":"(cls != null) && (cls.isPrimitive())"},"failures":[334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350],"tindex":"29003628-3e89-11e6-b18f-051e12c58773","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if ((cls != null) && (cls.isPrimitive())) {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl","sourcecode":"ignored != null"},"failures":[],"tindex":"29005d39-3e89-11e6-b18f-fb124908f149","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:956","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(final org.apache.commons.lang3.text.StrMatcher ignored) {\n    if (ignored != null) {\n        {\n            if (ignored != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (ignored != null) {\n                        org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = ignored;\n                    } \n                    return org.apache.commons.lang3.text.StrTokenizer.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"ignored"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2562","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[351],"tindex":"29005d3a-3e89-11e6-b18f-df724551399a","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2391","type":"CtMethodImpl","sourcecode":"public int indexOf(final org.apache.commons.lang3.text.StrMatcher matcher, int startIndex) {\n    if (startIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            startIndex = startIndex < 0 ? 0 : startIndex;\n            if ((matcher == null) || (startIndex >= (int))) {\n                return -1;\n            } \n            final int int = int;\n            final char[] char[] = char[];\n            for (int int = startIndex ; i < len ; i++) {\n                if ((matcher.isMatch(buf, i, startIndex, len)) > 0) {\n                    return i;\n                } \n            }\n            return -1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:690","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[352,353,354,243,355,244],"tindex":"2900844b-3e89-11e6-b18f-f3bf49d208e5","method":{"position":"org.apache.commons.lang3.StringUtils:7202","type":"CtMethodImpl","sourcecode":"private static boolean startsWith(final java.lang.CharSequence str, final java.lang.CharSequence prefix, final boolean ignoreCase) {\n    if (prefix == null) {\n        {\n            if ((str == null) || (prefix == null)) {\n                return (str == null) && (prefix == null);\n            } \n            if ((prefix.length()) > (str.length())) {\n                return false;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"prefix"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2180","type":"CtBinaryOperatorImpl","sourcecode":"length <= 0"},"failures":[356],"tindex":"2900844c-3e89-11e6-b18f-2522a6c12770","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1363","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendPadding(final int length, final char padChar) {\n    if (length <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length >= 0) {\n                ensureCapacity(((int) + length));\n                for (int int = 0 ; i < length ; i++) {\n                    char[][((int)++)] = padChar;\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1074","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[357,358,359,360,361,362,363,364,365,366,367,368,369,370,294,294,295,296,296,127,127,302,302,316,316,323,323,324,325,326,327,328,329,128,129,138,138,139,140,141,147,147,148,149,149,150],"tindex":"2900844d-3e89-11e6-b18f-033c51b90a98","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:871","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object[] array, final java.lang.Boolean fullDetail) {\n    if (array == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3342","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[371,372,373,374,281,375,376,377,378,379,380,381,382],"tindex":"2900ab5e-3e89-11e6-b18f-f3a99df8b9a5","method":{"position":"org.apache.commons.lang3.ArrayUtils:4247","type":"CtMethodImpl","sourcecode":"private static java.lang.Object copyArrayGrow1(final java.lang.Object array, final java.lang.Class<?> newArrayComponentType) {\n    if (array == null) {\n        {\n            if (array != null) {\n                final int int = java.lang.reflect.Array.getLength(array);\n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), (arrayLength + 1));\n                java.lang.System.arraycopy(array, 0, newArray, 0, arrayLength);\n                return newArray;\n            } \n            return java.lang.reflect.Array.newInstance(newArrayComponentType, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1764","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[],"tindex":"2900ab5f-3e89-11e6-b18f-c77e740d8ca0","method":{"position":"org.apache.commons.lang3.text.translate.LookupTranslator:69","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (index >= 0) {\n        {\n            int int = int;\n            if ((index + (int)) > (input.length())) {\n                max = (input.length()) - index;\n            } \n            for (int int = max ; i >= (int) ; i--) {\n                final java.lang.CharSequence java.lang.CharSequence = input.subSequence(index, (index + i));\n                final java.lang.CharSequence java.lang.CharSequence = java.util.HashMap<java.lang.String, java.lang.CharSequence>.get(subSeq.toString());\n                if (result != null) {\n                    out.write(result.toString());\n                    return i;\n                } \n            }\n            return 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:292","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.reflect.Modifier.isPublic(cls.getModifiers()))"},"failures":[],"tindex":"2900d270-3e89-11e6-b18f-f96830299f4a","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:61","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName) {\n    if (!(java.lang.reflect.Modifier.isPublic(cls.getModifiers()))) {\n        {\n            if (fieldName == null) {\n                {\n                    final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, false);\n                    org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n                    return field;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:385","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable<?>"},"failures":[],"tindex":"2900d271-3e89-11e6-b18f-b7f1315e0ec8","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:424","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.ParameterizedType toParameterizedType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.TypeVariable<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toParameterizedType == null) {\n                return false;\n            } \n            if (toParameterizedType.equals(type)) {\n                return true;\n            } \n            final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(toParameterizedType);\n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(type, toClass, null);\n            if (fromTypeVarAssigns == null) {\n                return false;\n            } \n            if (fromTypeVarAssigns.isEmpty()) {\n                return true;\n            } \n            final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(toParameterizedType, toClass, typeVarAssigns);\n            for (final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> : toTypeVarAssigns.keySet()) {\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(var, toTypeVarAssigns);\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(var, fromTypeVarAssigns);\n                if (((fromTypeArg != null) && (!(toTypeArg.equals(fromTypeArg)))) && (!((toTypeArg instanceof java.lang.reflect.WildcardType) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(fromTypeArg, toTypeArg, typeVarAssigns))))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3336","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[383,384],"tindex":"2900f982-3e89-11e6-b18f-77a2045142bf","method":{"position":"org.apache.commons.lang3.ArrayUtils:532","type":"CtMethodImpl","sourcecode":"public static long[] nullToEmpty(final long[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.long[];\n            } \n            return array;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:812","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[385],"tindex":"2900f983-3e89-11e6-b18f-1d729d3d104a","method":{"position":"org.apache.commons.lang3.BooleanUtils:758","type":"CtMethodImpl","sourcecode":"public static java.lang.String toStringTrueFalse(final java.lang.Boolean bool) {\n    if (bool == null) {\n        {\n            return org.apache.commons.lang3.BooleanUtils.toString(bool, \"true\", \"false\", null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:510","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[386],"tindex":"2900f984-3e89-11e6-b18f-216a9ed2fc5c","method":{"position":"org.apache.commons.lang3.StringUtils:2118","type":"CtMethodImpl","sourcecode":"public static java.lang.String substring(final java.lang.String str, int start, int end) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (end < 0) {\n                end = (str.length()) + end;\n            } \n            if (start < 0) {\n                start = (str.length()) + start;\n            } \n            if (end > (str.length())) {\n                end = str.length();\n            } \n            if (start > end) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            if (start < 0) {\n                start = 0;\n            } \n            if (end < 0) {\n                end = 0;\n            } \n            return str.substring(start, end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:339","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"29012095-3e89-11e6-b18f-89d07fe9c9d6","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:967","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"290147a6-3e89-11e6-b18f-01a5335764aa","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:992","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                {\n                    buffer.append(java.lang.String);\n                    for (int int = 0 ; i < (array.int) ; i++) {\n                        if (i > 0) {\n                            buffer.append(java.lang.String);\n                        } \n                        appendDetail(buffer, fieldName, array[i]);\n                    }\n                    buffer.append(java.lang.String);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2336","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[],"tindex":"29016eb7-3e89-11e6-b18f-1bcfe4f75cf7","method":{"position":"org.apache.commons.lang3.StringUtils:3612","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final long[] array, final char separator, final int startIndex, final int endIndex) {\n    if (endIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                buf.append(array[i]);\n            }\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"endIndex"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1214","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[387,388,389],"tindex":"29016eb8-3e89-11e6-b18f-6f21f63e7be2","method":{"position":"org.apache.commons.lang3.ArrayUtils:2313","type":"CtMethodImpl","sourcecode":"public static int indexOf(final char[] array, final char valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1205","type":"CtBinaryOperatorImpl","sourcecode":"b > a"},"failures":[390],"tindex":"29016eb9-3e89-11e6-b18f-293b70e868c4","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1204","type":"CtMethodImpl","sourcecode":"public static long max(long a, final long b, final long c) {\n    if (a > c) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b > a) {\n                a = b;\n            } \n            if (c > a) {\n                a = c;\n            } \n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"c","b":"a"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:214","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[391,392,393,394,395,396,397,297,297,298,299,300,301,151,151],"tindex":"290195ca-3e89-11e6-b18f-59e42043b6e8","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1502","type":"CtMethodImpl","sourcecode":"protected void appendNullText(final java.lang.StringBuffer buffer, final java.lang.String fieldName) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:467","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(ch)"},"failures":[398,399],"tindex":"290195cb-3e89-11e6-b18f-4b760934e221","method":{"position":"org.apache.commons.lang3.CharUtils:421","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiPrintable(final char ch) {\n    if (java.lang.Character.isLowerCase(ch)) {\n        {\n            return (ch >= 32) && (ch < 127);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:611","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[24,25,27,29,30,32,36,37,42,45,48,50,53],"tindex":"290195cc-3e89-11e6-b18f-57d0aa0bbf6d","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:610","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(final java.lang.StringBuffer source) {\n    if (source == null) {\n        {\n            if (source == null) {\n                return false;\n            } \n            return replaceIn(source, 0, source.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1040","type":"CtBinaryOperatorImpl","sourcecode":"index < 0"},"failures":[219],"tindex":"2901bcdd-3e89-11e6-b18f-617b69f524f0","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1659","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final double value) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2065","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"2901bcde-3e89-11e6-b18f-f3d01b1cf8e0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:992","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                {\n                    buffer.append(java.lang.String);\n                    for (int int = 0 ; i < (array.int) ; i++) {\n                        if (i > 0) {\n                            buffer.append(java.lang.String);\n                        } \n                        appendDetail(buffer, fieldName, array[i]);\n                    }\n                    buffer.append(java.lang.String);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:462","type":"CtBinaryOperatorImpl","sourcecode":"obj == null"},"failures":[],"tindex":"2901bcdf-3e89-11e6-b18f-1350b213adbb","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:380","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.lang.Object obj, final java.lang.StringBuffer toAppendTo, final java.text.FieldPosition pos) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof java.util.Date) {\n                return format(((java.util.Date)(obj)), toAppendTo);\n            } else if (obj instanceof java.util.Calendar) {\n                return format(((java.util.Calendar)(obj)), toAppendTo);\n            } else if (obj instanceof java.lang.Long) {\n                return format(((java.lang.Long)(obj)).longValue(), toAppendTo);\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Unknown class: \" + (obj == null ? \"<null>\" : obj.getClass().getName())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:363","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isBlank(cs)"},"failures":[398],"tindex":"2901e3f0-3e89-11e6-b18f-2d71b38fbdf2","method":{"position":"org.apache.commons.lang3.StringUtils:5990","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiPrintable(final java.lang.CharSequence cs) {\n    if (org.apache.commons.lang3.StringUtils.isBlank(cs)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((org.apache.commons.lang3.CharUtils.isAsciiPrintable(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:629","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[],"tindex":"2901e3f1-3e89-11e6-b18f-7fbb3d89a156","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:419","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for ( ; cls != null ; cls = cls.getSuperclass()) {\n                final java.lang.Class<?>[] java.lang.Class<?>[] = cls.getInterfaces();\n                for (int int = 0 ; i < (interfaces.int) ; i++) {\n                    if (!(java.lang.reflect.Modifier.isPublic(interfaces[i].getModifiers()))) {\n                        continue;\n                    } \n                    try {\n                        return interfaces[i].getDeclaredMethod(methodName, parameterTypes);\n                    } catch (final java.lang.NoSuchMethodException e) {\n                    }\n                    java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethodFromInterfaceNest(interfaces[i], methodName, parameterTypes);\n                    if (method != null) {\n                        return method;\n                    } \n                }\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[400],"tindex":"2901e3f2-3e89-11e6-b18f-114069a1c14f","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:511","type":"CtMethodImpl","sourcecode":"public static final java.lang.String escapeJson(final java.lang.String input) {\n    if (input != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:647","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[401,402,403,404],"tindex":"29020b03-3e89-11e6-b18f-6ba94e3c5063","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:224","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(date, pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.ClassUtils:642","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[405],"tindex":"29020b04-3e89-11e6-b18f-a383fc90dfb9","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:215","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeExactStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object[] args, java.lang.Class<?>[] parameterTypes) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (cls == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            parameterTypes = org.apache.commons.lang3.ArrayUtils.nullToEmpty(parameterTypes);\n            final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(cls, methodName, parameterTypes);\n            if (method == null) {\n                throw new java.lang.NoSuchMethodException((((\"No such accessible method: \" + methodName) + \"() on class: \") + (cls.getName())));\n            } \n            return method.invoke(null, args);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:927","type":"CtBinaryOperatorImpl","sourcecode":"(seq == null) || (searchSeq == null)"},"failures":[406],"tindex":"29020b05-3e89-11e6-b18f-4b31aa1d8e54","method":{"position":"org.apache.commons.lang3.StringUtils:966","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if ((searchSeq == null) || (searchSeq == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchSeq, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"searchSeq":"searchSeq","seq":"searchSeq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:202","type":"CtInvocationImpl","sourcecode":"className.startsWith(\"[\")"},"failures":[407,408,409,217],"tindex":"29023216-3e89-11e6-b18f-f99a266c0d39","method":{"position":"org.apache.commons.lang3.ClassUtils:959","type":"CtMethodImpl","sourcecode":"private static java.lang.String toCanonicalName(java.lang.String className) {\n    if (className.startsWith(\"[\")) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            className = org.apache.commons.lang3.StringUtils.deleteWhitespace(className);\n            if (className == null) {\n                throw new java.lang.NullPointerException(\"className must not be null.\");\n            } else if (className.endsWith(\"[]\")) {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                while (className.endsWith(\"[]\")) {\n                    className = className.substring(0, ((className.length()) - 2));\n                    classNameBuffer.append(\"[\");\n                }\n                final java.lang.String java.lang.String = org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.get(className);\n                if (abbreviation != null) {\n                    classNameBuffer.append(abbreviation);\n                } else {\n                    classNameBuffer.append(\"L\").append(className).append(\";\");\n                }\n                className = classNameBuffer.toString();\n            } \n            return className;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:264","type":"CtBinaryOperatorImpl","sourcecode":"(ch >= 56320) && (ch <= 57343)"},"failures":[],"tindex":"29023217-3e89-11e6-b18f-e3503839bae4","method":{"position":"org.apache.commons.lang3.CharRange:170","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if ((ch >= 56320) && (ch <= 57343)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259494956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((ch >= (char)) && (ch <= (char))) != (boolean);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
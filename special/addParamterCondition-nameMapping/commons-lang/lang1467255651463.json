{"failureDictionary":{"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_String":83,"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":229,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":280,"org.apache.commons.lang3.StringUtilsTest.testIsNoneEmpty":268,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":132,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":127,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit":330,"org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt":90,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean":270,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedFieldForceAccess":33,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char":77,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG815":333,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":230,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String":166,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testCreateIfAbsentKeyNotPresent":260,"org.apache.commons.lang3.text.StrBuilderTest.testToCharArray":79,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":193,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt":258,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteIntInt":74,"org.apache.commons.lang3.ArrayUtilsTest.testContainsLong":14,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_String_String":72,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":124,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":285,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":85,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementLongArray":374,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":113,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAll":323,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":377,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":119,"org.apache.commons.lang3.text.StrBuilderTest.testIsEmpty":103,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":197,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":98,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int":112,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int":174,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array":189,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":313,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":237,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":367,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294":45,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder":164,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":195,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":9,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":227,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":314,"org.apache.commons.lang3.text.StrBuilderTest.testHashCode":89,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":252,"org.apache.commons.lang3.mutable.MutableLongTest.testSetNull":202,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":115,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":143,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int":150,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException3":19,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException4":20,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int_int":306,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException1":18,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String":179,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO":338,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":116,"org.apache.commons.lang3.text.StrBuilderTest.testRightString":55,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int":184,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString":186,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int":188,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":120,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int":152,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":198,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":50,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String":107,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":316,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":308,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString":348,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":81,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testCreateIfAbsentUncheckedSuccess":263,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":294,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array":169,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArray":277,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":10,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int":221,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int":8,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String":78,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":311,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase":328,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":361,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testCreateIfAbsentUncheckedException":262,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":340,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858":371,"org.apache.commons.lang3.text.StrBuilderTest.testClear":52,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt":349,"org.apache.commons.lang3.text.StrBuilderTest.testToStringBuilder":64,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBeforeLast_StringString":320,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder":37,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":34,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder":182,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":165,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace":100,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmpty":144,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":194,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray":372,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException2":27,"org.apache.commons.lang3.text.StrBuilderTest.testToStringBuffer":105,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int":156,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":125,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":234,"org.apache.commons.lang3.ClassUtilsTest.testHierarchyIncludingInterfaces":282,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine":155,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":381,"org.apache.commons.lang3.ArrayUtilsTest.testReverseBoolean":206,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithDate":5,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":145,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":126,"org.apache.commons.lang3.text.StrBuilderTest.testGetChars":47,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG984":335,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG982":334,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":129,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":239,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":293,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":199,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":267,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":254,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator":158,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBoolean":276,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":161,"org.apache.commons.lang3.text.StrBuilderTest.testAsWriter":66,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean":273,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":243,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean":149,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char":95,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher":102,"org.apache.commons.lang3.text.StrBuilderTest.testEqualsIgnoreCase":61,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfWithStartIndex":355,"org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig":22,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords":345,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar":347,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException1":30,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfChar":358,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithDate":7,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException4":32,"org.apache.commons.lang3.text.StrBuilderTest.testLang294":67,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccessIllegalArgumentException2":23,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccessIllegalArgumentException3":31,"org.apache.commons.lang3.text.StrBuilderTest.testSubstringIntInt":59,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt":255,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText":172,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":253,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":15,"org.apache.commons.lang3.text.StrBuilderTest.testLang295":68,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":232,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":246,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":305,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBetween":370,"org.apache.commons.lang3.ArrayUtilsTest.testCloneLong":373,"org.apache.commons.lang3.text.StrBuilderTest.testStartsWith":110,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString":175,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":299,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":250,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_char_char":69,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":375,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithDate":4,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder":162,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":292,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int":180,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":93,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":134,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf":302,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String":168,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401":343,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBefore_StringString":376,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":248,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":114,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":191,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanMultiArray":278,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":300,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":40,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":256,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":208,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":298,"org.apache.commons.lang3.math.FractionTest.testFactory_String_improper":11,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":170,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String":65,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":233,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_Throwable":364,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShortWithStartIndex":290,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords":342,"org.apache.commons.lang3.text.StrBuilderTest.testMidString":84,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":295,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer":157,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean":207,"org.apache.commons.lang3.text.StrBuilderTest.testMinimizeCapacity":58,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":139,"org.apache.commons.lang3.text.StrBuilderTest.testConstructors":57,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":88,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":226,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testDurationsByBruteForce":331,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection":146,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedField":24,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToNull_String":324,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticField":16,"org.apache.commons.lang3.text.StrBuilderTest.testLength":99,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":228,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":142,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":213,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean":271,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray":187,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripStart_StringString":322,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":244,"org.apache.commons.lang3.text.StrBuilderTest.testToString":56,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":128,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281":346,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":378,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":241,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":42,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":238,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField":35,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":135,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":171,"org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt":104,"org.apache.commons.lang3.text.StrBuilderTest.testAsReader":63,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod":332,"org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity":82,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String":48,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object":163,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":214,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissing":220,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_char":49,"org.apache.commons.lang3.ArrayUtilsTest.testContainsChar":357,"org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength":62,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables":136,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":138,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":352,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection":153,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":209,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG972":210,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":240,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":140,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char":159,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int":97,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":379,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":176,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":117,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":296,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_StringString":325,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_char":101,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBelow":222,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration":344,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny":38,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int":151,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":122,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short_short":317,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteCharAt":71,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":121,"org.apache.commons.lang3.text.StrBuilderTest.testEndsWith":44,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":363,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":118,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":167,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":236,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int":108,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testBooleanArrayAsObject":279,"org.apache.commons.lang3.time.DateUtilsTest.testToCalendar":307,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":274,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":204,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding":178,"org.apache.commons.lang3.math.FractionTest.testAdd":265,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":190,"org.apache.commons.lang3.text.StrBuilderTest.testChaining":353,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf":303,"org.apache.commons.lang3.text.StrBuilderTest.testLeftString":96,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate":6,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":281,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":17,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException":359,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":366,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissingIgnoreCase":219,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_double":264,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOf":354,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":41,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String":43,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char_int":51,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber":181,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":310,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfInts":315,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":223,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":130,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":365,"org.apache.commons.lang3.text.StrBuilderTest.testContains_String":60,"org.apache.commons.lang3.text.StrBuilderTest.testContains_char":73,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray":287,"org.apache.commons.lang3.text.StrBuilderTest.testSubSequenceIntInt":46,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator":160,"org.apache.commons.lang3.StringUtilsTest.testNormalizeSpace":203,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":75,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":211,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":235,"org.apache.commons.lang3.text.StrBuilderTest.testCapacity":86,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":205,"org.apache.commons.lang3.text.StrBuilderTest.testSize":53,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String_int":70,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":368,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":200,"org.apache.commons.lang3.time.DateUtilsTest.testRound":201,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_char_char":76,"org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_Boolean":269,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Object":301,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar":350,"org.apache.commons.lang3.ClassUtilsTest.testGetClassInvalidArguments":218,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":247,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":380,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticFieldForceAccess":21,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":284,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfMonthWithDate":0,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":242,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":183,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess":36,"org.apache.commons.lang3.text.StrBuilderTest.testCharAt":92,"org.apache.commons.lang3.ArrayUtilsTest.testContainsShort":288,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":304,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToEmpty_String":326,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLowDurations":336,"org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt":109,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder":154,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":225,"org.apache.commons.lang3.text.StrBuilderTest.testSetCharAt":87,"org.apache.commons.lang3.text.StrBuilderTest.testTrim":54,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":312,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations":341,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":251,"org.apache.commons.lang3.math.FractionTest.testSubtract":266,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithAny":39,"org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String":217,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testAbove":369,"org.apache.commons.lang3.math.FractionTest.testFactory_String_proper":13,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":216,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":245,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":360,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testCreateIfAbsentKeyPresent":261,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int":177,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":123,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":231,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShort":289,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":297,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":249,"org.apache.commons.lang3.ArrayUtilsTest.testHashCode":275,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfDayWithDate":3,"org.apache.commons.lang3.mutable.MutableDoubleTest.testGetSet":321,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS":337,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":196,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccess":28,"org.apache.commons.lang3.ClassUtilsTest.testHierarchyExcludingInterfaces":283,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":12,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedField":26,"org.apache.commons.lang3.ConversionTest.testByteToHex":291,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":309,"org.apache.commons.lang3.text.StrBuilderTest.testSetLength":91,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":133,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":319,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticField":29,"org.apache.commons.lang3.text.StrBuilderTest.testEquals":94,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray":185,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":224,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":111,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher":80,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":141,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":356,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testHoursOfYearWithDate":1,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFully_String":259,"org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt":351,"org.apache.commons.lang3.ArrayUtilsTest.testCloneDouble":257,"org.apache.commons.lang3.BooleanUtilsTest.test_toString_Boolean_String_String_String":272,"org.apache.commons.lang3.text.StrBuilderTest.testAsBuilder":106,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":192,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet":329,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_String":327,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":137,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber":148,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticField":25,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":362,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":147,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithDate":2,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String":286,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":318,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":339,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":212,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int":173,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":131,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":215},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:884","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[0,1,2,3,4,5,6,7],"tindex":"da845895-3e6e-11e6-8dfc-a979aef9f6c0","method":{"position":"org.apache.commons.lang3.time.DateUtils:1403","type":"CtMethodImpl","sourcecode":"public static long getFragmentInHours(final java.util.Date date, final int fragment) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(date, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2594","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[8],"tindex":"da84a6b6-3e6e-11e6-8dfc-17e1f49ae4e3","method":{"position":"org.apache.commons.lang3.text.StrBuilder:646","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuilder str, final int startIndex, final int length) {\n    if (length < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            if ((startIndex < 0) || (startIndex > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"startIndex must be valid\");\n            } \n            if ((length < 0) || ((startIndex + length) > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"length must be valid\");\n            } \n            if (length > 0) {\n                final int int = length();\n                ensureCapacity((len + length));\n                str.getChars(startIndex, (startIndex + length), char[], len);\n                int += length;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[9,10],"tindex":"da84cdc7-3e6e-11e6-8dfc-0d62ce790e81","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1024","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        {\n            int int = calendar.get(java.util.Calendar.java.util.Calendar.int);\n            if (value == 0) {\n                value = (calendar.getLeastMaximum(java.util.Calendar.java.util.Calendar.int)) + 1;\n            } \n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1389","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"da84cdc8-3e6e-11e6-8dfc-87af8f76d21d","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:357","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.Class<?> toClass) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return (toClass == null) || (!(toClass.isPrimitive()));\n            } \n            if (toClass == null) {\n                return false;\n            } \n            if (toClass.equals(type)) {\n                return true;\n            } \n            if (type instanceof java.lang.Class<?>) {\n                return org.apache.commons.lang3.ClassUtils.isAssignable(((java.lang.Class<?>)(type)), toClass);\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.isAssignable(org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(type))), toClass);\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                for (final java.lang.reflect.Type java.lang.reflect.Type : ((java.lang.reflect.TypeVariable<?>)(type)).getBounds()) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toClass)) {\n                        return true;\n                    } \n                }\n                return false;\n            } \n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                return (toClass.equals(java.lang.Object.java.lang.Object.java.lang.Class)) || ((toClass.isArray()) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType(), toClass.getComponentType())));\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                return false;\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:391","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"da84f4d9-3e6e-11e6-8dfc-7b1e69f99db6","method":{"position":"org.apache.commons.lang3.text.CompositeFormat:83","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object parseObject(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.text.Format.parseObject(source, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:345","type":"CtArrayReadImpl","sourcecode":"src[srcPos]"},"failures":[],"tindex":"da84f4da-3e6e-11e6-8dfc-ad527aeb3db1","method":{"position":"org.apache.commons.lang3.Conversion:1042","type":"CtMethodImpl","sourcecode":"public static long binaryToLong(final boolean[] src, final int srcPos, final long dstInit, final int dstPos, final int nBools) {\n    if (src[dstPos]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 64\");\n            } \n            long long = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final long long = (src[(i + srcPos)] ? 1L : 0) << shift;\n                final long long = 1L << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"dstPos","src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:529","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[],"tindex":"da84f4db-3e6e-11e6-8dfc-c98c5863d568","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1468","type":"CtMethodImpl","sourcecode":"protected void appendIdentityHashCode(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.this.isUseIdentityHashCode()) && (object != null)) {\n                org.apache.commons.lang3.builder.ToStringStyle.register(object);\n                buffer.append('@');\n                buffer.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3076","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[11,12,13],"tindex":"da851bec-3e6e-11e6-8dfc-179ea5354ab1","method":{"position":"org.apache.commons.lang3.math.Fraction:319","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        throw new java.lang.IllegalArgumentException(\"The string must not be null\");\n                    } \n                    int int = str.indexOf('.');\n                    if (pos >= 0) {\n                        return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Double.parseDouble(str));\n                    } \n                    pos = str.indexOf(' ');\n                    if (pos > 0) {\n                        final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                        str = str.substring((pos + 1));\n                        pos = str.indexOf('/');\n                        if (pos < 0) {\n                            throw new java.lang.NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\n                        } else {\n                            final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                            final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                            return org.apache.commons.lang3.math.Fraction.getFraction(whole, numer, denom);\n                        }\n                    } \n                    pos = str.indexOf('/');\n                    if (pos < 0) {\n                        return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Integer.parseInt(str), 1);\n                    } else {\n                        final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                        final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                        return org.apache.commons.lang3.math.Fraction.getFraction(numer, denom);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:121","type":"CtBinaryOperatorImpl","sourcecode":"locale == null"},"failures":[],"tindex":"da851bed-3e6e-11e6-8dfc-37fed3d0e6ac","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:153","type":"CtMethodImpl","sourcecode":"public static java.lang.String formatUTC(final long millis, final java.lang.String pattern, final java.util.Locale locale) {\n    if (locale == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(new java.util.Date(millis), pattern, org.apache.commons.lang3.time.DateFormatUtils.org.apache.commons.lang3.time.DateFormatUtils.java.util.TimeZone, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1784","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[14],"tindex":"da8542fe-3e6e-11e6-8dfc-653aa633824e","method":{"position":"org.apache.commons.lang3.ArrayUtils:2090","type":"CtMethodImpl","sourcecode":"public static boolean contains(final long[] array, final long valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:549","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"da8542ff-3e6e-11e6-8dfc-bd22d9b25eb8","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.Validate.isTrue((cls != null), \"The class must not be null\");\n            org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\n            for (java.lang.Class<?> java.lang.Class<?> = cls ; acls != null ; acls = acls.getSuperclass()) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = acls.getDeclaredField(fieldName);\n                    if (!(java.lang.reflect.Modifier.isPublic(field.getModifiers()))) {\n                        if (forceAccess) {\n                            field.setAccessible(true);\n                        } else {\n                            continue;\n                        }\n                    } \n                    return field;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            java.lang.reflect.Field java.lang.reflect.Field = null;\n            for (final java.lang.Class<?> java.lang.Class<?> : org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls)) {\n                try {\n                    final java.lang.reflect.Field java.lang.reflect.Field = class1.getField(fieldName);\n                    org.apache.commons.lang3.Validate.isTrue((match == null), (\"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\"), fieldName, cls);\n                    match = test;\n                } catch (final java.lang.NoSuchFieldException ex) {\n                }\n            }\n            return match;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:120","type":"CtBinaryOperatorImpl","sourcecode":"(str.charAt(3)) != '_'"},"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,8,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],"tindex":"da854300-3e6e-11e6-8dfc-71f4332161b4","method":{"position":"org.apache.commons.lang3.text.StrBuilder:509","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.String str) {\n    if ((str.charAt(3)) != '_') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2034","type":"CtBinaryOperatorImpl","sourcecode":"sizeEndText == null"},"failures":[],"tindex":"da856a11-3e6e-11e6-8dfc-ef795a95f154","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:492","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setSizeEndText(final java.lang.String sizeEndText) {\n    if (sizeEndText == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setSizeEndText(sizeEndText);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeEndText":"sizeEndText"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:179","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"da856a12-3e6e-11e6-8dfc-1bf1d4634f91","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:232","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs, final java.lang.String... excludeFields) {\n    if (!(java.util.Arrays.equals(rhs, lhs))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, false, null, excludeFields);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:829","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"da856a13-3e6e-11e6-8dfc-c554478fec86","method":{"position":"org.apache.commons.lang3.time.DateUtils:737","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar round(final java.util.Calendar date, final int field) {\n    if (date == null) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = ((java.util.Calendar)(date.clone()));\n            org.apache.commons.lang3.time.DateUtils.modify(rounded, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return rounded;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:239","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[202],"tindex":"da859124-3e6e-11e6-8dfc-6d4f52ed18ed","method":{"position":"org.apache.commons.lang3.mutable.MutableLong:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableLong.this.long = value.longValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2207","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[203],"tindex":"da859125-3e6e-11e6-8dfc-a5e7bfcdc44c","method":{"position":"org.apache.commons.lang3.StringUtils:7363","type":"CtMethodImpl","sourcecode":"public static java.lang.String normalizeSpace(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.util.regex.Pattern.matcher(org.apache.commons.lang3.StringUtils.trim(str)).replaceAll(org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:722","type":"CtBinaryOperatorImpl","sourcecode":"chars == null"},"failures":[183],"tindex":"da859126-3e6e-11e6-8dfc-f112e4cbad7d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1521","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final char[] chars) {\n    if (chars == null) {\n        {\n            validateIndex(index);\n            if (chars == null) {\n                return insert(index, java.lang.String);\n            } \n            final int int = chars.int;\n            if (len > 0) {\n                ensureCapacity(((int) + len));\n                java.lang.System.arraycopy(char[], index, char[], (index + len), ((int) - index));\n                java.lang.System.arraycopy(chars, 0, char[], index, len);\n                int += len;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"chars"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:117","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 4095"},"failures":[],"tindex":"da859127-3e6e-11e6-8dfc-8da3bc771e04","method":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:73","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.UnicodeEscaper above(final int codepoint) {\n    if (codepoint > 4095) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(0, codepoint);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:629","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[204],"tindex":"da85b838-3e6e-11e6-8dfc-43bfb73b8e01","method":{"position":"org.apache.commons.lang3.ClassUtils:593","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?> cls, final java.lang.Class<?> toClass) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(cls, toClass, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:179","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"da85b839-3e6e-11e6-8dfc-79486fc35f94","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:967","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n    if (!(java.util.Arrays.equals(rhs, rhs))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:848","type":"CtBinaryOperatorImpl","sourcecode":"(obj instanceof org.apache.commons.lang3.math.Fraction) == false"},"failures":[],"tindex":"da85b83a-3e6e-11e6-8dfc-fd6e995a8655","method":{"position":"org.apache.commons.lang3.concurrent.ConstantInitializer:106","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\n@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((obj instanceof org.apache.commons.lang3.math.Fraction) == false) {\n        {\n            if ((org.apache.commons.lang3.concurrent.ConstantInitializer.this) == obj) {\n                return true;\n            } \n            if (!(obj instanceof org.apache.commons.lang3.concurrent.ConstantInitializer<?>)) {\n                return false;\n            } \n            final org.apache.commons.lang3.concurrent.ConstantInitializer<?> org.apache.commons.lang3.concurrent.ConstantInitializer<?> = ((org.apache.commons.lang3.concurrent.ConstantInitializer<?>)(obj));\n            return org.apache.commons.lang3.ObjectUtils.equals(getObject(), c.getObject());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:647","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[205],"tindex":"da85df4b-3e6e-11e6-8dfc-85b36c0c5d60","method":{"position":"org.apache.commons.lang3.time.DateUtils:935","type":"CtMethodImpl","sourcecode":"public static java.util.Date ceiling(final java.lang.Object date, final int field) {\n    if (date == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.ceiling(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.ceiling(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not find ceiling of for type: \" + (date.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[206],"tindex":"da85df4c-3e6e-11e6-8dfc-6fb449043f66","method":{"position":"org.apache.commons.lang3.ArrayUtils:1547","type":"CtMethodImpl","sourcecode":"public static void reverse(final boolean[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return ;\n            } \n            org.apache.commons.lang3.ArrayUtils.reverse(array, 0, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:64","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[207],"tindex":"da85df4d-3e6e-11e6-8dfc-b7c89ebda0f4","method":{"position":"org.apache.commons.lang3.BooleanUtils:175","type":"CtMethodImpl","sourcecode":"public static boolean toBooleanDefaultIfNull(final java.lang.Boolean bool, final boolean valueIfNull) {\n    if (bool == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (bool == null) {\n                return valueIfNull;\n            } \n            return bool.booleanValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:324","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[208,209,210,211,212,213,214,215,216],"tindex":"da85df4e-3e6e-11e6-8dfc-13548bd200bc","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                        throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n                    } \n                    final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n                    int int = 0;\n                    for (final java.lang.String java.lang.String : hex_prefixes) {\n                        if (str.startsWith(pfx)) {\n                            pfxLen += pfx.length();\n                            break;\n                        } \n                    }\n                    if (pfxLen > 0) {\n                        char char = 0;\n                        for (int int = pfxLen ; i < (str.length()) ; i++) {\n                            firstSigDigit = str.charAt(i);\n                            if (firstSigDigit == '0') {\n                                pfxLen++;\n                            } else {\n                                break;\n                            }\n                        }\n                        final int int = (str.length()) - pfxLen;\n                        if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                        } \n                        if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                            return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                        } \n                        return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                    } \n                    final char char = str.charAt(((str.length()) - 1));\n                    java.lang.String java.lang.String;\n                    java.lang.String java.lang.String;\n                    java.lang.String java.lang.String;\n                    final int int = str.indexOf('.');\n                    final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n                    int int = 0;\n                    if (decPos > (-1)) {\n                        if (expPos > (-1)) {\n                            if ((expPos < decPos) || (expPos > (str.length()))) {\n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                            } \n                            dec = str.substring((decPos + 1), expPos);\n                        } else {\n                            dec = str.substring((decPos + 1));\n                        }\n                        mant = str.substring(0, decPos);\n                        numDecimals = dec.length();\n                    } else {\n                        if (expPos > (-1)) {\n                            if (expPos > (str.length())) {\n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                            } \n                            mant = str.substring(0, expPos);\n                        } else {\n                            mant = str;\n                        }\n                        dec = null;\n                    }\n                    if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                        if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                            exp = str.substring((expPos + 1), ((str.length()) - 1));\n                        } else {\n                            exp = null;\n                        }\n                        final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                        final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                        switch (lastChar) {\n                            case 'l' :\n                            case 'L' :\n                                if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                                    try {\n                                        return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                                    } catch (final java.lang.NumberFormatException nfe) {\n                                    }\n                                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                                } \n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                            case 'f' :\n                            case 'F' :\n                                try {\n                                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                        return f;\n                                    } \n                                } catch (final java.lang.NumberFormatException nfe) {\n                                }\n                            case 'd' :\n                            case 'D' :\n                                try {\n                                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                                    if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                        return d;\n                                    } \n                                } catch (final java.lang.NumberFormatException nfe) {\n                                }\n                                try {\n                                    return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                                } catch (final java.lang.NumberFormatException e) {\n                                }\n                            default :\n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                        }\n                    } \n                    if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                        exp = str.substring((expPos + 1), str.length());\n                    } else {\n                        exp = null;\n                    }\n                    if ((dec == null) && (exp == null)) {\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                    } \n                    final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                    try {\n                        if (numDecimals <= 7) {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } \n                    } catch (final java.lang.NumberFormatException nfe) {\n                    }\n                    try {\n                        if (numDecimals <= 16) {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                            if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } \n                    } catch (final java.lang.NumberFormatException nfe) {\n                    }\n                    return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.NumberFormatException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NumberFormatException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.StringUtils:2332","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[],"tindex":"da86065f-3e6e-11e6-8dfc-154b24069e96","method":{"position":"org.apache.commons.lang3.time.DateUtils:332","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDateStrictly(final java.lang.String str, final java.util.Locale locale, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(str, null, parsePatterns, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3076","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[217,218],"tindex":"da860660-3e6e-11e6-8dfc-6dceae3c4bc3","method":{"position":"org.apache.commons.lang3.StringUtils:4170","type":"CtMethodImpl","sourcecode":"public static java.lang.String deleteWhitespace(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            final int int = str.length();\n            final char[] char[] = new char[sz];\n            int int = 0;\n            for (int int = 0 ; i < sz ; i++) {\n                if (!(java.lang.Character.isWhitespace(str.charAt(i)))) {\n                    chs[(count++)] = str.charAt(i);\n                } \n            }\n            if (count == sz) {\n                return str;\n            } \n            return new java.lang.String(chs , 0 , count);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.StringUtils:2949","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"da862d71-3e6e-11e6-8dfc-8576791a7c5b","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str == null) {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return null;\n                    } \n                    if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                        throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n                    } \n                    final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n                    int int = 0;\n                    for (final java.lang.String java.lang.String : hex_prefixes) {\n                        if (str.startsWith(pfx)) {\n                            pfxLen += pfx.length();\n                            break;\n                        } \n                    }\n                    if (pfxLen > 0) {\n                        char char = 0;\n                        for (int int = pfxLen ; i < (str.length()) ; i++) {\n                            firstSigDigit = str.charAt(i);\n                            if (firstSigDigit == '0') {\n                                pfxLen++;\n                            } else {\n                                break;\n                            }\n                        }\n                        final int int = (str.length()) - pfxLen;\n                        if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                        } \n                        if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                            return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                        } \n                        return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                    } \n                    final char char = str.charAt(((str.length()) - 1));\n                    java.lang.String java.lang.String;\n                    java.lang.String java.lang.String;\n                    java.lang.String java.lang.String;\n                    final int int = str.indexOf('.');\n                    final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n                    int int = 0;\n                    if (decPos > (-1)) {\n                        if (expPos > (-1)) {\n                            if ((expPos < decPos) || (expPos > (str.length()))) {\n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                            } \n                            dec = str.substring((decPos + 1), expPos);\n                        } else {\n                            dec = str.substring((decPos + 1));\n                        }\n                        mant = str.substring(0, decPos);\n                        numDecimals = dec.length();\n                    } else {\n                        if (expPos > (-1)) {\n                            if (expPos > (str.length())) {\n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                            } \n                            mant = str.substring(0, expPos);\n                        } else {\n                            mant = str;\n                        }\n                        dec = null;\n                    }\n                    if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                        if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                            exp = str.substring((expPos + 1), ((str.length()) - 1));\n                        } else {\n                            exp = null;\n                        }\n                        final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                        final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                        switch (lastChar) {\n                            case 'l' :\n                            case 'L' :\n                                if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                                    try {\n                                        return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                                    } catch (final java.lang.NumberFormatException nfe) {\n                                    }\n                                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                                } \n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                            case 'f' :\n                            case 'F' :\n                                try {\n                                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                        return f;\n                                    } \n                                } catch (final java.lang.NumberFormatException nfe) {\n                                }\n                            case 'd' :\n                            case 'D' :\n                                try {\n                                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                                    if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                        return d;\n                                    } \n                                } catch (final java.lang.NumberFormatException nfe) {\n                                }\n                                try {\n                                    return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                                } catch (final java.lang.NumberFormatException e) {\n                                }\n                            default :\n                                throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                        }\n                    } \n                    if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                        exp = str.substring((expPos + 1), str.length());\n                    } else {\n                        exp = null;\n                    }\n                    if ((dec == null) && (exp == null)) {\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                    } \n                    final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                    try {\n                        if (numDecimals <= 7) {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } \n                    } catch (final java.lang.NumberFormatException nfe) {\n                    }\n                    try {\n                        if (numDecimals <= 16) {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                            if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } \n                    } catch (final java.lang.NumberFormatException nfe) {\n                    }\n                    return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.NumberFormatException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NumberFormatException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7364","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[219,220],"tindex":"da862d72-3e6e-11e6-8dfc-bf486e5a1da6","method":{"position":"org.apache.commons.lang3.StringUtils:7411","type":"CtMethodImpl","sourcecode":"private static java.lang.String appendIfMissing(final java.lang.String str, final java.lang.CharSequence suffix, final boolean ignoreCase, final java.lang.CharSequence... suffixes) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(suffix))) || (org.apache.commons.lang3.StringUtils.endsWith(str, suffix, ignoreCase))) {\n                return str;\n            } \n            if ((suffixes != null) && ((suffixes.int) > 0)) {\n                for (final java.lang.CharSequence java.lang.CharSequence : suffixes) {\n                    if (org.apache.commons.lang3.StringUtils.endsWith(str, s, ignoreCase)) {\n                        return str;\n                    } \n                }\n            } \n            return str + (suffix.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:490","type":"CtBinaryOperatorImpl","sourcecode":"(numerator) == 0"},"failures":[221],"tindex":"da865483-3e6e-11e6-8dfc-d7e9d303caeb","method":{"position":"org.apache.commons.lang3.math.Fraction:141","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(int numerator, int denominator) {\n    if (denominator == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (denominator == 0) {\n                throw new java.lang.ArithmeticException(\"The denominator must not be zero\");\n            } \n            if (denominator < 0) {\n                if ((numerator == (java.lang.Integer.java.lang.Integer.int)) || (denominator == (java.lang.Integer.java.lang.Integer.int))) {\n                    throw new java.lang.ArithmeticException(\"overflow: can't negate\");\n                } \n                numerator = -numerator;\n                denominator = -denominator;\n            } \n            return new org.apache.commons.lang3.math.Fraction(numerator , denominator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"numerator":"denominator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:115","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 65535"},"failures":[222],"tindex":"da865484-3e6e-11e6-8dfc-3769e7e05689","method":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:63","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.UnicodeEscaper below(final int codepoint) {\n    if (codepoint > 65535) {\n        {\n            return org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(codepoint, java.lang.Integer.java.lang.Integer.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"da865485-3e6e-11e6-8dfc-37c3096f2b1a","method":{"position":"org.apache.commons.lang3.time.FastDateParser:434","type":"CtMethodImpl","sourcecode":"void setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:734","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254],"tindex":"da865486-3e6e-11e6-8dfc-61273ca023ff","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:153","type":"CtMethodImpl","sourcecode":"static boolean isRegistered(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (rhs == null) {\n        {\n            final java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(lhs, rhs);\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.tuple.Pair.of(pair.getLeft(), pair.getRight());\n            return (registry != null) && ((registry.contains(pair)) || (registry.contains(swappedPair)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:863","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(seq)"},"failures":[255],"tindex":"da867b97-3e6e-11e6-8dfc-b58340c395c6","method":{"position":"org.apache.commons.lang3.StringUtils:1191","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final int searchChar, final int startPos) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[189],"tindex":"da867b98-3e6e-11e6-8dfc-754f7191f0a1","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1131","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendWithSeparators(final java.lang.Object[] array, final java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array != null) && ((array.int) > 0)) {\n                @java.lang.SuppressWarnings(value = \"deprecation\")\n                final java.lang.String java.lang.String = org.apache.commons.lang3.ObjectUtils.toString(separator);\n                append(array[0]);\n                for (int int = 1 ; i < (array.int) ; i++) {\n                    append(sep);\n                    append(array[i]);\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2559","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[256,257],"tindex":"da867b99-3e6e-11e6-8dfc-65413de96402","method":{"position":"org.apache.commons.lang3.ArrayUtils:418","type":"CtMethodImpl","sourcecode":"public static double[] clone(final double[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1113","type":"CtBinaryOperatorImpl","sourcecode":"startPos < 0"},"failures":[258],"tindex":"da867b9a-3e6e-11e6-8dfc-936dfe2ffaca","method":{"position":"org.apache.commons.lang3.StringUtils:966","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if (startPos < 0) {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchSeq, startPos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startPos":"startPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:525","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[259],"tindex":"da867b9b-3e6e-11e6-8dfc-3161085dad8c","method":{"position":"org.apache.commons.lang3.text.WordUtils:323","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalizeFully(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.WordUtils.capitalizeFully(str, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"org.apache.commons.lang3.concurrent.ConcurrentException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:274","type":"CtBinaryOperatorImpl","sourcecode":"(map == null) || (init == null)"},"failures":[260,261,262,263],"tindex":"da867b9c-3e6e-11e6-8dfc-b731ba959fea","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:272","type":"CtMethodImpl","sourcecode":"public static <K, V>V createIfAbsent(final java.util.concurrent.ConcurrentMap<K, V> map, final K key, final org.apache.commons.lang3.concurrent.ConcurrentInitializer<V> init) throws org.apache.commons.lang3.concurrent.ConcurrentException {\n    if ((map == null) || (init == null)) {\n        {\n            if ((map == null) || (init == null)) {\n                return null;\n            } \n            final V V = map.get(key);\n            if (value == null) {\n                return org.apache.commons.lang3.concurrent.ConcurrentUtils.putIfAbsent(map, key, init.get());\n            } \n            return value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.lang3.concurrent.ConcurrentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"init":"init","map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1648","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"da86a2ad-3e6e-11e6-8dfc-c3216d502b63","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Date date, final java.lang.StringBuffer buf) {\n    if (date == null) {\n        {\n            final java.util.Calendar java.util.Calendar = newCalendar();\n            c.setTime(date);\n            return applyRules(c, buf);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-3},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1275","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[264,246],"tindex":"da86a2ae-3e6e-11e6-8dfc-4d86c4fce358","method":{"position":"org.apache.commons.lang3.ArrayUtils:3341","type":"CtMethodImpl","sourcecode":"public static java.lang.Double[] toObject(final double[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Double[];\n            } \n            final java.lang.Double[] java.lang.Double[] = new java.lang.Double[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Double.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:741","type":"CtBinaryOperatorImpl","sourcecode":"fraction == null"},"failures":[265,266],"tindex":"da86a2af-3e6e-11e6-8dfc-71f40a7369d6","method":{"position":"org.apache.commons.lang3.math.Fraction:740","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.math.Fraction addSub(final org.apache.commons.lang3.math.Fraction fraction, final boolean isAdd) {\n    if (fraction == null) {\n        {\n            if (fraction == null) {\n                throw new java.lang.IllegalArgumentException(\"The fraction must not be null\");\n            } \n            if ((int) == 0) {\n                return isAdd ? fraction : fraction.negate();\n            } \n            if ((fraction.int) == 0) {\n                return org.apache.commons.lang3.math.Fraction.this;\n            } \n            final int int = org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(int, fraction.int);\n            if (d1 == 1) {\n                final int int = org.apache.commons.lang3.math.Fraction.mulAndCheck(int, fraction.int);\n                final int int = org.apache.commons.lang3.math.Fraction.mulAndCheck(fraction.int, int);\n                return new org.apache.commons.lang3.math.Fraction((isAdd ? org.apache.commons.lang3.math.Fraction.addAndCheck(uvp, upv) : org.apache.commons.lang3.math.Fraction.subAndCheck(uvp, upv)) , org.apache.commons.lang3.math.Fraction.mulPosAndCheck(int, fraction.int));\n            } \n            final java.math.BigInteger java.math.BigInteger = java.math.BigInteger.valueOf(int).multiply(java.math.BigInteger.valueOf(((fraction.int) / d1)));\n            final java.math.BigInteger java.math.BigInteger = java.math.BigInteger.valueOf(fraction.int).multiply(java.math.BigInteger.valueOf(((int) / d1)));\n            final java.math.BigInteger java.math.BigInteger = isAdd ? uvp.add(upv) : uvp.subtract(upv);\n            final int int = t.mod(java.math.BigInteger.valueOf(d1)).intValue();\n            final int int = tmodd1 == 0 ? d1 : org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(tmodd1, d1);\n            final java.math.BigInteger java.math.BigInteger = t.divide(java.math.BigInteger.valueOf(d2));\n            if ((w.bitLength()) > 31) {\n                throw new java.lang.ArithmeticException(\"overflow: numerator too large after multiply\");\n            } \n            return new org.apache.commons.lang3.math.Fraction(w.intValue() , org.apache.commons.lang3.math.Fraction.mulPosAndCheck(((int) / d1), ((fraction.int) / d2)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fraction":"fraction"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:297","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[267,267],"tindex":"da86c9c0-3e6e-11e6-8dfc-bfa49d1fbd20","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:709","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final float value) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:259","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(css)"},"failures":[268],"tindex":"da86c9c1-3e6e-11e6-8dfc-1f25623df9c6","method":{"position":"org.apache.commons.lang3.StringUtils:287","type":"CtMethodImpl","sourcecode":"public static boolean isNoneEmpty(java.lang.CharSequence... css) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(css)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.lang3.StringUtils.isAnyEmpty(css));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"css":"css"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:64","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[269,270,271,272],"tindex":"da86c9c2-3e6e-11e6-8dfc-67509ffeb307","method":{"position":"org.apache.commons.lang3.BooleanUtils:811","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Boolean bool, final java.lang.String trueString, final java.lang.String falseString, final java.lang.String nullString) {\n    if (bool == null) {\n        {\n            if (bool == null) {\n                return nullString;\n            } \n            return bool.booleanValue() ? trueString : falseString;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6409","type":"CtBinaryOperatorImpl","sourcecode":"offset <= 4"},"failures":[],"tindex":"da86c9c3-3e6e-11e6-8dfc-ab1f2be65a8b","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:712","type":"CtMethodImpl","sourcecode":"public boolean replaceIn(final org.apache.commons.lang3.text.StrBuilder source, final int offset, final int length) {\n    if (offset <= 4) {\n        {\n            if (source == null) {\n                return false;\n            } \n            return substitute(source, offset, length);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1764","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[71,113,114,118,122,137,145],"tindex":"da86c9c4-3e6e-11e6-8dfc-9929956e8756","method":{"position":"org.apache.commons.lang3.text.StrBuilder:342","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteCharAt(final int index) {\n    if (index >= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((index < 0) || (index >= (int))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n            deleteImpl(index, (index + 1), 1);\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1499","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[48],"tindex":"da86c9c5-3e6e-11e6-8dfc-b5894b5e1b90","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2445","type":"CtMethodImpl","sourcecode":"public int lastIndexOf(final java.lang.String str) {\n    if (str != null) {\n        {\n            return lastIndexOf(str, ((int) - 1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"da86f0d6-3e6e-11e6-8dfc-832edde4dbcc","method":{"position":"org.apache.commons.lang3.math.Fraction:319","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        throw new java.lang.IllegalArgumentException(\"The string must not be null\");\n                    } \n                    int int = str.indexOf('.');\n                    if (pos >= 0) {\n                        return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Double.parseDouble(str));\n                    } \n                    pos = str.indexOf(' ');\n                    if (pos > 0) {\n                        final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                        str = str.substring((pos + 1));\n                        pos = str.indexOf('/');\n                        if (pos < 0) {\n                            throw new java.lang.NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\n                        } else {\n                            final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                            final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                            return org.apache.commons.lang3.math.Fraction.getFraction(whole, numer, denom);\n                        }\n                    } \n                    pos = str.indexOf('/');\n                    if (pos < 0) {\n                        return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Integer.parseInt(str), 1);\n                    } else {\n                        final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                        final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                        return org.apache.commons.lang3.math.Fraction.getFraction(numer, denom);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5125","type":"CtBinaryOperatorImpl","sourcecode":"repeat <= 0"},"failures":[273],"tindex":"da86f0d7-3e6e-11e6-8dfc-5d31105ccff1","method":{"position":"org.apache.commons.lang3.StringUtils:4684","type":"CtMethodImpl","sourcecode":"private static java.lang.String replaceEach(final java.lang.String text, final java.lang.String[] searchList, final java.lang.String[] replacementList, final boolean repeat, final int timeToLive) {\n    if (timeToLive <= 0) {\n        {\n            if ((((((text == null) || (text.isEmpty())) || (searchList == null)) || ((searchList.int) == 0)) || (replacementList == null)) || ((replacementList.int) == 0)) {\n                return text;\n            } \n            if (timeToLive < 0) {\n                throw new java.lang.IllegalStateException((\"Aborting to protect against StackOverflowError - \" + \"output of one loop is the input of another\"));\n            } \n            final int int = searchList.int;\n            final int int = replacementList.int;\n            if (searchLength != replacementLength) {\n                throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don't match: \" + searchLength) + \" vs \") + replacementLength));\n            } \n            final boolean[] boolean[] = new boolean[searchLength];\n            int int = -1;\n            int int = -1;\n            int int = -1;\n            for (int int = 0 ; i < searchLength ; i++) {\n                if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                tempIndex = text.indexOf(searchList[i]);\n                if (tempIndex == (-1)) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    } \n                }\n            }\n            if (textIndex == (-1)) {\n                return text;\n            } \n            int int = 0;\n            int int = 0;\n            for (int int = 0 ; i < (searchList.int) ; i++) {\n                if (((searchList[i]) == null) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                final int int = (replacementList[i].length()) - (searchList[i].length());\n                if (greater > 0) {\n                    increase += 3 * greater;\n                } \n            }\n            increase = java.lang.Math.min(increase, ((text.length()) / 5));\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n            while (textIndex != (-1)) {\n                for (int int = start ; i < textIndex ; i++) {\n                    buf.append(text.charAt(i));\n                }\n                buf.append(replacementList[replaceIndex]);\n                start = textIndex + (searchList[replaceIndex].length());\n                textIndex = -1;\n                replaceIndex = -1;\n                tempIndex = -1;\n                for (int int = 0 ; i < searchLength ; i++) {\n                    if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                        continue;\n                    } \n                    tempIndex = text.indexOf(searchList[i], start);\n                    if (tempIndex == (-1)) {\n                        noMoreMatchesForReplIndex[i] = true;\n                    } else {\n                        if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                            textIndex = tempIndex;\n                            replaceIndex = i;\n                        } \n                    }\n                }\n            }\n            final int int = text.length();\n            for (int int = start ; i < textLength ; i++) {\n                buf.append(text.charAt(i));\n            }\n            final java.lang.String java.lang.String = buf.toString();\n            if (!repeat) {\n                return result;\n            } \n            return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"repeat":"timeToLive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:253","type":"CtBinaryOperatorImpl","sourcecode":"style == null"},"failures":[274],"tindex":"da8717e8-3e6e-11e6-8dfc-2b18547d896c","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:135","type":"CtMethodImpl","sourcecode":"public static void setDefaultStyle(final org.apache.commons.lang3.builder.ToStringStyle style) {\n    if (style == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (style == null) {\n                throw new java.lang.IllegalArgumentException(\"The style must not be null\");\n            } \n            org.apache.commons.lang3.builder.ToStringBuilder.org.apache.commons.lang3.builder.ToStringBuilder.org.apache.commons.lang3.builder.ToStringStyle = style;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"style":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1577","type":"CtVariableReadImpl","sourcecode":"value"},"failures":[275,276,277,278,279],"tindex":"da8717e9-3e6e-11e6-8dfc-6f6f95d9463a","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:570","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.HashCodeBuilder append(final boolean value) {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int = ((int) * (int)) + (value ? 0 : 1);\n            return org.apache.commons.lang3.builder.HashCodeBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:383","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof java.util.Calendar"},"failures":[],"tindex":"da8717ea-3e6e-11e6-8dfc-9982ea997221","method":{"position":"org.apache.commons.lang3.tuple.Triple:110","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\n@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.util.Calendar) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.lang3.tuple.Triple.this)) {\n                return true;\n            } \n            if (obj instanceof org.apache.commons.lang3.tuple.Triple<?, ?, ?>) {\n                final org.apache.commons.lang3.tuple.Triple<?, ?, ?> org.apache.commons.lang3.tuple.Triple<?, ?, ?> = ((org.apache.commons.lang3.tuple.Triple<?, ?, ?>)(obj));\n                return ((org.apache.commons.lang3.ObjectUtils.equals(getLeft(), other.getLeft())) && (org.apache.commons.lang3.ObjectUtils.equals(getMiddle(), other.getMiddle()))) && (org.apache.commons.lang3.ObjectUtils.equals(getRight(), other.getRight()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:273","type":"CtInvocationImpl","sourcecode":"type.isAnnotation()"},"failures":[280,281,282,283],"tindex":"da8717eb-3e6e-11e6-8dfc-1967b4558288","method":{"position":"org.apache.commons.lang3.ClassUtils:1161","type":"CtMethodImpl","sourcecode":"public static java.lang.Iterable<java.lang.Class<?>> hierarchy(final java.lang.Class<?> type, org.apache.commons.lang3.ClassUtils.Interfaces interfacesBehavior) {\n    if (type.isAnnotation()) {\n        {\n            final java.lang.Iterable<java.lang.Class<?>> java.lang.Iterable<java.lang.Class<?>> = new java.lang.Iterable<java.lang.Class<?>>() {\n                @java.lang.Override\n                public java.util.Iterator<java.lang.Class<?>> iterator() {\n                    final org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>> org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>> = new org.apache.commons.lang3.mutable.MutableObject<java.lang.Class<?>>(type);\n                    return new java.util.Iterator<java.lang.Class<?>>() {\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return (next.getValue()) != null;\n                        }\n\n                        @java.lang.Override\n                        public java.lang.Class<?> next() {\n                            final java.lang.Class<?> java.lang.Class<?> = next.getValue();\n                            next.setValue(result.getSuperclass());\n                            return result;\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n            if (interfacesBehavior != (org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils.Interfaces.org.apache.commons.lang3.ClassUtils.Interfaces)) {\n                return classes;\n            } \n            return new java.lang.Iterable<java.lang.Class<?>>() {\n                @java.lang.Override\n                public java.util.Iterator<java.lang.Class<?>> iterator() {\n                    final java.util.Set<java.lang.Class<?>> java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>>();\n                    final java.util.Iterator<java.lang.Class<?>> java.util.Iterator<java.lang.Class<?>> = classes.iterator();\n                    return new java.util.Iterator<java.lang.Class<?>>() {\n                        java.util.Iterator<java.lang.Class<?>> interfaces = java.util.Collections.<java.lang.Class<?>>emptySet().iterator();\n\n                        @java.lang.Override\n                        public boolean hasNext() {\n                            return (java.util.Iterator<java.lang.Class<?>>.hasNext()) || (wrapped.hasNext());\n                        }\n\n                        @java.lang.Override\n                        public java.lang.Class<?> next() {\n                            if (java.util.Iterator<java.lang.Class<?>>.hasNext()) {\n                                final java.lang.Class<?> java.lang.Class<?> = java.util.Iterator<java.lang.Class<?>>.next();\n                                seenInterfaces.add(nextInterface);\n                                return nextInterface;\n                            } \n                            final java.lang.Class<?> java.lang.Class<?> = wrapped.next();\n                            final java.util.Set<java.lang.Class<?>> java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>>();\n                            walkInterfaces(currentInterfaces, nextSuperclass);\n                            java.util.Iterator<java.lang.Class<?>> = currentInterfaces.iterator();\n                            return nextSuperclass;\n                        }\n\n                        private void walkInterfaces(java.util.Set<java.lang.Class<?>> addTo, java.lang.Class<?> c) {\n                            for (java.lang.Class<?> java.lang.Class<?> : c.getInterfaces()) {\n                                if (!(seenInterfaces.contains(iface))) {\n                                    addTo.add(iface);\n                                } \n                                walkInterfaces(addTo, iface);\n                            }\n                        }\n\n                        @java.lang.Override\n                        public void remove() {\n                            throw new java.lang.UnsupportedOperationException();\n                        }\n                    };\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:762","type":"CtBinaryOperatorImpl","sourcecode":"input == null"},"failures":[284],"tindex":"da873efc-3e6e-11e6-8dfc-dfc1a4a8e5fb","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:750","type":"CtMethodImpl","sourcecode":"public static final java.lang.String unescapeXml(final java.lang.String input) {\n    if (input == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1070","type":"CtBinaryOperatorImpl","sourcecode":"offset >= 12"},"failures":[113,116,118,119,121,125,126,285,134,137,139,142],"tindex":"da873efd-3e6e-11e6-8dfc-c3d2cdcf7b77","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:455","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final char[] source, final int offset, final int length) {\n    if (offset >= 12) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1496","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[286],"tindex":"da87660e-3e6e-11e6-8dfc-793084ce720e","method":{"position":"org.apache.commons.lang3.StringUtils:2894","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, null, (-1), true);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:995","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[287,288,289,290],"tindex":"da87660f-3e6e-11e6-8dfc-61fc1ef41d50","method":{"position":"org.apache.commons.lang3.ArrayUtils:2227","type":"CtMethodImpl","sourcecode":"public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1510","type":"CtBinaryOperatorImpl","sourcecode":"0 == nHexs"},"failures":[291],"tindex":"da876610-3e6e-11e6-8dfc-1195759ce9e2","method":{"position":"org.apache.commons.lang3.Conversion:1509","type":"CtMethodImpl","sourcecode":"public static java.lang.String byteToHex(final byte src, final int srcPos, final java.lang.String dstInit, final int dstPos, final int nHexs) {\n    if (0 == nHexs) {\n        {\n            if (0 == nHexs) {\n                return dstInit;\n            } \n            if ((((nHexs - 1) * 4) + srcPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 8\");\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(dstInit);\n            int int = 0;\n            int int = sb.length();\n            for (int int = 0 ; i < nHexs ; i++) {\n                shift = (i * 4) + srcPos;\n                final int int = 15 & (src >> shift);\n                if ((dstPos + i) == append) {\n                    ++append;\n                    sb.append(org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                } else {\n                    sb.setCharAt((dstPos + i), org.apache.commons.lang3.Conversion.intToHexDigit(bits));\n                }\n            }\n            return sb.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nHexs":"nHexs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3336","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[292,292,293,294,295,296,297,298,299,300],"tindex":"da876611-3e6e-11e6-8dfc-a31dcc1232e4","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:967","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long[] array, final java.lang.Boolean fullDetail) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:268","type":"CtBinaryOperatorImpl","sourcecode":"object == null"},"failures":[301],"tindex":"da876612-3e6e-11e6-8dfc-13db40880dc7","method":{"position":"org.apache.commons.lang3.ClassUtils:251","type":"CtMethodImpl","sourcecode":"public static java.lang.String getSimpleName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getSimpleName(object.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:765","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isBlank(str)"},"failures":[302,303],"tindex":"da878d23-3e6e-11e6-8dfc-e7b2bc8fca88","method":{"position":"org.apache.commons.lang3.StringUtils:1025","type":"CtMethodImpl","sourcecode":"private static int ordinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal, final boolean lastIndex) {\n    if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n        {\n            if (((str == null) || (searchStr == null)) || (ordinal <= 0)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((searchStr.length()) == 0) {\n                return lastIndex ? str.length() : 0;\n            } \n            int int = 0;\n            int int = lastIndex ? str.length() : org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            do {\n                if (lastIndex) {\n                    index = org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(str, searchStr, (index - 1));\n                } else {\n                    index = org.apache.commons.lang3.CharSequenceUtils.indexOf(str, searchStr, (index + 1));\n                }\n                if (index < 0) {\n                    return index;\n                } \n                found++;\n            } while (found < ordinal );\n            return index;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[304],"tindex":"da878d24-3e6e-11e6-8dfc-17949177c836","method":{"position":"org.apache.commons.lang3.StringUtils:5587","type":"CtMethodImpl","sourcecode":"public static java.lang.String upperCase(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toUpperCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:173","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[305,305],"tindex":"da878d25-3e6e-11e6-8dfc-9f7a070093f2","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:675","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            appendDetail(buffer, fieldName, value);\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3094","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[306],"tindex":"da878d26-3e6e-11e6-8dfc-6d7582027f29","method":{"position":"org.apache.commons.lang3.ArrayUtils:3115","type":"CtMethodImpl","sourcecode":"public static int[] toPrimitive(final java.lang.Integer[] array, final int valueForNull) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int[];\n            } \n            final int[] int[] = new int[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Integer java.lang.Integer = array[i];\n                result[i] = b == null ? valueForNull : b.intValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:518","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[307],"tindex":"da87b437-3e6e-11e6-8dfc-e7a975912dcb","method":{"position":"org.apache.commons.lang3.time.DateUtils:667","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar toCalendar(final java.util.Date date) {\n    if (date == null) {\n        {\n            if (date == null) {\n                {\n                    final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n                    c.setTime(date);\n                    return c;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1792","type":"CtBinaryOperatorImpl","sourcecode":"arraySeparator == null"},"failures":[308,309,310,311,294,312,313,314],"tindex":"da87b438-3e6e-11e6-8dfc-0531f33f010c","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setArraySeparator(final java.lang.String arraySeparator) {\n    if (arraySeparator == null) {\n        {\n            super.setArraySeparator(arraySeparator);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"arraySeparator":"arraySeparator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2917","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[315],"tindex":"da87b439-3e6e-11e6-8dfc-51007f75c658","method":{"position":"org.apache.commons.lang3.StringUtils:3661","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final int[] array, final char separator, final int startIndex, final int endIndex) {\n    if (startIndex < 0) {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                buf.append(array[i]);\n            }\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:672","type":"CtBinaryOperatorImpl","sourcecode":"th == null"},"failures":[316],"tindex":"da87b43a-3e6e-11e6-8dfc-b333259148f1","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:691","type":"CtMethodImpl","sourcecode":"public static java.lang.String getRootCauseMessage(final java.lang.Throwable th) {\n    if (th == null) {\n        {\n            java.lang.Throwable java.lang.Throwable = org.apache.commons.lang3.exception.ExceptionUtils.getRootCause(th);\n            root = root == null ? th : root;\n            return org.apache.commons.lang3.exception.ExceptionUtils.getMessage(root);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"th":"th"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.StringUtils:5411","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"da87b43b-3e6e-11e6-8dfc-db3dea60410d","method":{"position":"org.apache.commons.lang3.time.DateUtils:353","type":"CtMethodImpl","sourcecode":"private static java.util.Date parseDateWithLeniency(final java.lang.String str, final java.util.Locale locale, final java.lang.String[] parsePatterns, final boolean lenient) throws java.text.ParseException {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    } else {\n        {\n            if ((str == null) || (parsePatterns == null)) {\n                throw new java.lang.IllegalArgumentException(\"Date and Patterns must not be null\");\n            } \n            java.text.SimpleDateFormat java.text.SimpleDateFormat;\n            if (locale == null) {\n                parser = new java.text.SimpleDateFormat();\n            } else {\n                parser = new java.text.SimpleDateFormat(\"\" , locale);\n            }\n            parser.setLenient(lenient);\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            for (final java.lang.String java.lang.String : parsePatterns) {\n                java.lang.String java.lang.String = parsePattern;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    pattern = pattern.substring(0, ((pattern.length()) - 1));\n                } \n                parser.applyPattern(pattern);\n                pos.setIndex(0);\n                java.lang.String java.lang.String = str;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");\n                } \n                final java.util.Date java.util.Date = parser.parse(str2, pos);\n                if ((date != null) && ((pos.getIndex()) == (str2.length()))) {\n                    return date;\n                } \n            }\n            throw new java.text.ParseException((\"Unable to parse the date: \" + str) , (-1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3162","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[317],"tindex":"da87db4c-3e6e-11e6-8dfc-ed0b3de2f54a","method":{"position":"org.apache.commons.lang3.ArrayUtils:3183","type":"CtMethodImpl","sourcecode":"public static short[] toPrimitive(final java.lang.Short[] array, final short valueForNull) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.short[];\n            } \n            final short[] short[] = new short[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Short java.lang.Short = array[i];\n                result[i] = b == null ? valueForNull : b.shortValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[318,318,319],"tindex":"da87db4d-3e6e-11e6-8dfc-c3a056df79ed","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:908","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short value) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:225","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[],"tindex":"da87db4e-3e6e-11e6-8dfc-73a4b80027fb","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:461","type":"CtMethodImpl","sourcecode":"private static java.lang.String paddedValue(final long value, final boolean padWithZeros, final int count) {\n    if (count == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.String java.lang.String = java.lang.Long.toString(value);\n            return padWithZeros ? org.apache.commons.lang3.StringUtils.leftPad(longString, count, '0') : longString;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2949","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[83],"tindex":"da87db4f-3e6e-11e6-8dfc-2d020fafffb1","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1760","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteFirst(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = str == null ? 0 : str.length();\n            if (len > 0) {\n                final int int = indexOf(str, 0);\n                if (index >= 0) {\n                    deleteImpl(index, (index + len), len);\n                } \n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2290","type":"CtBinaryOperatorImpl","sourcecode":"(org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)"},"failures":[320],"tindex":"da87db50-3e6e-11e6-8dfc-55658f3e0a2a","method":{"position":"org.apache.commons.lang3.StringUtils:2372","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBeforeLast(final java.lang.String str, final java.lang.String separator) {\n    if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (str == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(separator))) {\n                return str;\n            } \n            final int int = str.lastIndexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return str;\n            } \n            return str.substring(0, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str","separator":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:357","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[321],"tindex":"da880261-3e6e-11e6-8dfc-39c787b44dc0","method":{"position":"org.apache.commons.lang3.mutable.MutableDouble:107","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setValue(final java.lang.Number value) {\n    if (value == null) {\n        {\n            org.apache.commons.lang3.mutable.MutableDouble.this.double = value.doubleValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:109","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[322,323,324,325,326,327],"tindex":"da880262-3e6e-11e6-8dfc-11facadc4b0c","method":{"position":"org.apache.commons.lang3.StringUtils:616","type":"CtMethodImpl","sourcecode":"public static java.lang.String stripStart(final java.lang.String str, final java.lang.String stripChars) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(stripChars)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int;\n            if ((str == null) || ((strLen = str.length()) == 0)) {\n                return str;\n            } \n            int int = 0;\n            if (stripChars == null) {\n                while ((start != strLen) && (java.lang.Character.isWhitespace(str.charAt(start)))) {\n                    start++;\n                }\n            } else if (stripChars.isEmpty()) {\n                return str;\n            } else {\n                while ((start != strLen) && ((stripChars.indexOf(str.charAt(start))) != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                    start++;\n                }\n            }\n            return str.substring(start);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"stripChars"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:833","type":"CtBinaryOperatorImpl","sourcecode":"(str1.length()) != (str2.length())"},"failures":[328],"tindex":"da880263-3e6e-11e6-8dfc-1bb3c5e0baff","method":{"position":"org.apache.commons.lang3.StringUtils:828","type":"CtMethodImpl","sourcecode":"public static boolean equalsIgnoreCase(final java.lang.CharSequence str1, final java.lang.CharSequence str2) {\n    if ((str2.length()) != (str1.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((str1 == null) || (str2 == null)) {\n                return str1 == str2;\n            } else if (str1 == str2) {\n                return true;\n            } else if ((str1.length()) != (str2.length())) {\n                return false;\n            } else {\n                return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str1":"str2","str2":"str1"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:97","type":"CtInvocationImpl","sourcecode":"str.contains(\"#\")"},"failures":[329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352],"tindex":"da880264-3e6e-11e6-8dfc-9d8fbbeb5236","method":{"position":"org.apache.commons.lang3.StringUtils:5373","type":"CtMethodImpl","sourcecode":"public static java.lang.String leftPad(final java.lang.String str, final int size, final char padChar) {\n    if (str.contains(\"#\")) {\n        {\n            if (str == null) {\n                return null;\n            } \n            final int int = size - (str.length());\n            if (pads <= 0) {\n                return str;\n            } \n            if (pads > (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return org.apache.commons.lang3.StringUtils.leftPad(str, size, java.lang.String.valueOf(padChar));\n            } \n            return org.apache.commons.lang3.StringUtils.repeat(padChar, pads).concat(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:754","type":"CtBinaryOperatorImpl","sourcecode":"length > 0"},"failures":[62,66,91,353],"tindex":"da880265-3e6e-11e6-8dfc-f5991d7c1cfd","method":{"position":"org.apache.commons.lang3.text.StrBuilder:199","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder setLength(final int length) {\n    if (length > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(length);\n            } \n            if (length < (int)) {\n                int = length;\n            } else if (length > (int)) {\n                ensureCapacity(length);\n                final int int = int;\n                final int int = length;\n                int = length;\n                for (int int = oldEnd ; i < newEnd ; i++) {\n                    char[][i] = '\u0000';\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[354,355],"tindex":"da882976-3e6e-11e6-8dfc-999455e5e719","method":{"position":"org.apache.commons.lang3.ArrayUtils:1953","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.Object[] array, final java.lang.Object objectToFind, int startIndex) {\n    if (objectToFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (objectToFind == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array == null) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } \n                    if (startIndex < 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } else if (startIndex >= (array.int)) {\n                        startIndex = (array.int) - 1;\n                    } \n                    if (objectToFind == null) {\n                        for (int int = startIndex ; i >= 0 ; i--) {\n                            if ((array[i]) == null) {\n                                return i;\n                            } \n                        }\n                    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n                        for (int int = startIndex ; i >= 0 ; i--) {\n                            if (objectToFind.equals(array[i])) {\n                                return i;\n                            } \n                        }\n                    } \n                    return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"objectToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:804","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"da882977-3e6e-11e6-8dfc-dba0831ad914","method":{"position":"org.apache.commons.lang3.time.DateUtils:667","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar toCalendar(final java.util.Date date) {\n    if (date == null) {\n        {\n            if (date == null) {\n                {\n                    final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n                    c.setTime(date);\n                    return c;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3809","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[356,357,358],"tindex":"da882978-3e6e-11e6-8dfc-6dc843a4ec85","method":{"position":"org.apache.commons.lang3.ArrayUtils:2313","type":"CtMethodImpl","sourcecode":"public static int indexOf(final char[] array, final char valueToFind) {\n    if (array == null) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:682","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Arrays.equals(lhs, rhs))"},"failures":[],"tindex":"da882979-3e6e-11e6-8dfc-a3e5fff7bd9e","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:670","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final long[] lhs, final long[] rhs) {\n    if (!(java.util.Arrays.equals(rhs, rhs))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:129","type":"CtBinaryOperatorImpl","sourcecode":"baseMessage != null"},"failures":[359,360,361,362],"tindex":"da88508a-3e6e-11e6-8dfc-d13d30b09cf6","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:253","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String getFormattedExceptionMessage(final java.lang.String baseMessage) {\n    if (baseMessage != null) {\n        {\n            return org.apache.commons.lang3.exception.ExceptionContext.getFormattedExceptionMessage(baseMessage);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"baseMessage":"baseMessage"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[],"tindex":"da88508b-3e6e-11e6-8dfc-cb59443742eb","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1378","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float[] array) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:120","type":"CtBinaryOperatorImpl","sourcecode":"(str.charAt(3)) != '_'"},"failures":[363],"tindex":"da88508c-3e6e-11e6-8dfc-75d9c9ef98ad","method":{"position":"org.apache.commons.lang3.text.WordUtils:96","type":"CtMethodImpl","sourcecode":"public static java.lang.String wrap(final java.lang.String str, final int wrapLength) {\n    if ((str.charAt(3)) != '_') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.WordUtils.wrap(str, wrapLength, null, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:142","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[364],"tindex":"da88508d-3e6e-11e6-8dfc-3df22b93e2a5","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:123","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.Throwable getCause(final java.lang.Throwable throwable) {\n    if (throwable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.exception.ExceptionUtils.getCause(throwable, org.apache.commons.lang3.exception.ExceptionUtils.org.apache.commons.lang3.exception.ExceptionUtils.java.lang.String[]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:121","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 15"},"failures":[365,366,367,368,369,222,370,371],"tindex":"da88508e-3e6e-11e6-8dfc-f1d26c2f67ec","method":{"position":"org.apache.commons.lang3.text.translate.CharSequenceTranslator:121","type":"CtMethodImpl","sourcecode":"public static java.lang.String hex(final int codepoint) {\n    if (codepoint > 15) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.lang.Integer.toHexString(codepoint).toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3464","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[357],"tindex":"da88779f-3e6e-11e6-8dfc-29f1098b1bab","method":{"position":"org.apache.commons.lang3.ArrayUtils:2404","type":"CtMethodImpl","sourcecode":"public static boolean contains(final char[] array, final char valueToFind) {\n    if (array == null) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3366","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"da8877a0-3e6e-11e6-8dfc-b77ef71a296c","method":{"position":"org.apache.commons.lang3.ArrayUtils:1953","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.Object[] array, final java.lang.Object objectToFind, int startIndex) {\n    if (objectToFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (objectToFind == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (array == null) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } \n                    if (startIndex < 0) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                    } else if (startIndex >= (array.int)) {\n                        startIndex = (array.int) - 1;\n                    } \n                    if (objectToFind == null) {\n                        for (int int = startIndex ; i >= 0 ; i--) {\n                            if ((array[i]) == null) {\n                                return i;\n                            } \n                        }\n                    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n                        for (int int = startIndex ; i >= 0 ; i--) {\n                            if (objectToFind.equals(array[i])) {\n                                return i;\n                            } \n                        }\n                    } \n                    return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"objectToFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1784","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[372,373,374],"tindex":"da8877a1-3e6e-11e6-8dfc-359d47c523ba","method":{"position":"org.apache.commons.lang3.ArrayUtils:338","type":"CtMethodImpl","sourcecode":"public static long[] clone(final long[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:381","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"da8877a2-3e6e-11e6-8dfc-39a63a522c37","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:572","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:465","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[226,227,228,229,230,231,232,233,234,235,375,236,237,239,240,241,242,243,244,245,246],"tindex":"da8877a3-3e6e-11e6-8dfc-a97a5b7b99ab","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:379","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final double lhs, final double rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if ((java.lang.Double.doubleToLongBits(lhs)) != (java.lang.Double.doubleToLongBits(rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Double>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Double getLeft() {\n                        return java.lang.Double.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Double getRight() {\n                        return java.lang.Double.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:732","type":"CtBinaryOperatorImpl","sourcecode":"str != null"},"failures":[376],"tindex":"da889eb4-3e6e-11e6-8dfc-33a24ae3daec","method":{"position":"org.apache.commons.lang3.StringUtils:2289","type":"CtMethodImpl","sourcecode":"public static java.lang.String substringBefore(final java.lang.String str, final java.lang.String separator) {\n    if (separator != null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {\n                return str;\n            } \n            if (separator.isEmpty()) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.indexOf(separator);\n            if (pos == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return str;\n            } \n            return str.substring(0, pos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:339","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[226,227,228,229,230,231,232,233,234,235,375,236,237,239,377,240,241,242,243,244,245,246],"tindex":"da889eb5-3e6e-11e6-8dfc-ffaeaf97f24b","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:673","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final long[] lhs, final long[] rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Long[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Long[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Long[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:297","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[378,379,380],"tindex":"da889eb6-3e6e-11e6-8dfc-59ffa1400560","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:606","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.util.Collection<?> coll) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1454","type":"CtFieldReadImpl","sourcecode":"useShortClassName"},"failures":[308,309,310,311,294,312,313,314],"tindex":"da889eb7-3e6e-11e6-8dfc-cba1cf70488d","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:89","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setUseShortClassName(final boolean useShortClassName) {\n    if (useShortClassName) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setUseShortClassName(useShortClassName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"useShortClassName":"useShortClassName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:76","type":"CtBinaryOperatorImpl","sourcecode":"locale == null"},"failures":[381],"tindex":"da889eb8-3e6e-11e6-8dfc-f3065d427550","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (locale == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251905523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n            return df.format(calendar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
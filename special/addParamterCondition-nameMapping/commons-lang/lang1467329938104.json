{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":3,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":156,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":113,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":151,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":229,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveBooleanArray":249,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":4,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":103,"org.apache.commons.lang3.ArrayUtilsTest.testContainsLong":174,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":148,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementLongArray":268,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":143,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiBooleanArray":376,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":211,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":327,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullArray":351,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":328,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":11,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D":86,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":1,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":110,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayRemoveNone":271,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":139,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayRemoveNone":281,"org.apache.commons.lang3.ConversionTest.testHexToByte":90,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayOutOfBoundsIndex":266,"org.apache.commons.lang3.builder.CompareToBuilderTest.testCharArray":238,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException3":132,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":221,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":338,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException4":133,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException1":130,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException2":131,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":140,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayRemoveNone":294,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":225,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":33,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":280,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":194,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":31,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayOutOfBoundsIndex":264,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":228,"org.apache.commons.lang3.math.NumberUtilsTest.testToByteString":39,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":320,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":314,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullArray":357,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":212,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":205,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":95,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":415,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":109,"org.apache.commons.lang3.CharEncodingTest.testNotSupported":171,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleTolerance":382,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":311,"org.apache.commons.lang3.ConversionTest.testLongToShortArray":237,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray":243,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldIllegalArgumentException2":135,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":149,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_1_8":172,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testInvalidFragmentWithDate":391,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementIntArray":248,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":202,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuffer":402,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":150,"org.apache.commons.lang3.CharEncodingTest.testMustBeSupportedJava1_3_1":169,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":419,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":111,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":307,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":108,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiIntArray":100,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_long":239,"org.apache.commons.lang3.reflect.FieldUtilsTest.testAmbig":134,"org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_2_2":173,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":416,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt":361,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":201,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":186,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":302,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":216,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":51,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":306,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithDate":388,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":114,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":340,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":245,"org.apache.commons.lang3.StringUtilsTest.testRemove_char":384,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayNegativeIndex":290,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":189,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":344,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":34,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":414,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":326,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":363,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfMonthWithDate":389,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":19,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":96,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":7,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords":77,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":180,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance":383,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayNegativeIndex":288,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfYearWithDate":393,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":337,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt":76,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":366,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":185,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":200,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayNegativeIndex":293,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":199,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":159,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":313,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":21,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":188,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":35,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testPutIfAbsentNullMap":57,"org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Class":315,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":220,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayCharSeparator":41,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":417,"org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object":316,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":292,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":331,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex":401,"org.apache.commons.lang3.ObjectUtilsTest.testMedian":360,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":145,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":124,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":142,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":10,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":80,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":226,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":25,"org.apache.commons.lang3.text.StrBuilderTest.testLeftString":397,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":30,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":129,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":223,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":234,"org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace":88,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":319,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArray":289,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArray":298,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":335,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray":255,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":9,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectorFromArray":350,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArray":297,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayNegativeIndex":265,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":411,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveObjectArray":242,"org.apache.commons.lang3.builder.DiffTest.testToString":26,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":308,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveCharArray":246,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":91,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":321,"org.apache.commons.lang3.ConversionTest.testIntToByteArray":398,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArray":279,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray":107,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayNegativeIndex":299,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":16,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":370,"org.apache.commons.lang3.ClassUtilsTest.testPrimitivesToWrappers":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":218,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":147,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":5,"org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds":409,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":112,"org.apache.commons.lang3.ConversionTest.testShortToBinary":168,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":58,"org.apache.commons.lang3.builder.EqualsBuilderTest.testAccessors":176,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":60,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":59,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayOutOfBoundsIndex":284,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":62,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":61,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives":371,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":64,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":230,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":203,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":318,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArray":105,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":116,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayOutOfBoundsIndex":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":193,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":37,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBoolean":377,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":163,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":251,"org.apache.commons.lang3.time.DateUtilsTest.testAddHours":178,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayNegativeIndex":272,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":403,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":181,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":330,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":365,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":118,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":155,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArray":106,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":233,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayRemoveNone":262,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":232,"org.apache.commons.lang3.time.DateUtilsTest.testSetYears":410,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayOutOfBoundsIndex":286,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementBooleanArray":274,"org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull":373,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":20,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArray":295,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":341,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":125,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfDayWithDate":390,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":138,"org.apache.commons.lang3.ClassUtilsTest.test_getAllInterfaces_Class":54,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":322,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayRemoveNone":270,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays":83,"org.apache.commons.lang3.time.DateUtilsTest.testAddMonths":406,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":206,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementCharArray":104,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":167,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_String":177,"org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase":310,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":24,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":407,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":165,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":420,"org.apache.commons.lang3.ConversionTest.testBinaryToInt":385,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":115,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleNull":305,"org.apache.commons.lang3.CharEncodingTest.testSupported":170,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":144,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":207,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullArrayElement":356,"org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase":386,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":217,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":342,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":38,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":317,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectorsFromArray":353,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayOutOfBoundsIndex":278,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":45,"org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull":42,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_char":362,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementIntArray":282,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":413,"org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString":75,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementDoubleArray":301,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_longClassWithArray":352,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":179,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":236,"org.apache.commons.lang3.CharSequenceUtilsTest.testSubSequence":55,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthByte":44,"org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":209,"org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleTolerance":381,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArray":285,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":183,"org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_nullComparator":359,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":336,"org.apache.commons.lang3.text.StrBuilderTest.testGetSetNullText":399,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":235,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":231,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":418,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":153,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":184,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":191,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":27,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveLongArray":257,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":329,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":14,"org.apache.commons.lang3.ClassUtilsTest.testGetInnerClass":84,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords":78,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthInt":127,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":36,"org.apache.commons.lang3.builder.CompareToBuilderTest.testInt":99,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticFieldForceAccess":128,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":6,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":17,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":412,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArray":259,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses":85,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":421,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":196,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":324,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":48,"org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian":358,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":210,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementObjectArray":240,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf":98,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":158,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":47,"org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull":43,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":50,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayOutOfBoundsIndex":269,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":197,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":22,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":224,"org.apache.commons.lang3.time.DateUtilsTest.testSetHours":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":182,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":325,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterizeWithOwner":81,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":162,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":219,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":204,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":375,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":120,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":2,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":164,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":15,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":32,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayNegativeIndex":300,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":227,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayOutOfBoundsIndex":273,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_1":368,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":187,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":152,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNumberArray":276,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_4":369,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":13,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog":126,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayNegativeIndex":287,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayRemoveNone":296,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadStaticField":136,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray":247,"org.apache.commons.lang3.ValidateTest.testValidIndex_array":345,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject":379,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":18,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":323,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":367,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":161,"org.apache.commons.lang3.mutable.MutableBooleanTest.testCompareTo":395,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":12,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":208,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":23,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":141,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayRemoveNone":267,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":79,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":52,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullClassWithArray":355,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":146,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":332,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":312,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":92,"org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_array":346,"org.apache.commons.lang3.time.DateUtilsTest.testToCalendar":309,"org.apache.commons.lang3.text.StrBuilderTest.testChaining":400,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArray":303,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable":343,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate":392,"org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArrayHiddenByObject":101,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayRemoveNone":263,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":198,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":122,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":154,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray":137,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":364,"org.apache.commons.lang3.builder.DiffTest.testGetType":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":222,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArray":277,"org.apache.commons.lang3.text.StrTokenizerTest.test8":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":213,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveDoubleArray":241,"org.apache.commons.lang3.text.StrTokenizerTest.test5":69,"org.apache.commons.lang3.text.StrTokenizerTest.test4":68,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":82,"org.apache.commons.lang3.text.StrTokenizerTest.test7":71,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":214,"org.apache.commons.lang3.ValidateTest.testNoNullElementsArray2":348,"org.apache.commons.lang3.text.StrTokenizerTest.test6":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":215,"org.apache.commons.lang3.ValidateTest.testNoNullElementsArray1":347,"org.apache.commons.lang3.text.StrTokenizerTest.test1":65,"org.apache.commons.lang3.text.StrTokenizerTest.test3":67,"org.apache.commons.lang3.text.StrTokenizerTest.test2":66,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":190,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":97,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":119,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":121,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullArrayElement":349,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":408,"org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull":372,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveNumberArray":252,"org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":334,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayOutOfBoundsIndex":283,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveFloatArray":244,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":253,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayNegativeIndex":261,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveByteArray":250,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":53,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveShortArray":254,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayRemoveNone":275,"org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray":378,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":74,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":333,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testMinutesOfHourWithDate":394,"org.apache.commons.lang3.HashSetvBitSetTest.testTimesExtractOrBitset":304,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":157,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveIntArray":256,"org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59":404,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":73,"org.apache.commons.lang3.ClassUtilsTest.testGetClassRawPrimitives":89,"org.apache.commons.lang3.ArrayUtilsTest.testGetLength":258,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":339,"org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArray":102,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte_byte":380,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFully_String":94,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":117,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":195,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nonEnumClassWithArray":354,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt":374,"org.apache.commons.lang3.mutable.MutableBooleanTest.testGetSet":396,"org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar":175,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementsObjectArray":260,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":160,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":192,"org.apache.commons.lang3.time.DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithDate":387,"org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds":405},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeLiteral:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0cfb96f-3f1b-11e6-a357-512937b3657c","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((obj instanceof org.apache.commons.lang3.reflect.TypeLiteral) == false) {\n        {\n            return (obj == (org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeImpl.this)) || ((obj instanceof java.lang.reflect.WildcardType) && (org.apache.commons.lang3.reflect.TypeUtils.equals(org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(obj)))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1267","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"tindex":"d0d0a3d0-3f1b-11e6-a357-f17e935816cd","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:795","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(final java.lang.reflect.Type type, final java.lang.Class<?> toClass, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> subtypeVarAssigns) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(((java.lang.Class<?>)(type)), toClass, subtypeVarAssigns);\n            } \n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(((java.lang.reflect.ParameterizedType)(type)), toClass, subtypeVarAssigns);\n            } \n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType(), (toClass.isArray() ? toClass.getComponentType() : toClass), subtypeVarAssigns);\n            } \n            if (type instanceof java.lang.reflect.WildcardType) {\n                for (final java.lang.reflect.Type java.lang.reflect.Type : org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(((java.lang.reflect.WildcardType)(type)))) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toClass)) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(bound, toClass, subtypeVarAssigns);\n                    } \n                }\n                return null;\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                for (final java.lang.reflect.Type java.lang.reflect.Type : org.apache.commons.lang3.reflect.TypeUtils.getImplicitBounds(((java.lang.reflect.TypeVariable<?>)(type)))) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toClass)) {\n                        return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(bound, toClass, subtypeVarAssigns);\n                    } \n                }\n                return null;\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6393","type":"CtBinaryOperatorImpl"},"failures":[39],"tindex":"d0d0cae1-3f1b-11e6-a357-73eb6d4b015c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:302","type":"CtMethodImpl","sourcecode":"public static byte toByte(final java.lang.String str) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte)(0)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:711","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d0f1f2-3f1b-11e6-a357-e17c39306edb","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:474","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getMatchingAccessibleMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if ((cls != null) && (cls.isPrimitive())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                final java.lang.reflect.Method java.lang.reflect.Method = cls.getMethod(methodName, parameterTypes);\n                org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(method);\n                return method;\n            } catch (final java.lang.NoSuchMethodException e) {\n            }\n            java.lang.reflect.Method java.lang.reflect.Method = null;\n            final java.lang.reflect.Method[] java.lang.reflect.Method[] = cls.getMethods();\n            for (final java.lang.reflect.Method java.lang.reflect.Method : methods) {\n                if ((method.getName().equals(methodName)) && (org.apache.commons.lang3.ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true))) {\n                    final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(method);\n                    if ((accessibleMethod != null) && ((bestMatch == null) || ((org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(), bestMatch.getParameterTypes(), parameterTypes)) < 0))) {\n                        bestMatch = accessibleMethod;\n                    } \n                } \n            }\n            if (bestMatch != null) {\n                org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(bestMatch);\n            } \n            return bestMatch;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4891","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d11903-3f1b-11e6-a357-7d9e0befad21","method":{"position":"org.apache.commons.lang3.text.StrBuilder:342","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder deleteCharAt(final int index) {\n    if (index >= 0) {\n        {\n            if ((index < 0) || (index >= (int))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n            deleteImpl(index, (index + 1), 1);\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2980","type":"CtBinaryOperatorImpl"},"failures":[40,41],"tindex":"d0d11904-3f1b-11e6-a357-ddfada305b21","method":{"position":"org.apache.commons.lang3.StringUtils:3561","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final char separator, final int startIndex, final int endIndex) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            final int int = endIndex - startIndex;\n            if (noOfItems <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((noOfItems * 16));\n            for (int int = startIndex ; i < endIndex ; i++) {\n                if (i > startIndex) {\n                    buf.append(separator);\n                } \n                if ((array[i]) != null) {\n                    buf.append(array[i]);\n                } \n            }\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.SerializationUtils:147","type":"CtBinaryOperatorImpl"},"failures":[42,43],"tindex":"d0d14015-3f1b-11e6-a357-2bf20000fbcb","method":{"position":"org.apache.commons.lang3.SerializationUtils:146","type":"CtMethodImpl","sourcecode":"public static void serialize(final java.io.Serializable obj, final java.io.OutputStream outputStream) {\n    if (outputStream == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (outputStream == null) {\n                throw new java.lang.IllegalArgumentException(\"The OutputStream must not be null\");\n            } \n            java.io.ObjectOutputStream java.io.ObjectOutputStream = null;\n            try {\n                out = new java.io.ObjectOutputStream(outputStream);\n                out.writeObject(obj);\n            } catch (final java.io.IOException ex) {\n                throw new org.apache.commons.lang3.SerializationException(ex);\n            } finally {\n                try {\n                    if (out != null) {\n                        out.close();\n                    } \n                } catch (final java.io.IOException ex) {\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"outputStream":"outputStream"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3821","type":"CtBinaryOperatorImpl"},"failures":[44],"tindex":"d0d14016-3f1b-11e6-a357-b73b6decea9b","method":{"position":"org.apache.commons.lang3.ArrayUtils:1317","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n    if (array1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3613","type":"CtBinaryOperatorImpl"},"failures":[45,46,47,48,48,49,50,51,52,53],"tindex":"d0d16727-3f1b-11e6-a357-41a3a7978417","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:457","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final long[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:327","type":"CtBinaryOperatorImpl"},"failures":[54],"tindex":"d0d16728-3f1b-11e6-a357-93e9cc623000","method":{"position":"org.apache.commons.lang3.ClassUtils:352","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Class<?>> getAllInterfaces(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cls == null) {\n                return null;\n            } \n            final java.util.LinkedHashSet<java.lang.Class<?>> java.util.LinkedHashSet<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>>();\n            org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls, interfacesFound);\n            return new java.util.ArrayList<java.lang.Class<?>>(interfacesFound);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6071","type":"CtBinaryOperatorImpl"},"failures":[55],"tindex":"d0d18e39-3f1b-11e6-a357-691408f7a569","method":{"position":"org.apache.commons.lang3.CharSequenceUtils:55","type":"CtMethodImpl","sourcecode":"public static java.lang.CharSequence subSequence(final java.lang.CharSequence cs, final int start) {\n    if (cs == null) {\n        {\n            return cs == null ? null : cs.subSequence(start, cs.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:778","type":"CtBinaryOperatorImpl"},"failures":[56],"tindex":"d0d18e3a-3f1b-11e6-a357-537c6c2ab1aa","method":{"position":"org.apache.commons.lang3.ClassUtils:727","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?>[] primitivesToWrappers(final java.lang.Class<?>... classes) {\n    if (classes == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (classes == null) {\n                return null;\n            } \n            if ((classes.int) == 0) {\n                return classes;\n            } \n            final java.lang.Class<?>[] java.lang.Class<?>[] = new java.lang.Class[classes.int];\n            for (int int = 0 ; i < (classes.int) ; i++) {\n                convertedClasses[i] = org.apache.commons.lang3.ClassUtils.primitiveToWrapper(classes[i]);\n            }\n            return convertedClasses;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"classes":"classes"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1624","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d18e3b-3f1b-11e6-a357-e33fb4135652","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1594","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.ParameterizedType p, java.lang.reflect.Type t) {\n    if (t instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (t instanceof java.lang.reflect.ParameterizedType) {\n                final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(t));\n                if ((org.apache.commons.lang3.reflect.TypeUtils.equals(p.getRawType(), other.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))) {\n                    return org.apache.commons.lang3.reflect.TypeUtils.equals(p.getActualTypeArguments(), other.getActualTypeArguments());\n                } \n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"t":"t"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:816","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d1b54c-3f1b-11e6-a357-75a5c99dd404","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:153","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeExactMethod(final java.lang.Object object, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeExactMethod(object, methodName, args, parameterTypes);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:244","type":"CtBinaryOperatorImpl"},"failures":[57],"tindex":"d0d1b54d-3f1b-11e6-a357-d711269a9243","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:243","type":"CtMethodImpl","sourcecode":"public static <K, V>V putIfAbsent(final java.util.concurrent.ConcurrentMap<K, V> map, final K key, final V value) {\n    if (map == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (map == null) {\n                return null;\n            } \n            final V V = map.putIfAbsent(key, value);\n            return result != null ? result : value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"map":"map"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2057","type":"CtBinaryOperatorImpl"},"failures":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"d0d1dc5e-3f1b-11e6-a357-9799dcf609a9","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:831","type":"CtMethodImpl","sourcecode":"private boolean isQuote(final char[] srcChars, final int pos, final int len, final int quoteStart, final int quoteLen) {\n    if (quoteStart < 0) {\n        {\n            if (quoteStart > 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (int int = 0 ; i < quoteLen ; i++) {\n                        if (((pos + i) >= len) || ((srcChars[(pos + i)]) != (srcChars[(quoteStart + i)]))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"quoteStart"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.tuple.Pair:134","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d2518f-3f1b-11e6-a357-e5661a5ccfc1","method":{"position":"org.apache.commons.lang3.ObjectUtils:422","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static java.lang.String toString(final java.lang.Object obj, final java.lang.String nullStr) {\n    if (obj instanceof java.util.Map.Entry<?, ?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return obj == null ? nullStr : obj.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4533","type":"CtBinaryOperatorImpl"},"failures":[75,76,77,78],"tindex":"d0d25190-3f1b-11e6-a357-73be898b3f72","method":{"position":"org.apache.commons.lang3.StringUtils:4516","type":"CtMethodImpl","sourcecode":"public static java.lang.String replace(final java.lang.String text, final java.lang.String searchString, final java.lang.String replacement, int max) {\n    if ((--max) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((org.apache.commons.lang3.StringUtils.isEmpty(text)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchString))) || (replacement == null)) || (max == 0)) {\n                return text;\n            } \n            int int = 0;\n            int int = text.indexOf(searchString, start);\n            if (end == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                return text;\n            } \n            final int int = searchString.length();\n            int int = (replacement.length()) - replLength;\n            increase = increase < 0 ? 0 : increase;\n            increase *= max < 0 ? 16 : max > 64 ? 64 : max;\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n            while (end != (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int)) {\n                buf.append(text.substring(start, end)).append(replacement);\n                start = end + replLength;\n                if ((--max) == 0) {\n                    break;\n                } \n                end = text.indexOf(searchString, start);\n            }\n            buf.append(text.substring(start));\n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"max":"max"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:2034","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d278a1-3f1b-11e6-a357-5f23c75bb861","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:492","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setSizeEndText(final java.lang.String sizeEndText) {\n    if (sizeEndText == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setSizeEndText(sizeEndText);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"sizeEndText":"sizeEndText"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:657","type":"CtBinaryOperatorImpl"},"failures":[79],"tindex":"d0d278a2-3f1b-11e6-a357-cd2682251482","method":{"position":"org.apache.commons.lang3.ArrayUtils:4358","type":"CtMethodImpl","sourcecode":"public static char[] add(final char[] array, final int index, final char element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((char[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Character.valueOf(element), java.lang.Character.java.lang.Character.java.lang.Class<java.lang.Character>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1494","type":"CtBinaryOperatorImpl"},"failures":[31,32,80,81,82],"tindex":"d0d278a3-3f1b-11e6-a357-d58cb24baea0","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1487","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(final java.lang.reflect.Type owner, final java.lang.Class<?> raw, final java.lang.reflect.Type... typeArguments) {\n    if (owner == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            final java.lang.reflect.Type java.lang.reflect.Type;\n            if ((raw.getEnclosingClass()) == null) {\n                org.apache.commons.lang3.Validate.isTrue((owner == null), \"no owner allowed for top-level %s\", raw);\n                useOwner = null;\n            } else if (owner == null) {\n                useOwner = raw.getEnclosingClass();\n            } else {\n                org.apache.commons.lang3.Validate.isTrue(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(owner, raw.getEnclosingClass()), \"%s is invalid owner type for parameterized %s\", owner, raw);\n                useOwner = owner;\n            }\n            org.apache.commons.lang3.Validate.noNullElements(typeArguments, \"null type argument at index %s\");\n            org.apache.commons.lang3.Validate.isTrue(((raw.getTypeParameters().int) == (typeArguments.int)), \"invalid number of type parameters specified: expected %s, got %s\", raw.getTypeParameters().int, typeArguments.int);\n            return new org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl(raw , useOwner , typeArguments);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"owner":"owner"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1121","type":"CtInvocationImpl"},"failures":[83,84,85,86,87,88,89],"tindex":"d0d278a4-3f1b-11e6-a357-e341fe3012b2","method":{"position":"org.apache.commons.lang3.ClassUtils:820","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.ClassLoader classLoader, final java.lang.String className, final boolean initialize) throws java.lang.ClassNotFoundException {\n    if (className.startsWith(\"L\")) {\n        {\n            try {\n                java.lang.Class<?> java.lang.Class<?>;\n                if (org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.containsKey(className)) {\n                    final java.lang.String java.lang.String = \"[\" + (org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.String, java.lang.String>.get(className));\n                    clazz = java.lang.Class.forName(clsName, initialize, classLoader).getComponentType();\n                } else {\n                    clazz = java.lang.Class.forName(org.apache.commons.lang3.ClassUtils.toCanonicalName(className), initialize, classLoader);\n                }\n                return clazz;\n            } catch (final java.lang.ClassNotFoundException ex) {\n                final int int = className.lastIndexOf(org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.char);\n                if (lastDotIndex != (-1)) {\n                    try {\n                        return org.apache.commons.lang3.ClassUtils.getClass(classLoader, (((className.substring(0, lastDotIndex)) + (org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.char)) + (className.substring((lastDotIndex + 1)))), initialize);\n                    } catch (final java.lang.ClassNotFoundException ex2) {\n                    }\n                } \n                throw ex;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ClassNotFoundException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:942","type":"CtBinaryOperatorImpl"},"failures":[90],"tindex":"d0d29fb5-3f1b-11e6-a357-b98aa742b2eb","method":{"position":"org.apache.commons.lang3.Conversion:1006","type":"CtMethodImpl","sourcecode":"public static byte hexToByte(final java.lang.String src, final int srcPos, final byte dstInit, final int dstPos, final int nHex) {\n    if ((((nHex - 1) * 4) + srcPos) >= 32) {\n        {\n            if (0 == nHex) {\n                return dstInit;\n            } \n            if ((((nHex - 1) * 4) + dstPos) >= 8) {\n                throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 8\");\n            } \n            byte byte = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nHex ; i++) {\n                shift = (i * 4) + dstPos;\n                final int int = (15 & (org.apache.commons.lang3.Conversion.hexDigitToInt(src.charAt((i + srcPos))))) << shift;\n                final int int = 15 << shift;\n                out = ((byte)((out & (~mask)) | bits));\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dstPos":"srcPos","nHex":"nHex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:525","type":"CtBinaryOperatorImpl"},"failures":[91,92],"tindex":"d0d29fb6-3f1b-11e6-a357-654311baadcd","method":{"position":"org.apache.commons.lang3.text.WordUtils:172","type":"CtMethodImpl","sourcecode":"public static java.lang.String wrap(final java.lang.String str, int wrapLength, java.lang.String newLineStr, final boolean wrapLongWords) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (newLineStr == null) {\n                newLineStr = org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.java.lang.String;\n            } \n            if (wrapLength < 1) {\n                wrapLength = 1;\n            } \n            final int int = str.length();\n            int int = 0;\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((inputLineLength + 32));\n            while ((inputLineLength - offset) > wrapLength) {\n                if ((str.charAt(offset)) == ' ') {\n                    offset++;\n                    continue;\n                } \n                int int = str.lastIndexOf(' ', (wrapLength + offset));\n                if (spaceToWrapAt >= offset) {\n                    wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                    wrappedLine.append(newLineStr);\n                    offset = spaceToWrapAt + 1;\n                } else {\n                    if (wrapLongWords) {\n                        wrappedLine.append(str.substring(offset, (wrapLength + offset)));\n                        wrappedLine.append(newLineStr);\n                        offset += wrapLength;\n                    } else {\n                        spaceToWrapAt = str.indexOf(' ', (wrapLength + offset));\n                        if (spaceToWrapAt >= 0) {\n                            wrappedLine.append(str.substring(offset, spaceToWrapAt));\n                            wrappedLine.append(newLineStr);\n                            offset = spaceToWrapAt + 1;\n                        } else {\n                            wrappedLine.append(str.substring(offset));\n                            offset = inputLineLength;\n                        }\n                    }\n                }\n            }\n            wrappedLine.append(str.substring(offset));\n            return wrappedLine.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d2c6c7-3f1b-11e6-a357-819697c45e81","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:209","type":"CtMethodImpl","sourcecode":"public static java.lang.String replace(final java.lang.Object source, final java.util.Properties valueProperties) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (valueProperties == null) {\n                return source.toString();\n            } \n            final java.util.Map<java.lang.String, java.lang.String> java.util.Map<java.lang.String, java.lang.String> = new java.util.HashMap<java.lang.String, java.lang.String>();\n            final java.util.Enumeration<?> java.util.Enumeration<?> = valueProperties.propertyNames();\n            while (propNames.hasMoreElements()) {\n                final java.lang.String java.lang.String = ((java.lang.String)(propNames.nextElement()));\n                final java.lang.String java.lang.String = valueProperties.getProperty(propName);\n                valueMap.put(propName, propValue);\n            }\n            return org.apache.commons.lang3.text.StrSubstitutor.replace(source, valueMap);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:701","type":"CtBinaryOperatorImpl"},"failures":[93],"tindex":"d0d2c6c8-3f1b-11e6-a357-77686dc3d4eb","method":{"position":"org.apache.commons.lang3.time.DateUtils:584","type":"CtMethodImpl","sourcecode":"public static java.util.Date setHours(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:732","type":"CtBinaryOperatorImpl"},"failures":[94],"tindex":"d0d2c6c9-3f1b-11e6-a357-cfefaddfdd0d","method":{"position":"org.apache.commons.lang3.text.WordUtils:323","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalizeFully(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.text.WordUtils.capitalizeFully(str, null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1644","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d2edda-3f1b-11e6-a357-2f806a06cb5c","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1256","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final char[] array) {\n    if (array == null) {\n        {\n            appendSummarySize(buffer, fieldName, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl"},"failures":[95,96,97],"tindex":"d0d2eddb-3f1b-11e6-a357-134b245711b2","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:750","type":"CtMethodImpl","sourcecode":"public static final java.lang.String unescapeXml(final java.lang.String input) {\n    if (input != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl"},"failures":[98],"tindex":"d0d2eddc-3f1b-11e6-a357-0589f43bea2c","method":{"position":"org.apache.commons.lang3.StringUtils:1007","type":"CtMethodImpl","sourcecode":"public static int ordinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:556","type":"CtBinaryOperatorImpl"},"failures":[99,100,101,102],"tindex":"d0d314ed-3f1b-11e6-a357-8bc9ea92cba0","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:478","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final int lhs, final int rhs) {\n    if (rhs != lhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            int = lhs < rhs ? -1 : lhs > rhs ? 1 : 0;\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2333","type":"CtBinaryOperatorImpl"},"failures":[103,104,105,106,107],"tindex":"d0d314ee-3f1b-11e6-a357-b36c1690a4da","method":{"position":"org.apache.commons.lang3.ArrayUtils:3542","type":"CtMethodImpl","sourcecode":"public static boolean isEmpty(final char[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (array == null) || ((array.int) == 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:613","type":"CtUnaryOperatorImpl"},"failures":[108,109],"tindex":"d0d314ef-3f1b-11e6-a357-371c7fa73613","method":{"position":"org.apache.commons.lang3.AnnotationUtils:287","type":"CtMethodImpl","sourcecode":"private static boolean arrayMemberEquals(final java.lang.Class<?> componentType, final java.lang.Object o1, final java.lang.Object o2) {\n    if (!(componentType.isPrimitive())) {\n        {\n            if (componentType.isAnnotation()) {\n                return org.apache.commons.lang3.AnnotationUtils.annotationArrayMemberEquals(((java.lang.annotation.Annotation[])(o1)), ((java.lang.annotation.Annotation[])(o2)));\n            } \n            if (componentType.equals(java.lang.Byte.java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n                return java.util.Arrays.equals(((byte[])(o1)), ((byte[])(o2)));\n            } \n            if (componentType.equals(java.lang.Short.java.lang.Short.java.lang.Class<java.lang.Short>)) {\n                return java.util.Arrays.equals(((short[])(o1)), ((short[])(o2)));\n            } \n            if (componentType.equals(java.lang.Integer.java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n                return java.util.Arrays.equals(((int[])(o1)), ((int[])(o2)));\n            } \n            if (componentType.equals(java.lang.Character.java.lang.Character.java.lang.Class<java.lang.Character>)) {\n                return java.util.Arrays.equals(((char[])(o1)), ((char[])(o2)));\n            } \n            if (componentType.equals(java.lang.Long.java.lang.Long.java.lang.Class<java.lang.Long>)) {\n                return java.util.Arrays.equals(((long[])(o1)), ((long[])(o2)));\n            } \n            if (componentType.equals(java.lang.Float.java.lang.Float.java.lang.Class<java.lang.Float>)) {\n                return java.util.Arrays.equals(((float[])(o1)), ((float[])(o2)));\n            } \n            if (componentType.equals(java.lang.Double.java.lang.Double.java.lang.Class<java.lang.Double>)) {\n                return java.util.Arrays.equals(((double[])(o1)), ((double[])(o2)));\n            } \n            if (componentType.equals(java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)) {\n                return java.util.Arrays.equals(((boolean[])(o1)), ((boolean[])(o2)));\n            } \n            return java.util.Arrays.equals(((java.lang.Object[])(o1)), ((java.lang.Object[])(o2)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"componentType":"componentType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:650","type":"CtInvocationImpl"},"failures":[],"tindex":"d0d33c00-3f1b-11e6-a357-07c77725c051","method":{"position":"org.apache.commons.lang3.AnnotationUtils:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.lang.String getShortClassName(final java.lang.Class<?> cls) {\n    if (cls.isPrimitive()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = null;\n            for (final java.lang.Class<?> java.lang.Class<?> : org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls)) {\n                if (java.lang.annotation.Annotation.java.lang.annotation.Annotation.java.lang.Class.isAssignableFrom(iface)) {\n                    @java.lang.SuppressWarnings(value = \"unchecked\")\n                    final java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = ((java.lang.Class<? extends java.lang.annotation.Annotation>)(iface));\n                    annotationType = found;\n                    break;\n                } \n            }\n            return new java.lang.StringBuilder((annotationType == null ? \"\" : annotationType.getName())).insert(0, '@').toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:975","type":"CtBinaryOperatorImpl"},"failures":[110,111,112,113,113,114,115,116,117,118,119,120,121,122],"tindex":"d0d33c01-3f1b-11e6-a357-a1723f0f8b75","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:974","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder appendSuper(final java.lang.String superToString) {\n    if (superToString != null) {\n        {\n            if (superToString != null) {\n                org.apache.commons.lang3.builder.ToStringStyle.appendSuper(java.lang.StringBuffer, superToString);\n            } \n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superToString":"superToString"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d36312-3f1b-11e6-a357-9bd72020e197","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1081","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5374","type":"CtBinaryOperatorImpl"},"failures":[123],"tindex":"d0d36313-3f1b-11e6-a357-9f83c5a12119","method":{"position":"org.apache.commons.lang3.BooleanUtils:709","type":"CtMethodImpl","sourcecode":"public static boolean toBoolean(final java.lang.String str) {\n    if (str == null) {\n        {\n            return (org.apache.commons.lang3.BooleanUtils.toBooleanObject(str)) == (java.lang.Boolean.java.lang.Boolean.java.lang.Boolean);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1349","type":"CtBinaryOperatorImpl"},"failures":[124],"tindex":"d0d36314-3f1b-11e6-a357-f910391781cd","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1348","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final char separator, final int loopIndex) {\n    if (loopIndex > 0) {\n        {\n            if (loopIndex > 0) {\n                append(separator);\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"loopIndex":"loopIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:385","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d36315-3f1b-11e6-a357-d59f4b701392","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:400","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.lang.Object obj, final java.lang.StringBuffer toAppendTo, final java.text.FieldPosition pos) {\n    if (obj instanceof java.lang.Long) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(obj, toAppendTo, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:70","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d38a26-3f1b-11e6-a357-a95353372e87","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:404","type":"CtMethodImpl","sourcecode":"private java.lang.String insertFormats(final java.lang.String pattern, final java.util.ArrayList<java.lang.String> customPatterns) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(containsElements(customPatterns))) {\n                return pattern;\n            } \n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((pattern.length()) * 2));\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            int int = -1;\n            int int = 0;\n            while ((pos.getIndex()) < (pattern.length())) {\n                final char char = pattern.charAt(pos.getIndex());\n                switch (c) {\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        appendQuotedString(pattern, pos, sb, false);\n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth++;\n                        sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(readArgumentIndex(pattern, next(pos)));\n                        if (depth == 1) {\n                            fe++;\n                            final java.lang.String java.lang.String = customPatterns.get(fe);\n                            if (customPattern != null) {\n                                sb.append(org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char).append(customPattern);\n                            } \n                        } \n                        break;\n                    case org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n                        depth--;\n                    default :\n                        sb.append(c);\n                        next(pos);\n                }\n            }\n            return sb.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:543","type":"CtBinaryOperatorImpl"},"failures":[125],"tindex":"d0d38a27-3f1b-11e6-a357-d5fc71e68b5a","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:495","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.StringBuffer source, final int offset, final int length) {\n    if (offset > 0) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:117","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d38a28-3f1b-11e6-a357-7b6790c47b0f","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:49","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.JavaUnicodeEscaper below(final int codepoint) {\n    if (codepoint > 4095) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.outsideOf(codepoint, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d3b139-3f1b-11e6-a357-0bbc03fa44a2","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1036","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2914","type":"CtInvocationImpl"},"failures":[126],"tindex":"d0d3b13a-3f1b-11e6-a357-6da089baccd7","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:539","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean[] array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3879","type":"CtBinaryOperatorImpl"},"failures":[127],"tindex":"d0d3b13b-3f1b-11e6-a357-6faba65721e5","method":{"position":"org.apache.commons.lang3.ArrayUtils:1263","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final int[] array1, final int[] array2) {\n    if (array2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:292","type":"CtUnaryOperatorImpl"},"failures":[128,129,130,131,132,133,134,135,136],"tindex":"d0d3d84c-3f1b-11e6-a357-0d2f7ea29705","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:61","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Field getField(final java.lang.Class<?> cls, final java.lang.String fieldName) {\n    if (!(java.lang.reflect.Modifier.isPublic(cls.getModifiers()))) {\n        {\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getField(cls, fieldName, false);\n            org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(field);\n            return field;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2228","type":"CtBinaryOperatorImpl"},"failures":[137],"tindex":"d0d3d84d-3f1b-11e6-a357-678ed99bd360","method":{"position":"org.apache.commons.lang3.ArrayUtils:5161","type":"CtMethodImpl","sourcecode":"public static short[] removeElement(final short[] array, final short element) {\n    if (array == null) {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1113","type":"CtBinaryOperatorImpl"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],"tindex":"d0d3d84e-3f1b-11e6-a357-7191e7aae044","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:918","type":"CtMethodImpl","sourcecode":"protected java.lang.String resolveVariable(final java.lang.String variableName, final org.apache.commons.lang3.text.StrBuilder buf, final int startPos, final int endPos) {\n    if (startPos < 0) {\n        {\n            final org.apache.commons.lang3.text.StrLookup<?> org.apache.commons.lang3.text.StrLookup<?> = getVariableResolver();\n            if (resolver == null) {\n                return null;\n            } \n            return resolver.lookup(variableName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startPos":"startPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1623","type":"CtBinaryOperatorImpl"},"failures":[168],"tindex":"d0d3ff5f-3f1b-11e6-a357-85be8c899fac","method":{"position":"org.apache.commons.lang3.Conversion:1618","type":"CtMethodImpl","sourcecode":"public static boolean[] shortToBinary(final short src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n    if (((srcPos - 1) + nBools) >= 16) {\n        {\n            if (0 == nBools) {\n                return dst;\n            } \n            if (((nBools - 1) + srcPos) >= 16) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+srcPos is greather or equal to than 16\");\n            } \n            int int = 0;\n            assert ((nBools - 1) * 1) < (16 - srcPos);\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + srcPos;\n                dst[(dstPos + i)] = (1 & (src >> shift)) != 0;\n            }\n            return dst;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"srcPos","srcPos":"nBools"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:135","type":"CtBinaryOperatorImpl"},"failures":[169,170,171,172,173],"tindex":"d0d3ff60-3f1b-11e6-a357-5d71640dca13","method":{"position":"org.apache.commons.lang3.CharEncoding:94","type":"CtMethodImpl","sourcecode":"public static boolean isSupported(final java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                return false;\n            } \n            try {\n                return java.nio.charset.Charset.isSupported(name);\n            } catch (final java.nio.charset.IllegalCharsetNameException ex) {\n                return false;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:915","type":"CtBinaryOperatorImpl"},"failures":[174],"tindex":"d0d3ff61-3f1b-11e6-a357-17761c9fb3fb","method":{"position":"org.apache.commons.lang3.ArrayUtils:2090","type":"CtMethodImpl","sourcecode":"public static boolean contains(final long[] array, final long valueToFind) {\n    if (array == null) {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.CharSet:174","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d3ff62-3f1b-11e6-a357-536f51675f7d","method":{"position":"org.apache.commons.lang3.time.DateUtils:267","type":"CtMethodImpl","sourcecode":"public static java.util.Date parseDate(final java.lang.String str, final java.lang.String... parsePatterns) throws java.text.ParseException {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.parseDate(str, null, parsePatterns);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1094","type":"CtBinaryOperatorImpl"},"failures":[175],"tindex":"d0d42673-3f1b-11e6-a357-0932abd07e62","method":{"position":"org.apache.commons.lang3.StringUtils:4126","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Iterable<?> iterable, final char separator) {\n    if (iterable != null) {\n        {\n            if (iterable == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(iterable.iterator(), separator);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterable":"iterable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:702","type":"CtBinaryOperatorImpl"},"failures":[176],"tindex":"d0d42674-3f1b-11e6-a357-af18777b180d","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:938","type":"CtMethodImpl","sourcecode":"protected void setEquals(final boolean isEquals) {\n    if (isEquals == false) {\n        {\n            org.apache.commons.lang3.builder.EqualsBuilder.this.boolean = isEquals;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEquals":"isEquals"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:765","type":"CtInvocationImpl"},"failures":[177],"tindex":"d0d42675-3f1b-11e6-a357-e776b679f76b","method":{"position":"org.apache.commons.lang3.StringUtils:1073","type":"CtMethodImpl","sourcecode":"public static int indexOfIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr) {\n    if (org.apache.commons.lang3.StringUtils.isBlank(searchStr)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(str, searchStr, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchStr"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1648","type":"CtBinaryOperatorImpl"},"failures":[178],"tindex":"d0d42676-3f1b-11e6-a357-edad4f440655","method":{"position":"org.apache.commons.lang3.time.DateUtils:460","type":"CtMethodImpl","sourcecode":"public static java.util.Date addHours(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.add(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:666","type":"CtBinaryOperatorImpl"},"failures":[179,179,180,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,199,200,201,202,203,204,205,206,207,208,209,209,210,210,211,212,213,214,215,216,217,218,48,49,219,220,221,221,222,223,224,225,226,227,228,229,230,231,232,233,234,113,114,115,116,117,118,235,236],"tindex":"d0d44d87-3f1b-11e6-a357-911703ba0170","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:665","type":"CtMethodImpl","sourcecode":"public void setUpToClass(final java.lang.Class<?> clazz) {\n    if (clazz != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz != null) {\n                final java.lang.Object java.lang.Object = getObject();\n                if ((object != null) && ((clazz.isInstance(object)) == false)) {\n                    throw new java.lang.IllegalArgumentException(\"Specified class is not a superclass of the object\");\n                } \n            } \n            org.apache.commons.lang3.builder.ReflectionToStringBuilder.this.java.lang.Class<?> = clazz;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"clazz":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:119","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d44d88-3f1b-11e6-a357-77a5df2827dd","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:36","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.JavaUnicodeEscaper above(final int codepoint) {\n    if (codepoint > 255) {\n        {\n            return org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.outsideOf(0, codepoint);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d44d89-3f1b-11e6-a357-8bbf7787c93c","method":{"position":"org.apache.commons.lang3.ArrayUtils:954","type":"CtMethodImpl","sourcecode":"public static int[] subarray(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            if (newSize <= 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int[];\n            } \n            final int[] int[] = new int[newSize];\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"endIndexExclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1226","type":"CtBinaryOperatorImpl"},"failures":[237],"tindex":"d0d44d8a-3f1b-11e6-a357-afbbdd77f460","method":{"position":"org.apache.commons.lang3.Conversion:1221","type":"CtMethodImpl","sourcecode":"public static short[] longToShortArray(final long src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if ((((dstPos - 1) * 16) + nShorts) >= 64) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"nShorts","nShorts":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:818","type":"CtBinaryOperatorImpl"},"failures":[238],"tindex":"d0d4749b-3f1b-11e6-a357-dd1317bcf780","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:807","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final char[] lhs, final char[] rhs) {\n    if (rhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (lhs == null) {\n                int = -1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if (rhs == null) {\n                int = +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                int = (lhs.int) < (rhs.int) ? -1 : +1;\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && ((int) == 0) ; i++) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3336","type":"CtBinaryOperatorImpl"},"failures":[239,12],"tindex":"d0d4749c-3f1b-11e6-a357-4b252a690e4e","method":{"position":"org.apache.commons.lang3.ArrayUtils:3069","type":"CtMethodImpl","sourcecode":"public static java.lang.Long[] toObject(final long[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Long[];\n            } \n            final java.lang.Long[] java.lang.Long[] = new java.lang.Long[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Long.valueOf(array[i]);\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2065","type":"CtBinaryOperatorImpl"},"failures":[240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,137,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,104,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304],"tindex":"d0d49bad-3f1b-11e6-a357-5d55a5129f26","method":{"position":"org.apache.commons.lang3.ArrayUtils:1401","type":"CtMethodImpl","sourcecode":"public static int getLength(final java.lang.Object array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return 0;\n            } \n            return java.lang.reflect.Array.getLength(array);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:157","type":"CtBinaryOperatorImpl"},"failures":[305],"tindex":"d0d49bae-3f1b-11e6-a357-0d54787991e2","method":{"position":"org.apache.commons.lang3.ArrayUtils:632","type":"CtMethodImpl","sourcecode":"public static double[] nullToEmpty(final double[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.double[];\n            } \n            return array;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:585","type":"CtInvocationImpl"},"failures":[],"tindex":"d0d4c2bf-3f1b-11e6-a357-2984e85c44b9","method":{"position":"org.apache.commons.lang3.text.WordUtils:323","type":"CtMethodImpl","sourcecode":"public static java.lang.String capitalizeFully(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return org.apache.commons.lang3.text.WordUtils.capitalizeFully(str, null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:255","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,306,10,11,307,12,13,308,14,15,16,17],"tindex":"d0d4c2c0-3f1b-11e6-a357-4db9edaecddf","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:295","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final char lhs, final char rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Character>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Character getLeft() {\n                        return java.lang.Character.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Character getRight() {\n                        return java.lang.Character.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d4e9d1-3f1b-11e6-a357-49ef3b8350da","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1518","type":"CtMethodImpl","sourcecode":"public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(final java.lang.reflect.Type owner, final java.lang.Class<?> raw, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArgMappings) {\n    if ((raw.getEnclosingClass()) == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.notNull(raw, \"raw class is null\");\n            org.apache.commons.lang3.Validate.notNull(typeArgMappings, \"typeArgMappings is null\");\n            return org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(owner, raw, org.apache.commons.lang3.reflect.TypeUtils.extractTypeArgumentsFrom(typeArgMappings, raw.getTypeParameters()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:647","type":"CtBinaryOperatorImpl"},"failures":[309],"tindex":"d0d4e9d2-3f1b-11e6-a357-0fdc76180cae","method":{"position":"org.apache.commons.lang3.time.DateUtils:667","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar toCalendar(final java.util.Date date) {\n    if (date == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            c.setTime(date);\n            return c;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6168","type":"CtBinaryOperatorImpl"},"failures":[310],"tindex":"d0d4e9d3-3f1b-11e6-a357-3da936d7dd34","method":{"position":"org.apache.commons.lang3.StringUtils:6167","type":"CtMethodImpl","sourcecode":"public static boolean isAllUpperCase(final java.lang.CharSequence cs) {\n    if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isUpperCase(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl"},"failures":[311,312,313,314],"tindex":"d0d510e4-3f1b-11e6-a357-833c45523159","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:224","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(date, pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:823","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d510e5-3f1b-11e6-a357-bd0e6a5dbfa2","method":{"position":"org.apache.commons.lang3.Validate:1199","type":"CtMethodImpl","sourcecode":"public static void isInstanceOf(final java.lang.Class<?> type, final java.lang.Object obj, final java.lang.String message, final java.lang.Object... values) {\n    if (obj instanceof java.lang.reflect.TypeVariable<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((type.isInstance(obj)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:281","type":"CtBinaryOperatorImpl"},"failures":[315,316,317,318,319,320,45,321,322,110,323,324,325,326,327,47,328,329,112,179,330,331,331,332,333,334,335,336,336,337,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,48,49,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,234,113,114,115,116,117,118,235,236,18,338,339,340,341,342,343],"tindex":"d0d510e6-3f1b-11e6-a357-fb7308aef6e1","method":{"position":"org.apache.commons.lang3.ClassUtils:175","type":"CtMethodImpl","sourcecode":"public static java.lang.String getShortClassName(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return org.apache.commons.lang3.ClassUtils.getShortClassName(cls.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1156","type":"CtBinaryOperatorImpl"},"failures":[344],"tindex":"d0d537f7-3f1b-11e6-a357-9f57cb335c24","method":{"position":"org.apache.commons.lang3.time.DateUtils:1155","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.util.Calendar> iterator(final java.util.Calendar focus, final int rangeStyle) {\n    if (focus == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            java.util.Calendar java.util.Calendar = null;\n            java.util.Calendar java.util.Calendar = null;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            switch (rangeStyle) {\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = ((java.util.Calendar)(start.clone()));\n                    end.add(java.util.Calendar.java.util.Calendar.int, 1);\n                    end.add(java.util.Calendar.java.util.Calendar.int, (-1));\n                    if (rangeStyle == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                        startCutoff = java.util.Calendar.java.util.Calendar.int;\n                        endCutoff = java.util.Calendar.java.util.Calendar.int;\n                    } \n                    break;\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    switch (rangeStyle) {\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = java.util.Calendar.java.util.Calendar.int;\n                            endCutoff = java.util.Calendar.java.util.Calendar.int;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = focus.get(java.util.Calendar.java.util.Calendar.int);\n                            endCutoff = startCutoff - 1;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) - 3;\n                            endCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) + 3;\n                            break;\n                        default :\n                            break;\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The range style \" + rangeStyle) + \" is not valid.\"));\n            }\n            if (startCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff += 7;\n            } \n            if (startCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff -= 7;\n            } \n            if (endCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff += 7;\n            } \n            if (endCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff -= 7;\n            } \n            while ((start.get(java.util.Calendar.java.util.Calendar.int)) != startCutoff) {\n                start.add(java.util.Calendar.java.util.Calendar.int, (-1));\n            }\n            while ((end.get(java.util.Calendar.java.util.Calendar.int)) != endCutoff) {\n                end.add(java.util.Calendar.java.util.Calendar.int, 1);\n            }\n            return new org.apache.commons.lang3.time.DateUtils.DateIterator(start , end);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"focus":"focus"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3388","type":"CtBinaryOperatorImpl"},"failures":[345,346,347,348,349,350,351,352,353,354,355,356,357,31,32,33,80,81,82,358,359,360],"tindex":"d0d55f08-3f1b-11e6-a357-518965110497","method":{"position":"org.apache.commons.lang3.Validate:505","type":"CtMethodImpl","sourcecode":"public static <T>T[] noNullElements(final T[] array, final java.lang.String message, final java.lang.Object... values) {\n    if (values == null) {\n        {\n            org.apache.commons.lang3.Validate.notNull(array);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if ((array[i]) == null) {\n                    final java.lang.Object[] java.lang.Object[] = org.apache.commons.lang3.ArrayUtils.add(values, java.lang.Integer.valueOf(i));\n                    throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values2));\n                } \n            }\n            return array;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"values"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1378","type":"CtBinaryOperatorImpl"},"failures":[361],"tindex":"d0d58619-3f1b-11e6-a357-3b72ed604a4c","method":{"position":"org.apache.commons.lang3.StringUtils:1191","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final int searchChar, final int startPos) {\n    if (startPos < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startPos":"startPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1499","type":"CtInvocationImpl"},"failures":[362],"tindex":"d0d5861a-3f1b-11e6-a357-6f451736c6f0","method":{"position":"org.apache.commons.lang3.StringUtils:1153","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final int searchChar) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:682","type":"CtInvocationImpl"},"failures":[],"tindex":"d0d5861b-3f1b-11e6-a357-7728ea663939","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:360","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readField(final java.lang.reflect.Field field, final java.lang.Object target) throws java.lang.IllegalAccessException {\n    if (java.lang.reflect.Modifier.isFinal(target.getModifiers())) {\n        {\n            return org.apache.commons.lang3.reflect.FieldUtils.readField(field, target, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1574","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d5861c-3f1b-11e6-a357-eb485c40f488","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:559","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final boolean[] array, final boolean fullDetail) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5299","type":"CtBinaryOperatorImpl"},"failures":[363,364,365,366,367,368,369,370],"tindex":"d0d5861d-3f1b-11e6-a357-87a32fcd7c1b","method":{"position":"org.apache.commons.lang3.math.NumberUtils:633","type":"CtMethodImpl","sourcecode":"private static boolean isAllZeros(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return true;\n            } \n            for (int int = (str.length()) - 1 ; i >= 0 ; i--) {\n                if ((str.charAt(i)) != '0') {\n                    return false;\n                } \n            }\n            return (str.length()) > 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1072","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d5ad2e-3f1b-11e6-a357-fd333f9072c9","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1047","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type getClosestParentType(final java.lang.Class<?> cls, final java.lang.Class<?> superClass) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (superClass.isInterface()) {\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = cls.getGenericInterfaces();\n                java.lang.reflect.Type java.lang.reflect.Type = null;\n                for (final java.lang.reflect.Type java.lang.reflect.Type : interfaceTypes) {\n                    java.lang.Class<?> java.lang.Class<?> = null;\n                    if (midType instanceof java.lang.reflect.ParameterizedType) {\n                        midClass = org.apache.commons.lang3.reflect.TypeUtils.getRawType(((java.lang.reflect.ParameterizedType)(midType)));\n                    } else if (midType instanceof java.lang.Class<?>) {\n                        midClass = ((java.lang.Class<?>)(midType));\n                    } else {\n                        throw new java.lang.IllegalStateException(((\"Unexpected generic\" + \" interface type found: \") + midType));\n                    }\n                    if ((org.apache.commons.lang3.reflect.TypeUtils.isAssignable(midClass, superClass)) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(genericInterface, ((java.lang.reflect.Type)(midClass))))) {\n                        genericInterface = midType;\n                    } \n                }\n                if (genericInterface != null) {\n                    return genericInterface;\n                } \n            } \n            return cls.getGenericSuperclass();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:327","type":"CtBinaryOperatorImpl"},"failures":[371,372,373],"tindex":"d0d5ad2f-3f1b-11e6-a357-0523e9be2a26","method":{"position":"org.apache.commons.lang3.ClassUtils:759","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> wrapperToPrimitive(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(cls);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1303","type":"CtBinaryOperatorImpl"},"failures":[374],"tindex":"d0d5d440-3f1b-11e6-a357-75bb2f2d02c9","method":{"position":"org.apache.commons.lang3.StringUtils:1302","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq, final int startPos) {\n    if ((searchSeq == null) || (seq == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"searchSeq":"seq","seq":"searchSeq"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:138","type":"CtBinaryOperatorImpl"},"failures":[375,376,377,378,379],"tindex":"d0d5d441-3f1b-11e6-a357-f3408fddb34c","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:621","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final boolean lhs, final boolean rhs) {\n    if (rhs != lhs) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3252","type":"CtBinaryOperatorImpl"},"failures":[380],"tindex":"d0d5d442-3f1b-11e6-a357-eb9993fc320c","method":{"position":"org.apache.commons.lang3.ArrayUtils:3251","type":"CtMethodImpl","sourcecode":"public static byte[] toPrimitive(final java.lang.Byte[] array, final byte valueForNull) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.byte[];\n            } \n            final byte[] byte[] = new byte[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Byte java.lang.Byte = array[i];\n                result[i] = b == null ? valueForNull : b.byteValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:73","type":"CtBinaryOperatorImpl"},"failures":[311,312,313,314],"tindex":"d0d5d443-3f1b-11e6-a357-b3aa523e1879","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:212","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final long millis, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (timeZone == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(new java.util.Date(millis), pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeZone":"timeZone"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2442","type":"CtBinaryOperatorImpl"},"failures":[381,382,383],"tindex":"d0d5fb54-3f1b-11e6-a357-373f4d7a2ce3","method":{"position":"org.apache.commons.lang3.ArrayUtils:2590","type":"CtMethodImpl","sourcecode":"public static int indexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n    if (startIndex < 0) {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            final double double = valueToFind - tolerance;\n            final double double = valueToFind + tolerance;\n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (((array[i]) >= min) && ((array[i]) <= max)) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2100","type":"CtBinaryOperatorImpl"},"failures":[384],"tindex":"d0d5fb55-3f1b-11e6-a357-0d92363bbcb7","method":{"position":"org.apache.commons.lang3.StringUtils:4378","type":"CtMethodImpl","sourcecode":"public static java.lang.String remove(final java.lang.String str, final char remove) {\n    if (str == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || ((str.indexOf(remove)) == (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return str;\n            } \n            final char[] char[] = str.toCharArray();\n            int int = 0;\n            for (int int = 0 ; i < (chars.int) ; i++) {\n                if ((chars[i]) != remove) {\n                    chars[(pos++)] = chars[i];\n                } \n            }\n            return new java.lang.String(chars , 0 , pos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1083","type":"CtBinaryOperatorImpl"},"failures":[385],"tindex":"d0d5fb56-3f1b-11e6-a357-4d49ce5f4955","method":{"position":"org.apache.commons.lang3.Conversion:1079","type":"CtMethodImpl","sourcecode":"public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n    if (((srcPos - 1) + dstPos) >= 32) {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 32\");\n            } \n            int int = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final int int = (src[(i + srcPos)] ? 1 : 0) << shift;\n                final int int = 1 << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBools":"srcPos","dstPos":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:320","type":"CtBinaryOperatorImpl"},"failures":[386],"tindex":"d0d62267-3f1b-11e6-a357-594a0b75c606","method":{"position":"org.apache.commons.lang3.StringUtils:4319","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeEndIgnoreCase(final java.lang.String str, final java.lang.String remove) {\n    if (remove == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {\n                return str;\n            } \n            if (org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(str, remove)) {\n                return str.substring(0, ((str.length()) - (remove.length())));\n            } \n            return str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"remove"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1692","type":"CtBinaryOperatorImpl"},"failures":[31,32,33,80,82],"tindex":"d0d62268-3f1b-11e6-a357-5995efe77844","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1742","type":"CtMethodImpl","sourcecode":"private static java.lang.String classToString(java.lang.Class<?> c) {\n    if ((c.getEnclosingClass()) == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            if ((c.getEnclosingClass()) != null) {\n                buf.append(org.apache.commons.lang3.reflect.TypeUtils.classToString(c.getEnclosingClass())).append('.').append(c.getSimpleName());\n            } else {\n                buf.append(c.getName());\n            }\n            if ((c.getTypeParameters().int) > 0) {\n                buf.append('<');\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf, \", \", c.getTypeParameters());\n                buf.append('>');\n            } \n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:701","type":"CtBinaryOperatorImpl"},"failures":[387,388,389,390,391,392,393,394],"tindex":"d0d62269-3f1b-11e6-a357-09e45d7765f8","method":{"position":"org.apache.commons.lang3.time.DateUtils:1365","type":"CtMethodImpl","sourcecode":"public static long getFragmentInMinutes(final java.util.Date date, final int fragment) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.getFragment(date, fragment, java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit.java.util.concurrent.TimeUnit);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1577","type":"CtVariableReadImpl"},"failures":[395,396],"tindex":"d0d6226a-3f1b-11e6-a357-8d274ed4ccb9","method":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:87","type":"CtMethodImpl","sourcecode":"public void setValue(final boolean value) {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.mutable.MutableBoolean.this.boolean = value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:200","type":"CtBinaryOperatorImpl"},"failures":[397],"tindex":"d0d6497b-3f1b-11e6-a357-d3884c5415f0","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2179","type":"CtMethodImpl","sourcecode":"public java.lang.String leftString(final int length) {\n    if (length < 0) {\n        {\n            if (length <= 0) {\n                return \"\";\n            } else if (length >= (int)) {\n                return new java.lang.String(char[] , 0 , int);\n            } else {\n                return new java.lang.String(char[] , 0 , length);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1324","type":"CtBinaryOperatorImpl"},"failures":[398],"tindex":"d0d6497c-3f1b-11e6-a357-29038759ff28","method":{"position":"org.apache.commons.lang3.Conversion:1323","type":"CtMethodImpl","sourcecode":"public static byte[] intToByteArray(final int src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n    if (0 == dstPos) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nBytes) {\n                return dst;\n            } \n            if ((((nBytes - 1) * 8) + srcPos) >= 32) {\n                throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+srcPos is greather or equal to than 32\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nBytes ; i++) {\n                shift = (i * 8) + srcPos;\n                dst[(dstPos + i)] = ((byte)(255 & (src >> shift)));\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nBytes":"dstPos"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2177","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d6497d-3f1b-11e6-a357-df93b8a0c075","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:831","type":"CtMethodImpl","sourcecode":"private boolean isQuote(final char[] srcChars, final int pos, final int len, final int quoteStart, final int quoteLen) {\n    if (quoteStart < 0) {\n        {\n            if (quoteStart > 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (int int = 0 ; i < quoteLen ; i++) {\n                        if (((pos + i) >= len) || ((srcChars[(pos + i)]) != (srcChars[(quoteStart + i)]))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"quoteStart"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:448","type":"CtBinaryOperatorImpl"},"failures":[399,400],"tindex":"d0d6708e-3f1b-11e6-a357-5bc1c317d2c8","method":{"position":"org.apache.commons.lang3.text.StrBuilder:172","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String nullText) {\n    if (nullText == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((nullText != null) && (nullText.isEmpty())) {\n                nullText = null;\n            } \n            org.apache.commons.lang3.text.StrBuilder.this.java.lang.String = nullText;\n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nullText":"nullText"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2562","type":"CtBinaryOperatorImpl"},"failures":[401],"tindex":"d0d6708f-3f1b-11e6-a357-b712d8bd6a59","method":{"position":"org.apache.commons.lang3.ArrayUtils:2869","type":"CtMethodImpl","sourcecode":"public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n    if (startIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:268","type":"CtBinaryOperatorImpl"},"failures":[402],"tindex":"d0d67090-3f1b-11e6-a357-e10c9a3e532c","method":{"position":"org.apache.commons.lang3.ObjectUtils:340","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            buffer.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d0d697a1-3f1b-11e6-a357-e3c94e5f0f3b","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1069","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = calendar.get(java.util.Calendar.java.util.Calendar.int);\n            if (value == 0) {\n                value = (calendar.getMaximum(java.util.Calendar.java.util.Calendar.int)) + 1;\n            } \n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:282","type":"CtBinaryOperatorImpl"},"failures":[403,404,405,406,407,408,409,93,410,411,412,413,414,415,416,417,418,419,420,421],"tindex":"d0d6beb2-3f1b-11e6-a357-a3f063e0f559","method":{"position":"org.apache.commons.lang3.time.DateUtils:803","type":"CtMethodImpl","sourcecode":"public static java.util.Date truncate(final java.util.Date date, final int field) {\n    if (date == null) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            gval.setTime(date);\n            org.apache.commons.lang3.time.DateUtils.modify(gval, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return gval.getTime();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325051215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
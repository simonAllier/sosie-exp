{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":68,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":162,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":62,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":118,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":4,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":339,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":342,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":232,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF":378,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":407,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":231,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArrayEqualAsObject":14,"org.apache.commons.lang3.time.FastDateParserTest.testLANG_832":294,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":42,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":327,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":469,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":129,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":464,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":131,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":12,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":107,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":117,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D":81,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":324,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":1,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":103,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":250,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":119,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":398,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray":451,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":165,"org.apache.commons.lang3.CharRangeTest.testContains_Char":455,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":54,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":167,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":462,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":58,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":248,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":470,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testTimeZoneMatches":279,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":235,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":380,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testTimeZoneMatches":369,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":391,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":153,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToEmpty":476,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":427,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":61,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":445,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":456,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":461,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":99,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":345,"org.apache.commons.lang3.StringUtilsSubstringTest.testRight_String":85,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":36,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiShortArray":413,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":331,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_StringInt":383,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder":471,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder":29,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleTolerance":76,"org.apache.commons.lang3.time.FastDateParserTest.testParseNumerics":290,"org.apache.commons.lang3.time.FastDateParserTest.testPatternMatches":303,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_3items":219,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":185,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":340,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiCharArray":481,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":321,"org.apache.commons.lang3.time.FastDateParserTest.testLocaleMatches":284,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testToStringContainsName":276,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":341,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementIntArray":381,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":113,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":234,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":33,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":282,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":336,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":111,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":13,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":329,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD":297,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":305,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":332,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":458,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":357,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":32,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_int":215,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString":447,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":145,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":359,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":47,"org.apache.commons.lang3.CharSetTest.testContains_Char":443,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":174,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":347,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":10,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":69,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":181,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray":371,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":190,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":148,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":213,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":429,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":318,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":330,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang303":358,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":221,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":128,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testPatternMatches":280,"org.apache.commons.lang3.math.FractionTest.testFactory_String_improper":440,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":161,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":7,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":139,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":138,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":296,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":110,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":178,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":365,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":144,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":273,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":123,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt":376,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":159,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":401,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testBlank":197,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLocaleMatches":271,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":158,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":344,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":112,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNull":247,"org.apache.commons.lang3.text.StrBuilderTest.testAsReader":199,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":228,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":417,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":147,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":207,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":364,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":274,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt":375,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":53,"org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_validInput_2items":216,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.test_Equality_Hash":362,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":334,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":28,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":195,"org.apache.commons.lang3.StringUtilsTest.testDefault_StringString":203,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":173,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex":374,"org.apache.commons.lang3.StringUtilsTest.testGetJaroWinklerDistance_StringString":388,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":171,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":11,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":120,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":59,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":309,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":317,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":421,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":264,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testPatternMatches":370,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_String":377,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":426,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":56,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D":82,"org.apache.commons.lang3.builder.EqualsBuilderTest.testChar":482,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":67,"org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace":83,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":98,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":229,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":265,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":136,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithIgnoreCase":488,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray":208,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":245,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":9,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":212,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":444,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":172,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":467,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":322,"org.apache.commons.lang3.builder.DiffTest.testToString":422,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":125,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayObject":436,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":17,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort":409,"org.apache.commons.lang3.time.FastDateParserTest.testAmPm":286,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":23,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":101,"org.apache.commons.lang3.time.FastDateFormatTest.testLang954":307,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":468,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":270,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":356,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithAny":490,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":20,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":49,"org.apache.commons.lang3.ArrayUtilsTest.testReverseLongRange":474,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":5,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":114,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":454,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":133,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":236,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":395,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":238,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":237,"org.apache.commons.lang3.time.FastDateParserTest.testEquals":299,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":240,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":239,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":242,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":63,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":241,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":326,"org.apache.commons.lang3.ConversionTest.testLongToBinary":493,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang645":275,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":34,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":97,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":463,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":71,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":348,"org.apache.commons.lang3.text.StrBuilderTest.testSetLength":478,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":152,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParses":367,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":431,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray":26,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringStringarray":453,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":251,"org.apache.commons.lang3.reflect.TypeLiteralTest.testRaw":484,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":176,"org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_emptyInput":220,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":308,"org.apache.commons.lang3.StringUtilsIsTest.testIsAsciiPrintable_String":472,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":466,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":350,"org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean":373,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":140,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":135,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":304,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":368,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":73,"org.apache.commons.lang3.ArrayUtilsTest.testToObject_short":475,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":182,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":425,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":66,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean":372,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString":452,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":65,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":314,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":198,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":320,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":168,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":189,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":416,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String":311,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":268,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":313,"org.apache.commons.lang3.time.FastDateParserTest.testToStringContainsName":293,"org.apache.commons.lang3.ValidateTest.testIsAssignable_withMessage":211,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":102,"org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays":78,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":122,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":37,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":457,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":465,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_String":384,"org.apache.commons.lang3.mutable.MutableBooleanTest.testEquals":414,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":420,"org.apache.commons.lang3.time.DateUtilsTest.testSetMonths":494,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":337,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":24,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":70,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":179,"org.apache.commons.lang3.time.FastDateParserTest.testSpecialCharacters":281,"org.apache.commons.lang3.time.FastDateParserTest.testLowYearPadding":287,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":355,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":38,"org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase":485,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":48,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":328,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":22,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":96,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":433,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":312,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":100,"org.apache.commons.lang3.time.FastDateParserTest.testMilleniumBug":283,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":448,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":184,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":230,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":310,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":325,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray":205,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementDoubleArray":210,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":75,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":134,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":163,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":278,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":406,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":363,"org.apache.commons.lang3.time.FastDateParserTest.testParseZone":285,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":40,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":170,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":142,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":259,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":408,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_2items":218,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":8,"org.apache.commons.lang3.time.FastDateParserTest.testLang538":292,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":137,"org.apache.commons.lang3.time.FastDateParserTest.testLang303":291,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":260,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":261,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":262,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":263,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD":288,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":164,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":74,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":64,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":335,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":143,"org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray":389,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":150,"org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal":193,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":423,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":132,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":400,"org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean":206,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":18,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArrayHiddenByObject":483,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":252,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":346,"org.apache.commons.lang3.ClassUtilsTest.testGetInnerClass":79,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":121,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC":289,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":253,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":430,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":399,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":432,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":6,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":21,"org.apache.commons.lang3.ObjectUtilsTest.testConstMethods":392,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":243,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArray":480,"org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_validInput_3items":217,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":323,"org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses":80,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":338,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":155,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":396,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":126,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":352,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":50,"org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArrayHiddenByObject":411,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":41,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":405,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShort":435,"org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringString":450,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":394,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testToStringContainsName":360,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":130,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":105,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":449,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":439,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":156,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":418,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":57,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":141,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloat":438,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":127,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":77,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":52,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":35,"org.apache.commons.lang3.StringUtilsTest.testRemoveStart":25,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":410,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":177,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":2,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":19,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":186,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":428,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":60,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":146,"org.apache.commons.lang3.time.FastDateParserTest.testTimeZoneMatches":302,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":460,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":233,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":16,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":115,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":349,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObject":385,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":160,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":109,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissing":487,"org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength":477,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":15,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":315,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":124,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":39,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":366,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":419,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":222,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":492,"org.apache.commons.lang3.CharUtilsTest.testToString_Character":202,"org.apache.commons.lang3.ArrayUtilsTest.testToString":86,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":180,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":316,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":266,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":267,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny":201,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":196,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShortWithStartIndex":434,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":343,"org.apache.commons.lang3.text.StrBuilderTest.testEndsWith":194,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC":298,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":106,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiPrintable_char":473,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":353,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf":491,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":225,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":226,"org.apache.commons.lang3.StringUtilsTest.testAppendIfMissingIgnoreCase":486,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":157,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":379,"org.apache.commons.lang3.ConversionTest.testBinaryToLong":214,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":459,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":191,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":402,"org.apache.commons.lang3.builder.DiffTest.testGetType":424,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":116,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":55,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":44,"org.apache.commons.lang3.text.StrTokenizerTest.test8":94,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":333,"org.apache.commons.lang3.text.StrTokenizerTest.test5":91,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":354,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":361,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar":479,"org.apache.commons.lang3.text.StrTokenizerTest.test4":90,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":45,"org.apache.commons.lang3.text.StrTokenizerTest.test7":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":46,"org.apache.commons.lang3.text.StrTokenizerTest.test6":92,"org.apache.commons.lang3.text.StrTokenizerTest.test1":87,"org.apache.commons.lang3.text.StrTokenizerTest.test3":89,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":246,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWith":489,"org.apache.commons.lang3.text.StrTokenizerTest.test2":88,"org.apache.commons.lang3.time.FastDateParserTest.test_Equality_Hash":295,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":149,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":393,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObjectEmptyArray":386,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":169,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":183,"org.apache.commons.lang3.text.StrBuilderTest.testCharAt":200,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":306,"org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArray":412,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":223,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder":27,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":224,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":404,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":397,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":31,"org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray":387,"org.apache.commons.lang3.time.FastDateParserTest.testQuotes":301,"org.apache.commons.lang3.math.FractionTest.testFactory_String_proper":442,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":277,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":188,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object":204,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char_char":415,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":227,"org.apache.commons.lang3.time.FastDateParserTest.testParses":300,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":30,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":258,"org.apache.commons.lang3.StringUtilsSubstringTest.testMid_String":192,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":441,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveIntArray":382,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":272,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":403,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":249,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":256,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":255,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString":446,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":257,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":254,"org.apache.commons.lang3.ClassUtilsTest.testGetClassRawPrimitives":84,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":175,"org.apache.commons.lang3.text.WordUtilsTest.testSwapCase_String":437,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":154,"org.apache.commons.lang3.ArrayUtilsTest.testCloneDouble":209,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":319,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":95,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocaleMatches":351,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":269,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":151,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String":390,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":104},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:675","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"74ba0a06-3f33-11e6-8233-d7849744b326","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:875","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final java.lang.Object[] lhs, final java.lang.Object[] rhs) {\n    if (fieldName == null) {\n        {\n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Object[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Object[] getLeft() {\n                        return lhs;\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Object[] getRight() {\n                        return rhs;\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:222","type":"CtBinaryOperatorImpl"},"failures":[22,23,24],"tindex":"74baa647-3f33-11e6-8233-65c3230d6f1a","method":{"position":"org.apache.commons.lang3.event.EventUtils:127","type":"CtMethodImpl","sourcecode":"private boolean hasMatchingParametersMethod(final java.lang.reflect.Method method) {\n    if (method == null) {\n        {\n            return (org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(java.lang.Object.getClass(), java.lang.String, method.getParameterTypes())) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"method":"method"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:121","type":"CtBinaryOperatorImpl"},"failures":[25],"tindex":"74baa648-3f33-11e6-8233-c5c293ce10a7","method":{"position":"org.apache.commons.lang3.StringUtils:4214","type":"CtMethodImpl","sourcecode":"public static java.lang.String removeStart(final java.lang.String str, final java.lang.String remove) {\n    if (str == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {\n                return str;\n            } \n            if (str.startsWith(remove)) {\n                return str.substring(remove.length());\n            } \n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3464","type":"CtBinaryOperatorImpl"},"failures":[26],"tindex":"74baa649-3f33-11e6-8233-fbfc48c576ad","method":{"position":"org.apache.commons.lang3.ArrayUtils:4836","type":"CtMethodImpl","sourcecode":"public static char[] removeElement(final char[] array, final char element) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:647","type":"CtBinaryOperatorImpl"},"failures":[27,28,29],"tindex":"74bacd5a-3f33-11e6-8233-0b3bbba978d2","method":{"position":"org.apache.commons.lang3.text.StrBuilder:622","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final java.lang.StringBuilder str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            final int int = str.length();\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                str.getChars(0, strLen, char[], len);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:717","type":"CtBinaryOperatorImpl"},"failures":[30,30,31,32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,62,63,64,65,66,67,68,69,70,71,72,73,74,74,75],"tindex":"74bacd5b-3f33-11e6-8233-2debd5a00cf1","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:801","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:218","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74baf46c-3f33-11e6-8233-6790eb2acca4","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:77","type":"CtMethodImpl","sourcecode":"private boolean isZeroToThree(char ch) {\n    if ((org.apache.commons.lang3.CharUtils.isAsciiNumeric(ch)) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (ch >= '0') && (ch <= '3');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:419","type":"CtBinaryOperatorImpl"},"failures":[76],"tindex":"74baf46d-3f33-11e6-8233-11a2a7af8f8b","method":{"position":"org.apache.commons.lang3.ArrayUtils:2540","type":"CtMethodImpl","sourcecode":"public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n    if (array == null) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0, tolerance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1312","type":"CtInvocationImpl"},"failures":[77],"tindex":"74bb1b7e-3f33-11e6-8233-2fc8c2df3518","method":{"position":"org.apache.commons.lang3.math.NumberUtils:99","type":"CtMethodImpl","sourcecode":"public static int toInt(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.ClassNotFoundException","condition":{"position":"org.apache.commons.lang3.ClassUtils:195","type":"CtInvocationImpl"},"failures":[78,79,80,81,82,83,84],"tindex":"74bb1b7f-3f33-11e6-8233-e71f8b959f06","method":{"position":"org.apache.commons.lang3.ClassUtils:876","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getClass(final java.lang.String className) throws java.lang.ClassNotFoundException {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(className)) {\n        {\n            return org.apache.commons.lang3.ClassUtils.getClass(className, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.ClassNotFoundException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"className":"className"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5080","type":"CtBinaryOperatorImpl"},"failures":[85],"tindex":"74bb1b80-3f33-11e6-8233-e59d7fa6c493","method":{"position":"org.apache.commons.lang3.StringUtils:2206","type":"CtMethodImpl","sourcecode":"public static java.lang.String right(final java.lang.String str, final int len) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (len < 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            if ((str.length()) <= len) {\n                return str;\n            } \n            return str.substring(((str.length()) - len));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:508","type":"CtBinaryOperatorImpl"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,30,31,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,72,72,73,73,74,74,75,75,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],"tindex":"74bb4291-3f33-11e6-8233-b7d72f4da21e","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:185","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (value instanceof short[]) {\n        {\n            if (value != null) {\n                final java.util.Map<java.lang.Object, java.lang.Object> java.util.Map<java.lang.Object, java.lang.Object> = org.apache.commons.lang3.builder.ToStringStyle.getRegistry();\n                if (m == null) {\n                    org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle.java.lang.ThreadLocal<java.util.WeakHashMap<java.lang.Object, java.lang.Object>>.set(new java.util.WeakHashMap<java.lang.Object, java.lang.Object>());\n                } \n                org.apache.commons.lang3.builder.ToStringStyle.getRegistry().put(value, null);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:378","type":"CtBinaryOperatorImpl"},"failures":[192],"tindex":"74bb4292-3f33-11e6-8233-81a1af6374e7","method":{"position":"org.apache.commons.lang3.StringUtils:2244","type":"CtMethodImpl","sourcecode":"public static java.lang.String mid(final java.lang.String str, int pos, final int len) {\n    if (pos == 0) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if ((len < 0) || (pos > (str.length()))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            if (pos < 0) {\n                pos = 0;\n            } \n            if ((str.length()) <= (pos + len)) {\n                return str.substring(pos);\n            } \n            return str.substring(pos, (pos + len));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"len":"pos"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:180","type":"CtBinaryOperatorImpl"},"failures":[193],"tindex":"74bb69a3-3f33-11e6-8233-494ebf74431b","method":{"position":"org.apache.commons.lang3.time.DateUtils:238","type":"CtMethodImpl","sourcecode":"public static boolean isSameLocalTime(final java.util.Calendar cal1, final java.util.Calendar cal2) {\n    if ((cal2 == null) || (cal1 == null)) {\n        {\n            if ((cal1 == null) || (cal2 == null)) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            return ((((((((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.get(java.util.Calendar.java.util.Calendar.int)) == (cal2.get(java.util.Calendar.java.util.Calendar.int)))) && ((cal1.getClass()) == (cal2.getClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cal2":"cal1","cal1":"cal2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1102","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bb90b4-3f33-11e6-8233-db50618f2377","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1098","type":"CtMethodImpl","sourcecode":"public static long min(long a, final long b, final long c) {\n    if (b < b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b < a) {\n                a = b;\n            } \n            if (c < a) {\n                a = c;\n            } \n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","c":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:452","type":"CtInvocationImpl"},"failures":[194],"tindex":"74bb90b5-3f33-11e6-8233-8b35ffa6627c","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2099","type":"CtMethodImpl","sourcecode":"public boolean endsWith(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str == null) {\n                return false;\n            } \n            final int int = str.length();\n            if (len == 0) {\n                return true;\n            } \n            if (len > (int)) {\n                return false;\n            } \n            int int = (int) - len;\n            for (int int = 0 ; i < len ; i++ , pos++) {\n                if ((char[][pos]) != (str.charAt(i))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:816","type":"CtBinaryOperatorImpl"},"failures":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,127,128,129,130,131,132,133,134,134,135,135,195,195,196,30,30,31,31,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,72,72,73,73,74,74,75,75,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,197,198,179,180,181,182,183,184,185,186,187,188,189,190,191],"tindex":"74bbb7c6-3f33-11e6-8233-2d112a81838f","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:394","type":"CtMethodImpl","sourcecode":"public void appendEnd(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (object == null) {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.this.boolean) == false) {\n                removeLastFieldSeparator(buffer);\n            } \n            appendContentEnd(buffer);\n            org.apache.commons.lang3.builder.ToStringStyle.unregister(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:39","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bc05e7-3f33-11e6-8233-bb5b8632a98c","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1297","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:832","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bc05e8-3f33-11e6-8233-5da9308a7327","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:153","type":"CtMethodImpl","sourcecode":"static boolean isRegistered(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if ((lhs == null) || (lhs == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.getRegistry();\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(lhs, rhs);\n            final org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> = org.apache.commons.lang3.tuple.Pair.of(pair.getLeft(), pair.getRight());\n            return (registry != null) && ((registry.contains(pair)) || (registry.contains(swappedPair)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:391","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bc05e9-3f33-11e6-8233-436af91fe0a7","method":{"position":"org.apache.commons.lang3.time.FastDateParser:306","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date parse(final java.lang.String source, final java.text.ParsePosition pos) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = pos.getIndex();\n            final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(source.substring(offset));\n            if (!(matcher.lookingAt())) {\n                return null;\n            } \n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance(java.util.TimeZone, java.util.Locale);\n            cal.clear();\n            for (int int = 0 ; i < (org.apache.commons.lang3.time.FastDateParser.Strategy[].int) ; ) {\n                final org.apache.commons.lang3.time.FastDateParser.Strategy org.apache.commons.lang3.time.FastDateParser.Strategy = org.apache.commons.lang3.time.FastDateParser.Strategy[][(i++)];\n                strategy.setCalendar(org.apache.commons.lang3.time.FastDateParser.this, cal, matcher.group(i));\n            }\n            pos.setIndex((offset + (matcher.end())));\n            return cal.getTime();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:4561","type":"CtBinaryOperatorImpl"},"failures":[199,200,201],"tindex":"74bc2cfa-3f33-11e6-8233-3fee172c7839","method":{"position":"org.apache.commons.lang3.text.StrBuilder:308","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic char charAt(final int index) {\n    if (index != 0) {\n        {\n            if ((index < 0) || (index >= (length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(index);\n            } \n            return char[][index];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1262","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bc2cfb-3f33-11e6-8233-9d8d5670ec29","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1152","type":"CtMethodImpl","sourcecode":"public static byte min(byte a, final byte b, final byte c) {\n    if (b > b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b < a) {\n                a = b;\n            } \n            if (c < a) {\n                a = c;\n            } \n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","c":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3225","type":"CtInvocationImpl"},"failures":[],"tindex":"74bc2cfc-3f33-11e6-8233-f172c2c3ecf3","method":{"position":"org.apache.commons.lang3.StringUtils:1332","type":"CtMethodImpl","sourcecode":"public static int lastIndexOfIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr) {\n    if (str.isEmpty()) {\n        {\n            if ((str == null) || (searchStr == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(str, searchStr, str.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:332","type":"CtBinaryOperatorImpl"},"failures":[202],"tindex":"74bc2cfd-3f33-11e6-8233-b9add51efa59","method":{"position":"org.apache.commons.lang3.CharUtils:331","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Character ch) {\n    if (ch == null) {\n        {\n            if (ch == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (ch == null) {\n                        return null;\n                    } \n                    return org.apache.commons.lang3.CharUtils.toString(ch.charValue());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2174","type":"CtBinaryOperatorImpl"},"failures":[203],"tindex":"74bc540e-3f33-11e6-8233-2bd001ecf0ca","method":{"position":"org.apache.commons.lang3.StringUtils:6219","type":"CtMethodImpl","sourcecode":"public static java.lang.String defaultString(final java.lang.String str, final java.lang.String defaultStr) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return str == null ? defaultStr : str;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bc540f-3f33-11e6-8233-c17a322837b1","method":{"position":"org.apache.commons.lang3.ArrayUtils:4641","type":"CtMethodImpl","sourcecode":"public static <T>T[] removeElement(final T[] array, final java.lang.Object element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = org.apache.commons.lang3.ArrayUtils.indexOf(array, element);\n            if (index == (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int)) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            return org.apache.commons.lang3.ArrayUtils.remove(array, index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:244","type":"CtBinaryOperatorImpl"},"failures":[204],"tindex":"74bc7b20-3f33-11e6-8233-9bfa18a695d9","method":{"position":"org.apache.commons.lang3.ClassUtils:1057","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageCanonicalName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object instanceof java.util.Map.Entry<?, ?>) {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageCanonicalName(object.getClass().getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5125","type":"CtBinaryOperatorImpl"},"failures":[205,206],"tindex":"74bc7b21-3f33-11e6-8233-cd22ed19e4e6","method":{"position":"org.apache.commons.lang3.StringUtils:4684","type":"CtMethodImpl","sourcecode":"private static java.lang.String replaceEach(final java.lang.String text, final java.lang.String[] searchList, final java.lang.String[] replacementList, final boolean repeat, final int timeToLive) {\n    if (timeToLive <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((((((text == null) || (text.isEmpty())) || (searchList == null)) || ((searchList.int) == 0)) || (replacementList == null)) || ((replacementList.int) == 0)) {\n                return text;\n            } \n            if (timeToLive < 0) {\n                throw new java.lang.IllegalStateException((\"Aborting to protect against StackOverflowError - \" + \"output of one loop is the input of another\"));\n            } \n            final int int = searchList.int;\n            final int int = replacementList.int;\n            if (searchLength != replacementLength) {\n                throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don't match: \" + searchLength) + \" vs \") + replacementLength));\n            } \n            final boolean[] boolean[] = new boolean[searchLength];\n            int int = -1;\n            int int = -1;\n            int int = -1;\n            for (int int = 0 ; i < searchLength ; i++) {\n                if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                tempIndex = text.indexOf(searchList[i]);\n                if (tempIndex == (-1)) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    } \n                }\n            }\n            if (textIndex == (-1)) {\n                return text;\n            } \n            int int = 0;\n            int int = 0;\n            for (int int = 0 ; i < (searchList.int) ; i++) {\n                if (((searchList[i]) == null) || ((replacementList[i]) == null)) {\n                    continue;\n                } \n                final int int = (replacementList[i].length()) - (searchList[i].length());\n                if (greater > 0) {\n                    increase += 3 * greater;\n                } \n            }\n            increase = java.lang.Math.min(increase, ((text.length()) / 5));\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((text.length()) + increase));\n            while (textIndex != (-1)) {\n                for (int int = start ; i < textIndex ; i++) {\n                    buf.append(text.charAt(i));\n                }\n                buf.append(replacementList[replaceIndex]);\n                start = textIndex + (searchList[replaceIndex].length());\n                textIndex = -1;\n                replaceIndex = -1;\n                tempIndex = -1;\n                for (int int = 0 ; i < searchLength ; i++) {\n                    if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || (searchList[i].isEmpty())) || ((replacementList[i]) == null)) {\n                        continue;\n                    } \n                    tempIndex = text.indexOf(searchList[i], start);\n                    if (tempIndex == (-1)) {\n                        noMoreMatchesForReplIndex[i] = true;\n                    } else {\n                        if ((textIndex == (-1)) || (tempIndex < textIndex)) {\n                            textIndex = tempIndex;\n                            replaceIndex = i;\n                        } \n                    }\n                }\n            }\n            final int int = text.length();\n            for (int int = start ; i < textLength ; i++) {\n                buf.append(text.charAt(i));\n            }\n            final java.lang.String java.lang.String = buf.toString();\n            if (!repeat) {\n                return result;\n            } \n            return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"repeat":"timeToLive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:247","type":"CtBinaryOperatorImpl"},"failures":[207],"tindex":"74bca232-3f33-11e6-8233-b193c4b25e0b","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1095","type":"CtMethodImpl","sourcecode":"public static boolean isInstance(final java.lang.Object value, final java.lang.reflect.Type type) {\n    if (value instanceof java.lang.annotation.Annotation) {\n        {\n            if (type == null) {\n                return false;\n            } \n            return value == null ? (!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive())) : org.apache.commons.lang3.reflect.TypeUtils.isAssignable(value.getClass(), type, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:157","type":"CtBinaryOperatorImpl"},"failures":[208,209,210],"tindex":"74bca233-3f33-11e6-8233-7d897980edae","method":{"position":"org.apache.commons.lang3.ArrayUtils:418","type":"CtMethodImpl","sourcecode":"public static double[] clone(final double[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:117","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bca234-3f33-11e6-8233-2bd432138e4a","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.lang.String toUtf16Escape(final int codepoint) {\n    if (codepoint > 4095) {\n        {\n            final char[] char[] = java.lang.Character.toChars(codepoint);\n            return ((\"\\\\u\" + (org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(surrogatePair[0]))) + \"\\\\u\") + (org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(surrogatePair[1]));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.AnnotationUtils:224","type":"CtBinaryOperatorImpl"},"failures":[211],"tindex":"74bcc945-3f33-11e6-8233-d11ba5c39e8c","method":{"position":"org.apache.commons.lang3.Validate:1250","type":"CtMethodImpl","sourcecode":"public static void isAssignableFrom(final java.lang.Class<?> superType, final java.lang.Class<?> type, final java.lang.String message, final java.lang.Object... values) {\n    if (type == null) {\n        {\n            if ((superType.isAssignableFrom(type)) == false) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:121","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bcc946-3f33-11e6-8233-45b15903a80b","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:49","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.text.translate.JavaUnicodeEscaper below(final int codepoint) {\n    if (codepoint > 15) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.outsideOf(codepoint, java.lang.Integer.java.lang.Integer.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:910","type":"CtBinaryOperatorImpl"},"failures":[212],"tindex":"74bcc947-3f33-11e6-8233-cd36ee6ae504","method":{"position":"org.apache.commons.lang3.time.DateUtils:909","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar ceiling(final java.util.Calendar date, final int field) {\n    if (date == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            final java.util.Calendar java.util.Calendar = ((java.util.Calendar)(date.clone()));\n            org.apache.commons.lang3.time.DateUtils.modify(ceiled, field, org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int);\n            return ceiled;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:957","type":"CtBinaryOperatorImpl"},"failures":[213],"tindex":"74bcc948-3f33-11e6-8233-0fe909eec2cc","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:956","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(final org.apache.commons.lang3.text.StrMatcher ignored) {\n    if (ignored != null) {\n        {\n            if (ignored != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = ignored;\n            } \n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ignored":"ignored"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:323","type":"CtArrayReadImpl"},"failures":[214],"tindex":"74bcf059-3f33-11e6-8233-0bdc091e0059","method":{"position":"org.apache.commons.lang3.Conversion:1042","type":"CtMethodImpl","sourcecode":"public static long binaryToLong(final boolean[] src, final int srcPos, final long dstInit, final int dstPos, final int nBools) {\n    if (src[dstPos]) {\n        {\n            if ((((src.int) == 0) && (srcPos == 0)) || (0 == nBools)) {\n                return dstInit;\n            } \n            if (((nBools - 1) + dstPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+dstPos is greather or equal to than 64\");\n            } \n            long long = dstInit;\n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + dstPos;\n                final long long = (src[(i + srcPos)] ? 1L : 0) << shift;\n                final long long = 1L << shift;\n                out = (out & (~mask)) | bits;\n            }\n            return out;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"dstPos","src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:758","type":"CtBinaryOperatorImpl"},"failures":[215],"tindex":"74bcf05a-3f33-11e6-8233-4183f0ccb98b","method":{"position":"org.apache.commons.lang3.ArrayUtils:3137","type":"CtMethodImpl","sourcecode":"public static java.lang.Integer[] toObject(final int[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Integer[];\n            } \n            final java.lang.Integer[] java.lang.Integer[] = new java.lang.Integer[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Integer.valueOf(array[i]);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1042","type":"CtBinaryOperatorImpl"},"failures":[216,217,218,219,220],"tindex":"74bcf05b-3f33-11e6-8233-3da6a1aaf54b","method":{"position":"org.apache.commons.lang3.BooleanUtils:972","type":"CtMethodImpl","sourcecode":"public static boolean or(final boolean... array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            for (final boolean boolean : array) {\n                if (element) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:913","type":"CtBinaryOperatorImpl"},"failures":[221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,87,88,89,90,91,92,93,94,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,213],"tindex":"74bcf05c-3f33-11e6-8233-87feec6506c9","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:912","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(final org.apache.commons.lang3.text.StrMatcher quote) {\n    if (quote != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (quote != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = quote;\n            } \n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"quote":"quote"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:759","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bd176d-3f33-11e6-8233-bf7d68eb33f5","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:129","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final boolean lhs, final boolean rhs) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Boolean>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Boolean getLeft() {\n                        return java.lang.Boolean.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Boolean getRight() {\n                        return java.lang.Boolean.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:463","type":"CtBinaryOperatorImpl"},"failures":[268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370],"tindex":"74bd3e7e-3f33-11e6-8233-67f71d4eec25","method":{"position":"org.apache.commons.lang3.time.FastDateParser:460","type":"CtMethodImpl","sourcecode":"private org.apache.commons.lang3.time.FastDateParser.Strategy getStrategy(final java.lang.String formatField, final java.util.Calendar definingCalendar) {\n    if ((formatField.length()) > 2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            switch (formatField.charAt(0)) {\n                case '\\'' :\n                    if ((formatField.length()) > 2) {\n                        return new org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy(formatField.substring(1, ((formatField.length()) - 1)));\n                    } \n                default :\n                    return new org.apache.commons.lang3.time.FastDateParser.CopyQuotedStrategy(formatField);\n                case 'D' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'E' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'F' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'G' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'H' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'K' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'M' :\n                    return (formatField.length()) >= 3 ? getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar) : org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'S' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'W' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'a' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n                case 'd' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'h' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'k' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'm' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 's' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'w' :\n                    return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'y' :\n                    return (formatField.length()) > 2 ? org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy : org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy;\n                case 'Z' :\n                case 'z' :\n                    return getLocaleSpecificStrategy(java.util.Calendar.java.util.Calendar.int, definingCalendar);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"formatField":"formatField"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1195","type":"CtBinaryOperatorImpl"},"failures":[371,372,373,374],"tindex":"74bd658f-3f33-11e6-8233-8576715a6f89","method":{"position":"org.apache.commons.lang3.ArrayUtils:2869","type":"CtMethodImpl","sourcecode":"public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2332","type":"CtInvocationImpl"},"failures":[375,376],"tindex":"74bd8ca0-3f33-11e6-8233-3fa361996481","method":{"position":"org.apache.commons.lang3.StringUtils:5119","type":"CtMethodImpl","sourcecode":"public static java.lang.String repeat(final java.lang.String str, final int repeat) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (repeat <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            if ((repeat == 1) || (inputLength == 0)) {\n                return str;\n            } \n            if ((inputLength == 1) && (repeat <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n            } \n            final int int = inputLength * repeat;\n            switch (inputLength) {\n                case 1 :\n                    return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n                case 2 :\n                    final char char = str.charAt(0);\n                    final char char = str.charAt(1);\n                    final char[] char[] = new char[outputLength];\n                    for (int int = (repeat * 2) - 2 ; i >= 0 ; i-- , i--) {\n                        output2[i] = ch0;\n                        output2[(i + 1)] = ch1;\n                    }\n                    return new java.lang.String(output2);\n                default :\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(outputLength);\n                    for (int int = 0 ; i < repeat ; i++) {\n                        buf.append(str);\n                    }\n                    return buf.toString();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5991","type":"CtBinaryOperatorImpl"},"failures":[377],"tindex":"74bdb3b1-3f33-11e6-8233-cb474191e1c7","method":{"position":"org.apache.commons.lang3.StringUtils:1842","type":"CtMethodImpl","sourcecode":"public static boolean containsOnly(final java.lang.CharSequence cs, final java.lang.String validChars) {\n    if (cs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((cs == null) || (validChars == null)) {\n                return false;\n            } \n            return org.apache.commons.lang3.StringUtils.containsOnly(cs, validChars.toCharArray());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.SecurityException","condition":{"position":"org.apache.commons.lang3.ClassUtils:711","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bdb3b2-3f33-11e6-8233-677a33d160e8","method":{"position":"org.apache.commons.lang3.ClassUtils:921","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getPublicMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) throws java.lang.NoSuchMethodException, java.lang.SecurityException {\n    if ((cls != null) && (cls.isPrimitive())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.SecurityException();\n    } else {\n        {\n            final java.lang.reflect.Method java.lang.reflect.Method = cls.getMethod(methodName, parameterTypes);\n            if (java.lang.reflect.Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n                return declaredMethod;\n            } \n            final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>();\n            candidateClasses.addAll(org.apache.commons.lang3.ClassUtils.getAllInterfaces(cls));\n            candidateClasses.addAll(org.apache.commons.lang3.ClassUtils.getAllSuperclasses(cls));\n            for (final java.lang.Class<?> java.lang.Class<?> : candidateClasses) {\n                if (!(java.lang.reflect.Modifier.isPublic(candidateClass.getModifiers()))) {\n                    continue;\n                } \n                java.lang.reflect.Method java.lang.reflect.Method;\n                try {\n                    candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n                } catch (final java.lang.NoSuchMethodException ex) {\n                    continue;\n                }\n                if (java.lang.reflect.Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                    return candidateMethod;\n                } \n            }\n            throw new java.lang.NoSuchMethodException((((\"Can't find a public method for \" + methodName) + \" \") + (org.apache.commons.lang3.ArrayUtils.toString(parameterTypes))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:732","type":"CtInvocationImpl"},"failures":[378,379],"tindex":"74bdb3b3-3f33-11e6-8233-11d0d2cb41e7","method":{"position":"org.apache.commons.lang3.math.NumberUtils:221","type":"CtMethodImpl","sourcecode":"public static float toFloat(final java.lang.String str, final float defaultValue) {\n    if (str.startsWith(\"-\")) {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Float.parseFloat(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2100","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bddac4-3f33-11e6-8233-1122b951bb9b","method":{"position":"org.apache.commons.lang3.text.StrBuilder:877","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendln(final java.lang.String str, final int startIndex, final int length) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return append(str, startIndex, length).appendNewLine();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:270","type":"CtUnaryOperatorImpl"},"failures":[380],"tindex":"74bddac5-3f33-11e6-8233-79b2671bebe1","method":{"position":"org.apache.commons.lang3.reflect.TypeLiteral:99","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object obj) {\n    if (!(super.equals(obj))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == (org.apache.commons.lang3.reflect.TypeLiteral.this)) {\n                return true;\n            } \n            if ((obj instanceof org.apache.commons.lang3.reflect.TypeLiteral) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.reflect.TypeLiteral<?> org.apache.commons.lang3.reflect.TypeLiteral<?> = ((org.apache.commons.lang3.reflect.TypeLiteral<?>)(obj));\n            return org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.Type, other.java.lang.reflect.Type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bddac6-3f33-11e6-8233-e96eb93a247a","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:715","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final short lhs, final short rhs) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (lhs != rhs) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Short>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Short getLeft() {\n                        return java.lang.Short.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Short getRight() {\n                        return java.lang.Short.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2125","type":"CtBinaryOperatorImpl"},"failures":[381,382],"tindex":"74bddac7-3f33-11e6-8233-adc99c163c61","method":{"position":"org.apache.commons.lang3.ArrayUtils:5002","type":"CtMethodImpl","sourcecode":"public static int[] remove(final int[] array, final int index) {\n    if (array == null) {\n        {\n            return ((int[])(org.apache.commons.lang3.ArrayUtils.remove(((java.lang.Object)(array)), index)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:395","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74be01d8-3f33-11e6-8233-1fa8c71a8040","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1946","type":"CtMethodImpl","sourcecode":"protected void setFieldSeparatorAtEnd(final boolean fieldSeparatorAtEnd) {\n    if (fieldSeparatorAtEnd == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.this.boolean = fieldSeparatorAtEnd;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldSeparatorAtEnd":"fieldSeparatorAtEnd"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:253","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74be01d9-3f33-11e6-8233-f5b5329a739a","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:195","type":"CtMethodImpl","sourcecode":"public static <T>java.lang.String reflectionToString(final T object, final org.apache.commons.lang3.builder.ToStringStyle style, final boolean outputTransients, final java.lang.Class<? super T> reflectUpToClass) {\n    if (style == null) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, style, outputTransients, false, reflectUpToClass);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"style":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5299","type":"CtBinaryOperatorImpl"},"failures":[383,384],"tindex":"74be01da-3f33-11e6-8233-b33fd095670f","method":{"position":"org.apache.commons.lang3.StringUtils:1109","type":"CtMethodImpl","sourcecode":"public static int indexOfIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, int startPos) {\n    if (searchStr == null) {\n        {\n            if ((str == null) || (searchStr == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if (startPos < 0) {\n                startPos = 0;\n            } \n            final int int = ((str.length()) - (searchStr.length())) + 1;\n            if (startPos > endLimit) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if ((searchStr.length()) == 0) {\n                return startPos;\n            } \n            for (int int = startPos ; i < endLimit ; i++) {\n                if (org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchStr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3184","type":"CtBinaryOperatorImpl"},"failures":[385,386],"tindex":"74be28eb-3f33-11e6-8233-83519befcdec","method":{"position":"org.apache.commons.lang3.ArrayUtils:732","type":"CtMethodImpl","sourcecode":"public static java.lang.Short[] nullToEmpty(final java.lang.Short[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if ((array == null) || ((array.int) == 0)) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Short[];\n                    } \n                    return array;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:359","type":"CtInvocationImpl"},"failures":[387,388,389],"tindex":"74be28ec-3f33-11e6-8233-95e03859d425","method":{"position":"org.apache.commons.lang3.StringUtils:6591","type":"CtMethodImpl","sourcecode":"public static int indexOfDifference(final java.lang.CharSequence... css) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(css)) {\n        {\n            if ((css == null) || ((css.int) <= 1)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            boolean boolean = false;\n            boolean boolean = true;\n            final int int = css.int;\n            int int = java.lang.Integer.java.lang.Integer.int;\n            int int = 0;\n            for (int int = 0 ; i < arrayLen ; i++) {\n                if ((css[i]) == null) {\n                    anyStringNull = true;\n                    shortestStrLen = 0;\n                } else {\n                    allStringsNull = false;\n                    shortestStrLen = java.lang.Math.min(css[i].length(), shortestStrLen);\n                    longestStrLen = java.lang.Math.max(css[i].length(), longestStrLen);\n                }\n            }\n            if (allStringsNull || ((longestStrLen == 0) && (!anyStringNull))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            if (shortestStrLen == 0) {\n                return 0;\n            } \n            int int = -1;\n            for (int int = 0 ; stringPos < shortestStrLen ; stringPos++) {\n                final char char = css[0].charAt(stringPos);\n                for (int int = 1 ; arrayPos < arrayLen ; arrayPos++) {\n                    if ((css[arrayPos].charAt(stringPos)) != comparisonChar) {\n                        firstDiff = stringPos;\n                        break;\n                    } \n                }\n                if (firstDiff != (-1)) {\n                    break;\n                } \n            }\n            if ((firstDiff == (-1)) && (shortestStrLen != longestStrLen)) {\n                return shortestStrLen;\n            } \n            return firstDiff;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"css":"css"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5770","type":"CtInvocationImpl"},"failures":[390],"tindex":"74be28ed-3f33-11e6-8233-fd99f5cc9d3f","method":{"position":"org.apache.commons.lang3.StringUtils:2894","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, null, (-1), true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:64","type":"CtBinaryOperatorImpl"},"failures":[391],"tindex":"74be28ee-3f33-11e6-8233-2be192d8fde2","method":{"position":"org.apache.commons.lang3.ArrayUtils:5800","type":"CtMethodImpl","sourcecode":"public static float[] removeElements(final float[] array, final float... values) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final float float : values) {\n                final java.lang.Float java.lang.Float = java.lang.Float.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Float java.lang.Float = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.floatValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((float[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:494","type":"CtBinaryOperatorImpl"},"failures":[101,109,131,137,137,138,139,140,141,67,67,167,175,181,189],"tindex":"74be4fff-3f33-11e6-8233-4f3a78e13693","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:631","type":"CtMethodImpl","sourcecode":"protected void appendSummary(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object value) {\n    if (value instanceof long[]) {\n        {\n            buffer.append(java.lang.String);\n            buffer.append(getShortClassName(value.getClass()));\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:593","type":"CtBinaryOperatorImpl"},"failures":[392],"tindex":"74be5000-3f33-11e6-8233-212c67330a3a","method":{"position":"org.apache.commons.lang3.ObjectUtils:877","type":"CtMethodImpl","sourcecode":"public static int CONST(final int v) {\n    if (v > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return v;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"v":"v"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74be7711-3f33-11e6-8233-9f8fbc6e83db","method":{"position":"org.apache.commons.lang3.ArrayUtils:732","type":"CtMethodImpl","sourcecode":"public static java.lang.Short[] nullToEmpty(final java.lang.Short[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if ((array == null) || ((array.int) == 0)) {\n                        return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Short[];\n                    } \n                    return array;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.IDKey:64","type":"CtUnaryOperatorImpl"},"failures":[393,394,395,396,397,398,399,400,0,1,2,3,4,5,6,7,8,9,11,12,401,13,15,16,17,18,19,20,21,402,403,404,405,406,407,408],"tindex":"74be7712-3f33-11e6-8233-21806e50036c","method":{"position":"org.apache.commons.lang3.builder.IDKey:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (!(other instanceof org.apache.commons.lang3.builder.IDKey)) {\n        {\n            if (!(other instanceof org.apache.commons.lang3.builder.IDKey)) {\n                return false;\n            } \n            final org.apache.commons.lang3.builder.IDKey org.apache.commons.lang3.builder.IDKey = ((org.apache.commons.lang3.builder.IDKey)(other));\n            if ((int) != (idKey.int)) {\n                return false;\n            } \n            return (java.lang.Object) == (idKey.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:739","type":"CtBinaryOperatorImpl"},"failures":[409,410,411,412,413,1,401,13,16,17,20],"tindex":"74be7713-3f33-11e6-8233-093d8db699fb","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:732","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final short[] lhs, final short[] rhs) {\n    if ((lhs == null) || (lhs == null)) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:529","type":"CtBinaryOperatorImpl"},"failures":[414],"tindex":"74be9e24-3f33-11e6-8233-1b714fa30540","method":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:172","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj instanceof org.apache.commons.lang3.mutable.MutableBoolean) {\n                return (boolean) == (((org.apache.commons.lang3.mutable.MutableBoolean)(obj)).booleanValue());\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2958","type":"CtBinaryOperatorImpl"},"failures":[415],"tindex":"74be9e25-3f33-11e6-8233-f9e111d4fd00","method":{"position":"org.apache.commons.lang3.ArrayUtils:2979","type":"CtMethodImpl","sourcecode":"public static char[] toPrimitive(final java.lang.Character[] array, final char valueForNull) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.char[];\n            } \n            final char[] char[] = new char[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Character java.lang.Character = array[i];\n                result[i] = b == null ? valueForNull : b.charValue();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:907","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,11,12,15,16,18,19,20,21,160,161,416,417,418,419,420,421,422,423,424,425,426,427,428,380,429,207,430,431,432,433],"tindex":"74be9e26-3f33-11e6-8233-1fb1eb2c634e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:844","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(final java.lang.reflect.ParameterizedType parameterizedType, final java.lang.Class<?> toClass, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> subtypeVarAssigns) {\n    if (toClass.isPrimitive()) {\n        {\n            final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.getRawType(parameterizedType);\n            if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls, toClass))) {\n                return null;\n            } \n            final java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getOwnerType();\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n            if (ownerType instanceof java.lang.reflect.ParameterizedType) {\n                final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(ownerType));\n                typeVarAssigns = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(parameterizedOwnerType, org.apache.commons.lang3.reflect.TypeUtils.getRawType(parameterizedOwnerType), subtypeVarAssigns);\n            } else {\n                typeVarAssigns = subtypeVarAssigns == null ? new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>() : new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(subtypeVarAssigns);\n            }\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = parameterizedType.getActualTypeArguments();\n            final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = cls.getTypeParameters();\n            for (int int = 0 ; i < (typeParams.int) ; i++) {\n                final java.lang.reflect.Type java.lang.reflect.Type = typeArgs[i];\n                typeVarAssigns.put(typeParams[i], (typeVarAssigns.containsKey(typeArg) ? typeVarAssigns.get(typeArg) : typeArg));\n            }\n            if (toClass.equals(cls)) {\n                return typeVarAssigns;\n            } \n            return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"toClass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2442","type":"CtBinaryOperatorImpl"},"failures":[434,435],"tindex":"74bec537-3f33-11e6-8233-23ae296ab565","method":{"position":"org.apache.commons.lang3.ArrayUtils:2270","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n    if (startIndex < 0) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1198","type":"CtBinaryOperatorImpl"},"failures":[436],"tindex":"74bec538-3f33-11e6-8233-d5b121c67043","method":{"position":"org.apache.commons.lang3.ArrayUtils:870","type":"CtMethodImpl","sourcecode":"public static <T>T[] subarray(final T[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (startIndexInclusive < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            if (startIndexInclusive < 0) {\n                startIndexInclusive = 0;\n            } \n            if (endIndexExclusive > (array.int)) {\n                endIndexExclusive = array.int;\n            } \n            final int int = endIndexExclusive - startIndexInclusive;\n            final java.lang.Class<?> java.lang.Class<?> = array.getClass().getComponentType();\n            if (newSize <= 0) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                final T[] T[] = ((T[])(java.lang.reflect.Array.newInstance(type, 0)));\n                return emptyArray;\n            } \n            @java.lang.SuppressWarnings(value = \"unchecked\")\n            final T[] T[] = ((T[])(java.lang.reflect.Array.newInstance(type, newSize)));\n            java.lang.System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n            return subarray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"startIndexInclusive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:274","type":"CtBinaryOperatorImpl"},"failures":[437],"tindex":"74bec539-3f33-11e6-8233-a91c553b3493","method":{"position":"org.apache.commons.lang3.text.WordUtils:451","type":"CtMethodImpl","sourcecode":"public static java.lang.String swapCase(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return str;\n            } \n            final char[] char[] = str.toCharArray();\n            boolean boolean = true;\n            for (int int = 0 ; i < (buffer.int) ; i++) {\n                final char char = buffer[i];\n                if (java.lang.Character.isUpperCase(ch)) {\n                    buffer[i] = java.lang.Character.toLowerCase(ch);\n                    whitespace = false;\n                } else if (java.lang.Character.isTitleCase(ch)) {\n                    buffer[i] = java.lang.Character.toLowerCase(ch);\n                    whitespace = false;\n                } else if (java.lang.Character.isLowerCase(ch)) {\n                    if (whitespace) {\n                        buffer[i] = java.lang.Character.toTitleCase(ch);\n                        whitespace = false;\n                    } else {\n                        buffer[i] = java.lang.Character.toUpperCase(ch);\n                    }\n                } else {\n                    whitespace = java.lang.Character.isWhitespace(ch);\n                }\n            }\n            return new java.lang.String(buffer);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74beec4a-3f33-11e6-8233-e91b52f29145","method":{"position":"org.apache.commons.lang3.time.FastDateParser:781","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.TimeZone java.util.TimeZone;\n            if (((value.charAt(0)) == '+') || ((value.charAt(0)) == '-')) {\n                tz = java.util.TimeZone.getTimeZone((\"GMT\" + value));\n            } else if (value.startsWith(\"GMT\")) {\n                tz = java.util.TimeZone.getTimeZone(value);\n            } else {\n                tz = java.util.SortedMap<java.lang.String, java.util.TimeZone>.get(value);\n                if (tz == null) {\n                    throw new java.lang.IllegalArgumentException((value + \" is not a supported timezone name\"));\n                } \n            }\n            cal.setTimeZone(tz);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:585","type":"CtInvocationImpl"},"failures":[438],"tindex":"74beec4b-3f33-11e6-8233-9fa2f6699daa","method":{"position":"org.apache.commons.lang3.math.NumberUtils:655","type":"CtMethodImpl","sourcecode":"public static java.lang.Float createFloat(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Float.valueOf(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3850","type":"CtBinaryOperatorImpl"},"failures":[439],"tindex":"74beec4c-3f33-11e6-8233-e5e3a97086d9","method":{"position":"org.apache.commons.lang3.ArrayUtils:3849","type":"CtMethodImpl","sourcecode":"public static short[] addAll(final short[] array1, final short... array2) {\n    if (array1 == null) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final short[] short[] = new short[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:222","type":"CtBinaryOperatorImpl"},"failures":[440,441,442],"tindex":"74beec4d-3f33-11e6-8233-a1ed29516360","method":{"position":"org.apache.commons.lang3.math.Fraction:319","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.math.Fraction getFraction(java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                throw new java.lang.IllegalArgumentException(\"The string must not be null\");\n            } \n            int int = str.indexOf('.');\n            if (pos >= 0) {\n                return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Double.parseDouble(str));\n            } \n            pos = str.indexOf(' ');\n            if (pos > 0) {\n                final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                str = str.substring((pos + 1));\n                pos = str.indexOf('/');\n                if (pos < 0) {\n                    throw new java.lang.NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\n                } else {\n                    final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                    final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                    return org.apache.commons.lang3.math.Fraction.getFraction(whole, numer, denom);\n                }\n            } \n            pos = str.indexOf('/');\n            if (pos < 0) {\n                return org.apache.commons.lang3.math.Fraction.getFraction(java.lang.Integer.parseInt(str), 1);\n            } else {\n                final int int = java.lang.Integer.parseInt(str.substring(0, pos));\n                final int int = java.lang.Integer.parseInt(str.substring((pos + 1)));\n                return org.apache.commons.lang3.math.Fraction.getFraction(numer, denom);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:461","type":"CtInvocationImpl"},"failures":[443,444,445,446,447,448,449,450,451,452,453,454,455],"tindex":"74bf135e-3f33-11e6-8233-f396f13dc85e","method":{"position":"org.apache.commons.lang3.CharRange:170","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if (java.lang.Character.isUpperCase(ch)) {\n        {\n            return ((ch >= (char)) && (ch <= (char))) != (boolean);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1577","type":"CtVariableReadImpl"},"failures":[456,268,269,270,271,272,457,273,274,275,276,277,278,279,280,281,282,283,284,458,285,286,287,288,289,291,292,293,294,295,459,460,296,297,298,461,462,299,300,301,302,303,304,305,463,306,307,308,309,310,311,312,464,313,314,315,316,465,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,466,352,353,354,355,356,358,359,360,361,362,467,468,363,364,365,469,470,366,367,368,369,370],"tindex":"74bf135f-3f33-11e6-8233-cf8174823374","method":{"position":"org.apache.commons.lang3.time.FastDateParser:334","type":"CtMethodImpl","sourcecode":"private static java.lang.StringBuilder escapeRegex(final java.lang.StringBuilder regex, final java.lang.String value, final boolean unquote) {\n    if (unquote) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            regex.append(\"\\\\Q\");\n            for (int int = 0 ; i < (value.length()) ; ++i) {\n                char char = value.charAt(i);\n                switch (c) {\n                    case '\\'' :\n                        if (unquote) {\n                            if ((++i) == (value.length())) {\n                                return regex;\n                            } \n                            c = value.charAt(i);\n                        } \n                        break;\n                    case '\\\\' :\n                        if ((++i) == (value.length())) {\n                            break;\n                        } \n                        regex.append(c);\n                        c = value.charAt(i);\n                        if (c == 'E') {\n                            regex.append(\"E\\\\\\\\E\\\\\");\n                            c = 'Q';\n                        } \n                        break;\n                    default :\n                        break;\n                }\n                regex.append(c);\n            }\n            regex.append(\"\\\\E\");\n            return regex;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"unquote"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1014","type":"CtBinaryOperatorImpl"},"failures":[471],"tindex":"74bf3a70-3f33-11e6-8233-037d43af0c9b","method":{"position":"org.apache.commons.lang3.ObjectUtils:316","type":"CtMethodImpl","sourcecode":"public static void identityToString(final org.apache.commons.lang3.text.StrBuilder builder, final java.lang.Object object) {\n    if (object == null) {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            builder.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:282","type":"CtBinaryOperatorImpl"},"failures":[472,473],"tindex":"74bf6181-3f33-11e6-8233-078bf5fcf257","method":{"position":"org.apache.commons.lang3.CharUtils:421","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiPrintable(final char ch) {\n    if ((ch >= 56192) && (ch <= 56319)) {\n        {\n            return (ch >= 32) && (ch < 127);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bf6182-3f33-11e6-8233-57eab9911f94","method":{"position":"org.apache.commons.lang3.time.FastDateParser:618","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.Integer java.lang.Integer = java.util.Map<java.lang.String, java.lang.Integer>.get(value);\n            if (iVal == null) {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(value);\n                sb.append(\" not in (\");\n                for (final java.lang.String java.lang.String : java.util.Map<java.lang.String, java.lang.Integer>.keySet()) {\n                    sb.append(textKeyValue).append(' ');\n                }\n                sb.setCharAt(((sb.length()) - 1), ')');\n                throw new java.lang.IllegalArgumentException(sb.toString());\n            } \n            cal.set(int, iVal.intValue());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:796","type":"CtBinaryOperatorImpl"},"failures":[474],"tindex":"74bf6183-3f33-11e6-8233-85fdc6533ca8","method":{"position":"org.apache.commons.lang3.ArrayUtils:1783","type":"CtMethodImpl","sourcecode":"public static void reverse(final long[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            long long;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2228","type":"CtBinaryOperatorImpl"},"failures":[475],"tindex":"74bf6184-3f33-11e6-8233-a9a3eeaa1725","method":{"position":"org.apache.commons.lang3.ArrayUtils:3205","type":"CtMethodImpl","sourcecode":"public static java.lang.Short[] toObject(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.Short[];\n            } \n            final java.lang.Short[] java.lang.Short[] = new java.lang.Short[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                result[i] = java.lang.Short.valueOf(array[i]);\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2073","type":"CtBinaryOperatorImpl"},"failures":[476],"tindex":"74bf8895-3f33-11e6-8233-a9573001d008","method":{"position":"org.apache.commons.lang3.StringUtils:469","type":"CtMethodImpl","sourcecode":"public static java.lang.String trimToEmpty(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return str == null ? org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String : str.trim();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffResult:92","type":"CtBinaryOperatorImpl"},"failures":[59],"tindex":"74bf8896-3f33-11e6-8233-abc13402a9da","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:135","type":"CtMethodImpl","sourcecode":"public static void setDefaultStyle(final org.apache.commons.lang3.builder.ToStringStyle style) {\n    if (style == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (style == null) {\n                throw new java.lang.IllegalArgumentException(\"The style must not be null\");\n            } \n            org.apache.commons.lang3.builder.ToStringBuilder.org.apache.commons.lang3.builder.ToStringBuilder.org.apache.commons.lang3.builder.ToStringStyle = style;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"style":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2202","type":"CtBinaryOperatorImpl"},"failures":[477,478],"tindex":"74bf8897-3f33-11e6-8233-c190dd412405","method":{"position":"org.apache.commons.lang3.text.StrBuilder:199","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder setLength(final int length) {\n    if (length <= 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (length < 0) {\n                throw new java.lang.StringIndexOutOfBoundsException(length);\n            } \n            if (length < (int)) {\n                int = length;\n            } else if (length > (int)) {\n                ensureCapacity(length);\n                final int int = int;\n                final int int = length;\n                int = length;\n                for (int int = oldEnd ; i < newEnd ; i++) {\n                    char[][i] = '\u0000';\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:474","type":"CtBinaryOperatorImpl"},"failures":[244],"tindex":"74bfafa8-3f33-11e6-8233-91d321b61edf","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:472","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer reset(final java.lang.String input) {\n    if (input != null) {\n        {\n            reset();\n            if (input != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.char[] = input.toCharArray();\n            } else {\n                org.apache.commons.lang3.text.StrTokenizer.this.char[] = null;\n            }\n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:811","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bfafa9-3f33-11e6-8233-2931632bdc13","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:247","type":"CtMethodImpl","sourcecode":"public static boolean reflectionEquals(final java.lang.Object lhs, final java.lang.Object rhs, final java.util.Collection<java.lang.String> excludeFields) {\n    if (lhs == rhs) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(lhs, rhs, org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:536","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bfafaa-3f33-11e6-8233-4d95bd1b63db","method":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:466","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (value instanceof float[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.Class) {\n                if ((org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry()) == null) {\n                    org.apache.commons.lang3.builder.HashCodeBuilder.org.apache.commons.lang3.builder.HashCodeBuilder.java.lang.ThreadLocal<java.util.Set<org.apache.commons.lang3.builder.IDKey>>.set(new java.util.HashSet<org.apache.commons.lang3.builder.IDKey>());\n                } \n            }\n            org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry().add(new org.apache.commons.lang3.builder.IDKey(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:304","type":"CtBinaryOperatorImpl"},"failures":[479,410,480,481,482,483,1,2,3,5,6,9,401,13,15,16,17,18,19,20,21],"tindex":"74bfafab-3f33-11e6-8233-8dee9ff218c3","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:551","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final char lhs, final char rhs) {\n    if (rhs != lhs) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            boolean = lhs == rhs;\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:327","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,11,12,15,16,18,19,20,21,160,161,416,417,418,419,420,421,422,423,424,425,426,484,427,428,380,429,207,430,431,433],"tindex":"74bfd6bc-3f33-11e6-8233-19cb116ccc1e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:897","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.Class<?> cls, final java.lang.Class<?> toClass, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> subtypeVarAssigns) {\n    if (toClass == null) {\n        {\n            if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls, toClass))) {\n                return null;\n            } \n            if (cls.isPrimitive()) {\n                if (toClass.isPrimitive()) {\n                    return new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>();\n                } \n                cls = org.apache.commons.lang3.ClassUtils.primitiveToWrapper(cls);\n            } \n            final java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = subtypeVarAssigns == null ? new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>() : new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(subtypeVarAssigns);\n            if (toClass.equals(cls)) {\n                return typeVarAssigns;\n            } \n            return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"toClass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:263","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bfd6bd-3f33-11e6-8233-51d4e689b059","method":{"position":"org.apache.commons.lang3.CharUtils:331","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Character ch) {\n    if (ch == null) {\n        {\n            if (ch == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (ch == null) {\n                        return null;\n                    } \n                    return org.apache.commons.lang3.CharUtils.toString(ch.charValue());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7412","type":"CtBinaryOperatorImpl"},"failures":[485,486,487,488,489,490],"tindex":"74bfd6be-3f33-11e6-8233-815a4d890970","method":{"position":"org.apache.commons.lang3.StringUtils:7311","type":"CtMethodImpl","sourcecode":"private static boolean endsWith(final java.lang.CharSequence str, final java.lang.CharSequence suffix, final boolean ignoreCase) {\n    if (((suffix == null) || (org.apache.commons.lang3.StringUtils.isEmpty(suffix))) || (org.apache.commons.lang3.StringUtils.endsWith(str, suffix, ignoreCase))) {\n        {\n            if ((str == null) || (suffix == null)) {\n                return (str == null) && (suffix == null);\n            } \n            if ((suffix.length()) > (str.length())) {\n                return false;\n            } \n            final int int = (str.length()) - (suffix.length());\n            return org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"suffix","ignoreCase":"ignoreCase","suffix":"suffix"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:451","type":"CtBinaryOperatorImpl"},"failures":[491],"tindex":"74bffdcf-3f33-11e6-8233-2d9a5a787b40","method":{"position":"org.apache.commons.lang3.StringUtils:1262","type":"CtMethodImpl","sourcecode":"public static int lastOrdinalIndexOf(final java.lang.CharSequence str, final java.lang.CharSequence searchStr, final int ordinal) {\n    if (searchStr == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchStr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7035","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74bffdd0-3f33-11e6-8233-21f032f5aec2","method":{"position":"org.apache.commons.lang3.StringUtils:7112","type":"CtMethodImpl","sourcecode":"private static int transpositions(java.lang.CharSequence first, java.lang.CharSequence second) {\n    if ((second.length()) > (second.length())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                if ((first.charAt(i)) != (second.charAt(i))) {\n                    transpositions++;\n                } \n            }\n            return transpositions / 2;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"second","second":"second"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl"},"failures":[150,150],"tindex":"74bffdd1-3f33-11e6-8233-4f0caf98a1fb","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:829","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float value) {\n    if (fieldName == null) {\n        {\n            buffer.append(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3794","type":"CtBinaryOperatorImpl"},"failures":[439],"tindex":"74bffdd2-3f33-11e6-8233-6149af4ca78f","method":{"position":"org.apache.commons.lang3.ArrayUtils:3791","type":"CtMethodImpl","sourcecode":"public static char[] addAll(final char[] array1, final char... array2) {\n    if (array1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final char[] char[] = new char[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:663","type":"CtInvocationImpl"},"failures":[221,225,226,235,237,87,88,89,90,91,92,93,94,254,255,257,258,259,260,261,266,267],"tindex":"74c024e3-3f33-11e6-8233-d98a7b3d9810","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:662","type":"CtMethodImpl","sourcecode":"private void addToken(final java.util.List<java.lang.String> list, java.lang.String tok) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(tok)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(tok)) {\n                if (isIgnoreEmptyTokens()) {\n                    return ;\n                } \n                if (isEmptyTokenAsNull()) {\n                    tok = null;\n                } \n            } \n            list.add(tok);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"tok":"tok"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:981","type":"CtVariableReadImpl"},"failures":[492],"tindex":"74c024e4-3f33-11e6-8233-47d5d18f44fd","method":{"position":"org.apache.commons.lang3.ArrayUtils:4326","type":"CtMethodImpl","sourcecode":"public static boolean[] add(final boolean[] array, final int index, final boolean element) {\n    if (element) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((boolean[])(org.apache.commons.lang3.ArrayUtils.add(array, index, java.lang.Boolean.valueOf(element), java.lang.Boolean.java.lang.Boolean.java.lang.Class<java.lang.Boolean>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:418","type":"CtArrayReadImpl"},"failures":[493],"tindex":"74c024e5-3f33-11e6-8233-2707b1d3f448","method":{"position":"org.apache.commons.lang3.Conversion:1550","type":"CtMethodImpl","sourcecode":"public static boolean[] longToBinary(final long src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n    if (dst[dstPos]) {\n        {\n            if (0 == nBools) {\n                return dst;\n            } \n            if (((nBools - 1) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"nBools-1+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nBools ; i++) {\n                shift = (i * 1) + srcPos;\n                dst[(dstPos + i)] = (1 & (src >> shift)) != 0;\n            }\n            return dst;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"dstPos","src":"dst"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:76","type":"CtBinaryOperatorImpl"},"failures":[339,341,342,346],"tindex":"74c024e6-3f33-11e6-8233-ab76d7ad6487","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:302","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (locale == null) {\n        {\n            final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n            return df.format(date);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"74c024e7-3f33-11e6-8233-237322e94b5f","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:164","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getInstance(final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getInstance(pattern, timeZone, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:884","type":"CtBinaryOperatorImpl"},"failures":[494],"tindex":"74c04bf8-3f33-11e6-8233-43d65032d256","method":{"position":"org.apache.commons.lang3.time.DateUtils:553","type":"CtMethodImpl","sourcecode":"public static java.util.Date setMonths(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.tuple.Triple:114","type":"CtBinaryOperatorImpl"},"failures":[101,109,131,137,137,138,139,140,141,67,67,167,175,181,189],"tindex":"74c04bf9-3f33-11e6-8233-71aaefb1ed62","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:862","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final java.lang.Object obj, final boolean fullDetail) {\n    if (obj instanceof org.apache.commons.lang3.tuple.Triple<?, ?, ?>) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, obj, java.lang.Boolean.valueOf(fullDetail));\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335123569/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
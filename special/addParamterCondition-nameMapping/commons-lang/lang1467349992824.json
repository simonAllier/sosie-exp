{"failureDictionary":{"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testPerson":153,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":62,"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":226,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":228,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":222,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":225,"org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitExecutorNullCallable":352,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedFieldForceAccess":19,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":128,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":80,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":299,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":301,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":276,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testPerson":112,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":71,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":119,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":244,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":254,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":322,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":325,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testNullArgument":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":204,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":283,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":144,"org.apache.commons.lang3.time.FastDatePrinterTest.testEquals":250,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array":257,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":253,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testPerson":139,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":146,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":87,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":238,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":132,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":199,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":63,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":280,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":77,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":140,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":255,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":129,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars":337,"org.apache.commons.lang3.ArrayUtilsTest.testSameLengthFloat":321,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":109,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":75,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":293,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int":320,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":230,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":111,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":215,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":323,"org.apache.commons.lang3.text.ExtendedMessageFormatTest.testEqualsHashcode":356,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":219,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":150,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":200,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii":94,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":209,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":284,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt":333,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":61,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":57,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":133,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":252,"org.apache.commons.lang3.ValidateTest.testInclusiveBetween_withMessage":260,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":187,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":137,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":59,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":114,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":221,"org.apache.commons.lang3.math.NumberUtilsTest.testToByteString":0,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt":334,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":136,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":245,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":304,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":281,"org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD":314,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":205,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":198,"org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object":256,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":166,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":234,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":46,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testBlank":107,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":287,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedStaticFieldForceAccess":20,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableCount_Throwable":26,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":350,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testBlank":115,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":202,"org.apache.commons.lang3.concurrent.ConcurrentUtilsTest.testHandleCauseNull":360,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":155,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence":270,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":300,"org.apache.commons.lang3.ConversionTest.testLongToShortArray":318,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringString":336,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":176,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":277,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars":338,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":327,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":84,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByte":4,"org.apache.commons.lang3.ArrayUtilsTest.testContainsByte":3,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":268,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":171,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":195,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":328,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":108,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":292,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":233,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":224,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":242,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":291,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":177,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":212,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":184,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":285,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":67,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testPerson":147,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":43,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char":307,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":90,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":295,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":263,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":305,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfWithStartIndex":346,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":131,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":288,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":44,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":54,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":194,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":56,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":82,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":179,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":208,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":279,"org.apache.commons.lang3.tuple.TripleTest.testCompatibilityBetweenTriples":10,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":159,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":294,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":189,"org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor":306,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":141,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":211,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":229,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":203,"org.apache.commons.lang3.ArrayUtilsTest.testReverseShortRange":258,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testPerson":120,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":310,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":329,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String":347,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":7,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":182,"org.apache.commons.lang3.text.StrTokenizerTest.testChaining":1,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":52,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang720":311,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":274,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":286,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":145,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testBlank":236,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":50,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":143,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":35,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":110,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":70,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticFieldForceAccess":13,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":190,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":73,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":83,"org.apache.commons.lang3.ArrayUtilsTest.testReverseShort":259,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":239,"org.apache.commons.lang3.math.NumberUtilsTest.testMaximumInt":340,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":218,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean":357,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":175,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testBlank":142,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":331,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":173,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":213,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":76,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString":264,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":197,"org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean":335,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance":349,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":172,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":162,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":78,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testPerson":241,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":38,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":149,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":332,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":178,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":60,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":91,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":116,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_1":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":220,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedFieldForceAccess":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":180,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_4":41,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testArrayList":163,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":193,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":192,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString":269,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":303,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":122,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":125,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":181,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":53,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":69,"org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray":265,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadField":18,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":39,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":240,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":214,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":246,"org.apache.commons.lang3.tuple.MutableTripleTest.testEquals":12,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG972":247,"org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong":25,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":88,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":290,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale":297,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testCopyOnWriteArrayList":164,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":201,"org.apache.commons.lang3.ArrayUtilsTest.testCloneByte":343,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":117,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray":344,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testEquals":249,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":74,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":158,"org.apache.commons.lang3.tuple.ImmutableTripleTest.testSerialization":8,"org.apache.commons.lang3.StringUtilsTest.testJoin_Objects":266,"org.apache.commons.lang3.ArrayUtilsTest.testToString":97,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":151,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testBlank":156,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadFieldForceAccess":22,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":326,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":302,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":324,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":86,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":237,"org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString":313,"org.apache.commons.lang3.reflect.TypeUtilsTest.testParameterize":315,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":130,"org.apache.commons.lang3.ClassUtilsTest.test_isAssignable":51,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":65,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":273,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":64,"org.apache.commons.lang3.reflect.FieldUtilsTest.testGetField":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":217,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":6,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOf":345,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":191,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":227,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":135,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":121,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":261,"org.apache.commons.lang3.text.StrBuilderTest.testContains_String":24,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLong":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":170,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":36,"org.apache.commons.lang3.builder.DiffTest.testGetType":68,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":126,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":85,"org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongEmptyArray":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":216,"org.apache.commons.lang3.text.StrTokenizerTest.test8":105,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":157,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":262,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":289,"org.apache.commons.lang3.time.DateUtilsTest.testRound":342,"org.apache.commons.lang3.text.StrTokenizerTest.test5":102,"org.apache.commons.lang3.text.StrTokenizerTest.test4":101,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGenericArrayType":316,"org.apache.commons.lang3.text.StrTokenizerTest.test7":104,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":206,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":278,"org.apache.commons.lang3.text.StrTokenizerTest.test6":103,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":207,"org.apache.commons.lang3.text.StrTokenizerTest.test1":98,"org.apache.commons.lang3.text.StrTokenizerTest.test3":100,"org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean":358,"org.apache.commons.lang3.text.StrTokenizerTest.test2":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":183,"org.apache.commons.lang3.builder.DiffTest.testToString":66,"org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest.testLinkedList":165,"org.apache.commons.lang3.tuple.MutableTripleTest.testSerialization":11,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteNamedStaticFieldForceAccess":16,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":113,"org.apache.commons.lang3.StringUtilsIsTest.testIsWhitespace":243,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":312,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayObject":267,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":154,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":49,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadNamedFieldForceAccess":23,"org.apache.commons.lang3.tuple.ImmutableTripleTest.testEquals":9,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":32,"org.apache.commons.lang3.ObjectUtilsTest.testHashCode":355,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructorFromDescription":28,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":138,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":169,"org.apache.commons.lang3.CharUtilsTest.testToChar_String_char":317,"org.apache.commons.lang3.reflect.FieldUtilsTest.testWriteDeclaredNamedStaticFieldForceAccess":21,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray":339,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":2,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":42,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":92,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testEquals":251,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String_nullValue":348,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":210,"org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitNullCallable":351,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":81,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":118,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":124,"org.apache.commons.lang3.BooleanUtilsTest.test_isNotFalse_Boolean":319,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":148,"org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_Character":271,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":223,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":168,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":282,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble":359,"org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_likeList":354,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testBlank":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":196,"org.apache.commons.lang3.RangeTest.testIsAfterRange":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":186,"org.apache.commons.lang3.text.StrBuilderTest.testEquals":341,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":55,"org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_char":272,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":160,"org.apache.commons.lang3.reflect.TypeLiteralTest.testRaw":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":231,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char":309,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testPerson":161,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":188,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean_boolean":5,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":275,"org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class":353,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":27,"org.apache.commons.lang3.AnnotationUtilsTest.testToString":96,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale":296,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":95,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedFieldForceAccess":14,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":330,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":174,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":185,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":298,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":37,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":232,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":248,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":235,"org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaUpper_char":308},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1499","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"825cd3dd-3f4a-11e6-9845-13e1d361995c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:302","type":"CtMethodImpl","sourcecode":"public static byte toByte(final java.lang.String str) {\n    if (str != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte)(0)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:913","type":"CtBinaryOperatorImpl"},"failures":[1],"tindex":"825dbe3e-3f4a-11e6-9845-3f37bcb7bd5d","method":{"position":"org.apache.commons.lang3.text.StrTokenizer:912","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(final org.apache.commons.lang3.text.StrMatcher quote) {\n    if (quote != null) {\n        {\n            if (quote != null) {\n                org.apache.commons.lang3.text.StrTokenizer.this.org.apache.commons.lang3.text.StrMatcher = quote;\n            } \n            return org.apache.commons.lang3.text.StrTokenizer.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"quote":"quote"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:403","type":"CtBinaryOperatorImpl"},"failures":[2,3,4],"tindex":"825e336f-3f4a-11e6-9845-39ee95f0d2d3","method":{"position":"org.apache.commons.lang3.ArrayUtils:2420","type":"CtMethodImpl","sourcecode":"public static int indexOf(final byte[] array, final byte valueToFind) {\n    if (array == null) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind, 0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:633","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"825e3370-3f4a-11e6-9845-4d9a99fe07f3","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:663","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final double value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1074","type":"CtBinaryOperatorImpl"},"failures":[5],"tindex":"825f44e1-3f4a-11e6-9845-f760b22df465","method":{"position":"org.apache.commons.lang3.ArrayUtils:3455","type":"CtMethodImpl","sourcecode":"public static boolean[] toPrimitive(final java.lang.Boolean[] array, final boolean valueForNull) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.boolean[];\n            } \n            final boolean[] boolean[] = new boolean[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Boolean java.lang.Boolean = array[i];\n                result[i] = b == null ? valueForNull : b.booleanValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:236","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"825f44e2-3f4a-11e6-9845-c56dccef44a6","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:419","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Method getAccessibleMethodFromInterfaceNest(java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for ( ; cls != null ; cls = cls.getSuperclass()) {\n                final java.lang.Class<?>[] java.lang.Class<?>[] = cls.getInterfaces();\n                for (int int = 0 ; i < (interfaces.int) ; i++) {\n                    if (!(java.lang.reflect.Modifier.isPublic(interfaces[i].getModifiers()))) {\n                        continue;\n                    } \n                    try {\n                        return interfaces[i].getDeclaredMethod(methodName, parameterTypes);\n                    } catch (final java.lang.NoSuchMethodException e) {\n                    }\n                    java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethodFromInterfaceNest(interfaces[i], methodName, parameterTypes);\n                    if (method != null) {\n                        return method;\n                    } \n                }\n            }\n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:522","type":"CtBinaryOperatorImpl"},"failures":[6],"tindex":"825f9303-3f4a-11e6-9845-6d52e7da5172","method":{"position":"org.apache.commons.lang3.AnnotationUtils:242","type":"CtMethodImpl","sourcecode":"private static int hashMember(final java.lang.String name, final java.lang.Object value) {\n    if (value instanceof char[]) {\n        {\n            final int int = (name.hashCode()) * 127;\n            if (value.getClass().isArray()) {\n                return part1 ^ (org.apache.commons.lang3.AnnotationUtils.arrayMemberHash(value.getClass().getComponentType(), value));\n            } \n            if (value instanceof java.lang.annotation.Annotation) {\n                return part1 ^ (org.apache.commons.lang3.AnnotationUtils.hashCode(((java.lang.annotation.Annotation)(value))));\n            } \n            return part1 ^ (value.hashCode());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"825fba14-3f4a-11e6-9845-e5cc101743c7","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:709","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final float value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1896","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"825fba15-3f4a-11e6-9845-71303b04a3bc","method":{"position":"org.apache.commons.lang3.builder.StandardToStringStyle:353","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void setFieldSeparator(final java.lang.String fieldSeparator) {\n    if (fieldSeparator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            super.setFieldSeparator(fieldSeparator);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldSeparator":"fieldSeparator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Validate:1083","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"825fe126-3f4a-11e6-9845-952392cc9ec6","method":{"position":"org.apache.commons.lang3.Validate:1081","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"boxing\")\npublic static void exclusiveBetween(long start, long end, long value) {\n    if ((value <= value) || (value >= start)) {\n        {\n            if ((value <= start) || (value >= end)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(org.apache.commons.lang3.Validate.org.apache.commons.lang3.Validate.java.lang.String, value, start, end));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"start":"value","end":"start","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.ClassUtils:281","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"825fe127-3f4a-11e6-9845-47ce5522edb0","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:253","type":"CtMethodImpl","sourcecode":"public static java.lang.Object invokeStaticMethod(final java.lang.Class<?> cls, final java.lang.String methodName, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException {\n    if (cls == null) {\n        {\n            args = org.apache.commons.lang3.ArrayUtils.nullToEmpty(args);\n            final java.lang.Class<?>[] java.lang.Class<?>[] = org.apache.commons.lang3.ClassUtils.toClass(args);\n            return org.apache.commons.lang3.reflect.MethodUtils.invokeStaticMethod(cls, methodName, args, parameterTypes);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1479","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12],"tindex":"825fe128-3f4a-11e6-9845-5de17d37833f","method":{"position":"org.apache.commons.lang3.tuple.Triple:110","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"deprecation\")\n@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if (obj == (org.apache.commons.lang3.tuple.Triple.this)) {\n                return true;\n            } \n            if (obj instanceof org.apache.commons.lang3.tuple.Triple<?, ?, ?>) {\n                final org.apache.commons.lang3.tuple.Triple<?, ?, ?> org.apache.commons.lang3.tuple.Triple<?, ?, ?> = ((org.apache.commons.lang3.tuple.Triple<?, ?, ?>)(obj));\n                return ((org.apache.commons.lang3.ObjectUtils.equals(getLeft(), other.getLeft())) && (org.apache.commons.lang3.ObjectUtils.equals(getMiddle(), other.getMiddle()))) && (org.apache.commons.lang3.ObjectUtils.equals(getRight(), other.getRight()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:262","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"82600839-3f4a-11e6-9845-4d1e0e1bc368","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:305","type":"CtMethodImpl","sourcecode":"private static void reflectionAppend(final java.lang.Object lhs, final java.lang.Object rhs, final java.lang.Class<?> clazz, final org.apache.commons.lang3.builder.CompareToBuilder builder, final boolean useTransients, final java.lang.String[] excludeFields) {\n    if (!(java.util.Arrays.equals(rhs, lhs))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.reflect.Field[] java.lang.reflect.Field[] = clazz.getDeclaredFields();\n            java.lang.reflect.AccessibleObject.setAccessible(fields, true);\n            for (int int = 0 ; (i < (fields.int)) && ((builder.int) == 0) ; i++) {\n                final java.lang.reflect.Field java.lang.reflect.Field = fields[i];\n                if ((((!(org.apache.commons.lang3.ArrayUtils.contains(excludeFields, f.getName()))) && ((f.getName().indexOf('$')) == (-1))) && (useTransients || (!(java.lang.reflect.Modifier.isTransient(f.getModifiers()))))) && (!(java.lang.reflect.Modifier.isStatic(f.getModifiers())))) {\n                    try {\n                        builder.append(f.get(lhs), f.get(rhs));\n                    } catch (final java.lang.IllegalAccessException e) {\n                        throw new java.lang.InternalError(\"Unexpected IllegalAccessException\");\n                    }\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"rhs","rhs":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MemberUtils:55","type":"CtBinaryOperatorImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23],"tindex":"82602f4a-3f4a-11e6-9845-fd9e34fa79c6","method":{"position":"org.apache.commons.lang3.reflect.MemberUtils:54","type":"CtMethodImpl","sourcecode":"static boolean setAccessibleWorkaround(final java.lang.reflect.AccessibleObject o) {\n    if ((o == null) || (o.isAccessible())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((o == null) || (o.isAccessible())) {\n                return false;\n            } \n            final java.lang.reflect.Member java.lang.reflect.Member = ((java.lang.reflect.Member)(o));\n            if (((!(o.isAccessible())) && (java.lang.reflect.Modifier.isPublic(m.getModifiers()))) && (org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(m.getDeclaringClass().getModifiers()))) {\n                try {\n                    o.setAccessible(true);\n                    return true;\n                } catch (final java.lang.SecurityException e) {\n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:672","type":"CtBinaryOperatorImpl"},"failures":[24],"tindex":"82602f4b-3f4a-11e6-9845-dfba41cc57ca","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2263","type":"CtMethodImpl","sourcecode":"public boolean contains(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (indexOf(str, 0)) >= 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1099","type":"CtBinaryOperatorImpl"},"failures":[25],"tindex":"82602f4c-3f4a-11e6-9845-dbdea6971a3c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1204","type":"CtMethodImpl","sourcecode":"public static long max(long a, final long b, final long c) {\n    if (c < b) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b > a) {\n                a = b;\n            } \n            if (c > a) {\n                a = c;\n            } \n            return a;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:489","type":"CtBinaryOperatorImpl"},"failures":[26],"tindex":"82602f4d-3f4a-11e6-9845-73920a1068e9","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:233","type":"CtMethodImpl","sourcecode":"public static int getThrowableCount(final java.lang.Throwable throwable) {\n    if (throwable == null) {\n        {\n            return org.apache.commons.lang3.exception.ExceptionUtils.getThrowableList(throwable).size();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:542","type":"CtBinaryOperatorImpl"},"failures":[27,28,29,30,31,32],"tindex":"8260565e-3f4a-11e6-9845-6bed2cf13db6","method":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:289","type":"CtMethodImpl","sourcecode":"private static boolean isAccessible(final java.lang.Class<?> type) {\n    if (type == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = type;\n            while (cls != null) {\n                if (!(java.lang.reflect.Modifier.isPublic(cls.getModifiers()))) {\n                    return false;\n                } \n                cls = cls.getEnclosingClass();\n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:915","type":"CtBinaryOperatorImpl"},"failures":[33,34],"tindex":"8260565f-3f4a-11e6-9845-a944c50ad14b","method":{"position":"org.apache.commons.lang3.ArrayUtils:532","type":"CtMethodImpl","sourcecode":"public static long[] nullToEmpty(final long[] array) {\n    if (array == null) {\n        {\n            if ((array == null) || ((array.int) == 0)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.long[];\n            } \n            return array;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl"},"failures":[35,36,37,38,39,40,41,42],"tindex":"82605660-3f4a-11e6-9845-7bde65599170","method":{"position":"org.apache.commons.lang3.math.NumberUtils:633","type":"CtMethodImpl","sourcecode":"private static boolean isAllZeros(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return true;\n                    } \n                    for (int int = (str.length()) - 1 ; i >= 0 ; i--) {\n                        if ((str.charAt(i)) != '0') {\n                            return false;\n                        } \n                    }\n                    return (str.length()) > 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl"},"failures":[43,44,45,46],"tindex":"82607c71-3f4a-11e6-9845-1b26d754735c","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:951","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (buffer == null) {\n        {\n            buffer.append(((char)((value / 10) + '0')));\n            buffer.append(((char)((value % 10) + '0')));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Range:369","type":"CtBinaryOperatorImpl"},"failures":[47],"tindex":"82607c72-3f4a-11e6-9845-a563d58d6365","method":{"position":"org.apache.commons.lang3.Range:331","type":"CtMethodImpl","sourcecode":"public boolean isAfterRange(final org.apache.commons.lang3.Range<T> otherRange) {\n    if (otherRange == null) {\n        {\n            if (otherRange == null) {\n                return false;\n            } \n            return isAfter(otherRange.T);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"otherRange":"otherRange"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:672","type":"CtBinaryOperatorImpl"},"failures":[48,49],"tindex":"82607c73-3f4a-11e6-9845-45dd86285726","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1494","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, java.lang.String str) {\n    if (str == null) {\n        {\n            validateIndex(index);\n            if (str == null) {\n                str = java.lang.String;\n            } \n            if (str != null) {\n                final int int = str.length();\n                if (strLen > 0) {\n                    final int int = (int) + strLen;\n                    ensureCapacity(newSize);\n                    java.lang.System.arraycopy(char[], index, char[], (index + strLen), ((int) - index));\n                    int = newSize;\n                    str.getChars(0, strLen, char[], index);\n                } \n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrMatcher:190","type":"CtInvocationImpl"},"failures":[],"tindex":"8260a384-3f4a-11e6-9845-a5b1e4964731","method":{"position":"org.apache.commons.lang3.Validate:393","type":"CtMethodImpl","sourcecode":"public static <T extends java.lang.CharSequence>T notEmpty(final T chars, final java.lang.String message, final java.lang.Object... values) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(message)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chars == null) {\n                throw new java.lang.NullPointerException(java.lang.String.format(message, values));\n            } \n            if ((chars.length()) == 0) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n            return chars;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:1009","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8260a385-3f4a-11e6-9845-ad55f709573f","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:329","type":"CtMethodImpl","sourcecode":"static java.lang.String[] toNoNullStringArray(final java.lang.Object[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.util.List<java.lang.String> java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>(array.int);\n            for (final java.lang.Object java.lang.Object : array) {\n                if (e != null) {\n                    list.add(e.toString());\n                } \n            }\n            return list.toArray(org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1870","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8260a386-3f4a-11e6-9845-43f6cee7f0c8","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1869","type":"CtMethodImpl","sourcecode":"protected void setFieldNameValueSeparator(java.lang.String fieldNameValueSeparator) {\n    if (fieldNameValueSeparator == null) {\n        {\n            if (fieldNameValueSeparator == null) {\n                fieldNameValueSeparator = \"\";\n            } \n            org.apache.commons.lang3.builder.ToStringStyle.this.java.lang.String = fieldNameValueSeparator;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldNameValueSeparator":"fieldNameValueSeparator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3966","type":"CtBinaryOperatorImpl"},"failures":[50],"tindex":"8260ca97-3f4a-11e6-9845-d3fbfcdb1164","method":{"position":"org.apache.commons.lang3.ArrayUtils:3965","type":"CtMethodImpl","sourcecode":"public static double[] addAll(final double[] array1, final double... array2) {\n    if (array2 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final double[] double[] = new double[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:651","type":"CtBinaryOperatorImpl"},"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"tindex":"8260ca98-3f4a-11e6-9845-cf340cc13661","method":{"position":"org.apache.commons.lang3.ClassUtils:593","type":"CtMethodImpl","sourcecode":"public static boolean isAssignable(final java.lang.Class<?> cls, final java.lang.Class<?> toClass) {\n    if ((toClass.isPrimitive()) == false) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.ClassUtils.isAssignable(cls, toClass, org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion.org.apache.commons.lang3.JavaVersion));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"toClass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8260ca99-3f4a-11e6-9845-4b33b40c75e5","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:908","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value < 100) {\n                buffer.append(((char)((value / 10) + '0')));\n                buffer.append(((char)((value % 10) + '0')));\n            } else {\n                buffer.append(java.lang.Integer.toString(value));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:6085","type":"CtBinaryOperatorImpl"},"failures":[94,95],"tindex":"8260f1aa-3f4a-11e6-9845-eff5b0b0e9c2","method":{"position":"org.apache.commons.lang3.RandomStringUtils:82","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomAscii(final int count) {\n    if (count > 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, 32, 127, false, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl"},"failures":[96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,69,70,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"8260f1ab-3f4a-11e6-9845-35b8fe9e4a9b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:185","type":"CtMethodImpl","sourcecode":"static void register(final java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value != null) {\n                final java.util.Map<java.lang.Object, java.lang.Object> java.util.Map<java.lang.Object, java.lang.Object> = org.apache.commons.lang3.builder.ToStringStyle.getRegistry();\n                if (m == null) {\n                    org.apache.commons.lang3.builder.ToStringStyle.org.apache.commons.lang3.builder.ToStringStyle.java.lang.ThreadLocal<java.util.WeakHashMap<java.lang.Object, java.lang.Object>>.set(new java.util.WeakHashMap<java.lang.Object, java.lang.Object>());\n                } \n                org.apache.commons.lang3.builder.ToStringStyle.getRegistry().put(value, null);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.HashCodeBuilder:173","type":"CtInvocationImpl"},"failures":[],"tindex":"826118bc-3f4a-11e6-9845-15e15f505b79","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1468","type":"CtMethodImpl","sourcecode":"protected void appendIdentityHashCode(final java.lang.StringBuffer buffer, final java.lang.Object object) {\n    if (org.apache.commons.lang3.builder.HashCodeBuilder.isRegistered(object)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.builder.ToStringStyle.this.isUseIdentityHashCode()) && (object != null)) {\n                org.apache.commons.lang3.builder.ToStringStyle.register(object);\n                buffer.append('@');\n                buffer.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6168","type":"CtBinaryOperatorImpl"},"failures":[243],"tindex":"8262784d-3f4a-11e6-9845-47788cb44321","method":{"position":"org.apache.commons.lang3.StringUtils:6103","type":"CtMethodImpl","sourcecode":"public static boolean isWhitespace(final java.lang.CharSequence cs) {\n    if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isWhitespace(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:255","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"82629f5e-3f4a-11e6-9845-6d631ac51357","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:337","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final char[] lhs, final char[] rhs) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if (!(java.util.Arrays.equals(lhs, rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Character[]>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Character[] getLeft() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Character[] getRight() {\n                        return org.apache.commons.lang3.ArrayUtils.toObject(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:391","type":"CtBinaryOperatorImpl"},"failures":[244],"tindex":"8262c66f-3f4a-11e6-9845-3f1921b765ac","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:390","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final java.lang.String source) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(source);\n            if ((substitute(buf, 0, source.length())) == false) {\n                return source;\n            } \n            return buf.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:73","type":"CtBinaryOperatorImpl"},"failures":[245],"tindex":"8262c670-3f4a-11e6-9845-d195f0f540b4","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:337","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final java.util.TimeZone timeZone) {\n    if (timeZone == null) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(dateStyle, timeStyle, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeZone":"timeZone"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.NumberFormatException","condition":{"position":"org.apache.commons.lang3.LocaleUtils:91","type":"CtBinaryOperatorImpl"},"failures":[35,246,247,36,37,38,39,248,42],"tindex":"8262c671-3f4a-11e6-9845-e7659725ec70","method":{"position":"org.apache.commons.lang3.math.NumberUtils:450","type":"CtMethodImpl","sourcecode":"public static java.lang.Number createNumber(final java.lang.String str) throws java.lang.NumberFormatException {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n                throw new java.lang.NumberFormatException(\"A blank string is not a valid number\");\n            } \n            final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"0x\" , \"0X\" , \"-0x\" , \"-0X\" , \"#\" , \"-#\" };\n            int int = 0;\n            for (final java.lang.String java.lang.String : hex_prefixes) {\n                if (str.startsWith(pfx)) {\n                    pfxLen += pfx.length();\n                    break;\n                } \n            }\n            if (pfxLen > 0) {\n                char char = 0;\n                for (int int = pfxLen ; i < (str.length()) ; i++) {\n                    firstSigDigit = str.charAt(i);\n                    if (firstSigDigit == '0') {\n                        pfxLen++;\n                    } else {\n                        break;\n                    }\n                }\n                final int int = (str.length()) - pfxLen;\n                if ((hexDigits > 16) || ((hexDigits == 16) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n                } \n                if ((hexDigits > 8) || ((hexDigits == 8) && (firstSigDigit > '7'))) {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } \n                return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n            } \n            final char char = str.charAt(((str.length()) - 1));\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            java.lang.String java.lang.String;\n            final int int = str.indexOf('.');\n            final int int = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;\n            int int = 0;\n            if (decPos > (-1)) {\n                if (expPos > (-1)) {\n                    if ((expPos < decPos) || (expPos > (str.length()))) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    dec = str.substring((decPos + 1), expPos);\n                } else {\n                    dec = str.substring((decPos + 1));\n                }\n                mant = str.substring(0, decPos);\n                numDecimals = dec.length();\n            } else {\n                if (expPos > (-1)) {\n                    if (expPos > (str.length())) {\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    } \n                    mant = str.substring(0, expPos);\n                } else {\n                    mant = str;\n                }\n                dec = null;\n            }\n            if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {\n                if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                    exp = str.substring((expPos + 1), ((str.length()) - 1));\n                } else {\n                    exp = null;\n                }\n                final java.lang.String java.lang.String = str.substring(0, ((str.length()) - 1));\n                final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n                switch (lastChar) {\n                    case 'l' :\n                    case 'L' :\n                        if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {\n                            try {\n                                return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                            } catch (final java.lang.NumberFormatException nfe) {\n                            }\n                            return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n                        } \n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                    case 'f' :\n                    case 'F' :\n                        try {\n                            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                                return f;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                    case 'd' :\n                    case 'D' :\n                        try {\n                            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                            if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {\n                                return d;\n                            } \n                        } catch (final java.lang.NumberFormatException nfe) {\n                        }\n                        try {\n                            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n                        } catch (final java.lang.NumberFormatException e) {\n                        }\n                    default :\n                        throw new java.lang.NumberFormatException((str + \" is not a valid number.\"));\n                }\n            } \n            if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {\n                exp = str.substring((expPos + 1), str.length());\n            } else {\n                exp = null;\n            }\n            if ((dec == null) && (exp == null)) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n                } catch (final java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n            } \n            final boolean boolean = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));\n            try {\n                if (numDecimals <= 7) {\n                    final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n                    if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {\n                        return f;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            try {\n                if (numDecimals <= 16) {\n                    final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n                    if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {\n                        return d;\n                    } \n                } \n            } catch (final java.lang.NumberFormatException nfe) {\n            }\n            return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.NumberFormatException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:529","type":"CtBinaryOperatorImpl"},"failures":[249,250,251,245,252,253,254,255],"tindex":"82631492-3f4a-11e6-9845-e78bb0f34309","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:528","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {\n        {\n            if ((obj instanceof org.apache.commons.lang3.time.FastDatePrinter) == false) {\n                return false;\n            } \n            final org.apache.commons.lang3.time.FastDatePrinter org.apache.commons.lang3.time.FastDatePrinter = ((org.apache.commons.lang3.time.FastDatePrinter)(obj));\n            return ((java.lang.String.equals(other.java.lang.String)) && (java.util.TimeZone.equals(other.java.util.TimeZone))) && (java.util.Locale.equals(other.java.util.Locale));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.SystemUtils:1448","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"82631493-3f4a-11e6-9845-39b427021950","method":{"position":"org.apache.commons.lang3.SystemUtils:1447","type":"CtMethodImpl","sourcecode":"static boolean isOSMatch(final java.lang.String osName, final java.lang.String osVersion, final java.lang.String osNamePrefix, final java.lang.String osVersionPrefix) {\n    if ((osNamePrefix == null) || (osVersionPrefix == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((osName == null) || (osVersion == null)) {\n                return false;\n            } \n            return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"osVersion":"osVersionPrefix","osName":"osNamePrefix"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"82633ba4-3f4a-11e6-9845-17fbe270b454","method":{"position":"org.apache.commons.lang3.ArrayUtils:1818","type":"CtMethodImpl","sourcecode":"public static void reverse(final java.lang.Object[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (endIndexExclusive < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            java.lang.Object java.lang.Object;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndexInclusive":"endIndexExclusive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:465","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"82633ba5-3f4a-11e6-9845-414e16ee0bd3","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1358","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final float[] array) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:293","type":"CtBinaryOperatorImpl"},"failures":[256],"tindex":"82633ba6-3f4a-11e6-9845-a54d63674a52","method":{"position":"org.apache.commons.lang3.ClassUtils:267","type":"CtMethodImpl","sourcecode":"public static java.lang.String getPackageName(final java.lang.Object object, final java.lang.String valueIfNull) {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (object == null) {\n                return valueIfNull;\n            } \n            return org.apache.commons.lang3.ClassUtils.getPackageName(object.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3048","type":"CtBinaryOperatorImpl"},"failures":[257],"tindex":"826362b7-3f4a-11e6-9845-130fe41aebef","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1131","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendWithSeparators(final java.lang.Object[] array, final java.lang.String separator) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((array != null) && ((array.int) > 0)) {\n                @java.lang.SuppressWarnings(value = \"deprecation\")\n                final java.lang.String java.lang.String = org.apache.commons.lang3.ObjectUtils.toString(separator);\n                append(array[0]);\n                for (int int = 1 ; i < (array.int) ; i++) {\n                    append(sep);\n                    append(array[i]);\n                }\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1092","type":"CtBinaryOperatorImpl"},"failures":[258,259],"tindex":"826362b8-3f4a-11e6-9845-c9a7e306eaae","method":{"position":"org.apache.commons.lang3.ArrayUtils:1853","type":"CtMethodImpl","sourcecode":"public static void reverse(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return ;\n            } \n            int int = startIndexInclusive < 0 ? 0 : startIndexInclusive;\n            int int = (java.lang.Math.min(array.int, endIndexExclusive)) - 1;\n            short short;\n            while (j > i) {\n                tmp = array[j];\n                array[j] = array[i];\n                array[i] = tmp;\n                j--;\n                i++;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl"},"failures":[260],"tindex":"826362b9-3f4a-11e6-9845-1fd5ab434dfb","method":{"position":"org.apache.commons.lang3.Validate:922","type":"CtMethodImpl","sourcecode":"public static <T>void inclusiveBetween(final T start, final T end, final java.lang.Comparable<T> value, final java.lang.String message, final java.lang.Object... values) {\n    if (message == null) {\n        {\n            if (((value.compareTo(start)) < 0) || ((value.compareTo(end)) > 0)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(message, values));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"message"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:666","type":"CtBinaryOperatorImpl"},"failures":[241],"tindex":"826389ca-3f4a-11e6-9845-fde1f5035015","method":{"position":"org.apache.commons.lang3.builder.RecursiveToStringStyle:97","type":"CtMethodImpl","sourcecode":"protected boolean accept(final java.lang.Class<?> clazz) {\n    if (clazz != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"clazz":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.mutable.MutableShort:246","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"826389cb-3f4a-11e6-9845-ff8268b99647","method":{"position":"org.apache.commons.lang3.text.CompositeFormat:67","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.lang.Object obj, final java.lang.StringBuffer toAppendTo, final java.text.FieldPosition pos) {\n    if (obj instanceof org.apache.commons.lang3.mutable.MutableShort) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.text.Format.format(obj, toAppendTo, pos);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.StringUtils:762","type":"CtBinaryOperatorImpl"},"failures":[261,262,263],"tindex":"826389cc-3f4a-11e6-9845-3f70f5aa84ac","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int translate(final java.lang.CharSequence input, final int index, final java.io.Writer out) throws java.io.IOException {\n    if (input == null) {\n        {\n            int int = ((input.length()) - index) - 1;\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            if ((((input.charAt(index)) == '\\\\') && (remaining > 0)) && (isOctalDigit(input.charAt((index + 1))))) {\n                int int = index + 1;\n                int int = index + 2;\n                int int = index + 3;\n                builder.append(input.charAt(next));\n                if ((remaining > 1) && (isOctalDigit(input.charAt(next2)))) {\n                    builder.append(input.charAt(next2));\n                    if (((remaining > 2) && (isZeroToThree(input.charAt(next)))) && (isOctalDigit(input.charAt(next3)))) {\n                        builder.append(input.charAt(next3));\n                    } \n                } \n                out.write(java.lang.Integer.parseInt(builder.toString(), 8));\n                return 1 + (builder.length());\n            } \n            return 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl"},"failures":[264,265,266,267],"tindex":"8263b0dd-3f4a-11e6-9845-e71d41224ff9","method":{"position":"org.apache.commons.lang3.StringUtils:3948","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Object[] array, final java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1192","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8263b0de-3f4a-11e6-9845-5384637fa2eb","method":{"position":"org.apache.commons.lang3.Conversion:1188","type":"CtMethodImpl","sourcecode":"public static int[] longToIntArray(final long src, final int srcPos, final int[] dst, final int dstPos, final int nInts) {\n    if ((((nInts - 1) * 32) + nInts) >= 64) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (0 == nInts) {\n                return dst;\n            } \n            if ((((nInts - 1) * 32) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nInts-1)*32+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nInts ; i++) {\n                shift = (i * 32) + srcPos;\n                dst[(dstPos + i)] = ((int)(-1 & (src >> shift)));\n            }\n            return dst;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nInts":"nInts","srcPos":"nInts"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:121","type":"CtBinaryOperatorImpl"},"failures":[268],"tindex":"8263b0df-3f4a-11e6-9845-91650a7db882","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:318","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (locale == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final org.apache.commons.lang3.time.FastDateFormat org.apache.commons.lang3.time.FastDateFormat = org.apache.commons.lang3.time.FastDateFormat.getInstance(pattern, timeZone, locale);\n            return df.format(calendar);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:314","type":"CtBinaryOperatorImpl"},"failures":[122,126,130,132],"tindex":"8263d7f0-3f4a-11e6-9845-e987d82d4434","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:313","type":"CtMethodImpl","sourcecode":"static java.lang.String[] toNoNullStringArray(final java.util.Collection<java.lang.String> collection) {\n    if (collection == null) {\n        {\n            if (collection == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(collection.toArray());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collection":"collection"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:761","type":"CtBinaryOperatorImpl"},"failures":[269,270],"tindex":"8263d7f1-3f4a-11e6-9845-c7214ff04ecd","method":{"position":"org.apache.commons.lang3.StringUtils:1475","type":"CtMethodImpl","sourcecode":"public static boolean containsIgnoreCase(final java.lang.CharSequence str, final java.lang.CharSequence searchStr) {\n    if (searchStr == null) {\n        {\n            if ((str == null) || (searchStr == null)) {\n                return false;\n            } \n            final int int = searchStr.length();\n            final int int = (str.length()) - len;\n            for (int int = 0 ; i <= max ; i++) {\n                if (org.apache.commons.lang3.CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"searchStr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1323","type":"CtBinaryOperatorImpl"},"failures":[54,55],"tindex":"8263d7f2-3f4a-11e6-9845-fd9c24d8e5da","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:588","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.WildcardType toWildcardType, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toWildcardType == null) {\n                return false;\n            } \n            if (toWildcardType.equals(type)) {\n                return true;\n            } \n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(toWildcardType);\n            final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(toWildcardType);\n            if (type instanceof java.lang.reflect.WildcardType) {\n                final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType);\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType);\n                for (java.lang.reflect.Type java.lang.reflect.Type : toUpperBounds) {\n                    toBound = org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns);\n                    for (final java.lang.reflect.Type java.lang.reflect.Type : upperBounds) {\n                        if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toBound, typeVarAssigns))) {\n                            return false;\n                        } \n                    }\n                }\n                for (java.lang.reflect.Type java.lang.reflect.Type : toLowerBounds) {\n                    toBound = org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns);\n                    for (final java.lang.reflect.Type java.lang.reflect.Type : lowerBounds) {\n                        if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(toBound, bound, typeVarAssigns))) {\n                            return false;\n                        } \n                    }\n                }\n                return true;\n            } \n            for (final java.lang.reflect.Type java.lang.reflect.Type : toUpperBounds) {\n                if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type, org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns))) {\n                    return false;\n                } \n            }\n            for (final java.lang.reflect.Type java.lang.reflect.Type : toLowerBounds) {\n                if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns))) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1630","type":"CtInvocationImpl"},"failures":[271,272],"tindex":"8263ff03-3f4a-11e6-9845-bf021bfe0cef","method":{"position":"org.apache.commons.lang3.CharUtils:352","type":"CtMethodImpl","sourcecode":"public static java.lang.String unicodeEscaped(final char ch) {\n    if (java.lang.Character.isHighSurrogate(ch)) {\n        {\n            if (ch < 16) {\n                return \"\\\\u000\" + (java.lang.Integer.toHexString(ch));\n            } else if (ch < 256) {\n                return \"\\\\u00\" + (java.lang.Integer.toHexString(ch));\n            } else if (ch < 4096) {\n                return \"\\\\u0\" + (java.lang.Integer.toHexString(ch));\n            } \n            return \"\\\\u\" + (java.lang.Integer.toHexString(ch));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:76","type":"CtBinaryOperatorImpl"},"failures":[273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,268,301,302,303,304,305,306],"tindex":"8263ff04-3f4a-11e6-9845-7d4528f2e52c","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:147","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getInstance(final java.lang.String pattern, final java.util.Locale locale) {\n    if (locale == null) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getInstance(pattern, null, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:360","type":"CtBinaryOperatorImpl"},"failures":[245],"tindex":"82642615-3f4a-11e6-9845-7f51d690d158","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:353","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final java.util.TimeZone timeZone, final java.util.Locale locale) {\n    if (locale == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:461","type":"CtInvocationImpl"},"failures":[307,308,309],"tindex":"82642616-3f4a-11e6-9845-47904ba3b182","method":{"position":"org.apache.commons.lang3.CharUtils:478","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiAlphaUpper(final char ch) {\n    if (java.lang.Character.isUpperCase(ch)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (ch >= 'A') && (ch <= 'Z');\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:474","type":"CtBinaryOperatorImpl"},"failures":[310,311,312],"tindex":"82642617-3f4a-11e6-9845-c9df6ec3cc0b","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:666","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static final java.lang.String escapeXml(final java.lang.String input) {\n    if (input != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1277","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"82642618-3f4a-11e6-9845-4f510e9cf35d","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1095","type":"CtMethodImpl","sourcecode":"public static boolean isInstance(final java.lang.Object value, final java.lang.reflect.Type type) {\n    if (value instanceof java.lang.reflect.TypeVariable<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type == null) {\n                return false;\n            } \n            return value == null ? (!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive())) : org.apache.commons.lang3.reflect.TypeUtils.isAssignable(value.getClass(), type, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:353","type":"CtBinaryOperatorImpl"},"failures":[307],"tindex":"82644d29-3f4a-11e6-9845-37e2f30fc3da","method":{"position":"org.apache.commons.lang3.CharUtils:535","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiAlphanumeric(final char ch) {\n    if (ch < 16) {\n        {\n            return (org.apache.commons.lang3.CharUtils.isAsciiAlpha(ch)) || (org.apache.commons.lang3.CharUtils.isAsciiNumeric(ch));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:4997","type":"CtInvocationImpl"},"failures":[313,314],"tindex":"82644d2a-3f4a-11e6-9845-c97f83d44b2c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:273","type":"CtMethodImpl","sourcecode":"public static double toDouble(final java.lang.String str, final double defaultValue) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        {\n            if (str == null) {\n                return defaultValue;\n            } \n            try {\n                return java.lang.Double.parseDouble(str);\n            } catch (final java.lang.NumberFormatException nfe) {\n                return defaultValue;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3765","type":"CtBinaryOperatorImpl"},"failures":[50],"tindex":"82644d2b-3f4a-11e6-9845-5dd12650612b","method":{"position":"org.apache.commons.lang3.ArrayUtils:3762","type":"CtMethodImpl","sourcecode":"public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n    if (array1 == null) {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final boolean[] boolean[] = new boolean[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1745","type":"CtBinaryOperatorImpl"},"failures":[315,316,59,60,61],"tindex":"82644d2c-3f4a-11e6-9845-816c6468b0bf","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1742","type":"CtMethodImpl","sourcecode":"private static java.lang.String classToString(java.lang.Class<?> c) {\n    if ((c.getEnclosingClass()) != null) {\n        {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            if ((c.getEnclosingClass()) != null) {\n                buf.append(org.apache.commons.lang3.reflect.TypeUtils.classToString(c.getEnclosingClass())).append('.').append(c.getSimpleName());\n            } else {\n                buf.append(c.getName());\n            }\n            if ((c.getTypeParameters().int) > 0) {\n                buf.append('<');\n                org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(buf, \", \", c.getTypeParameters());\n                buf.append('>');\n            } \n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl"},"failures":[163,164,165],"tindex":"8264743d-3f4a-11e6-9845-97b41c15dad0","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:606","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.util.Collection<?> coll) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(coll);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:355","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8264743e-3f4a-11e6-9845-05fe21050386","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2247","type":"CtMethodImpl","sourcecode":"public boolean contains(final char ch) {\n    if (ch < 256) {\n        {\n            final char[] char[] = char[];\n            for (int int = 0 ; i < (org.apache.commons.lang3.text.StrBuilder.this.int) ; i++) {\n                if ((thisBuf[i]) == ch) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl"},"failures":[317],"tindex":"8264743f-3f4a-11e6-9845-2d5feae2fe7a","method":{"position":"org.apache.commons.lang3.CharUtils:194","type":"CtMethodImpl","sourcecode":"public static char toChar(final java.lang.String str, final char defaultValue) {\n    if (str == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return defaultValue;\n            } \n            return str.charAt(0);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:647","type":"CtBinaryOperatorImpl"},"failures":[268,305],"tindex":"82649b50-3f4a-11e6-9845-0d9716a6944d","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:262","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Date date, final java.lang.String pattern, final java.util.Locale locale) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(date, pattern, null, locale);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.Conversion:1260","type":"CtBinaryOperatorImpl"},"failures":[318],"tindex":"82649b51-3f4a-11e6-9845-8beb7e833b24","method":{"position":"org.apache.commons.lang3.Conversion:1221","type":"CtMethodImpl","sourcecode":"public static short[] longToShortArray(final long src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n    if ((((nShorts - 1) * 16) + dstPos) >= 32) {\n        {\n            if (0 == nShorts) {\n                return dst;\n            } \n            if ((((nShorts - 1) * 16) + srcPos) >= 64) {\n                throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 64\");\n            } \n            int int = 0;\n            for (int int = 0 ; i < nShorts ; i++) {\n                shift = (i * 16) + srcPos;\n                dst[(dstPos + i)] = ((short)(65535 & (src >> shift)));\n            }\n            return dst;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"srcPos":"dstPos","nShorts":"nShorts"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:64","type":"CtBinaryOperatorImpl"},"failures":[319],"tindex":"82649b52-3f4a-11e6-9845-098081309395","method":{"position":"org.apache.commons.lang3.BooleanUtils:140","type":"CtMethodImpl","sourcecode":"public static boolean isNotFalse(final java.lang.Boolean bool) {\n    if (bool == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.lang3.BooleanUtils.isFalse(bool));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:705","type":"CtBinaryOperatorImpl"},"failures":[320],"tindex":"82649b53-3f4a-11e6-9845-0d57e24510fd","method":{"position":"org.apache.commons.lang3.text.StrBuilder:695","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final org.apache.commons.lang3.text.StrBuilder str, final int startIndex, final int length) {\n    if (length > 0) {\n        {\n            if (str == null) {\n                return appendNull();\n            } \n            if ((startIndex < 0) || (startIndex > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"startIndex must be valid\");\n            } \n            if ((length < 0) || ((startIndex + length) > (str.length()))) {\n                throw new java.lang.StringIndexOutOfBoundsException(\"length must be valid\");\n            } \n            if (length > 0) {\n                final int int = length();\n                ensureCapacity((len + length));\n                str.getChars(startIndex, (startIndex + length), char[], len);\n                int += length;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8264c264-3f4a-11e6-9845-394f27aa070c","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:272","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getTimeInstance(final int style, final java.util.TimeZone timeZone) {\n    if (timeZone == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getTimeInstance(style, timeZone, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeZone":"timeZone"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3937","type":"CtBinaryOperatorImpl"},"failures":[321],"tindex":"8264c265-3f4a-11e6-9845-095df3137cdd","method":{"position":"org.apache.commons.lang3.ArrayUtils:1353","type":"CtMethodImpl","sourcecode":"public static boolean isSameLength(final float[] array1, final float[] array2) {\n    if (array2 == null) {\n        {\n            if (((((array1 == null) && (array2 != null)) && ((array2.int) > 0)) || (((array2 == null) && (array1 != null)) && ((array1.int) > 0))) || (((array1 != null) && (array2 != null)) && ((array1.int) != (array2.int)))) {\n                return false;\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array1":"array2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1070","type":"CtBinaryOperatorImpl"},"failures":[322,323,324,325,326,327,328,244,329,330,331,332],"tindex":"8264c266-3f4a-11e6-9845-9d0593b14870","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:574","type":"CtMethodImpl","sourcecode":"public java.lang.String replace(final org.apache.commons.lang3.text.StrBuilder source, final int offset, final int length) {\n    if (offset >= 12) {\n        {\n            if (source == null) {\n                return null;\n            } \n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(length).append(source, offset, length);\n            substitute(buf, 0, length);\n            return buf.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"offset":"offset"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:339","type":"CtBinaryOperatorImpl"},"failures":[213,213],"tindex":"8264e977-3f4a-11e6-9845-930bee644e9e","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1089","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final short[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:73","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8264e978-3f4a-11e6-9845-b5320a639caa","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:238","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (timeZone == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(calendar, pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"timeZone":"timeZone"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8264e979-3f4a-11e6-9845-6748f8b284bb","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1081","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final int value) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:170","type":"CtBinaryOperatorImpl"},"failures":[333,334,335],"tindex":"8265108a-3f4a-11e6-9845-693bede2fe36","method":{"position":"org.apache.commons.lang3.StringUtils:2803","type":"CtMethodImpl","sourcecode":"private static java.lang.String[] splitByWholeSeparatorWorker(final java.lang.String str, final java.lang.String separator, final int max, final boolean preserveAllTokens) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            final int int = str.length();\n            if (len == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.java.lang.String[];\n            } \n            if ((separator == null) || (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String.equals(separator))) {\n                return org.apache.commons.lang3.StringUtils.splitWorker(str, null, max, preserveAllTokens);\n            } \n            final int int = separator.length();\n            final java.util.ArrayList<java.lang.String> java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            int int = 0;\n            int int = 0;\n            int int = 0;\n            while (end < len) {\n                end = str.indexOf(separator, beg);\n                if (end > (-1)) {\n                    if (end > beg) {\n                        numberOfSubstrings += 1;\n                        if (numberOfSubstrings == max) {\n                            end = len;\n                            substrings.add(str.substring(beg));\n                        } else {\n                            substrings.add(str.substring(beg, end));\n                            beg = end + separatorLength;\n                        }\n                    } else {\n                        if (preserveAllTokens) {\n                            numberOfSubstrings += 1;\n                            if (numberOfSubstrings == max) {\n                                end = len;\n                                substrings.add(str.substring(beg));\n                            } else {\n                                substrings.add(org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String);\n                            }\n                        } \n                        beg = end + separatorLength;\n                    }\n                } else {\n                    substrings.add(str.substring(beg));\n                    end = len;\n                }\n            }\n            return substrings.toArray(new java.lang.String[substrings.size()]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSequenceUtils:117","type":"CtBinaryOperatorImpl"},"failures":[336,337,338,339],"tindex":"8265108b-3f4a-11e6-9845-1735e9395aff","method":{"position":"org.apache.commons.lang3.StringUtils:1536","type":"CtMethodImpl","sourcecode":"public static int indexOfAny(final java.lang.CharSequence cs, final char... searchChars) {\n    if (cs instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            final int int = cs.length();\n            final int int = csLen - 1;\n            final int int = searchChars.int;\n            final int int = searchLen - 1;\n            for (int int = 0 ; i < csLen ; i++) {\n                final char char = cs.charAt(i);\n                for (int int = 0 ; j < searchLen ; j++) {\n                    if ((searchChars[j]) == ch) {\n                        if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {\n                            if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {\n                                return i;\n                            } \n                        } else {\n                            return i;\n                        }\n                    } \n                }\n            }\n            return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1226","type":"CtBinaryOperatorImpl"},"failures":[340],"tindex":"8265379c-3f4a-11e6-9845-7139a5718fa0","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1222","type":"CtMethodImpl","sourcecode":"public static int max(int a, final int b, final int c) {\n    if (a < b) {\n        {\n            if (a > c) {\n                {\n                    if (b > a) {\n                        a = b;\n                    } \n                    if (c > a) {\n                        a = c;\n                    } \n                    return a;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"c","c":"a"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:385","type":"CtBinaryOperatorImpl"},"failures":[341],"tindex":"8265379d-3f4a-11e6-9845-cbad3eb233ad","method":{"position":"org.apache.commons.lang3.text.StrBuilder:2702","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object obj) {\n    if (obj instanceof java.lang.Long) {\n        {\n            if (obj instanceof org.apache.commons.lang3.text.StrBuilder) {\n                return equals(((org.apache.commons.lang3.text.StrBuilder)(obj)));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:282","type":"CtBinaryOperatorImpl"},"failures":[273,274,275,276,277,280,282,283,284,285,289,342],"tindex":"8265379e-3f4a-11e6-9845-13588ddbba43","method":{"position":"org.apache.commons.lang3.time.DateUtils:774","type":"CtMethodImpl","sourcecode":"public static java.util.Date round(final java.lang.Object date, final int field) {\n    if (date == null) {\n        {\n            if (date == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            if (date instanceof java.util.Date) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Date)(date)), field);\n            } else if (date instanceof java.util.Calendar) {\n                return org.apache.commons.lang3.time.DateUtils.round(((java.util.Calendar)(date)), field).getTime();\n            } else {\n                throw new java.lang.ClassCastException((\"Could not round \" + date));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3432","type":"CtBinaryOperatorImpl"},"failures":[50,2,343,344],"tindex":"8265379f-3f4a-11e6-9845-b96e07264d0d","method":{"position":"org.apache.commons.lang3.ArrayUtils:402","type":"CtMethodImpl","sourcecode":"public static byte[] clone(final byte[] array) {\n    if (array == null) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:915","type":"CtBinaryOperatorImpl"},"failures":[345,346],"tindex":"82655eb0-3f4a-11e6-9845-6308117038d6","method":{"position":"org.apache.commons.lang3.ArrayUtils:1953","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.Object[] array, final java.lang.Object objectToFind, int startIndex) {\n    if (objectToFind == null) {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            if (objectToFind == null) {\n                for (int int = startIndex ; i >= 0 ; i--) {\n                    if ((array[i]) == null) {\n                        return i;\n                    } \n                }\n            } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n                for (int int = startIndex ; i >= 0 ; i--) {\n                    if (objectToFind.equals(array[i])) {\n                        return i;\n                    } \n                }\n            } \n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"objectToFind"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:109","type":"CtInvocationImpl"},"failures":[347,348],"tindex":"82655eb1-3f4a-11e6-9845-951a4d726a8e","method":{"position":"org.apache.commons.lang3.BooleanUtils:656","type":"CtMethodImpl","sourcecode":"public static java.lang.Boolean toBooleanObject(final java.lang.String str, final java.lang.String trueString, final java.lang.String falseString, final java.lang.String nullString) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                if (trueString == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (falseString == null) {\n                    return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n                } \n                if (nullString == null) {\n                    return null;\n                } \n            } else if (str.equals(trueString)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (str.equals(falseString)) {\n                return java.lang.Boolean.java.lang.Boolean.java.lang.Boolean;\n            } else if (str.equals(nullString)) {\n                return null;\n            } \n            throw new java.lang.IllegalArgumentException(\"The String did not match any specified value\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"826585c2-3f4a-11e6-9845-7f6123d7fd7a","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:600","type":"CtMethodImpl","sourcecode":"protected java.lang.StringBuffer applyRules(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (calendar == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.applyRules(calendar, buf);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2171","type":"CtBinaryOperatorImpl"},"failures":[349],"tindex":"826585c3-3f4a-11e6-9845-5789513ec89c","method":{"position":"org.apache.commons.lang3.ArrayUtils:2590","type":"CtMethodImpl","sourcecode":"public static int indexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) {\n    if (startIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            final double double = valueToFind - tolerance;\n            final double double = valueToFind + tolerance;\n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (((array[i]) >= min) && ((array[i]) <= max)) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl"},"failures":[350],"tindex":"826585c4-3f4a-11e6-9845-45e0a5b01981","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1214","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendSeparator(final java.lang.String separator) {\n    if (separator == null) {\n        {\n            return appendSeparator(separator, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:122","type":"CtBinaryOperatorImpl"},"failures":[351,352],"tindex":"826585c5-3f4a-11e6-9845-074461e04464","method":{"position":"org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:121","type":"CtMethodImpl","sourcecode":"private void checkCallable(final java.util.concurrent.Callable<T> call) {\n    if (call == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (call == null) {\n                throw new java.lang.IllegalArgumentException(\"Callable must not be null!\");\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"call":"call"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:176","type":"CtBinaryOperatorImpl"},"failures":[353],"tindex":"8265acd6-3f4a-11e6-9845-4b0aff5b92dc","method":{"position":"org.apache.commons.lang3.ClassUtils:802","type":"CtMethodImpl","sourcecode":"public static boolean isInnerClass(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (cls != null) && ((cls.getEnclosingClass()) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:173","type":"CtBinaryOperatorImpl"},"failures":[354,355,356],"tindex":"8265acd7-3f4a-11e6-9845-930a7802e2c0","method":{"position":"org.apache.commons.lang3.ObjectUtils:205","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic static int hashCode(final java.lang.Object obj) {\n    if (obj instanceof org.apache.commons.lang3.mutable.MutableBoolean) {\n        {\n            return obj == null ? 0 : obj.hashCode();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:1014","type":"CtBinaryOperatorImpl"},"failures":[169,173,174,181,182,186,190,194,195,196,199,200,201,204,205,208,209,210,212,216,217,219,220,224,226,229,230,231,232,234],"tindex":"8265acd8-3f4a-11e6-9845-a5bc90fe0ad5","method":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:117","type":"CtMethodImpl","sourcecode":"public static java.lang.String toString(final java.lang.Object object) {\n    if (object == null) {\n        {\n            return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(object, null, false, false, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:1117","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8265acd9-3f4a-11e6-9845-b19ce8d05dba","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1222","type":"CtMethodImpl","sourcecode":"public static int max(int a, final int b, final int c) {\n    if (a < b) {\n        {\n            if (a > c) {\n                {\n                    if (b > a) {\n                        a = b;\n                    } \n                    if (c > a) {\n                        a = c;\n                    } \n                    return a;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:466","type":"CtBinaryOperatorImpl"},"failures":[357],"tindex":"8265d3ea-3f4a-11e6-9845-47a60531f383","method":{"position":"org.apache.commons.lang3.BooleanUtils:175","type":"CtMethodImpl","sourcecode":"public static boolean toBooleanDefaultIfNull(final java.lang.Boolean bool, final boolean valueIfNull) {\n    if (bool == null) {\n        {\n            if (bool == null) {\n                return valueIfNull;\n            } \n            return bool.booleanValue();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8265d3eb-3f4a-11e6-9845-05fc90ea8662","method":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:328","type":"CtMethodImpl","sourcecode":"private int readArgumentIndex(final java.lang.String pattern, final java.text.ParsePosition pos) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = pos.getIndex();\n            seekNonWs(pattern, pos);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            boolean boolean = false;\n            for ( ; (!error) && ((pos.getIndex()) < (pattern.length())) ; next(pos)) {\n                char char = pattern.charAt(pos.getIndex());\n                if (java.lang.Character.isWhitespace(c)) {\n                    seekNonWs(pattern, pos);\n                    c = pattern.charAt(pos.getIndex());\n                    if ((c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) && (c != (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) {\n                        error = true;\n                        continue;\n                    } \n                } \n                if (((c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char)) || (c == (org.apache.commons.lang3.text.ExtendedMessageFormat.org.apache.commons.lang3.text.ExtendedMessageFormat.char))) && ((result.length()) > 0)) {\n                    try {\n                        return java.lang.Integer.parseInt(result.toString());\n                    } catch (final java.lang.NumberFormatException e) {\n                    }\n                } \n                error = !(java.lang.Character.isDigit(c));\n                result.append(c);\n            }\n            if (error) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid format argument index at position \" + start) + \": \") + (pattern.substring(start, pos.getIndex()))));\n            } \n            throw new java.lang.IllegalArgumentException((\"Unterminated format element at position \" + start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:709","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8265d3ec-3f4a-11e6-9845-9903d47abd8f","method":{"position":"org.apache.commons.lang3.math.NumberUtils:633","type":"CtMethodImpl","sourcecode":"private static boolean isAllZeros(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                {\n                    if (str == null) {\n                        return true;\n                    } \n                    for (int int = (str.length()) - 1 ; i >= 0 ; i--) {\n                        if ((str.charAt(i)) != '0') {\n                            return false;\n                        } \n                    }\n                    return (str.length()) > 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:507","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8265fafd-3f4a-11e6-9845-371b960f3e8c","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:790","type":"CtMethodImpl","sourcecode":"public static void writeDeclaredField(final java.lang.Object target, final java.lang.String fieldName, final java.lang.Object value, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.Validate.isTrue((target != null), \"target object must not be null\");\n            final java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getDeclaredField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate declared field %s.%s\", cls.getName(), fieldName);\n            org.apache.commons.lang3.reflect.FieldUtils.writeField(field, target, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:427","type":"CtBinaryOperatorImpl"},"failures":[358],"tindex":"8265fafe-3f4a-11e6-9845-25ee3246040e","method":{"position":"org.apache.commons.lang3.BooleanUtils:426","type":"CtMethodImpl","sourcecode":"public static java.lang.Integer toIntegerObject(final java.lang.Boolean bool) {\n    if (bool == null) {\n        {\n            if (bool == null) {\n                return null;\n            } \n            return bool.booleanValue() ? org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.java.lang.Integer : org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.java.lang.Integer;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharSet:174","type":"CtBinaryOperatorImpl"},"failures":[35,37,39,40,41,42,359],"tindex":"8265faff-3f4a-11e6-9845-03ee3fc1e302","method":{"position":"org.apache.commons.lang3.math.NumberUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.Double createDouble(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Double.valueOf(str);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"org.apache.commons.lang3.concurrent.ConcurrentException","condition":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:61","type":"CtBinaryOperatorImpl"},"failures":[360],"tindex":"8265fb00-3f4a-11e6-9845-9d75bdbe0ecf","method":{"position":"org.apache.commons.lang3.concurrent.ConcurrentUtils:104","type":"CtMethodImpl","sourcecode":"public static void handleCause(final java.util.concurrent.ExecutionException ex) throws org.apache.commons.lang3.concurrent.ConcurrentException {\n    if ((ex == null) || ((ex.getCause()) == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343065135/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new org.apache.commons.lang3.concurrent.ConcurrentException();\n    } else {\n        {\n            final org.apache.commons.lang3.concurrent.ConcurrentException org.apache.commons.lang3.concurrent.ConcurrentException = org.apache.commons.lang3.concurrent.ConcurrentUtils.extractCause(ex);\n            if (cex != null) {\n                throw cex;\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ex":"ex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
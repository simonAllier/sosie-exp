{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":101,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":319,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":69,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":128,"org.apache.commons.lang3.time.DateUtilsTest.testSetMilliseconds":164,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":315,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":63,"org.apache.commons.lang3.ArrayUtilsTest.testSubarrayDouble":424,"org.apache.commons.lang3.exception.ContextedExceptionTest.testNullExceptionPassing":223,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":102,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC":206,"org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP":208,"org.apache.commons.lang3.time.FastDatePrinterTest.testMilleniumBug":201,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_String_String":294,"org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedStaticField":347,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":312,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String":297,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCode":357,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":307,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":43,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate":180,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":96,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array":354,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":442,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArrayArray":81,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":110,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":284,"org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitialize":332,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth":177,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":99,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":131,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withoutCause":13,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextValues":243,"org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences":268,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray":369,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":90,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":303,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part":382,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":55,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":440,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":304,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":59,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":391,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray":141,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":26,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToEmpty":279,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":388,"org.apache.commons.lang3.exception.ContextedExceptionTest.testJavaSerialization":230,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":62,"org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected":329,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":78,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionThrowable":225,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String":296,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO":210,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testRawMessage":246,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":44,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withCause":6,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":37,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextEntries":254,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClass":7,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay":183,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableCount_Throwable":12,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace":300,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO":330,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":174,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetValueDelimiter":272,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong":362,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":313,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByte":163,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar":207,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":273,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":34,"org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByteWithStartIndex":162,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":314,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour":188,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part":383,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testAppendSuper":132,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectsEqual":111,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":231,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_recursiveCause":15,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayChar":416,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":198,"org.apache.commons.lang3.builder.CompareToBuilderTest.testMultiIntArray":339,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher":301,"org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Class":168,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":184,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText":353,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":33,"org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString":367,"org.apache.commons.lang3.ArrayUtilsTest.testCloneShort":288,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray":289,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":48,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArray":94,"org.apache.commons.lang3.builder.DiffBuilderTest.testStylePassedToDiffResult":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":70,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":438,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_jdkNoCause":18,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":21,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":276,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401":156,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":394,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowableContext":226,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth":171,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond":182,"org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_2items":447,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":95,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":400,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight":352,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String":293,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":105,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords":155,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableWriter":10,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLongArray":82,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionStringThrowable":250,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":433,"org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Date":281,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":432,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":126,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang303":195,"org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase":385,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt":378,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":32,"org.apache.commons.lang3.builder.DiffBuilderTest.testSimilarObjectIgnoresAppends":262,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":31,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":271,"org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO":331,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testNullExceptionPassing":245,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":402,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod":145,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":395,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLang538":196,"org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt":376,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":54,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionString":249,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_charInt":348,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm":186,"org.apache.commons.lang3.LocaleUtilsTest.testLang328":379,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":139,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":93,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":309,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":306,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":109,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextEntries":240,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items":445,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":60,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond":170,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":406,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_nested":5,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":393,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":57,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedException":244,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":68,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":77,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetFirstContextValue":256,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":121,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount":295,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx":375,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":107,"org.apache.commons.lang3.text.StrBuilderTest.testLang412Right":349,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":92,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":285,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth":175,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayNegativeIndex":213,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long_long":335,"org.apache.commons.lang3.builder.DiffTest.testToString":407,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong":417,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullShortArray":212,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArrayEqual":114,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":361,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionStringThrowable":228,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withoutCause":9,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":436,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations":154,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextValues":235,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang538":204,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testMilleniumBug":193,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArray":216,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleTolerance":277,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":117,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":50,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":311,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":103,"org.apache.commons.lang3.BooleanUtilsTest.test_isNotFalse_Boolean":359,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":137,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients":265,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS":150,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":64,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm":179,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCause_Throwable":20,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble":430,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex":387,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":35,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":25,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":397,"org.apache.commons.lang3.StringUtilsTest.testRemovePattern":345,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":325,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleInterfaceMethodFromDescription":343,"org.apache.commons.lang3.reflect.TypeLiteralTest.testRaw":390,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet":142,"org.apache.commons.lang3.StringUtilsIsTest.testIsAsciiPrintable_String":282,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":221,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble":419,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testSetContextValue":253,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextLabels":255,"org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringIntInt":278,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":434,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":138,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":74,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":318,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":392,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":67,"org.apache.commons.lang3.StringUtilsTest.testIsNoneEmpty":429,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString":167,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit":143,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":66,"org.apache.commons.lang3.exception.ContextedExceptionTest.testRawMessage":224,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone":342,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG815":146,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetAccessibleMethodPrivateInterface":344,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":83,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond":173,"org.apache.commons.lang3.StringUtilsTest.testReplacePattern":346,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":401,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":439,"org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest.testInitExecutor":333,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testSimpleDate":191,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":302,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean":418,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedExceptionString":227,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayInt":412,"org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiDoubleArray":427,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":38,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected":328,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":405,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":189,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":327,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":71,"org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int_int":336,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO":151,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":84,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":308,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":39,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullArrayElement":411,"org.apache.commons.lang3.CharUtilsTest.testToChar_Character_char":334,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":49,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour":181,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex":292,"org.apache.commons.lang3.time.FastDatePrinterTest.testLang303":203,"org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable":2,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream":8,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":124,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":398,"org.apache.commons.lang3.math.NumberUtilsTest.testMinByte":443,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArray":79,"org.apache.commons.lang3.exception.ContextedExceptionTest.testAddContextValue":229,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray":368,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":127,"org.apache.commons.lang3.time.FastDatePrinterTest.testSimpleDate":199,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayObject":420,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testJavaSerialization":252,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISOMethod":153,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond":178,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858":286,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":76,"org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt":219,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testFormat":197,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int":350,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionArrays":425,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode":356,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextEntries":232,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":41,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":129,"org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt":283,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":122,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields":358,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":106,"org.apache.commons.lang3.ArrayUtilsTest.testContainsByte":161,"org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle":377,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":431,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles":218,"org.apache.commons.lang3.LocaleUtilsTest.testThreeCharsLocale":380,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":89,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":75,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":65,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299":351,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG984":148,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLANG982":147,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate":187,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":23,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":408,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable":11,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals":270,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":200,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_jdkNoCause":4,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":115,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionStringThrowableContext":248,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":365,"org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_3items":448,"org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat":211,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords":158,"org.apache.commons.lang3.time.FastDatePrinterTest.testFormat":205,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":396,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields":269,"org.apache.commons.lang3.builder.CompareToBuilderTest.testInt":338,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":104,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":118,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute":176,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth":190,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":28,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger":266,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":130,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":42,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle":355,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part":384,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testSetContextValue":239,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":299,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":320,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte":415,"org.apache.commons.lang3.time.FastDatePrinterTest.testLowYearPadding":202,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture":264,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArray":97,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":166,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort":414,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray":363,"org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items":446,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArray":91,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":29,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":403,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":435,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":323,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex":298,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":53,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testAddContextValue":237,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":36,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testDurationsByBruteForce":144,"org.apache.commons.lang3.ArrayUtilsTest.testIsEquals":423,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":136,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":100,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":326,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":86,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":116,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":389,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":61,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayOutOfBoundsIndex":214,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281":159,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":316,"org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArray":428,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":113,"org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String":291,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClassInt":16,"org.apache.commons.lang3.math.NumberUtilsTest.testMinByte_emptyArray":444,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":399,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":373,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObject":437,"org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString":280,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":322,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG971":370,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG972":371,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":112,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":324,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":40,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":404,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":305,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex":165,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArray":85,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetFirstContextValue":242,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration":157,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":310,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":140,"org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString":374,"org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO":209,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testLong":80,"org.apache.commons.lang3.exception.ContextedExceptionTest.testContextedException":222,"org.apache.commons.lang3.time.DateUtilsTest.testToCalendar":0,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClassInt":14,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_String":386,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":275,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_recursiveCause":17,"org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArrayHiddenByObject":340,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":30,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testJavaSerialization":238,"org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher":290,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":274,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":134,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields":259,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":317,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":364,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray":287,"org.apache.commons.lang3.math.NumberUtilsTest.testLANG992":372,"org.apache.commons.lang3.builder.DiffTest.testGetType":409,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":45,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay":185,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":46,"org.apache.commons.lang3.ValidateTest.testNoNullElementsArray2":422,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":47,"org.apache.commons.lang3.ValidateTest.testNoNullElementsArray1":421,"org.apache.commons.lang3.LocaleUtilsTest.testParseAllLocales":381,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testFormattedExceptionMessageNull":236,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":22,"org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients":263,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":135,"org.apache.commons.lang3.ArrayUtilsTest.testContainsDouble":258,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":133,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullArrayElement":410,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetFirstContextValue":234,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testContextedExceptionThrowable":247,"org.apache.commons.lang3.StringUtilsTest.testCaseFunctions":360,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":169,"org.apache.commons.lang3.time.DateUtilsTest.testSetDays":337,"org.apache.commons.lang3.time.DurationFormatUtilsTest.testLowDurations":149,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients":261,"org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals":267,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":120,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testGetContextValues":257,"org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArrayHiddenByObject":426,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClass":1,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic":220,"org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray":160,"org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddContextValue":251,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArray":88,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayRemoveNone":215,"org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayFloat":413,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":119,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testLowYearPadding":194,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray":217,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionHierarchyCompare":260,"org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString":366,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":441,"org.apache.commons.lang3.builder.CompareToBuilderTest.testIntArray":341,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextLabels":233,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":73,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute":172,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_nested":3,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withCause":19,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":321,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":192,"org.apache.commons.lang3.exception.DefaultExceptionContextTest.testGetContextLabels":241,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":24,"org.apache.commons.lang3.builder.RecursiveToStringStyleTest.testObjectArray":125},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:456","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[],"tindex":"7ae4e877-3e4b-11e6-a14d-7d78f6c448c7","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:180","type":"CtMethodImpl","sourcecode":"public static <V>java.lang.String replace(final java.lang.Object source, final java.util.Map<java.lang.String, V> valueMap) {\n    if (source == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new org.apache.commons.lang3.text.StrSubstitutor(valueMap).replace(source);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"source"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1648","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[0],"tindex":"7ae53698-3e4b-11e6-a14d-bb15df3c5f77","method":{"position":"org.apache.commons.lang3.time.DateUtils:667","type":"CtMethodImpl","sourcecode":"public static java.util.Calendar toCalendar(final java.util.Date date) {\n    if (date == null) {\n        {\n            final java.util.Calendar java.util.Calendar = java.util.Calendar.getInstance();\n            c.setTime(date);\n            return c;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:603","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"7ae53699-3e4b-11e6-a14d-4335c392804d","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:280","type":"CtMethodImpl","sourcecode":"public static java.util.List<java.lang.Throwable> getThrowableList(java.lang.Throwable throwable) {\n    if (throwable == null) {\n        {\n            final java.util.List<java.lang.Throwable> java.util.List<java.lang.Throwable> = new java.util.ArrayList<java.lang.Throwable>();\n            while ((throwable != null) && ((list.contains(throwable)) == false)) {\n                list.add(throwable);\n                throwable = org.apache.commons.lang3.exception.ExceptionUtils.getCause(throwable);\n            }\n            return list;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:675","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[21,21,22,23,24,25,26,27,28,28,29,30,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"tindex":"7ae5369a-3e4b-11e6-a14d-bda741ac95ba","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:661","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final long value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:131","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118],"tindex":"7ae55dab-3e4b-11e6-a14d-95729fa1d44f","method":{"position":"org.apache.commons.lang3.builder.DiffBuilder:379","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.DiffBuilder append(final java.lang.String fieldName, final double lhs, final double rhs) {\n    if (fieldName == null) {\n        {\n            if (fieldName == null) {\n                throw new java.lang.IllegalArgumentException(\"Field name cannot be null\");\n            } \n            if (boolean) {\n                return org.apache.commons.lang3.builder.DiffBuilder.this;\n            } \n            if ((java.lang.Double.doubleToLongBits(lhs)) != (java.lang.Double.doubleToLongBits(rhs))) {\n                java.util.List<org.apache.commons.lang3.builder.Diff<?>>.add(new org.apache.commons.lang3.builder.Diff<java.lang.Double>(fieldName) {\n                    private static final long serialVersionUID = 1L;\n\n                    @java.lang.Override\n                    public java.lang.Double getLeft() {\n                        return java.lang.Double.valueOf(lhs);\n                    }\n\n                    @java.lang.Override\n                    public java.lang.Double getRight() {\n                        return java.lang.Double.valueOf(rhs);\n                    }\n                });\n            } \n            return org.apache.commons.lang3.builder.DiffBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[],"tindex":"7ae55dac-3e4b-11e6-a14d-efd54da24db8","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:474","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer format(final java.util.Calendar calendar, final java.lang.StringBuffer buf) {\n    if (calendar == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar, buf);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3230","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[119,119,120,121,121,122,122,123,123,30,30,37,37,38,39,40,41,42,43,44,45,54,54,55,56,57,64,64,65,66,66,67,124,78,125,81,126,84,127,87,128,90,129,93,130,96],"tindex":"7ae584bd-3e4b-11e6-a14d-c963b2d73d7b","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:871","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final java.lang.Object[] array, final java.lang.Boolean fullDetail) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:975","type":"CtBinaryOperatorImpl","sourcecode":"superToString != null"},"failures":[69,69,70,71,72,73,74,131,132,133,134,135,136,137],"tindex":"7ae584be-3e4b-11e6-a14d-2f5e2b4095a9","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:341","type":"CtMethodImpl","sourcecode":"public void appendSuper(final java.lang.StringBuffer buffer, final java.lang.String superToString) {\n    if (superToString != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendToString(buffer, superToString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superToString":"superToString"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1214","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[138,138,139,139,140],"tindex":"7ae584bf-3e4b-11e6-a14d-55a4e5782a9a","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:345","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final char[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3907","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[141],"tindex":"7ae5abd0-3e4b-11e6-a14d-bdeb5bca5101","method":{"position":"org.apache.commons.lang3.ArrayUtils:5800","type":"CtMethodImpl","sourcecode":"public static float[] removeElements(final float[] array, final float... values) {\n    if (values == null) {\n        {\n            if ((org.apache.commons.lang3.ArrayUtils.isEmpty(array)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(values))) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array);\n            } \n            final java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> = new java.util.HashMap<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt>(values.int);\n            for (final float float : values) {\n                final java.lang.Float java.lang.Float = java.lang.Float.valueOf(v);\n                final org.apache.commons.lang3.mutable.MutableInt org.apache.commons.lang3.mutable.MutableInt = occurrences.get(boxed);\n                if (count == null) {\n                    occurrences.put(boxed, new org.apache.commons.lang3.mutable.MutableInt(1));\n                } else {\n                    count.increment();\n                }\n            }\n            final java.util.BitSet java.util.BitSet = new java.util.BitSet();\n            for (final java.util.Map.Entry<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> java.util.Map.Entry<java.lang.Float, org.apache.commons.lang3.mutable.MutableInt> : occurrences.entrySet()) {\n                final java.lang.Float java.lang.Float = e.getKey();\n                int int = 0;\n                for (int int = 0, int int = e.getValue().intValue() ; i < ct ; i++) {\n                    found = org.apache.commons.lang3.ArrayUtils.indexOf(array, v.floatValue(), found);\n                    if (found < 0) {\n                        break;\n                    } \n                    toRemove.set((found++));\n                }\n            }\n            return ((float[])(org.apache.commons.lang3.ArrayUtils.removeAll(array, toRemove)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"values"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:76","type":"CtBinaryOperatorImpl","sourcecode":"locale == null"},"failures":[],"tindex":"7ae5abd1-3e4b-11e6-a14d-977183fe7089","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:147","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getInstance(final java.lang.String pattern, final java.util.Locale locale) {\n    if (locale == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getInstance(pattern, null, locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"locale":"locale"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1464","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"7ae5d2e2-3e4b-11e6-a14d-373abfc9d3a9","method":{"position":"org.apache.commons.lang3.ArrayUtils:5591","type":"CtMethodImpl","sourcecode":"public static char[] removeAll(final char[] array, final int... indices) {\n    if (indices == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((char[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"indices"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:208","type":"CtBinaryOperatorImpl","sourcecode":"value != null"},"failures":[142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"tindex":"7ae5d2e3-3e4b-11e6-a14d-6b7ac91acd7d","method":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:566","type":"CtMethodImpl","sourcecode":"static boolean containsTokenWithValue(final org.apache.commons.lang3.time.DurationFormatUtils.Token[] tokens, final java.lang.Object value) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final int int = tokens.int;\n            for (int int = 0 ; i < sz ; i++) {\n                if ((tokens[i].getValue()) == value) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2482","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[160,161,162,163],"tindex":"7ae5d2e4-3e4b-11e6-a14d-c53a9bc55982","method":{"position":"org.apache.commons.lang3.ArrayUtils:2438","type":"CtMethodImpl","sourcecode":"public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                startIndex = 0;\n            } \n            for (int int = startIndex ; i < (array.int) ; i++) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:518","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[164],"tindex":"7ae5f9f5-3e4b-11e6-a14d-41aae7f0911a","method":{"position":"org.apache.commons.lang3.time.DateUtils:629","type":"CtMethodImpl","sourcecode":"public static java.util.Date setMilliseconds(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1954","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[165],"tindex":"7ae5f9f6-3e4b-11e6-a14d-e17e8d921ece","method":{"position":"org.apache.commons.lang3.ArrayUtils:4559","type":"CtMethodImpl","sourcecode":"private static java.lang.Object add(final java.lang.Object array, final int index, final java.lang.Object element, final java.lang.Class<?> clss) {\n    if (element == null) {\n        {\n            if (array == null) {\n                if (index != 0) {\n                    throw new java.lang.IndexOutOfBoundsException(((\"Index: \" + index) + \", Length: 0\"));\n                } \n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, 1);\n                java.lang.reflect.Array.set(joinedArray, 0, element);\n                return joinedArray;\n            } \n            final int int = java.lang.reflect.Array.getLength(array);\n            if ((index > length) || (index < 0)) {\n                throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + index) + \", Length: \") + length));\n            } \n            final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(clss, (length + 1));\n            java.lang.System.arraycopy(array, 0, result, 0, index);\n            java.lang.reflect.Array.set(result, index, element);\n            if (index < length) {\n                java.lang.System.arraycopy(array, index, result, (index + 1), (length - index));\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2119","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[166,167],"tindex":"7ae5f9f7-3e4b-11e6-a14d-87d5c8a47608","method":{"position":"org.apache.commons.lang3.CharSetUtils:140","type":"CtMethodImpl","sourcecode":"public static int count(final java.lang.String str, final java.lang.String... set) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return 0;\n            } \n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            int int = 0;\n            for (final char char : str.toCharArray()) {\n                if (chars.contains(c)) {\n                    count++;\n                } \n            }\n            return count;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:353","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[168],"tindex":"7ae5f9f8-3e4b-11e6-a14d-8dac89255588","method":{"position":"org.apache.commons.lang3.ClassUtils:235","type":"CtMethodImpl","sourcecode":"public static java.lang.String getSimpleName(final java.lang.Class<?> cls) {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (cls == null) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            return cls.getSimpleName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,152,199,200,201,202,203,204,205,206,207,208,209,210,211],"tindex":"7ae5f9f9-3e4b-11e6-a14d-f765b3675f67","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:842","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        {\n            appendTo(buffer, calendar.get(int));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[75,75,76],"tindex":"7ae6210a-3e4b-11e6-a14d-a1c0c66bcc87","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1272","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final double[] array, final java.lang.Boolean fullDetail) {\n    if (buffer == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:1749","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[212,213,214,215,216],"tindex":"7ae6210b-3e4b-11e6-a14d-4faec330f212","method":{"position":"org.apache.commons.lang3.ArrayUtils:5413","type":"CtMethodImpl","sourcecode":"public static short[] removeAll(final short[] array, final int... indices) {\n    if (indices == null) {\n        {\n            return ((short[])(org.apache.commons.lang3.ArrayUtils.removeAll(((java.lang.Object)(array)), org.apache.commons.lang3.ArrayUtils.clone(indices))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"indices"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1549","type":"CtBinaryOperatorImpl","sourcecode":"chars == null"},"failures":[217],"tindex":"7ae6210c-3e4b-11e6-a14d-7d7505f5d7b7","method":{"position":"org.apache.commons.lang3.text.StrBuilder:721","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder append(final char[] chars) {\n    if (chars == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (chars == null) {\n                return appendNull();\n            } \n            final int int = chars.int;\n            if (strLen > 0) {\n                final int int = length();\n                ensureCapacity((len + strLen));\n                java.lang.System.arraycopy(chars, 0, char[], len, strLen);\n                int += strLen;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"chars":"chars"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:818","type":"CtBinaryOperatorImpl","sourcecode":"rhs == null"},"failures":[],"tindex":"7ae6210d-3e4b-11e6-a14d-0bf193cf5823","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:305","type":"CtMethodImpl","sourcecode":"private static void reflectionAppend(final java.lang.Object lhs, final java.lang.Object rhs, final java.lang.Class<?> clazz, final org.apache.commons.lang3.builder.CompareToBuilder builder, final boolean useTransients, final java.lang.String[] excludeFields) {\n    if (lhs == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final java.lang.reflect.Field[] java.lang.reflect.Field[] = clazz.getDeclaredFields();\n            java.lang.reflect.AccessibleObject.setAccessible(fields, true);\n            for (int int = 0 ; (i < (fields.int)) && ((builder.int) == 0) ; i++) {\n                final java.lang.reflect.Field java.lang.reflect.Field = fields[i];\n                if ((((!(org.apache.commons.lang3.ArrayUtils.contains(excludeFields, f.getName()))) && ((f.getName().indexOf('$')) == (-1))) && (useTransients || (!(java.lang.reflect.Modifier.isTransient(f.getModifiers()))))) && (!(java.lang.reflect.Modifier.isStatic(f.getModifiers())))) {\n                    try {\n                        builder.append(f.get(lhs), f.get(rhs));\n                    } catch (final java.lang.IllegalAccessException e) {\n                        throw new java.lang.InternalError(\"Unexpected IllegalAccessException\");\n                    }\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rhs":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2687","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[218],"tindex":"7ae6481e-3e4b-11e6-a14d-4d99482bb7e1","method":{"position":"org.apache.commons.lang3.StringUtils:3527","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final double[] array, final char separator) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            if (array == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.int);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:489","type":"CtBinaryOperatorImpl","sourcecode":"throwable == null"},"failures":[],"tindex":"7ae6481f-3e4b-11e6-a14d-43f8374c84f9","method":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:192","type":"CtMethodImpl","sourcecode":"private static java.lang.Throwable getCauseUsingMethodName(final java.lang.Throwable throwable, final java.lang.String methodName) {\n    if (throwable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Method java.lang.reflect.Method = null;\n            try {\n                method = throwable.getClass().getMethod(methodName);\n            } catch (final java.lang.NoSuchMethodException ignored) {\n            } catch (final java.lang.SecurityException ignored) {\n            }\n            if ((method != null) && (java.lang.Throwable.java.lang.Throwable.java.lang.Class.isAssignableFrom(method.getReturnType()))) {\n                try {\n                    return ((java.lang.Throwable)(method.invoke(throwable)));\n                } catch (final java.lang.IllegalAccessException ignored) {\n                } catch (final java.lang.IllegalArgumentException ignored) {\n                } catch (final java.lang.reflect.InvocationTargetException ignored) {\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwable":"throwable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:545","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"7ae64820-3e4b-11e6-a14d-db8f8ce86d6e","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:675","type":"CtMethodImpl","sourcecode":"private static boolean isAssignable(final java.lang.reflect.Type type, final java.lang.reflect.TypeVariable<?> toTypeVariable, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (type == null) {\n                return true;\n            } \n            if (toTypeVariable == null) {\n                return false;\n            } \n            if (toTypeVariable.equals(type)) {\n                return true;\n            } \n            if (type instanceof java.lang.reflect.TypeVariable<?>) {\n                final java.lang.reflect.Type[] java.lang.reflect.Type[] = org.apache.commons.lang3.reflect.TypeUtils.getImplicitBounds(((java.lang.reflect.TypeVariable<?>)(type)));\n                for (final java.lang.reflect.Type java.lang.reflect.Type : bounds) {\n                    if (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(bound, toTypeVariable, typeVarAssigns)) {\n                        return true;\n                    } \n                }\n            } \n            if ((((type instanceof java.lang.Class<?>) || (type instanceof java.lang.reflect.ParameterizedType)) || (type instanceof java.lang.reflect.GenericArrayType)) || (type instanceof java.lang.reflect.WildcardType)) {\n                return false;\n            } \n            throw new java.lang.IllegalStateException((\"found an unhandled type: \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1496","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[219],"tindex":"7ae64821-3e4b-11e6-a14d-4b27a5217eb5","method":{"position":"org.apache.commons.lang3.StringUtils:2631","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] split(final java.lang.String str, final java.lang.String separatorChars) {\n    if (str == null) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, (-1), false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:225","type":"CtBinaryOperatorImpl","sourcecode":"count == 0"},"failures":[220,221],"tindex":"7ae64822-3e4b-11e6-a14d-bf150c701ea7","method":{"position":"org.apache.commons.lang3.RandomStringUtils:96","type":"CtMethodImpl","sourcecode":"public static java.lang.String randomAlphabetic(final int count) {\n    if (count == 0) {\n        {\n            return org.apache.commons.lang3.RandomStringUtils.random(count, true, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"count":"count"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:487","type":"CtBinaryOperatorImpl","sourcecode":"value instanceof java.util.Map<?, ?>"},"failures":[222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257],"tindex":"7ae66f33-3e4b-11e6-a14d-5b8b04b01f97","method":{"position":"org.apache.commons.lang3.exception.DefaultExceptionContext:53","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.exception.DefaultExceptionContext addContextValue(final java.lang.String label, final java.lang.Object value) {\n    if (value instanceof java.util.Map<?, ?>) {\n        {\n            java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.Object>>.add(new org.apache.commons.lang3.tuple.ImmutablePair<java.lang.String, java.lang.Object>(label , value));\n            return org.apache.commons.lang3.exception.DefaultExceptionContext.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:419","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[258],"tindex":"7ae66f34-3e4b-11e6-a14d-5dfe06696951","method":{"position":"org.apache.commons.lang3.ArrayUtils:2714","type":"CtMethodImpl","sourcecode":"public static boolean contains(final double[] array, final double valueToFind) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (org.apache.commons.lang3.ArrayUtils.indexOf(array, valueToFind)) != (org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:675","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[123,123,36,36,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"tindex":"7ae66f35-3e4b-11e6-a14d-5b58558f6204","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1419","type":"CtMethodImpl","sourcecode":"protected void appendDetail(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final boolean[] array) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            buffer.append(java.lang.String);\n            for (int int = 0 ; i < (array.int) ; i++) {\n                if (i > 0) {\n                    buffer.append(java.lang.String);\n                } \n                appendDetail(buffer, fieldName, array[i]);\n            }\n            buffer.append(java.lang.String);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:814","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[259,260,261,98,99,100,101,102,103,104,105,106,107,109,110,262,111,112,113,114,115,116,117,118,263,264,265,266,267,268,269,270],"tindex":"7ae66f36-3e4b-11e6-a14d-55921c3c8cb1","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:134","type":"CtMethodImpl","sourcecode":"static org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey> getRegisterPair(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (lhs == null) {\n        {\n            final org.apache.commons.lang3.builder.IDKey org.apache.commons.lang3.builder.IDKey = new org.apache.commons.lang3.builder.IDKey(lhs);\n            final org.apache.commons.lang3.builder.IDKey org.apache.commons.lang3.builder.IDKey = new org.apache.commons.lang3.builder.IDKey(rhs);\n            return org.apache.commons.lang3.tuple.Pair.of(left, right);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1145","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(valueDelimiter)"},"failures":[271,272,273],"tindex":"7ae69647-3e4b-11e6-a14d-77ef084a7b4e","method":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1144","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(final java.lang.String valueDelimiter) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(valueDelimiter)) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(valueDelimiter)) {\n                setValueDelimiterMatcher(null);\n                return org.apache.commons.lang3.text.StrSubstitutor.this;\n            } \n            return setValueDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher.stringMatcher(valueDelimiter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"valueDelimiter":"valueDelimiter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1156","type":"CtBinaryOperatorImpl","sourcecode":"focus == null"},"failures":[274,275,276],"tindex":"7ae69648-3e4b-11e6-a14d-2b72c10a50b3","method":{"position":"org.apache.commons.lang3.time.DateUtils:1155","type":"CtMethodImpl","sourcecode":"public static java.util.Iterator<java.util.Calendar> iterator(final java.util.Calendar focus, final int rangeStyle) {\n    if (focus == null) {\n        {\n            if (focus == null) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            java.util.Calendar java.util.Calendar = null;\n            java.util.Calendar java.util.Calendar = null;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            int int = java.util.Calendar.java.util.Calendar.int;\n            switch (rangeStyle) {\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = ((java.util.Calendar)(start.clone()));\n                    end.add(java.util.Calendar.java.util.Calendar.int, 1);\n                    end.add(java.util.Calendar.java.util.Calendar.int, (-1));\n                    if (rangeStyle == (org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int)) {\n                        startCutoff = java.util.Calendar.java.util.Calendar.int;\n                        endCutoff = java.util.Calendar.java.util.Calendar.int;\n                    } \n                    break;\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                    start = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    end = org.apache.commons.lang3.time.DateUtils.truncate(focus, java.util.Calendar.java.util.Calendar.int);\n                    switch (rangeStyle) {\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = java.util.Calendar.java.util.Calendar.int;\n                            endCutoff = java.util.Calendar.java.util.Calendar.int;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = focus.get(java.util.Calendar.java.util.Calendar.int);\n                            endCutoff = startCutoff - 1;\n                            break;\n                        case org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.int :\n                            startCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) - 3;\n                            endCutoff = (focus.get(java.util.Calendar.java.util.Calendar.int)) + 3;\n                            break;\n                        default :\n                            break;\n                    }\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException(((\"The range style \" + rangeStyle) + \" is not valid.\"));\n            }\n            if (startCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff += 7;\n            } \n            if (startCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                startCutoff -= 7;\n            } \n            if (endCutoff < (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff += 7;\n            } \n            if (endCutoff > (java.util.Calendar.java.util.Calendar.int)) {\n                endCutoff -= 7;\n            } \n            while ((start.get(java.util.Calendar.java.util.Calendar.int)) != startCutoff) {\n                start.add(java.util.Calendar.java.util.Calendar.int, (-1));\n            }\n            while ((end.get(java.util.Calendar.java.util.Calendar.int)) != endCutoff) {\n                end.add(java.util.Calendar.java.util.Calendar.int, 1);\n            }\n            return new org.apache.commons.lang3.time.DateUtils.DateIterator(start , end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"focus":"focus"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2591","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[277],"tindex":"7ae6bd59-3e4b-11e6-a14d-cf4ddff3e2c4","method":{"position":"org.apache.commons.lang3.ArrayUtils:2634","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            return org.apache.commons.lang3.ArrayUtils.lastIndexOf(array, valueToFind, java.lang.Integer.java.lang.Integer.int, tolerance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.Fraction:320","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[278],"tindex":"7ae6bd5a-3e4b-11e6-a14d-8984da9e2641","method":{"position":"org.apache.commons.lang3.StringUtils:2118","type":"CtMethodImpl","sourcecode":"public static java.lang.String substring(final java.lang.String str, int start, int end) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (end < 0) {\n                end = (str.length()) + end;\n            } \n            if (start < 0) {\n                start = (str.length()) + start;\n            } \n            if (end > (str.length())) {\n                end = str.length();\n            } \n            if (start > end) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            if (start < 0) {\n                start = 0;\n            } \n            if (end < 0) {\n                end = 0;\n            } \n            return str.substring(start, end);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:121","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[279],"tindex":"7ae6bd5b-3e4b-11e6-a14d-7d9becb223c6","method":{"position":"org.apache.commons.lang3.StringUtils:469","type":"CtMethodImpl","sourcecode":"public static java.lang.String trimToEmpty(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return str == null ? org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String : str.trim();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2064","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[280],"tindex":"7ae6bd5c-3e4b-11e6-a14d-37d4d1150a6a","method":{"position":"org.apache.commons.lang3.StringUtils:5549","type":"CtMethodImpl","sourcecode":"public static java.lang.String center(java.lang.String str, final int size, java.lang.String padStr) {\n    if (padStr == null) {\n        {\n            if ((str == null) || (size <= 0)) {\n                return str;\n            } \n            if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {\n                padStr = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            final int int = size - strLen;\n            if (pads <= 0) {\n                return str;\n            } \n            str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padStr);\n            str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr);\n            return str;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"padStr"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:201","type":"CtBinaryOperatorImpl","sourcecode":"(date1 == null) || (date2 == null)"},"failures":[281],"tindex":"7ae6bd5d-3e4b-11e6-a14d-65fa6056ebda","method":{"position":"org.apache.commons.lang3.time.DateUtils:200","type":"CtMethodImpl","sourcecode":"public static boolean isSameInstant(final java.util.Date date1, final java.util.Date date2) {\n    if ((date2 == null) || (date1 == null)) {\n        {\n            if ((date1 == null) || (date2 == null)) {\n                throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n            } \n            return (date1.getTime()) == (date2.getTime());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date2":"date1","date1":"date2"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6104","type":"CtBinaryOperatorImpl","sourcecode":"cs == null"},"failures":[282],"tindex":"7ae6e46e-3e4b-11e6-a14d-43709e22f4b0","method":{"position":"org.apache.commons.lang3.StringUtils:5990","type":"CtMethodImpl","sourcecode":"public static boolean isAsciiPrintable(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        {\n            if (cs == null) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((org.apache.commons.lang3.CharUtils.isAsciiPrintable(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.WordUtils:536","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[283],"tindex":"7ae6e46f-3e4b-11e6-a14d-2d128fbb4b44","method":{"position":"org.apache.commons.lang3.StringUtils:3053","type":"CtMethodImpl","sourcecode":"public static java.lang.String[] splitPreserveAllTokens(final java.lang.String str, final java.lang.String separatorChars, final int max) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(separatorChars)) {\n        {\n            return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, true);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"separatorChars"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:115","type":"CtBinaryOperatorImpl","sourcecode":"codepoint > 65535"},"failures":[284,285,286],"tindex":"7ae6e470-3e4b-11e6-a14d-510e8ec0a712","method":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:109","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nprotected java.lang.String toUtf16Escape(final int codepoint) {\n    if (codepoint > 65535) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final char[] char[] = java.lang.Character.toChars(codepoint);\n            return ((\"\\\\u\" + (org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(surrogatePair[0]))) + \"\\\\u\") + (org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(surrogatePair[1]));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"codepoint":"codepoint"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:995","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[287,288,289],"tindex":"7ae6e471-3e4b-11e6-a14d-49fcf0ae2241","method":{"position":"org.apache.commons.lang3.ArrayUtils:370","type":"CtMethodImpl","sourcecode":"public static short[] clone(final short[] array) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } \n            return array.clone();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"org.apache.commons.lang3.ObjectUtils:365","type":"CtBinaryOperatorImpl","sourcecode":"object == null"},"failures":[],"tindex":"7ae6e472-3e4b-11e6-a14d-d3559d961257","method":{"position":"org.apache.commons.lang3.ObjectUtils:292","type":"CtMethodImpl","sourcecode":"public static void identityToString(final java.lang.Appendable appendable, final java.lang.Object object) throws java.io.IOException {\n    if (object == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (object == null) {\n                throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n            } \n            appendable.append(object.getClass().getName()).append('@').append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(object)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"object":"object"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2485","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,271,321,322,323,324,325,326,327,273],"tindex":"7ae70b83-3e4b-11e6-a14d-915061e888b5","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1811","type":"CtMethodImpl","sourcecode":"private void replaceImpl(final int startIndex, final int endIndex, final int removeLen, final java.lang.String insertStr, final int insertLen) {\n    if (endIndex < 0) {\n        {\n            final int int = ((int) - removeLen) + insertLen;\n            if (insertLen != removeLen) {\n                ensureCapacity(newSize);\n                java.lang.System.arraycopy(char[], endIndex, char[], (startIndex + insertLen), ((int) - endIndex));\n                int = newSize;\n            } \n            if (insertLen > 0) {\n                insertStr.getChars(0, insertLen, char[], startIndex);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"endIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,328,195,196,197,152,329,330,207,208,209,331,210],"tindex":"7ae70b84-3e4b-11e6-a14d-cbc1f74a275b","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:434","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String format(final java.util.Calendar calendar) {\n    if (calendar == null) {\n        {\n            return org.apache.commons.lang3.time.FastDatePrinter.format(calendar);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:122","type":"CtBinaryOperatorImpl","sourcecode":"call == null"},"failures":[332,333],"tindex":"7ae70b85-3e4b-11e6-a14d-1b2e669b88db","method":{"position":"org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:121","type":"CtMethodImpl","sourcecode":"private void checkCallable(final java.util.concurrent.Callable<T> call) {\n    if (call == null) {\n        {\n            if (call == null) {\n                throw new java.lang.IllegalArgumentException(\"Callable must not be null!\");\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"call":"call"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.CharUtils:332","type":"CtBinaryOperatorImpl","sourcecode":"ch == null"},"failures":[334],"tindex":"7ae70b86-3e4b-11e6-a14d-5f17042fb3ac","method":{"position":"org.apache.commons.lang3.CharUtils:149","type":"CtMethodImpl","sourcecode":"public static char toChar(final java.lang.Character ch, final char defaultValue) {\n    if (ch == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (ch == null) {\n                return defaultValue;\n            } \n            return ch.charValue();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3048","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[335,336],"tindex":"7ae70b87-3e4b-11e6-a14d-fdd3712da3dd","method":{"position":"org.apache.commons.lang3.ArrayUtils:3047","type":"CtMethodImpl","sourcecode":"public static long[] toPrimitive(final java.lang.Long[] array, final long valueForNull) {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return null;\n            } else if ((array.int) == 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.long[];\n            } \n            final long[] long[] = new long[array.int];\n            for (int int = 0 ; i < (array.int) ; i++) {\n                final java.lang.Long java.lang.Long = array[i];\n                result[i] = b == null ? valueForNull : b.longValue();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:884","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[337],"tindex":"7ae73298-3e4b-11e6-a14d-133a95c9ae91","method":{"position":"org.apache.commons.lang3.time.DateUtils:568","type":"CtMethodImpl","sourcecode":"public static java.util.Date setDays(final java.util.Date date, final int amount) {\n    if (date == null) {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:556","type":"CtBinaryOperatorImpl","sourcecode":"lhs != rhs"},"failures":[338,339,340,341],"tindex":"7ae73299-3e4b-11e6-a14d-9b3d0a23b24a","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:478","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.CompareToBuilder append(final int lhs, final int rhs) {\n    if (lhs != rhs) {\n        {\n            if ((int) != 0) {\n                return org.apache.commons.lang3.builder.CompareToBuilder.this;\n            } \n            int = lhs < rhs ? -1 : lhs > rhs ? 1 : 0;\n            return org.apache.commons.lang3.builder.CompareToBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs","rhs":"rhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FormatCache:70","type":"CtBinaryOperatorImpl","sourcecode":"pattern == null"},"failures":[342],"tindex":"7ae7329a-3e4b-11e6-a14d-a971ccfb6c15","method":{"position":"org.apache.commons.lang3.time.FastDateFormat:133","type":"CtMethodImpl","sourcecode":"public static org.apache.commons.lang3.time.FastDateFormat getInstance(final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (pattern == null) {\n        {\n            return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getInstance(pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pattern":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1624","type":"CtBinaryOperatorImpl","sourcecode":"t instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"7ae7329b-3e4b-11e6-a14d-330c9406d774","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1594","type":"CtMethodImpl","sourcecode":"private static boolean equals(java.lang.reflect.ParameterizedType p, java.lang.reflect.Type t) {\n    if (t instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (t instanceof java.lang.reflect.ParameterizedType) {\n                final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(t));\n                if ((org.apache.commons.lang3.reflect.TypeUtils.equals(p.getRawType(), other.getRawType())) && (org.apache.commons.lang3.reflect.TypeUtils.equals(p.getOwnerType(), other.getOwnerType()))) {\n                    return org.apache.commons.lang3.reflect.TypeUtils.equals(p.getActualTypeArguments(), other.getActualTypeArguments());\n                } \n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"t":"t"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.MethodUtils:360","type":"CtInvocationImpl","sourcecode":"java.lang.reflect.Modifier.isPublic(cls.getModifiers())"},"failures":[343,344],"tindex":"7ae7329c-3e4b-11e6-a14d-db024344ee19","method":{"position":"org.apache.commons.lang3.reflect.MethodUtils:336","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Method getAccessibleMethod(final java.lang.Class<?> cls, final java.lang.String methodName, final java.lang.Class<?>... parameterTypes) {\n    if (java.lang.reflect.Modifier.isPublic(cls.getModifiers())) {\n        {\n            try {\n                return org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(cls.getMethod(methodName, parameterTypes));\n            } catch (final java.lang.NoSuchMethodException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrSubstitutor:391","type":"CtBinaryOperatorImpl","sourcecode":"source == null"},"failures":[345,346],"tindex":"7ae759ad-3e4b-11e6-a14d-f718127b603d","method":{"position":"org.apache.commons.lang3.StringUtils:4441","type":"CtMethodImpl","sourcecode":"public static java.lang.String replacePattern(final java.lang.String source, final java.lang.String regex, final java.lang.String replacement) {\n    if (regex == null) {\n        {\n            return java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.java.util.regex.Pattern.int).matcher(source).replaceAll(replacement);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"source":"regex"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.RandomStringUtils:264","type":"CtBinaryOperatorImpl","sourcecode":"(ch >= 56320) && (ch <= 57343)"},"failures":[],"tindex":"7ae759ae-3e4b-11e6-a14d-e5d978c03537","method":{"position":"org.apache.commons.lang3.CharUtils:402","type":"CtMethodImpl","sourcecode":"public static boolean isAscii(final char ch) {\n    if ((ch >= 56320) && (ch <= 57343)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ch < 128;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1364","type":"CtBinaryOperatorImpl","sourcecode":"typeArguments == null"},"failures":[],"tindex":"7ae759af-3e4b-11e6-a14d-7b7fa2dc9f2c","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1406","type":"CtMethodImpl","sourcecode":"private static java.lang.reflect.Type[] unrollBounds(final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeArguments, final java.lang.reflect.Type[] bounds) {\n    if (typeArguments == null) {\n        {\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = bounds;\n            int int = 0;\n            for ( ; i < (result.int) ; i++) {\n                final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(typeArguments, result[i]);\n                if (unrolled == null) {\n                    result = org.apache.commons.lang3.ArrayUtils.remove(result, (i--));\n                } else {\n                    result[i] = unrolled;\n                }\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeArguments":"typeArguments"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrTokenizer:253","type":"CtBinaryOperatorImpl","sourcecode":"input != null"},"failures":[],"tindex":"7ae759b0-3e4b-11e6-a14d-e90e6c04ee1c","method":{"position":"org.apache.commons.lang3.StringEscapeUtils:604","type":"CtMethodImpl","sourcecode":"public static final java.lang.String escapeHtml3(final java.lang.String input) {\n    if (input != null) {\n        {\n            return org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.StringEscapeUtils.org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(input);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"input":"input"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.reflect.FieldUtils:173","type":"CtVariableReadImpl","sourcecode":"forceAccess"},"failures":[347],"tindex":"7ae759b1-3e4b-11e6-a14d-a73914f415fc","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:340","type":"CtMethodImpl","sourcecode":"public static java.lang.Object readDeclaredStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName, final boolean forceAccess) throws java.lang.IllegalAccessException {\n    if (forceAccess) {\n        {\n            final java.lang.reflect.Field java.lang.reflect.Field = org.apache.commons.lang3.reflect.FieldUtils.getDeclaredField(cls, fieldName, forceAccess);\n            org.apache.commons.lang3.Validate.isTrue((field != null), \"Cannot locate declared field %s.%s\", cls.getName(), fieldName);\n            return org.apache.commons.lang3.reflect.FieldUtils.readStaticField(field, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"forceAccess":"forceAccess"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:478","type":"CtBinaryOperatorImpl","sourcecode":"seq == null"},"failures":[348],"tindex":"7ae759b2-3e4b-11e6-a14d-e924f00c2fa8","method":{"position":"org.apache.commons.lang3.StringUtils:895","type":"CtMethodImpl","sourcecode":"public static int indexOf(final java.lang.CharSequence seq, final int searchChar, final int startPos) {\n    if (seq == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(seq)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.indexOf(seq, searchChar, startPos);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"seq":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.mutable.MutableByte:246","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.apache.commons.lang3.mutable.MutableByte"},"failures":[349,350,351,352],"tindex":"7ae77fc3-3e4b-11e6-a14d-b1ea7e635518","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1432","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(final java.lang.Object obj, final int width, final char padChar) {\n    if (obj instanceof org.apache.commons.lang3.mutable.MutableByte) {\n        {\n            if (width > 0) {\n                ensureCapacity(((int) + width));\n                java.lang.String java.lang.String = obj == null ? getNullText() : obj.toString();\n                if (str == null) {\n                    str = \"\";\n                } \n                final int int = str.length();\n                if (strLen >= width) {\n                    str.getChars(0, width, char[], int);\n                } else {\n                    final int int = width - strLen;\n                    str.getChars(0, strLen, char[], int);\n                    for (int int = 0 ; i < padLen ; i++) {\n                        char[][(((int) + strLen) + i)] = padChar;\n                    }\n                }\n                int += width;\n            } \n            return org.apache.commons.lang3.text.StrBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringStyle:874","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[353,354],"tindex":"7ae77fc4-3e4b-11e6-a14d-35c6ec9084dd","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1131","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendWithSeparators(final java.lang.Object[] array, final java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (array == null) {\n                {\n                    if ((array != null) && ((array.int) > 0)) {\n                        @java.lang.SuppressWarnings(value = \"deprecation\")\n                        final java.lang.String java.lang.String = org.apache.commons.lang3.ObjectUtils.toString(separator);\n                        append(array[0]);\n                        for (int int = 1 ; i < (array.int) ; i++) {\n                            append(sep);\n                            append(array[i]);\n                        }\n                    } \n                    return org.apache.commons.lang3.text.StrBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.IDKey:64","type":"CtUnaryOperatorImpl","sourcecode":"!(other instanceof org.apache.commons.lang3.builder.IDKey)"},"failures":[259,260,261,98,99,100,101,102,103,104,105,106,107,109,110,262,111,112,113,114,115,116,117,118,263,264,265,266,267,268,269,270,355,356,357,358],"tindex":"7ae77fc5-3e4b-11e6-a14d-3730137afac8","method":{"position":"org.apache.commons.lang3.builder.IDKey:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(final java.lang.Object other) {\n    if (!(other instanceof org.apache.commons.lang3.builder.IDKey)) {\n        {\n            if (!(other instanceof org.apache.commons.lang3.builder.IDKey)) {\n                return false;\n            } \n            final org.apache.commons.lang3.builder.IDKey org.apache.commons.lang3.builder.IDKey = ((org.apache.commons.lang3.builder.IDKey)(other));\n            if ((int) != (idKey.int)) {\n                return false;\n            } \n            return (java.lang.Object) == (idKey.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:505","type":"CtBinaryOperatorImpl","sourcecode":"bool == null"},"failures":[359],"tindex":"7ae7a6d6-3e4b-11e6-a14d-378884fd0e6f","method":{"position":"org.apache.commons.lang3.BooleanUtils:140","type":"CtMethodImpl","sourcecode":"public static boolean isNotFalse(final java.lang.Boolean bool) {\n    if (bool == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return !(org.apache.commons.lang3.BooleanUtils.isFalse(bool));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"bool":"bool"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.math.NumberUtils:765","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isBlank(str)"},"failures":[360],"tindex":"7ae7a6d7-3e4b-11e6-a14d-35a8bcdb1cac","method":{"position":"org.apache.commons.lang3.StringUtils:5610","type":"CtMethodImpl","sourcecode":"public static java.lang.String upperCase(final java.lang.String str, final java.util.Locale locale) {\n    if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return str.toUpperCase(locale);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1764","type":"CtBinaryOperatorImpl","sourcecode":"index >= 0"},"failures":[361],"tindex":"7ae7a6d8-3e4b-11e6-a14d-c70ce6c8da8f","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1635","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder insert(final int index, final long value) {\n    if (index >= 0) {\n        {\n            return insert(index, java.lang.String.valueOf(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"index":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2413","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.StringUtils.isEmpty(str)"},"failures":[362],"tindex":"7ae7a6d9-3e4b-11e6-a14d-51b37c51ca6d","method":{"position":"org.apache.commons.lang3.math.NumberUtils:708","type":"CtMethodImpl","sourcecode":"public static java.lang.Long createLong(final java.lang.String str) {\n    if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Long.decode(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"org.apache.commons.lang3.ClassUtils:353","type":"CtBinaryOperatorImpl","sourcecode":"cls == null"},"failures":[],"tindex":"7ae7a6da-3e4b-11e6-a14d-85219da6260c","method":{"position":"org.apache.commons.lang3.reflect.FieldUtils:530","type":"CtMethodImpl","sourcecode":"public static void writeStaticField(final java.lang.Class<?> cls, final java.lang.String fieldName, final java.lang.Object value) throws java.lang.IllegalAccessException {\n    if (cls == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            org.apache.commons.lang3.reflect.FieldUtils.writeStaticField(cls, fieldName, value, false);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cls":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:3794","type":"CtBinaryOperatorImpl","sourcecode":"array2 == null"},"failures":[363],"tindex":"7ae7a6db-3e4b-11e6-a14d-835efb048413","method":{"position":"org.apache.commons.lang3.ArrayUtils:3791","type":"CtMethodImpl","sourcecode":"public static char[] addAll(final char[] array1, final char... array2) {\n    if (array1 == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array1 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array2);\n            } else if (array2 == null) {\n                return org.apache.commons.lang3.ArrayUtils.clone(array1);\n            } \n            final char[] char[] = new char[(array1.int) + (array2.int)];\n            java.lang.System.arraycopy(array1, 0, joinedArray, 0, array1.int);\n            java.lang.System.arraycopy(array2, 0, joinedArray, array1.int, array2.int);\n            return joinedArray;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array2":"array1"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5782","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLowerCase(ch)"},"failures":[364,365],"tindex":"7ae7a6dc-3e4b-11e6-a14d-f1d36e714492","method":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:68","type":"CtMethodImpl","sourcecode":"private boolean isOctalDigit(char ch) {\n    if (java.lang.Character.isLowerCase(ch)) {\n        {\n            return (ch >= '0') && (ch <= '7');\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ch":"ch"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2207","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[366,367,368,369],"tindex":"7ae7cded-3e4b-11e6-a14d-4dd61bb5fed9","method":{"position":"org.apache.commons.lang3.CharSetUtils:221","type":"CtMethodImpl","sourcecode":"private static java.lang.String modify(final java.lang.String str, final java.lang.String[] set, final boolean expect) {\n    if (str == null) {\n        {\n            final org.apache.commons.lang3.CharSet org.apache.commons.lang3.CharSet = org.apache.commons.lang3.CharSet.getInstance(set);\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length());\n            final char[] char[] = str.toCharArray();\n            final int int = chrs.int;\n            for (int int = 0 ; i < sz ; i++) {\n                if ((chars.contains(chrs[i])) == expect) {\n                    buffer.append(chrs[i]);\n                } \n            }\n            return buffer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:256","type":"CtBinaryOperatorImpl","sourcecode":"buffer == null"},"failures":[],"tindex":"7ae7cdee-3e4b-11e6-a14d-d948af4eb262","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1024","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (buffer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = calendar.get(java.util.Calendar.java.util.Calendar.int);\n            if (value == 0) {\n                value = (calendar.getLeastMaximum(java.util.Calendar.java.util.Calendar.int)) + 1;\n            } \n            org.apache.commons.lang3.time.FastDatePrinter.NumberRule.appendTo(buffer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDatePrinter:1102","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ae7cdef-3e4b-11e6-a14d-85975c175387","method":{"position":"org.apache.commons.lang3.time.FastDateParser:434","type":"CtMethodImpl","sourcecode":"void setCalendar(final org.apache.commons.lang3.time.FastDateParser parser, final java.util.Calendar cal, final java.lang.String value) {\n    if (value == null) {\n        {\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5262","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[370,371,372,373],"tindex":"7ae7cdf0-3e4b-11e6-a14d-afe0b7a3029a","method":{"position":"org.apache.commons.lang3.math.NumberUtils:1337","type":"CtMethodImpl","sourcecode":"public static boolean isNumber(final java.lang.String str) {\n    if (str == null) {\n        {\n            if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {\n                return false;\n            } \n            final char[] char[] = str.toCharArray();\n            int int = chars.int;\n            boolean boolean = false;\n            boolean boolean = false;\n            boolean boolean = false;\n            boolean boolean = false;\n            final int int = (chars[0]) == '-' ? 1 : 0;\n            if ((sz > (start + 1)) && ((chars[start]) == '0')) {\n                if (((chars[(start + 1)]) == 'x') || ((chars[(start + 1)]) == 'X')) {\n                    int int = start + 2;\n                    if (i == sz) {\n                        return false;\n                    } \n                    for ( ; i < (chars.int) ; i++) {\n                        if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {\n                            return false;\n                        } \n                    }\n                    return true;\n                } else if (java.lang.Character.isDigit(chars[(start + 1)])) {\n                    int int = start + 1;\n                    for ( ; i < (chars.int) ; i++) {\n                        if (((chars[i]) < '0') || ((chars[i]) > '7')) {\n                            return false;\n                        } \n                    }\n                    return true;\n                } \n            } \n            sz--;\n            int int = start;\n            while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {\n                if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {\n                    foundDigit = true;\n                    allowSigns = false;\n                } else if ((chars[i]) == '.') {\n                    if (hasDecPoint || hasExp) {\n                        return false;\n                    } \n                    hasDecPoint = true;\n                } else if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {\n                    if (hasExp) {\n                        return false;\n                    } \n                    if (!foundDigit) {\n                        return false;\n                    } \n                    hasExp = true;\n                    allowSigns = true;\n                } else if (((chars[i]) == '+') || ((chars[i]) == '-')) {\n                    if (!allowSigns) {\n                        return false;\n                    } \n                    allowSigns = false;\n                    foundDigit = false;\n                } else {\n                    return false;\n                }\n                i++;\n            }\n            if (i < (chars.int)) {\n                if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {\n                    return true;\n                } \n                if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {\n                    return false;\n                } \n                if ((chars[i]) == '.') {\n                    if (hasDecPoint || hasExp) {\n                        return false;\n                    } \n                    return foundDigit;\n                } \n                if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {\n                    return foundDigit;\n                } \n                if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {\n                    return (foundDigit && (!hasExp)) && (!hasDecPoint);\n                } \n                return false;\n            } \n            return (!allowSigns) && foundDigit;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.BooleanUtils:357","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[244,245,246,247,248,249,250,251,252,253,254,255,256,257],"tindex":"7ae7f501-3e4b-11e6-a14d-0f3e6c0db56a","method":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:171","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic org.apache.commons.lang3.exception.ContextedRuntimeException addContextValue(final java.lang.String label, final java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.exception.ExceptionContext.addContextValue(label, value);\n            return org.apache.commons.lang3.exception.ContextedRuntimeException.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:1094","type":"CtBinaryOperatorImpl","sourcecode":"iterable != null"},"failures":[374],"tindex":"7ae7f502-3e4b-11e6-a14d-2b540c2832fe","method":{"position":"org.apache.commons.lang3.StringUtils:4147","type":"CtMethodImpl","sourcecode":"public static java.lang.String join(final java.lang.Iterable<?> iterable, final java.lang.String separator) {\n    if (iterable != null) {\n        {\n            if (iterable == null) {\n                return null;\n            } \n            return org.apache.commons.lang3.StringUtils.join(iterable.iterator(), separator);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"iterable":"iterable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:759","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"7ae7f503-3e4b-11e6-a14d-ff0d89a774c7","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:584","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final byte[] array) {\n    if (fieldName == null) {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, array, null);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[],"tindex":"7ae7f504-3e4b-11e6-a14d-730bc88b3f2d","method":{"position":"org.apache.commons.lang3.time.DateFormatUtils:238","type":"CtMethodImpl","sourcecode":"public static java.lang.String format(final java.util.Calendar calendar, final java.lang.String pattern, final java.util.TimeZone timeZone) {\n    if (calendar == null) {\n        {\n            return org.apache.commons.lang3.time.DateFormatUtils.format(calendar, pattern, timeZone, null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:534","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[375,376,377,378],"tindex":"7ae7f505-3e4b-11e6-a14d-792d4733f307","method":{"position":"org.apache.commons.lang3.StringUtils:5119","type":"CtMethodImpl","sourcecode":"public static java.lang.String repeat(final java.lang.String str, final int repeat) {\n    if (str == null) {\n        {\n            if (str == null) {\n                return null;\n            } \n            if (repeat <= 0) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.java.lang.String;\n            } \n            final int int = str.length();\n            if ((repeat == 1) || (inputLength == 0)) {\n                return str;\n            } \n            if ((inputLength == 1) && (repeat <= (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int))) {\n                return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n            } \n            final int int = inputLength * repeat;\n            switch (inputLength) {\n                case 1 :\n                    return org.apache.commons.lang3.StringUtils.repeat(str.charAt(0), repeat);\n                case 2 :\n                    final char char = str.charAt(0);\n                    final char char = str.charAt(1);\n                    final char[] char[] = new char[outputLength];\n                    for (int int = (repeat * 2) - 2 ; i >= 0 ; i-- , i--) {\n                        output2[i] = ch0;\n                        output2[(i + 1)] = ch1;\n                    }\n                    return new java.lang.String(output2);\n                default :\n                    final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(outputLength);\n                    for (int int = 0 ; i < repeat ; i++) {\n                        buf.append(str);\n                    }\n                    return buf.toString();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:6071","type":"CtBinaryOperatorImpl","sourcecode":"cs == null"},"failures":[379,380,381,382,383,384,385],"tindex":"7ae81c16-3e4b-11e6-a14d-c3327574f195","method":{"position":"org.apache.commons.lang3.StringUtils:6135","type":"CtMethodImpl","sourcecode":"public static boolean isAllLowerCase(final java.lang.CharSequence cs) {\n    if (cs == null) {\n        {\n            if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {\n                return false;\n            } \n            final int int = cs.length();\n            for (int int = 0 ; i < sz ; i++) {\n                if ((java.lang.Character.isLowerCase(cs.charAt(i))) == false) {\n                    return false;\n                } \n            }\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"cs":"cs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:1445","type":"CtBinaryOperatorImpl","sourcecode":"(seq == null) || (searchSeq == null)"},"failures":[386],"tindex":"7ae81c17-3e4b-11e6-a14d-0b8414ea7e21","method":{"position":"org.apache.commons.lang3.StringUtils:1221","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final java.lang.CharSequence seq, final java.lang.CharSequence searchSeq) {\n    if ((seq == null) || (seq == null)) {\n        {\n            if ((seq == null) || (searchSeq == null)) {\n                return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.int;\n            } \n            return org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"searchSeq":"seq","seq":"seq"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.text.ParseException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:127","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[],"tindex":"7ae81c18-3e4b-11e6-a14d-8d443a8b03de","method":{"position":"org.apache.commons.lang3.time.DateUtils:353","type":"CtMethodImpl","sourcecode":"private static java.util.Date parseDateWithLeniency(final java.lang.String str, final java.util.Locale locale, final java.lang.String[] parsePatterns, final boolean lenient) throws java.text.ParseException {\n    if (str == null) {\n        {\n            if ((str == null) || (parsePatterns == null)) {\n                throw new java.lang.IllegalArgumentException(\"Date and Patterns must not be null\");\n            } \n            java.text.SimpleDateFormat java.text.SimpleDateFormat;\n            if (locale == null) {\n                parser = new java.text.SimpleDateFormat();\n            } else {\n                parser = new java.text.SimpleDateFormat(\"\" , locale);\n            }\n            parser.setLenient(lenient);\n            final java.text.ParsePosition java.text.ParsePosition = new java.text.ParsePosition(0);\n            for (final java.lang.String java.lang.String : parsePatterns) {\n                java.lang.String java.lang.String = parsePattern;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    pattern = pattern.substring(0, ((pattern.length()) - 1));\n                } \n                parser.applyPattern(pattern);\n                pos.setIndex(0);\n                java.lang.String java.lang.String = str;\n                if (parsePattern.endsWith(\"ZZ\")) {\n                    str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");\n                } \n                final java.util.Date java.util.Date = parser.parse(str2, pos);\n                if ((date != null) && ((pos.getIndex()) == (str2.length()))) {\n                    return date;\n                } \n            }\n            throw new java.text.ParseException((\"Unable to parse the date: \" + str) , (-1));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.text.ParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2171","type":"CtBinaryOperatorImpl","sourcecode":"startIndex < 0"},"failures":[387],"tindex":"7ae81c19-3e4b-11e6-a14d-4f2d6975b631","method":{"position":"org.apache.commons.lang3.ArrayUtils:2481","type":"CtMethodImpl","sourcecode":"public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n    if (startIndex < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (array == null) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } \n            if (startIndex < 0) {\n                return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n            } else if (startIndex >= (array.int)) {\n                startIndex = (array.int) - 1;\n            } \n            for (int int = startIndex ; i >= 0 ; i--) {\n                if (valueToFind == (array[i])) {\n                    return i;\n                } \n            }\n            return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.int;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"startIndex":"startIndex"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.text.StrBuilder:2703","type":"CtBinaryOperatorImpl","sourcecode":"obj instanceof org.apache.commons.lang3.text.StrBuilder"},"failures":[388,389],"tindex":"7ae8432a-3e4b-11e6-a14d-43678dfc72bb","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:199","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof org.apache.commons.lang3.text.StrBuilder) {\n        {\n            return (obj == (org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl.this)) || ((obj instanceof java.lang.reflect.ParameterizedType) && (org.apache.commons.lang3.reflect.TypeUtils.equals(org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(obj)))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:7013","type":"CtBinaryOperatorImpl","sourcecode":"(first == null) || (second == null)"},"failures":[],"tindex":"7ae8432b-3e4b-11e6-a14d-39ec0085abb7","method":{"position":"org.apache.commons.lang3.StringUtils:7112","type":"CtMethodImpl","sourcecode":"private static int transpositions(java.lang.CharSequence first, java.lang.CharSequence second) {\n    if ((first == null) || (first == null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = 0;\n            for (int int = 0 ; i < (first.length()) ; i++) {\n                if ((first.charAt(i)) != (second.charAt(i))) {\n                    transpositions++;\n                } \n            }\n            return transpositions / 2;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"first":"first","second":"first"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.DateUtils:1668","type":"CtBinaryOperatorImpl","sourcecode":"calendar == null"},"failures":[],"tindex":"7ae8432c-3e4b-11e6-a14d-110ce211a00c","method":{"position":"org.apache.commons.lang3.time.FastDatePrinter:943","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void appendTo(final java.lang.StringBuffer buffer, final java.util.Calendar calendar) {\n    if (calendar == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            appendTo(buffer, ((calendar.get(java.util.Calendar.java.util.Calendar.int)) % 100));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"calendar":"calendar"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ClassUtils:640","type":"CtBinaryOperatorImpl","sourcecode":"(toClass.isPrimitive()) && (!(cls.isPrimitive()))"},"failures":[390,388,389,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,116,117,118,406,407,408,409],"tindex":"7ae8432d-3e4b-11e6-a14d-c351f45cc3ef","method":{"position":"org.apache.commons.lang3.reflect.TypeUtils:897","type":"CtMethodImpl","sourcecode":"private static java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> getTypeArguments(java.lang.Class<?> cls, final java.lang.Class<?> toClass, final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> subtypeVarAssigns) {\n    if ((toClass.isPrimitive()) && (!(cls.isPrimitive()))) {\n        {\n            if (!(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(cls, toClass))) {\n                return null;\n            } \n            if (cls.isPrimitive()) {\n                if (toClass.isPrimitive()) {\n                    return new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>();\n                } \n                cls = org.apache.commons.lang3.ClassUtils.primitiveToWrapper(cls);\n            } \n            final java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = subtypeVarAssigns == null ? new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>() : new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(subtypeVarAssigns);\n            if (toClass.equals(cls)) {\n                return typeVarAssigns;\n            } \n            return org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toClass":"toClass","cls":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:3368","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[410,411,412,413,414,415,416,417,418,419,420,421,422],"tindex":"7ae86a3e-3e4b-11e6-a14d-a5d476b4df7f","method":{"position":"org.apache.commons.lang3.ArrayUtils:4247","type":"CtMethodImpl","sourcecode":"private static java.lang.Object copyArrayGrow1(final java.lang.Object array, final java.lang.Class<?> newArrayComponentType) {\n    if (array == null) {\n        {\n            if (array != null) {\n                final int int = java.lang.reflect.Array.getLength(array);\n                final java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(array.getClass().getComponentType(), (arrayLength + 1));\n                java.lang.System.arraycopy(array, 0, newArray, 0, arrayLength);\n                return newArray;\n            } \n            return java.lang.reflect.Array.newInstance(newArrayComponentType, 1);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:894","type":"CtBinaryOperatorImpl","sourcecode":"lhs == null"},"failures":[423,424,99,100,101,103,104,107,262,111,112,113,114,115,117,118,425,426,427,428],"tindex":"7ae86a3f-3e4b-11e6-a14d-492b50d6ae88","method":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:825","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.EqualsBuilder append(final double[] lhs, final double[] rhs) {\n    if (lhs == null) {\n        {\n            if ((boolean) == false) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if (lhs == rhs) {\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs == null) || (rhs == null)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            if ((lhs.int) != (rhs.int)) {\n                org.apache.commons.lang3.builder.EqualsBuilder.this.setEquals(false);\n                return org.apache.commons.lang3.builder.EqualsBuilder.this;\n            } \n            for (int int = 0 ; (i < (lhs.int)) && (boolean) ; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return org.apache.commons.lang3.builder.EqualsBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:423","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"7ae86a40-3e4b-11e6-a14d-5b04f96da4a8","method":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:908","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.builder.ToStringBuilder append(final java.lang.String fieldName, final short value) {\n    if (fieldName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, fieldName, value);\n            return org.apache.commons.lang3.builder.ToStringBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:359","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(css)"},"failures":[429],"tindex":"7ae86a41-3e4b-11e6-a14d-eb89a3eb267f","method":{"position":"org.apache.commons.lang3.StringUtils:287","type":"CtMethodImpl","sourcecode":"public static boolean isNoneEmpty(java.lang.CharSequence... css) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(css)) {\n        {\n            return !(org.apache.commons.lang3.StringUtils.isAnyEmpty(css));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"css":"css"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:423","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[],"tindex":"7ae86a42-3e4b-11e6-a14d-2724c5dfd711","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1028","type":"CtMethodImpl","sourcecode":"public void append(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int[] array, final java.lang.Boolean fullDetail) {\n    if (fieldName == null) {\n        {\n            appendFieldStart(buffer, fieldName);\n            if (array == null) {\n                appendNullText(buffer, fieldName);\n            } else if (isFullDetail(fullDetail)) {\n                appendDetail(buffer, fieldName, array);\n            } else {\n                appendSummary(buffer, fieldName, array);\n            }\n            appendFieldEnd(buffer, fieldName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:2335","type":"CtBinaryOperatorImpl","sourcecode":"separator == null"},"failures":[],"tindex":"7ae89153-3e4b-11e6-a14d-0fc942e9db8d","method":{"position":"org.apache.commons.lang3.text.StrBuilder:1131","type":"CtMethodImpl","sourcecode":"public org.apache.commons.lang3.text.StrBuilder appendWithSeparators(final java.lang.Object[] array, final java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (array == null) {\n                {\n                    if ((array != null) && ((array.int) > 0)) {\n                        @java.lang.SuppressWarnings(value = \"deprecation\")\n                        final java.lang.String java.lang.String = org.apache.commons.lang3.ObjectUtils.toString(separator);\n                        append(array[0]);\n                        for (int int = 1 ; i < (array.int) ; i++) {\n                            append(sep);\n                            append(array[i]);\n                        }\n                    } \n                    return org.apache.commons.lang3.text.StrBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"separator":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5299","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[430],"tindex":"7ae89154-3e4b-11e6-a14d-7376dd70ff3c","method":{"position":"org.apache.commons.lang3.math.NumberUtils:671","type":"CtMethodImpl","sourcecode":"public static java.lang.Double createDouble(final java.lang.String str) {\n    if (str == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (str == null) {\n                return null;\n            } \n            return java.lang.Double.valueOf(str);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.StringUtils:5637","type":"CtBinaryOperatorImpl","sourcecode":"str == null"},"failures":[366,368],"tindex":"7ae89155-3e4b-11e6-a14d-6d57fa7024ee","method":{"position":"org.apache.commons.lang3.CharSetUtils:205","type":"CtMethodImpl","sourcecode":"public static java.lang.String delete(final java.lang.String str, final java.lang.String... set) {\n    if (str == null) {\n        {\n            if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.CharSetUtils.deepEmpty(set))) {\n                return str;\n            } \n            return org.apache.commons.lang3.CharSetUtils.modify(str, set, false);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"str":"str"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.time.FastDateParser:282","type":"CtBinaryOperatorImpl","sourcecode":"date == null"},"failures":[],"tindex":"7ae89156-3e4b-11e6-a14d-cb26d25b854a","method":{"position":"org.apache.commons.lang3.time.DateUtils:538","type":"CtMethodImpl","sourcecode":"public static java.util.Date setYears(final java.util.Date date, final int amount) {\n    if (date == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.time.DateUtils.set(date, java.util.Calendar.java.util.Calendar.int, amount);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"date":"date"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:486","type":"CtBinaryOperatorImpl","sourcecode":"lhs instanceof boolean[]"},"failures":[],"tindex":"7ae89157-3e4b-11e6-a14d-23895d2df775","method":{"position":"org.apache.commons.lang3.builder.CompareToBuilder:134","type":"CtMethodImpl","sourcecode":"public static int reflectionCompare(final java.lang.Object lhs, final java.lang.Object rhs) {\n    if (lhs instanceof boolean[]) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(lhs, rhs, false, null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lhs":"lhs"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.builder.DiffBuilder:675","type":"CtBinaryOperatorImpl","sourcecode":"fieldName == null"},"failures":[431,431,432,433,434,435,68,68,436,437,438,439,440,441,442],"tindex":"7ae89158-3e4b-11e6-a14d-c919881ab5d2","method":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1553","type":"CtMethodImpl","sourcecode":"protected void appendSummarySize(final java.lang.StringBuffer buffer, final java.lang.String fieldName, final int size) {\n    if (fieldName == null) {\n        {\n            buffer.append(java.lang.String);\n            buffer.append(size);\n            buffer.append(java.lang.String);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"fieldName":"fieldName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:403","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[443,444],"tindex":"7ae89159-3e4b-11e6-a14d-0b91ad59088b","method":{"position":"org.apache.commons.lang3.math.NumberUtils:857","type":"CtMethodImpl","sourcecode":"public static byte min(final byte[] array) {\n    if (array == null) {\n        {\n            org.apache.commons.lang3.math.NumberUtils.validateArray(array);\n            byte byte = array[0];\n            for (int int = 1 ; i < (array.int) ; i++) {\n                if ((array[i]) < min) {\n                    min = array[i];\n                } \n            }\n            return min;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"org.apache.commons.lang3.ArrayUtils:2914","type":"CtInvocationImpl","sourcecode":"org.apache.commons.lang3.ArrayUtils.isEmpty(array)"},"failures":[445,446,447,448],"tindex":"7ae8b86a-3e4b-11e6-a14d-b33726271ccd","method":{"position":"org.apache.commons.lang3.BooleanUtils:1040","type":"CtMethodImpl","sourcecode":"public static boolean xor(final boolean... array) {\n    if (org.apache.commons.lang3.ArrayUtils.isEmpty(array)) {\n        {\n            if (array == null) {\n                throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n            } \n            if ((array.int) == 0) {\n                throw new java.lang.IllegalArgumentException(\"Array is empty\");\n            } \n            boolean boolean = false;\n            for (final boolean boolean : array) {\n                result ^= element;\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236661798/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"org.apache.commons","transformationCount":100,"projectType":"maven","artifactId":"commons-lang3","generatorVersion":"1.0","version":"3.3.2"}}
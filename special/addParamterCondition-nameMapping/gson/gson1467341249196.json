{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":383,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":392,"com.google.gson.functional.StringTest.testStringValueDeserialization":390,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":641,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":152,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":545,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":659,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":249,"com.google.gson.stream.JsonWriterTest.testRepeatedName":638,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":60,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":380,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":460,"com.google.gson.MixedStreamTest.testWriteLenient":605,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":614,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":554,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":190,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":422,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":340,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":439,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":297,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":34,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":55,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":572,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":258,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":682,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":485,"com.google.gson.functional.ObjectTest.testSingletonLists":338,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":546,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":242,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":393,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":635,"com.google.gson.stream.JsonWriterTest.testStrings":643,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":595,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":415,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":563,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":358,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":18,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":300,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":475,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":651,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":406,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":153,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":216,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":289,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":674,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":134,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":23,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":234,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":105,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":133,"com.google.gson.functional.EnumTest.testEnumCaseMapping":54,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":15,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":391,"com.google.gson.functional.JsonTreeTest.testToJsonTree":111,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":233,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":566,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":170,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":683,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":211,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":648,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":82,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":538,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":488,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":669,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":432,"com.google.gson.functional.ObjectTest.testNullDeserialization":370,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":448,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":403,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":677,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":352,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":250,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":359,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":670,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":103,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":579,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":367,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":32,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":567,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":315,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":314,"com.google.gson.JsonParserTest.testParseString":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":562,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":294,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":649,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":273,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":520,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":9,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":78,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":371,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":544,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":126,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":286,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":461,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":689,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":535,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":503,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":616,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":581,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":148,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":295,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":467,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":287,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":72,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":366,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":31,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":40,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":346,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":699,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":67,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":144,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":254,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":658,"com.google.gson.metrics.PerformanceTest.testDummy":27,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":38,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":161,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":201,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":583,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":150,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":412,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":552,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":537,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":578,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":691,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":451,"com.google.gson.functional.CollectionTest.testSetDeserialization":438,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":573,"com.google.gson.functional.EnumTest.testEnumSet":45,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":351,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":409,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":278,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":582,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":525,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":360,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":22,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":200,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":291,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":507,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":302,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":100,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":421,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":303,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":661,"com.google.gson.functional.MapTest.testHashMapDeserialization":115,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":247,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":550,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":41,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":385,"com.google.gson.MixedStreamTest.testReadNulls":606,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":8,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":171,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":381,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":419,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":499,"com.google.gson.functional.MapTest.testSortedMap":137,"com.google.gson.functional.MapTest.testMapSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":384,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":679,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":284,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":330,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":85,"com.google.gson.functional.MapTest.testSerializeMaps":118,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":471,"com.google.gson.functional.MapTest.testComplexKeysSerialization":145,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":408,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":149,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":615,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":92,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":450,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":497,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":676,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":183,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":416,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":50,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":219,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":684,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":695,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":62,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":369,"com.google.gson.functional.MapTest.testStringKeyDeserialization":147,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":89,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":587,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":317,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":151,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":253,"com.google.gson.functional.PrettyPrintingTest.testMap":217,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":248,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":455,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":425,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":387,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":517,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":17,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":91,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":650,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":396,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":400,"com.google.gson.functional.MapTest.testMapSerializationEmpty":146,"com.google.gson.functional.CollectionTest.testQueueSerialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":532,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":685,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":279,"com.google.gson.functional.MapTest.testMapOfMapSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":270,"com.google.gson.JavaSerializationTest.testMapIsSerializable":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":540,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":435,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":281,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":633,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":673,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":596,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":619,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":394,"com.google.gson.functional.FieldNamingTest.testIdentity":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":584,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":95,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":372,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":696,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":66,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":110,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":192,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":337,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":236,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":24,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":395,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":575,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":57,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":556,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":565,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":632,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":112,"com.google.gson.functional.MapTest.testMapSubclassSerialization":117,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":313,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":43,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":210,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":411,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":268,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":457,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":473,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":602,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":328,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":516,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":414,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":199,"com.google.gson.functional.EnumTest.testEnumSubclass":48,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":290,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":19,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":356,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":235,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":574,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":296,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":586,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":178,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":238,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":59,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":274,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":58,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":159,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":28,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":81,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":675,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":280,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":350,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":65,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":272,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":558,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":339,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":114,"com.google.gson.MixedStreamTest.testWriteNulls":603,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":80,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":465,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":74,"com.google.gson.CommentsTest.testParseComments":20,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":196,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":449,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":680,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":341,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":591,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":87,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":293,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":329,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":136,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":398,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":155,"com.google.gson.MixedStreamTest.testReadInvalidState":600,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":569,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":208,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":560,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":331,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":628,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":10,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":246,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":654,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":93,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":224,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":620,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":263,"com.google.gson.JsonArrayTest.testRemove":7,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":631,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":542,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":77,"com.google.gson.functional.MapTest.testMapDeserialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":536,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":222,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":113,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":484,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":636,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":123,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":168,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":490,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":486,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":184,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":690,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":49,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":514,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":357,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":373,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":173,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":458,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":521,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":207,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":56,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":182,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":135,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":218,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":564,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":232,"com.google.gson.functional.PrimitiveTest.testShortSerialization":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":593,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":107,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":269,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":672,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":298,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":526,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":468,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":47,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":671,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":424,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":42,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":667,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":119,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":319,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":445,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":463,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":623,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":553,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":610,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":621,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":326,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":646,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":64,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":167,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":585,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":510,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":624,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":305,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":275,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":588,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":378,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":345,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":175,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":410,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":522,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":453,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":589,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":483,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":252,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":656,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":529,"com.google.gson.stream.JsonWriterTest.testNullStringValue":625,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":548,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":164,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":426,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":306,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":277,"com.google.gson.JsonArrayTest.testSet":627,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":323,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":156,"com.google.gson.JsonPrimitiveTest.testEquals":698,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":46,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":489,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":389,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":332,"com.google.gson.functional.MapTest.testGeneralMapField":141,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":343,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":325,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":86,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":454,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":555,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":11,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":187,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":243,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":301,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":3,"com.google.gson.MixedStreamTest.testReadMixedStreamed":609,"com.google.gson.JsonObjectTest.testDeepCopy":686,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":127,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":523,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":25,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":440,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":501,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":36,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":282,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":106,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":541,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":128,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":215,"com.google.gson.JsonArrayTest.testDeepCopy":693,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":592,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":231,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":478,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":637,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":539,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":662,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":466,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":697,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":96,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":509,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":496,"com.google.gson.functional.ObjectTest.testNestedDeserialization":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":598,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":154,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":364,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":386,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":158,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":104,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":322,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":226,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":61,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":129,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":397,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":198,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":309,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":174,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":194,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":464,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":443,"com.google.gson.functional.ObjectTest.testNullSerialization":353,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":177,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":214,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":120,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":140,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":237,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":83,"com.google.gson.functional.MapTest.testInterfaceTypeMap":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":456,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":163,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":688,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":240,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":51,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":645,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":459,"com.google.gson.MixedStreamTest.testReadClosed":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":511,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":102,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":256,"com.google.gson.MixedStreamTest.testWriteClosed":608,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":388,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":431,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":166,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":568,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":660,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":204,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":162,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":225,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":561,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":169,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":347,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":430,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":479,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":285,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":481,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":179,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":436,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":678,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":549,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":97,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":327,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":630,"com.google.gson.JsonParserTest.testParseInvalidJson":694,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":261,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":519,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":68,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":452,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":228,"com.google.gson.functional.CollectionTest.testQueueDeserialization":446,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":655,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":267,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":283,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":402,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":382,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":559,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":125,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":368,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":642,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":531,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":377,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":423,"com.google.gson.functional.MapTest.testRawMapSerialization":143,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":599,"com.google.gson.JsonParserTest.testParseReader":665,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":547,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":647,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":172,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":362,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":335,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":495,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":611,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":73,"com.google.gson.functional.PrimitiveTest.testByteSerialization":308,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":413,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":613,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":5,"com.google.gson.ObjectTypeAdapterTest.testSerialize":629,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":251,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":191,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":84,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":469,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":205,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":399,"com.google.gson.functional.MapTest.testMapWithQuotes":130,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":518,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":401,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":580,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":500,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":692,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":597,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":634,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":515,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":571,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":487,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":195,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":375,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":223,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":292,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":528,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":12,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":193,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":530,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":304,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":420,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":437,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":14,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":197,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":176,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":98,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":482,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":657,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":44,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":418,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":209,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":241,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":663,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":594,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":652,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":361,"com.google.gson.functional.ObjectTest.testNestedSerialization":363,"com.google.gson.internal.LinkedTreeMapTest.testClear":668,"com.google.gson.JsonObjectTest.testAddingStringProperties":687,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":157,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":186,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":255,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":405,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":230,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":142,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":333,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":212,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":26,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":607,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":644,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":94,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":354,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":165,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":533,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":16,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":30,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":257,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":513,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":476,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":653,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":404,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":79,"com.google.gson.functional.CollectionTest.testSetSerialization":442,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":577,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":220,"com.google.gson.functional.StringTest.testStringValueSerialization":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":590,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":336,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":63,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":427,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":626,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":70,"com.google.gson.MixedStreamTest.testWriteInvalidState":604,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":348,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":260,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":88,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":266,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":524,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":4,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":470,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":447,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":681,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":99,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":101,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":617,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":551,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":6,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":122,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":640,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":75,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":504},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[0,1,2],"tindex":"26c04f1e-3f36-11e6-a932-c795102e08db","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c0eb5f-3f36-11e6-a932-f11d23c8c2f1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[3,4],"tindex":"26c11270-3f36-11e6-a932-37ada8f4b918","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[5,6],"tindex":"26c11271-3f36-11e6-a932-eb8aeb6755b5","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c13982-3f36-11e6-a932-8177faeafcee","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"26c13983-3f36-11e6-a932-6f3012c33324","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element instanceof com.google.gson.JsonArray) {\n                                {\n                                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14],"tindex":"26c16094-3f36-11e6-a932-bfe2c9f67a46","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c16095-3f36-11e6-a932-d5c8cb091bd0","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,5,6,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,11,511,512,513,514,515,516,517,518,519,12,520,13,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,14,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610],"tindex":"26c187a6-3f36-11e6-a932-7bf70986db01","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return in.nextDouble();\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[611,612,613,614,615,616,617,618,619,620,621,622,623,624,108,109,110,111,138,141,152,153,158,159,160,164,165,170,190,191,192,193,194,197,228,229,383,499,502,503],"tindex":"26c1d5c7-3f36-11e6-a932-0f39e7ecc262","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[625,626,79,90,125,138,140,152,161,163,169,432,483,486,489,490,495,497,526,557],"tindex":"26c1fcd8-3f36-11e6-a932-47115f6e515b","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            writeDeferredName();\n                            beforeValue(false);\n                            string(value);\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c1fcd9-3f36-11e6-a932-bb8b5f69a38b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[111,159,164,165,170,190,191,192,193,194,197,228,229,383,575],"tindex":"26c223ea-3f36-11e6-a932-8f630f71e541","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"26c223eb-3f36-11e6-a932-0953fd67ce81","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return in.nextDouble();\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[627],"tindex":"26c24afc-3f36-11e6-a932-2fa5d1094310","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c24afd-3f36-11e6-a932-f191f7180bc9","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c24afe-3f36-11e6-a932-ff9912c9b5fc","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[15,16,17,18,19,21,22,23,24,25,611,612,628,629,31,42,43,44,47,48,51,52,53,54,630,626,631,632,633,56,57,58,59,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,97,98,99,100,101,102,103,104,105,106,107,109,113,114,116,117,118,123,125,126,128,131,133,134,138,140,141,145,147,148,152,153,154,158,159,160,161,163,164,165,167,168,169,170,634,172,181,182,185,186,187,188,189,190,191,192,193,194,195,197,198,199,200,202,204,205,206,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,226,227,228,229,230,231,237,242,244,246,254,255,263,264,266,267,270,273,281,292,294,295,298,306,309,312,313,317,318,319,323,324,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,347,354,356,358,360,362,363,367,371,372,375,379,383,392,394,398,399,412,413,415,419,422,423,424,425,430,431,433,436,437,439,442,445,447,448,449,450,452,453,454,455,456,458,460,465,466,467,468,469,470,471,472,474,475,476,478,481,483,485,486,487,488,489,490,493,497,499,501,502,503,505,506,507,11,518,12,13,523,526,542,544,549,550,552,553,554,555,14,559,560,564,566,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,602,609,610],"tindex":"26c2720f-3f36-11e6-a932-196e7b8f74d0","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c27210-3f36-11e6-a932-7b526b98323c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[21,22,23,24,25,97,100,101,102,103,105,113,152,190,191,192,193,194,197,209,212,213,329,330,331,332,333,334,335,445,454,456,487,488,493,564,575,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,598],"tindex":"26c29921-3f36-11e6-a932-91d6cdb97eec","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c29922-3f36-11e6-a932-a397b6f33f66","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c2c033-3f36-11e6-a932-5d08e2a0ee80","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c2c034-3f36-11e6-a932-d3b5ee89e9b2","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c2c035-3f36-11e6-a932-611cc3550618","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.WildcardType) {\n        {\n            if (a instanceof java.lang.reflect.WildcardType) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[195,199,200,205,206,483,489,490,497],"tindex":"26c2c036-3f36-11e6-a932-734086c3ff26","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c2e747-3f36-11e6-a932-07373c4b7aac","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.WildcardType) {\n        {\n            if (a instanceof java.lang.reflect.WildcardType) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[15,17,22,25,26,629,635,28,29,31,621,622,624,32,33,636,625,637,638,639,640,641,642,643,644,34,37,39,40,42,43,44,45,46,47,48,51,53,54,55,630,626,631,632,633,56,59,60,62,66,67,68,69,73,74,78,79,84,86,90,95,96,98,100,101,102,103,104,105,106,107,109,117,118,121,123,125,130,131,132,136,138,140,141,142,143,145,148,151,152,153,154,156,157,161,162,163,168,169,634,171,172,173,175,176,177,180,182,185,186,187,188,189,195,197,198,199,200,201,202,204,205,206,208,211,212,215,217,218,219,223,224,225,226,227,230,231,243,246,261,303,645,646,647,648,649,650,651,331,333,336,5,6,337,338,341,344,347,351,354,360,362,363,366,371,373,374,376,381,384,387,391,392,393,394,395,398,400,404,407,410,413,415,421,422,423,424,429,431,432,433,436,439,440,442,445,447,448,449,450,452,453,454,455,456,457,458,468,469,470,471,472,474,477,478,481,483,486,489,490,492,493,494,497,499,502,503,510,11,511,517,518,12,13,521,524,528,530,531,532,534,536,537,539,541,542,543,546,549,552,554,555,14,558,559,560,561,564,567,569,571,572,573,574,578,579,580,582,586,587,588,590,591,592,594,598,599,602,607],"tindex":"26c2e748-3f36-11e6-a932-f5ae6670bc19","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[474,475,476,477,478,479,480,481],"tindex":"26c30e59-3f36-11e6-a932-a9d8d94b9465","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c30e5a-3f36-11e6-a932-a7494040bb96","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[15,16,22,611,629,635,28,29,31,37,39,40,42,43,44,45,46,47,48,51,53,630,626,631,632,633,56,59,60,62,66,67,68,69,71,73,74,75,78,79,80,84,86,88,90,92,95,96,98,108,109,110,111,117,118,121,123,125,130,131,132,135,136,138,139,140,141,142,143,145,148,151,152,153,156,157,158,159,160,161,162,163,164,165,168,169,170,634,171,172,173,175,176,177,180,182,185,186,187,188,189,190,191,193,194,195,198,199,200,201,202,204,205,206,208,211,212,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,255,264,298,312,319,324,652,645,646,647,653,648,649,650,651,331,333,336,337,338,341,344,347,351,354,360,362,363,366,371,373,374,376,381,383,384,387,398,415,421,422,423,424,425,429,430,431,432,433,436,439,440,442,443,447,448,449,450,452,457,468,469,470,471,472,474,477,478,481,483,486,489,490,492,494,497,499,502,503,12,532,541,552,555,557,561,569,570,571,572,573,574,578,579,580,582,586,588,590,591,598,599,602,605,607],"tindex":"26c3356b-3f36-11e6-a932-215564153ef1","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.WildcardType) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[654,655,656,657,658,659,660,661,662,663],"tindex":"26c3356c-3f36-11e6-a932-fb5e51b5ffc2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[281,294,295,309,317,323,605],"tindex":"26c3838d-3f36-11e6-a932-3172b99d1118","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[15,16,17,18,19,22,23,24,25,26,611,612,613,28,29,31,615,32,33,34,37,39,40,41,42,43,44,45,46,47,48,51,53,54,55,630,626,631,632,633,56,59,60,62,64,66,67,68,69,71,72,73,74,75,78,80,84,86,88,90,92,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,113,117,118,121,123,130,131,132,135,136,138,139,140,141,143,145,146,148,151,152,153,154,156,157,158,159,160,161,162,163,164,165,168,169,170,634,171,172,173,174,175,176,177,180,182,185,186,187,188,189,190,191,192,193,194,195,197,198,199,200,201,202,204,205,206,208,211,212,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,235,237,243,246,254,255,261,263,264,267,270,272,273,276,277,281,290,292,294,295,298,301,303,307,308,309,310,311,312,313,317,319,323,324,326,645,331,333,336,6,337,338,341,344,347,351,353,354,357,359,360,362,363,364,366,371,373,374,376,382,384,391,392,393,394,395,398,400,404,407,410,413,415,416,421,422,423,424,425,429,430,431,432,433,436,439,440,442,443,445,447,448,449,450,452,453,454,455,456,457,458,459,468,469,470,471,472,473,474,477,478,481,486,488,497,499,502,503,510,11,511,515,517,518,12,13,521,524,526,528,529,530,531,532,534,536,537,539,541,542,543,544,546,549,551,552,554,555,557,14,558,559,560,561,564,565,567,569,570,571,572,573,574,575,576,578,579,580,582,586,587,588,590,591,592,594,596,597,598,599,602,603,604,605,607,608],"tindex":"26c3838e-3f36-11e6-a932-5f2763840ee4","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[664,611,3,4,665,666,31,667,668,669,670,671,672,673,674,675,676,677,678,679,621,622,624,680,32,681,682,683,684,685,686,687,33,688,43,44,97,108,109,110,111,116,119,120,122,124,128,133,144,147,149,152,153,158,159,160,164,165,170,634,190,191,193,194,197,209,228,229,689,690,329,330,331,332,333,334,335,5,6,383,389,415,444,460,461,462,463,464,465,487,493,499,502,503,512,524,575,583,584,586,587,588,594],"tindex":"26c3aa9f-3f36-11e6-a932-2ff84920550d","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c3d1b0-3f36-11e6-a932-ad4a67d580ee","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element instanceof com.google.gson.JsonArray) {\n                                {\n                                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c3f8c1-3f36-11e6-a932-218f45875883","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"26c3f8c2-3f36-11e6-a932-6fe734e3c61a","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c3f8c3-3f36-11e6-a932-bbdd41af38bc","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[495,526,565],"tindex":"26c41fd4-3f36-11e6-a932-a56f173c332a","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c41fd5-3f36-11e6-a932-edc952e85d8e","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl"},"failures":[654],"tindex":"26c41fd6-3f36-11e6-a932-a7b52964928c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c446e7-3f36-11e6-a932-2d2b3b2c7120","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element instanceof com.google.gson.JsonArray) {\n                                {\n                                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"26c46df8-3f36-11e6-a932-2bfb12686110","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[526],"tindex":"26c46df9-3f36-11e6-a932-d3081f0bc362","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c46dfa-3f36-11e6-a932-7bd38b4a1b1c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c46dfb-3f36-11e6-a932-4718b5b64791","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            writeDeferredName();\n                            beforeValue(false);\n                            string(value);\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4950c-3f36-11e6-a932-7b2022a837b8","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4950d-3f36-11e6-a932-69fb7d9adb62","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4bc1e-3f36-11e6-a932-5331c7e4c452","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4bc1f-3f36-11e6-a932-4176c3d396fd","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4bc20-3f36-11e6-a932-cf17618bb2ed","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4bc21-3f36-11e6-a932-6f799384beec","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            writeDeferredName();\n                            beforeValue(false);\n                            string(value);\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c4e332-3f36-11e6-a932-299aee6ce57c","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[691,692,683,512],"tindex":"26c4e333-3f36-11e6-a932-d72071908105","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[693,694,678,695,696,623],"tindex":"26c4e334-3f36-11e6-a932-b78aec842235","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[103,106],"tindex":"26c4e335-3f36-11e6-a932-5b5f537d88b7","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[654],"tindex":"26c50a46-3f36-11e6-a932-4d8197bf8759","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[60,66,135,142,195,200,205,206,526],"tindex":"26c53157-3f36-11e6-a932-0f36428ef0a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c53158-3f36-11e6-a932-29749cb59e2a","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[697,698,699,108,111,566],"tindex":"26c53159-3f36-11e6-a932-6df6c896a024","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"26c5315a-3f36-11e6-a932-2d710cf97b0a","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c5586b-3f36-11e6-a932-99a1cf3b9d08","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c5586c-3f36-11e6-a932-c5b39e8e1647","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c57f7d-3f36-11e6-a932-8722d3145e26","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"26c57f7e-3f36-11e6-a932-f7b7b31747cc","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return in.nextDouble();\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c5a68f-3f36-11e6-a932-3579feffde6f","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c5a690-3f36-11e6-a932-d3b33b2c81df","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"26c5a691-3f36-11e6-a932-659deea3bb69","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element instanceof com.google.gson.JsonArray) {\n                                {\n                                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339731066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":68,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
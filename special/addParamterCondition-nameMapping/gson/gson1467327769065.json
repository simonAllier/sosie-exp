{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":112,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":435,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":58,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":33,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":109,"com.google.gson.MixedStreamTest.testWriteLenient":193,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":322,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":482,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":69,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":249,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":229,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":453,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":24,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":335,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":493,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":289,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":75,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":258,"com.google.gson.functional.ObjectTest.testSingletonLists":227,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":479,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":189,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":248,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":172,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":237,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":14,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":131,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":59,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":80,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":279,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":18,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":48,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":307,"com.google.gson.functional.EnumTest.testEnumCaseMapping":334,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":11,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":434,"com.google.gson.functional.JsonTreeTest.testToJsonTree":300,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":85,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":316,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":468,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":500,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":143,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":274,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":252,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":282,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":235,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":295,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":410,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":108,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":275,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":46,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":498,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":240,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":288,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":489,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":211,"com.google.gson.JsonParserTest.testParseString":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":171,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":93,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":401,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":346,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":478,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":256,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":225,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":377,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":157,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":175,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":368,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":94,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":342,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":429,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":30,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":195,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":233,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":40,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":308,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":394,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":28,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":372,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":382,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":177,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":481,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":476,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":497,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":254,"com.google.gson.functional.CollectionTest.testSetDeserialization":251,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":494,"com.google.gson.functional.EnumTest.testEnumSet":329,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":422,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":383,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":176,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":356,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":425,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":17,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":381,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":161,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":43,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":95,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":31,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":114,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":62,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":110,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":153,"com.google.gson.functional.MapTest.testMapSerialization":360,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":113,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":284,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":100,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":8,"com.google.gson.functional.MapTest.testSerializeMaps":53,"com.google.gson.functional.MapTest.testComplexKeysSerialization":366,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":310,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":352,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":253,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":151,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":281,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":5,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":83,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":291,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":35,"com.google.gson.functional.MapTest.testStringKeyDeserialization":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":181,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":97,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":369,"com.google.gson.functional.PrettyPrintingTest.testMap":81,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":125,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":446,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":116,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":465,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":13,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":501,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":440,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":292,"com.google.gson.functional.MapTest.testMapSerializationEmpty":367,"com.google.gson.functional.CollectionTest.testQueueSerialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":473,"com.google.gson.functional.MapTest.testMapOfMapSerialization":359,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":399,"com.google.gson.JavaSerializationTest.testMapIsSerializable":266,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":92,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":203,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":190,"com.google.gson.functional.FieldNamingTest.testIdentity":128,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":437,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":178,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":206,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":242,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":71,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":299,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":418,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":19,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":173,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":438,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":204,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":402,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":22,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":474,"com.google.gson.functional.MapTest.testMapSubclassSerialization":355,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":413,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":197,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":219,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":458,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":323,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":247,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":215,"com.google.gson.functional.EnumTest.testEnumSubclass":331,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":404,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":15,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":236,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":390,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":495,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":180,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":3,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":338,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":205,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":312,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":21,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":280,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":38,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":486,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":228,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":52,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":347,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":325,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":344,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":123,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":214,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":185,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":259,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":419,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":389,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":99,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":362,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":439,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":61,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":490,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":170,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":412,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":101,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":393,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":386,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":499,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":396,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":165,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":408,"com.google.gson.functional.MapTest.testMapDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":475,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":86,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":51,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":140,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":357,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":375,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":145,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":141,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":319,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":298,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":424,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":431,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":0,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":459,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":469,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":66,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":337,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":82,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":488,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":187,"com.google.gson.functional.PrimitiveTest.testShortSerialization":411,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":147,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":50,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":277,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":406,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":127,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":32,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":276,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":250,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":196,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":272,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":302,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":121,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":414,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":257,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":168,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":10,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":264,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":416,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":179,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":208,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":432,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":130,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":461,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":220,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":182,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":245,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":232,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":333,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":1,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":443,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":451,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":183,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":139,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":166,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":470,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":148,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":314,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":403,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":98,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":370,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":144,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":330,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":118,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":102,"com.google.gson.functional.MapTest.testGeneralMapField":56,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":231,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":341,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":124,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":349,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":483,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":363,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":379,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":462,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":407,"com.google.gson.MixedStreamTest.testReadMixedStreamed":263,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":268,"com.google.gson.JsonObjectTest.testDeepCopy":293,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":397,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":20,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":155,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":454,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":26,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":49,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":477,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":306,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":385,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":186,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":415,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":89,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":164,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":223,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":353,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":192,"com.google.gson.functional.ObjectTest.testNestedDeserialization":246,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":60,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":115,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":47,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":388,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":34,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":380,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":96,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":63,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":73,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":324,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":456,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":64,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":303,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":364,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":391,"com.google.gson.functional.MapTest.testInterfaceTypeMap":55,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":126,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":374,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":221,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":65,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":463,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":45,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":117,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":449,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":207,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":420,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":216,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":373,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":318,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":387,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":433,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":487,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":376,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":421,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":448,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":135,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":222,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":137,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":4,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":452,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":167,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":42,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":200,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":91,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":297,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":255,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":339,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":317,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":111,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":226,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":169,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":54,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":472,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":212,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":244,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":445,"com.google.gson.functional.MapTest.testRawMapSerialization":365,"com.google.gson.JsonParserTest.testParseReader":270,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":210,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":426,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":105,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":149,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":267,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":343,"com.google.gson.functional.PrimitiveTest.testByteSerialization":409,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":444,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":106,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":68,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":70,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":348,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":6,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":16,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":217,"com.google.gson.functional.MapTest.testMapWithQuotes":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":174,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":154,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":191,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":464,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":492,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":142,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":213,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":243,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":163,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":405,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":234,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":467,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":72,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":471,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":120,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":74,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":485,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":2,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":354,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":138,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":198,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":77,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":188,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":502,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":238,"com.google.gson.internal.LinkedTreeMapTest.testClear":273,"com.google.gson.JsonObjectTest.testAddingStringProperties":294,"com.google.gson.functional.ObjectTest.testNestedSerialization":427,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":371,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":378,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":395,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":88,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":57,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":103,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":78,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":194,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":328,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":423,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":315,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":261,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":12,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":23,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":260,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":132,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":441,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":41,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":262,"com.google.gson.functional.CollectionTest.testSetSerialization":455,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":184,"com.google.gson.functional.StringTest.testStringValueSerialization":442,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":417,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":36,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":336,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":107,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":350,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":327,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":7,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":269,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":122,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":9,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":44,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":224,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":480,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":320,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":304,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":158,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":345},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"c3f6f254-3f16-11e6-8342-1f9b23cf558f","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[9,10],"tindex":"c3f78e95-3f16-11e6-8342-07807c26bbed","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,0,63,1,2,64,3,4,65,66,5,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,6,7,8,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194],"tindex":"c3f7b5a6-3f16-11e6-8342-37b34d48aabf","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[195,25,26,28,196,197,198,199,200,201,202,203,204,205,36,38,206,59,207,208,209,210,3,4,65,5,67,68,211,212,213,214,215,75,216,217,218,76,219,79,89,220,221,222,223,224,225,226,100,101,102,105,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,109,112,115,117,118,247,248,249,250,251,122,252,123,253,254,255,256,257,131,132,135,136,140,258,259,152,155,156,157,159,160,161,260,261,262,175,179,263,264],"tindex":"c3f7dcb7-3f16-11e6-8342-65d9fdd7c830","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[265],"tindex":"c3f803c8-3f16-11e6-8342-fd0333cd289a","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f803c9-3f16-11e6-8342-733f896d1e5a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f82ada-3f16-11e6-8342-0d89abab3d0e","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[111,115,116,117],"tindex":"c3f851eb-3f16-11e6-8342-9ddb42c6a203","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[46,49],"tindex":"c3f851ec-3f16-11e6-8342-d13e23554d05","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f878fd-3f16-11e6-8342-1f41320392c3","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[266,267,268,269,270,271,195,272,273,274,275,276,277,278,279,280,281,282,283,284,10,285,286,287,288,265,289,290,291,292,293,294,295,296,197,198,42,297,298,299,300,301,302,303,304,305,306,307,308,309,310,58,59,311,312,313,314,315,316,209,69,70,72,73,74,77,317,318,225,319,99,100,101,102,103,104,105,106,320,112,118,248,321,322,256,323,257,324,325,142,147,153,156,157,326,327,173,177,178,180,181,182,188],"tindex":"c3f8a00e-3f16-11e6-8342-0352b813514d","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"c3f8ee2f-3f16-11e6-8342-910761dc3672","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f8ee30-3f16-11e6-8342-a738ab6f111c","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f91541-3f16-11e6-8342-1bfb49dee90b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[11,12,13,14,15,17,18,19,20,328,21,22,195,24,27,29,30,31,196,197,198,329,330,32,331,332,333,334,335,200,336,201,202,203,337,338,33,35,37,39,40,339,340,341,342,343,344,345,346,41,347,348,349,350,351,352,206,353,354,43,44,45,46,47,48,49,50,298,51,355,53,356,357,54,358,359,360,361,362,55,363,364,56,57,365,366,367,368,369,58,59,60,370,371,372,373,374,375,376,209,62,210,0,63,1,2,64,377,66,68,378,379,211,212,213,74,380,215,381,382,383,216,217,218,384,78,385,80,81,82,83,84,85,86,87,386,387,388,389,88,89,390,391,392,393,394,395,91,396,397,398,399,400,401,402,403,92,404,405,93,94,406,407,95,408,409,96,410,411,412,413,97,414,98,415,416,221,101,103,417,418,227,419,420,421,422,423,424,108,425,426,427,428,429,430,431,432,433,110,111,113,116,434,435,436,437,438,439,440,441,442,443,444,248,249,445,250,446,447,448,449,450,451,452,453,454,455,456,121,122,252,123,253,255,457,124,125,126,458,459,460,127,6,7,8,128,129,130,133,134,137,139,141,143,144,145,146,147,148,151,153,156,157,461,462,463,464,465,466,467,468,469,327,163,470,471,472,473,474,475,476,164,477,165,166,478,479,167,480,481,482,483,484,485,486,169,170,487,488,489,490,491,492,493,494,495,173,496,497,498,174,176,180,181,182,184,185,186,188,190,191,192],"tindex":"c3f93c52-3f16-11e6-8342-a9a641df2c39","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[267,499,297,298,300,55,56,58,59,311,312,313,314,315,316,69,70,72,73,74,317,112,157],"tindex":"c3f96363-3f16-11e6-8342-ad4869ebe1d5","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f96364-3f16-11e6-8342-dfa6abe35cbf","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c3f98a75-3f16-11e6-8342-099b44edf929","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[269,195,272,273,274,277,280,281,291,297,298,299,300,59,112,118,248,321,323,257],"tindex":"c3f9d896-3f16-11e6-8342-99880982293a","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3f9ffa7-3f16-11e6-8342-0fb7bcb98aec","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fa26b8-3f16-11e6-8342-13f235f99465","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[267,270,271,195,282,283,284,10,285,287,288,265,289,290,291,292,293,294,295,42,297,298,299,300,310,58,59,311,312,313,314,315,316,209,69,70,72,73,74,77,317,318,225,99,100,101,102,103,104,105,106,320,112,118,248,322,256,323,257,324,142,153,156,157,326,327,173,177,180,181,182,188],"tindex":"c3fa4dc9-3f16-11e6-8342-6d4b9d4e1dc4","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c3fa74da-3f16-11e6-8342-af14721dac3f","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fa74db-3f16-11e6-8342-5f82a38741b8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fa74dc-3f16-11e6-8342-a3f288f44774","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fac2fd-3f16-11e6-8342-3f9a15e95dd7","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fac2fe-3f16-11e6-8342-cde349b20091","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[343,345,347,500,501,213,380,215,381,216,217,218,80,84,502,503,419,242],"tindex":"c3faea0f-3f16-11e6-8342-db56eedbcdef","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3faea10-3f16-11e6-8342-1bc5c00f7d8c","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c3fb1021-3f16-11e6-8342-19b45f7c9944","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fb3732-3f16-11e6-8342-b3c9b082a914","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c3fb3733-3f16-11e6-8342-8181781cca20","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326995949/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":32,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
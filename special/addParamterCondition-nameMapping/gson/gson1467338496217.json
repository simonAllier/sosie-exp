{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":50,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":241,"com.google.gson.functional.StringTest.testStringValueDeserialization":571,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":296,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":511,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":422,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":336,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":333,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":175,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":317,"com.google.gson.MixedStreamTest.testWriteLenient":360,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":119,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":19,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":223,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":27,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":233,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":458,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":554,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":585,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":272,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":429,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":655,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":343,"com.google.gson.functional.ObjectTest.testSingletonLists":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":512,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":588,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":68,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":573,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":265,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":276,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":521,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":34,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":460,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":246,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":631,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":583,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":94,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":9,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":453,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":649,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":289,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":314,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":411,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":220,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":288,"com.google.gson.functional.EnumTest.testEnumCaseMapping":174,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":310,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":572,"com.google.gson.functional.JsonTreeTest.testToJsonTree":330,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":410,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":125,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":106,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":635,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":110,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":547,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":629,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":199,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":148,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":644,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":563,"com.google.gson.functional.ObjectTest.testNullDeserialization":386,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":298,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":580,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":639,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":375,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":468,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":625,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":423,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":379,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":645,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":218,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":133,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":38,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":624,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":523,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":182,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":471,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":470,"com.google.gson.JsonParserTest.testParseString":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":520,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":630,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":78,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":493,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":39,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":114,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":437,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":285,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":450,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":555,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":652,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":503,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":319,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":251,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":295,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":82,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":178,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":451,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":383,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":307,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":370,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":402,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":71,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":342,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":618,"com.google.gson.metrics.PerformanceTest.testDummy":355,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":589,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":545,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":335,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":253,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":274,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":621,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":117,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":505,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":132,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":623,"com.google.gson.functional.CollectionTest.testSetDeserialization":565,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":273,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":365,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":374,"com.google.gson.functional.EnumTest.testEnumSet":550,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":443,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":158,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":497,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":605,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":35,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":157,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":313,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":455,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":60,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":462,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":215,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":600,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":463,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":420,"com.google.gson.functional.MapTest.testHashMapDeserialization":602,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":116,"com.google.gson.MixedStreamTest.testReadNulls":361,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":396,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":403,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":393,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":526,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":62,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":277,"com.google.gson.functional.MapTest.testSortedMap":614,"com.google.gson.functional.MapTest.testMapSerialization":611,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":395,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":641,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":52,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":448,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":202,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":239,"com.google.gson.functional.MapTest.testSerializeMaps":282,"com.google.gson.functional.MapTest.testComplexKeysSerialization":293,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":364,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":318,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":620,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":209,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":172,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":300,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":152,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":651,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":535,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":596,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":553,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":12,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":657,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":668,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":338,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":385,"com.google.gson.functional.MapTest.testStringKeyDeserialization":294,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":257,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":88,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":426,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":622,"com.google.gson.functional.PrettyPrintingTest.testMap":10,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":166,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":421,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":491,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":597,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":2,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":208,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":575,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":500,"com.google.gson.functional.CollectionTest.testQueueSerialization":562,"com.google.gson.functional.MapTest.testMapSerializationEmpty":619,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":658,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":444,"com.google.gson.functional.MapTest.testMapOfMapSerialization":287,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":77,"com.google.gson.JavaSerializationTest.testMapIsSerializable":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":508,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":230,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":79,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":306,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":648,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":266,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":322,"com.google.gson.functional.FieldNamingTest.testIdentity":240,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":254,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":43,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":40,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":21,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":24,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":61,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":329,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":413,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":315,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":129,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":574,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":212,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":516,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":498,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":522,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":601,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":87,"com.google.gson.functional.MapTest.testMapSubclassSerialization":281,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":48,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":163,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":367,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":6,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":548,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":490,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":556,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":595,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":156,"com.google.gson.functional.EnumTest.testEnumSubclass":170,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":454,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":4,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":33,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":412,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":128,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":332,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":457,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":532,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":414,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":214,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":439,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":213,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":97,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":198,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":352,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":650,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":373,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":445,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":341,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":518,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":26,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":279,"com.google.gson.MixedStreamTest.testWriteNulls":358,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":197,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":176,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":299,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":544,"com.google.gson.CommentsTest.testParseComments":627,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":654,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":538,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":138,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":456,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":51,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":243,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":613,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":480,"com.google.gson.MixedStreamTest.testReadInvalidState":356,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":546,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":123,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":0,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":53,"com.google.gson.JsonParserTest.testParseMixedArray":669,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":70,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":666,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":136,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":633,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":323,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":73,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":113,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":466,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":194,"com.google.gson.functional.MapTest.testMapDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":504,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":15,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":278,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":537,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":671,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":104,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":283,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":150,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":536,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":653,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":93,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":488,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":378,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":387,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":168,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":494,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":211,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":11,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":612,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":124,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":409,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":263,"com.google.gson.functional.PrimitiveTest.testShortSerialization":469,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":459,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":222,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":321,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":436,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":647,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":112,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":419,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":236,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":169,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":646,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":225,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":47,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":642,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":603,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":433,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":90,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":235,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":557,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":118,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":543,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":8,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":324,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":477,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":346,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":340,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":103,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":255,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":348,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":245,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":484,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":465,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":258,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":440,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":390,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":369,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":173,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":366,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":529,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":495,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":164,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":510,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":539,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":425,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":499,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":514,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":101,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":84,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":442,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":91,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":407,"com.google.gson.JsonPrimitiveTest.testEquals":672,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":149,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":551,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":400,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":54,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":30,"com.google.gson.functional.MapTest.testGeneralMapField":292,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":188,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":476,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":165,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":120,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":107,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":181,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":418,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":461,"com.google.gson.MixedStreamTest.testReadMixedStreamed":7,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":637,"com.google.gson.JsonObjectTest.testDeepCopy":659,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":111,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":608,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":63,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":316,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":566,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":587,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":446,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":221,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":509,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":286,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":135,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":280,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":262,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":18,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":434,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":507,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":177,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":483,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":564,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":542,"com.google.gson.functional.ObjectTest.testNestedDeserialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":268,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":95,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":381,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":397,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":219,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":475,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":137,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":337,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":576,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":609,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":155,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":85,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":528,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":23,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":558,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":568,"com.google.gson.functional.ObjectTest.testNullSerialization":376,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":531,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":134,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":604,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":67,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":291,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":200,"com.google.gson.functional.MapTest.testInterfaceTypeMap":290,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":167,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":100,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":661,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":416,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":171,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":345,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":142,"com.google.gson.MixedStreamTest.testReadClosed":357,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":485,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":217,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":427,"com.google.gson.MixedStreamTest.testWriteClosed":363,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":399,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":368,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":524,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":159,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":481,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":140,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":388,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":519,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":31,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":105,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":227,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":592,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":449,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":249,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":533,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":231,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":115,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":44,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":302,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":478,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":432,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":492,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":185,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":301,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":139,"com.google.gson.functional.CollectionTest.testQueueDeserialization":570,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":76,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":447,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":579,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":122,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":593,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":284,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":351,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":183,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":389,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":224,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":5,"com.google.gson.functional.MapTest.testRawMapSerialization":617,"com.google.gson.JsonParserTest.testParseReader":662,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":513,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":628,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":36,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":57,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":541,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":308,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":190,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":275,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":331,"com.google.gson.functional.PrimitiveTest.testByteSerialization":467,"com.google.gson.ObjectTypeAdapterTest.testSerialize":1,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":405,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":424,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":670,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":20,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":201,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":237,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":160,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":244,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":312,"com.google.gson.functional.MapTest.testMapWithQuotes":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":108,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":430,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":578,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":250,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":404,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":267,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":184,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":489,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":271,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":147,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":153,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":41,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":665,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":16,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":349,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":377,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":207,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":109,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":350,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":591,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":464,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":599,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":232,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":154,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":186,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":530,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":45,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":594,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":49,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":634,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":598,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":162,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":417,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":264,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":380,"com.google.gson.functional.ObjectTest.testNestedSerialization":37,"com.google.gson.internal.LinkedTreeMapTest.testClear":643,"com.google.gson.JsonObjectTest.testAddingStringProperties":660,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":408,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":72,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":180,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":582,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":17,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":616,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":55,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":126,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":362,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":626,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":32,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":391,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":89,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":102,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":501,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":311,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":354,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":428,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":487,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":247,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":581,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":196,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":131,"com.google.gson.functional.CollectionTest.testSetSerialization":234,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":260,"com.google.gson.functional.StringTest.testStringValueSerialization":584,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":66,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":303,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":339,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":560,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":187,"com.google.gson.MixedStreamTest.testWriteInvalidState":359,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":371,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":431,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":75,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":205,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":496,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":238,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":638,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":297,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":636,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":216,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":320,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":515,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":406,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":667,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":606,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":192,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":334},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316],"tindex":"bdda4565-3f2f-11e6-833c-397556eff0b8","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[317,318,319,320,321,322,323,324,325,326,327,19,20,21,22,23,50,62,64,65,328,93,329,330,94,96,97,98,101,102,106,139,140,154,290,292,296,308,309,331],"tindex":"bddc4136-3f2f-11e6-833c-4be7ac2e4320","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[329,96,97,98,101,102,106,296],"tindex":"bddc8f57-3f2f-11e6-833c-d52455f689cc","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddc8f58-3f2f-11e6-833c-c521bef7e225","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdddeee9-3f2f-11e6-833c-d14c92a865a2","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.Number) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdde15fa-3f2f-11e6-833c-b359c65c5985","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdde15fb-3f2f-11e6-833c-41b83cc808b5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdde3d0c-3f2f-11e6-833c-e7526f4f348d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdde641d-3f2f-11e6-833c-c56cbc80bbb1","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[332,2,3,4,19,20,21,22,23,333,44,51,52,53,54,55,56,57,334,58,59,60,335,336,337,338,339,340,341,61,342,113,115,118,123,124,126,127,129,147,148,151,154,343,344,162,165,166,167,345,346,347,215,216,217,218,219,220,222,235,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,268,278,279,296,297,299,312,313,314,315,316],"tindex":"bdde8b2e-3f2f-11e6-833c-ddcdc50c775b","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[129,154],"tindex":"bddeb23f-3f2f-11e6-833c-37a09aee0ad8","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[348,349,350,351,122],"tindex":"bddeb240-3f2f-11e6-833c-37bffb494363","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[352,353,354,355,2,3,4,5,356,357,6,358,359,360,361,362,363,7,8,9,10,11,12,13,14,15,16,17,18,364,365,366,367,19,20,21,22,23,24,25,26,27,28,29,30,368,369,370,31,371,372,373,374,375,376,32,377,33,378,34,379,35,380,36,37,381,382,383,38,384,385,386,39,40,387,348,41,388,389,390,42,333,391,43,392,44,45,46,47,48,49,393,394,50,395,396,397,398,399,400,51,52,53,54,55,56,57,334,58,59,60,335,336,337,338,339,340,341,61,342,401,402,403,62,404,63,64,65,66,405,406,407,408,409,410,411,412,413,67,414,415,416,417,68,418,69,419,70,420,421,422,423,424,425,426,71,72,427,428,429,430,431,432,433,73,74,434,75,76,435,436,77,437,438,78,439,440,441,442,443,444,445,79,446,447,448,449,450,451,452,453,454,455,80,456,81,82,457,458,83,459,460,461,462,463,464,465,84,466,467,85,468,469,86,87,470,471,472,88,89,90,473,474,475,91,92,476,477,478,479,328,93,329,330,94,95,480,96,97,98,99,481,100,101,102,482,103,104,105,106,483,484,107,485,486,487,488,489,490,491,108,492,109,493,110,494,495,111,496,497,112,498,349,499,350,351,500,501,502,503,504,505,506,507,508,509,113,510,114,511,512,513,514,115,116,515,117,118,119,120,516,517,121,518,122,123,519,520,521,124,522,125,523,524,126,127,128,129,130,131,132,133,134,135,136,525,137,138,139,140,526,141,527,528,529,530,531,532,533,534,142,143,535,536,144,537,145,146,147,148,149,150,538,539,151,540,541,542,152,543,153,544,154,155,156,157,545,158,343,159,160,161,344,546,162,163,547,164,165,166,167,548,168,549,550,551,169,170,552,553,171,172,173,174,554,175,555,556,557,558,176,177,178,179,180,181,182,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,559,560,561,562,227,228,563,229,564,230,231,232,565,233,566,567,234,568,569,235,570,236,237,238,239,240,571,572,241,573,242,574,575,576,243,244,577,578,579,580,581,582,583,584,585,586,587,588,589,590,245,246,247,591,248,592,593,249,594,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,595,276,596,597,598,277,599,600,601,278,279,602,280,281,282,603,604,605,606,283,607,284,285,608,286,609,610,287,611,288,289,612,613,614,290,615,291,292,616,617,618,293,619,294,295,620,621,622,296,297,298,299,300,623,301,624,625,307,310,311,626,312,313,314,315,316,627],"tindex":"bdded951-3f2f-11e6-833c-9d45a2f92754","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[112],"tindex":"bddf0062-3f2f-11e6-833c-ebd39716c3d2","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[352,353,1,5,6,11,12,16,18,19,20,22,23,24,25,28,368,31,374,32,35,36,37,383,39,387,348,388,43,392,45,47,48,49,393,50,395,398,53,55,336,338,61,342,401,402,62,64,65,66,407,408,328,93,329,330,94,96,97,98,99,481,100,101,102,104,105,106,509,517,519,126,128,130,132,133,136,525,137,138,139,140,526,141,527,529,530,531,534,143,144,149,150,539,540,152,153,155,156,157,545,158,159,160,161,546,547,548,171,179,182,183,345,346,628,629,630,631,184,203,211,214,223,225,229,233,234,236,237,238,239,240,588,245,591,248,249,256,258,260,269,271,272,273,276,600,284,290,291,292,296,297,298,299,300,301,302,303,304,305,306,307,313],"tindex":"bddf2773-3f2f-11e6-833c-9bdb007b0adb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[352,353,1,5,6,11,12,16,18,19,20,22,23,24,25,28,368,31,374,32,35,36,37,383,39,387,348,388,43,392,45,47,48,49,393,50,395,398,53,55,336,338,61,342,401,402,62,64,65,66,407,408,328,93,329,330,94,96,97,98,99,481,100,101,102,104,105,106,509,517,519,126,128,132,133,136,525,137,138,139,140,526,141,527,529,530,531,534,143,144,149,150,539,540,152,153,155,156,157,545,158,159,160,161,546,547,548,171,179,182,183,345,346,628,629,630,631,184,203,211,214,223,225,229,233,234,236,237,238,239,240,588,245,591,248,249,256,258,260,269,271,272,273,276,600,284,290,291,292,296,297,298,299,300,301,302,303,304,305,306,307,313],"tindex":"bddf4e84-3f2f-11e6-833c-6b5d36565160","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[632],"tindex":"bddf4e85-3f2f-11e6-833c-a964b63b01d6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[19,20,21,22,23,50,330,97,101,102,106,129,139,140,154],"tindex":"bddf9ca6-3f2f-11e6-833c-7f77991ef2fb","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[245,246,247,248,592,249],"tindex":"bddf9ca7-3f2f-11e6-833c-6de328b6ca3a","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[483,497,122],"tindex":"bddfc3b8-3f2f-11e6-833c-f733d77fc267","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[319,320,326,278],"tindex":"bddfc3b9-3f2f-11e6-833c-77f4201cf639","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[590,245,246,247,248,592,249,594,633,634,635],"tindex":"bddfc3ba-3f2f-11e6-833c-354471786330","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddfeacb-3f2f-11e6-833c-fd9abc3dd093","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddfeacc-3f2f-11e6-833c-27b61695ea07","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddfeacd-3f2f-11e6-833c-093400a54cfc","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[379,94,95,480,169,220,221,222,267,313],"tindex":"bddfeace-3f2f-11e6-833c-1b8c9245c5b7","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[467],"tindex":"bde011df-3f2f-11e6-833c-d528e3be718f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[636],"tindex":"bde011e0-3f2f-11e6-833c-77869b71c8d9","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[19,20,21,22,23,50,328,93,329,330,94,96,97,98,101,102,106,129,139,140,154,296,308,309,331],"tindex":"bde011e1-3f2f-11e6-833c-0dc90dedd458","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[637,638,639,640,641,324,325,327,642,643,644,645,646,647,648,649,650,651,19,20,22,23,44,48,49,50,400,51,52,53,54,55,56,57,62,64,65,405,406,328,93,329,330,94,96,97,98,101,102,106,486,496,129,139,140,147,151,154,162,175,555,556,557,558,176,652,653,184,569,253,254,256,257,258,264,276,280,603,604,606,607,286,288,618,294,620,296,654,624,636,655,656,657,658,659,660,625,661,662,663,307,308,664],"tindex":"bde038f2-3f2f-11e6-833c-7dc99051b424","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde06003-3f2f-11e6-833c-c7412fc18900","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src != null) {\n                                toJson(src, src.getClass(), writer);\n                            } else {\n                                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde08714-3f2f-11e6-833c-c91e79c3f7b6","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde08715-3f2f-11e6-833c-a5115eec6fee","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde0ae26-3f2f-11e6-833c-2f9704eea34b","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[327,5,6,358,359,360,362,363,19,20,21,22,23,371,393,50,398,405,328,93,329,330,94,96,97,98,101,102,106,129,139,140,144,146,149,150,539,151,540,541,152,154,196,599,282,284,616,296,308,309,331],"tindex":"bde0ae27-3f2f-11e6-833c-a905267e9e66","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[352,353,1,5,6,359,363,7,8,11,12,16,18,19,20,22,23,24,25,26,27,28,29,30,368,369,370,31,372,374,375,32,33,34,35,380,36,37,381,382,383,38,384,385,39,40,387,348,41,388,389,390,42,333,43,392,45,46,47,48,49,393,50,395,397,398,399,400,52,53,54,55,57,58,59,60,336,337,338,339,340,341,61,342,401,402,62,63,64,65,66,407,408,465,328,93,329,330,94,96,97,98,99,481,100,101,102,482,103,104,105,106,487,488,495,112,501,509,517,519,126,127,128,130,131,132,133,136,525,137,138,139,140,526,141,527,528,529,530,531,532,533,534,142,143,535,536,144,537,145,149,150,538,539,540,152,543,153,544,155,156,157,545,158,343,159,160,161,344,546,163,547,548,171,172,175,555,556,557,558,179,182,183,184,203,204,205,211,212,213,214,223,225,229,565,233,234,236,237,238,239,240,586,587,588,589,245,246,247,591,248,592,593,249,251,255,256,258,260,269,271,272,273,595,276,600,284,289,290,291,292,293,296,297,298,299,300,623,301,302,303,304,305,306,307,313],"tindex":"bde0d538-3f2f-11e6-833c-9525e76800d5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bde0fc49-3f2f-11e6-833c-2d32ae53d1e4","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[665,666,667,668],"tindex":"bde1235a-3f2f-11e6-833c-534098105069","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde1235b-3f2f-11e6-833c-fb5ce782af92","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[112],"tindex":"bde14a6c-3f2f-11e6-833c-71ff4daa3fc1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[639,640,641,324,325,19,20,22,23,44,50,400,51,52,53,54,55,56,57,62,64,65,405,406,328,93,329,330,94,96,97,98,101,102,106,486,496,129,139,140,147,154,162,175,555,556,557,558,652,184,253,256,257,258,264,276,620,296,654,624,636,655,656,657,658,659,660,625,662,663,307,308],"tindex":"bde14a6d-3f2f-11e6-833c-5f017ced2c9d","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde14a6e-3f2f-11e6-833c-59f3436f2883","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src != null) {\n                                toJson(src, src.getClass(), writer);\n                            } else {\n                                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[318,319,320,324,325,326,327,19,20,22,23,371,62,64,65,405,406,93,94,95,107,489,108,109,110,496,515,119,121,124,126,148,151,154,167,169,215,217,218,220,235,250,252,256,257,258,260,261,262,264,266,267,268,278,296,624,625,669,670,671,315],"tindex":"bde1717f-3f2f-11e6-833c-d171a933609e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde19890-3f2f-11e6-833c-e7f4d533de17","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde19891-3f2f-11e6-833c-f3a2b2692985","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.Number) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde19892-3f2f-11e6-833c-59338c455665","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[175,555,556,558,257,258,264],"tindex":"bde1bfa3-3f2f-11e6-833c-07d71961e2fa","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde1bfa4-3f2f-11e6-833c-93d9bfeb9700","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde1bfa5-3f2f-11e6-833c-a1091b585d12","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src != null) {\n                                toJson(src, src.getClass(), writer);\n                            } else {\n                                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[352,353,1,5,6,359,363,7,8,11,12,16,18,19,20,22,23,24,25,26,27,28,29,30,368,369,370,31,372,374,375,32,33,34,35,380,36,37,382,383,38,384,39,40,387,348,41,388,389,390,42,333,43,392,45,46,47,48,49,393,50,395,397,398,399,400,52,53,54,55,57,58,59,60,336,338,339,341,61,342,401,402,62,63,64,65,66,407,408,465,328,93,329,330,94,96,97,98,99,481,100,101,102,482,103,104,105,106,487,488,495,112,501,509,517,519,126,127,128,130,131,132,133,136,525,137,138,139,140,526,141,527,528,529,530,531,532,533,534,142,143,535,536,144,537,145,149,150,538,539,540,152,543,153,544,155,156,157,545,158,343,159,160,161,344,546,162,163,547,548,171,172,175,555,556,557,558,179,182,183,184,203,204,205,211,212,213,214,223,225,229,565,233,234,236,237,238,239,240,586,587,588,589,245,246,247,591,248,592,593,249,251,255,256,258,260,269,271,272,273,595,276,600,284,289,290,291,292,293,296,297,298,299,300,623,301,302,303,304,305,306,307,313],"tindex":"bde1e6b6-3f2f-11e6-833c-317b157fbc7a","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bde20dc7-3f2f-11e6-833c-cf6b0c274c14","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[328,330,125,672],"tindex":"bde20dc8-3f2f-11e6-833c-e1e51c01dd1d","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde20dc9-3f2f-11e6-833c-1bc31537ccd5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"bde25bea-3f2f-11e6-833c-094886e22532","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde282fb-3f2f-11e6-833c-51b7b930c360","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde282fc-3f2f-11e6-833c-ddfbf8580e4b","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bde2aa0d-3f2f-11e6-833c-0b580e35673c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bde2aa0e-3f2f-11e6-833c-05c5ab4c26c2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337330288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":58,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
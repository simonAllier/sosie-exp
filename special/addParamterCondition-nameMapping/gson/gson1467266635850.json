{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":29,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":304,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":391,"com.google.gson.functional.StringTest.testStringValueDeserialization":623,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":151,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":486,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":414,"com.google.gson.stream.JsonWriterTest.testRepeatedName":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":554,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":538,"com.google.gson.MixedStreamTest.testWriteLenient":17,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":51,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":155,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":94,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":363,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":371,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":513,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":594,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":346,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":351,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":248,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":563,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":103,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":130,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":643,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":650,"com.google.gson.functional.ObjectTest.testSingletonLists":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":266,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":352,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":305,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":549,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":402,"com.google.gson.stream.JsonWriterTest.testStrings":393,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":509,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":45,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":495,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":524,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":698,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":128,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":597,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":362,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":657,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":631,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":18,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":589,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":638,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":431,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":541,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":696,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":181,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":27,"com.google.gson.functional.EnumTest.testEnumCaseMapping":345,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":197,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":303,"com.google.gson.functional.JsonTreeTest.testToJsonTree":37,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":540,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":497,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":42,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":154,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":339,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":14,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":483,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":550,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":175,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":73,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":368,"com.google.gson.functional.ObjectTest.testNullDeserialization":532,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":278,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":69,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":629,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":520,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":192,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":605,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":555,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":525,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":126,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":108,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":150,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":180,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":383,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":529,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":191,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":274,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":610,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":609,"com.google.gson.JsonParserTest.testParseString":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":15,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":404,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":112,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":615,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":234,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":485,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":573,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":52,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":428,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":586,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":58,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":482,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":50,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":120,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":505,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":212,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":405,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":634,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":587,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":294,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":455,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":64,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":380,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":517,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":91,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":219,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":413,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":559,"com.google.gson.metrics.PerformanceTest.testDummy":419,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":664,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":225,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":336,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":669,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":46,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":436,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":499,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":261,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":666,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":382,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":119,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":504,"com.google.gson.functional.CollectionTest.testSetDeserialization":678,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":249,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":289,"com.google.gson.functional.EnumTest.testEnumSet":340,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":442,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":579,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":161,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":138,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":478,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":291,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":82,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":398,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":591,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":668,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":599,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":178,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":276,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":302,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":416,"com.google.gson.functional.MapTest.testHashMapDeserialization":426,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":552,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":673,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":489,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":438,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":683,"com.google.gson.MixedStreamTest.testReadNulls":691,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":214,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":220,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":48,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":503,"com.google.gson.functional.MapTest.testSortedMap":432,"com.google.gson.functional.MapTest.testMapSerialization":205,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":70,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":215,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":423,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":584,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":463,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":149,"com.google.gson.functional.MapTest.testSerializeMaps":199,"com.google.gson.functional.MapTest.testComplexKeysSerialization":211,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":441,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":193,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":435,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":468,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":280,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":655,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":328,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":146,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":158,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":654,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":104,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":131,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":321,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":531,"com.google.gson.functional.MapTest.testStringKeyDeserialization":28,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":140,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":163,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":407,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":213,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":558,"com.google.gson.functional.PrettyPrintingTest.testMap":319,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":553,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":670,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":252,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":501,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":16,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":400,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":467,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":309,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":624,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":258,"com.google.gson.functional.CollectionTest.testQueueSerialization":366,"com.google.gson.functional.MapTest.testMapSerializationEmpty":434,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":580,"com.google.gson.functional.MapTest.testMapOfMapSerialization":204,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":4,"com.google.gson.JavaSerializationTest.testMapIsSerializable":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":484,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":676,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":245,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":403,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":168,"com.google.gson.functional.FieldNamingTest.testIdentity":240,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":306,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":93,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":312,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":533,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":134,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":36,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":173,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":284,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":543,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":190,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":307,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":685,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":510,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":492,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":479,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":496,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":424,"com.google.gson.functional.MapTest.testMapSubclassSerialization":198,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":608,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":61,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":652,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":443,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":377,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":396,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":571,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":656,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":474,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":620,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":500,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":335,"com.google.gson.functional.EnumTest.testEnumSubclass":342,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":590,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":522,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":699,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":542,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":127,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":381,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":593,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":162,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":545,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":283,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":575,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":511,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":38,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":195,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":460,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":75,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":519,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":581,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":447,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":574,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":270,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":512,"com.google.gson.MixedStreamTest.testWriteNulls":189,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":425,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":459,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":632,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":233,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":279,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":649,"com.google.gson.CommentsTest.testParseComments":697,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":166,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":645,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":318,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":464,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":592,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":422,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":206,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":308,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":684,"com.google.gson.MixedStreamTest.testReadInvalidState":688,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":272,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":607,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":86,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":129,"com.google.gson.JsonParserTest.testParseMixedArray":113,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":300,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":409,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":469,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":139,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":315,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":122,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":3,"com.google.gson.JsonArrayTest.testRemove":118,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":264,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":603,"com.google.gson.functional.MapTest.testMapDeserialization":25,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":260,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":641,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":110,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":133,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":188,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":642,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":201,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":228,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":326,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":324,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":59,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":450,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":35,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":473,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":296,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":523,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":254,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":651,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":224,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":282,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":77,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":157,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":539,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":508,"com.google.gson.functional.PrimitiveTest.testShortSerialization":606,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":176,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":596,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":332,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":572,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":74,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":79,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":551,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":239,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":183,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":109,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":365,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":71,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":384,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":89,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":566,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":613,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":54,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":491,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":647,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":67,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":694,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":618,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":614,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":11,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":446,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":297,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":506,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":250,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":347,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":601,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":164,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":576,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":536,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":516,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":142,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":218,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":476,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":507,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":323,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":557,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":411,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":480,"com.google.gson.stream.JsonWriterTest.testNullStringValue":386,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":488,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":40,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":671,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":546,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":602,"com.google.gson.JsonArrayTest.testSet":116,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":578,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":408,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":355,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":325,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":30,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":22,"com.google.gson.functional.MapTest.testGeneralMapField":209,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":515,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":135,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":454,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":617,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":237,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":375,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":686,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":269,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":152,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":299,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":359,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":598,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":19,"com.google.gson.MixedStreamTest.testReadMixedStreamed":693,"com.google.gson.JsonObjectTest.testDeepCopy":106,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":124,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":477,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":567,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":372,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":399,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":622,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":137,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":663,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":582,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":331,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":263,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":26,"com.google.gson.JsonArrayTest.testDeepCopy":117,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":333,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":88,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":167,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":354,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":349,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":568,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":262,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":417,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":633,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":471,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":675,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":646,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":170,"com.google.gson.functional.ObjectTest.testNestedDeserialization":537,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":186,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":527,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":439,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":92,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":330,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":616,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":317,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":114,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":430,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":444,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":625,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":334,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":406,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":448,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":55,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":97,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":680,"com.google.gson.functional.ObjectTest.testNullSerialization":172,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":222,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":648,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":208,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":544,"com.google.gson.functional.MapTest.testInterfaceTypeMap":207,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":462,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":185,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":227,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":66,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":547,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":10,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":343,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":682,"com.google.gson.MixedStreamTest.testReadClosed":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":251,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":561,"com.google.gson.MixedStreamTest.testWriteClosed":692,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":367,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":440,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":287,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":498,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":415,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":337,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":226,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":57,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":298,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":273,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":229,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":288,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":674,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":659,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":585,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":350,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":145,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":370,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":125,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":267,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":98,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":241,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":619,"com.google.gson.JsonParserTest.testParseInvalidJson":115,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":301,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":475,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":281,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":56,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":410,"com.google.gson.functional.CollectionTest.testQueueDeserialization":681,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":570,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":583,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":628,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":271,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":660,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":202,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":530,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":257,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":361,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":535,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":364,"com.google.gson.functional.MapTest.testRawMapSerialization":210,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":395,"com.google.gson.JsonParserTest.testParseReader":62,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":679,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":487,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":12,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":221,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":292,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":24,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":177,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":101,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":232,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":275,"com.google.gson.functional.PrimitiveTest.testByteSerialization":604,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":31,"com.google.gson.ObjectTypeAdapterTest.testSerialize":401,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":357,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":556,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":187,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":95,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":236,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":83,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":626,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":695,"com.google.gson.functional.MapTest.testMapWithQuotes":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":253,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":564,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":627,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":160,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":621,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":169,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":111,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":247,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":644,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":81,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":534,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":322,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":255,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":521,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":238,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":153,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":256,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":600,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":159,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":677,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":156,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":182,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":143,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":314,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":412,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":661,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":100,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":502,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":99,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":548,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":418,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":47,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":526,"com.google.gson.internal.LinkedTreeMapTest.testClear":72,"com.google.gson.JsonObjectTest.testAddingStringProperties":107,"com.google.gson.functional.ObjectTest.testNestedSerialization":293,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":356,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":560,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":630,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":353,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":78,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":87,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":174,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":385,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":397,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":394,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":290,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":636,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":612,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":41,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":481,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":420,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":421,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":472,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":528,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":658,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":13,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":310,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":235,"com.google.gson.functional.CollectionTest.testSetSerialization":373,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":687,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":165,"com.google.gson.functional.StringTest.testStringValueSerialization":311,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":639,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":217,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":242,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":445,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":672,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":453,"com.google.gson.MixedStreamTest.testWriteInvalidState":690,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":171,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":565,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":465,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":569,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":44,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":20,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":148,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":277,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":85,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":637,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":121,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":329,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":490,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":32,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":427,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":390,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":456,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":665},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"6db93fc4-3e88-11e6-92da-41ce28cc184d","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6dba0315-3e88-11e6-92da-e51f51389f88","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6dba0316-3e88-11e6-92da-a9e18cbf25b1","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"6dba2a27-3e88-11e6-92da-e5852f199dd5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6dba2a28-3e88-11e6-92da-c7286356b98a","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"6dba2a29-3e88-11e6-92da-d7ba408f0df8","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[18],"tindex":"6dba513a-3e88-11e6-92da-1f86dee3d7a6","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[19,20],"tindex":"6dba513b-3e88-11e6-92da-b9145dc22b44","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,18,61,62,63,64,65,66,20,67,68,69,70,71,72,73,74,75,76],"tindex":"6dba513c-3e88-11e6-92da-6f606478b38e","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"6dba784d-3e88-11e6-92da-0db4257f4fa8","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6dba9f5e-3e88-11e6-92da-7db36e5462c9","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[77,78,0,2,79,80,81,82,83,84],"tindex":"6dba9f5f-3e88-11e6-92da-d1c2191b880c","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6dba9f60-3e88-11e6-92da-1710482672a1","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6dbac671-3e88-11e6-92da-8b4f21d961ba","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[85],"tindex":"6dbac672-3e88-11e6-92da-87ef3be770f9","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[86,22,87,88,89,90,25,26,27,91,28,29,33,36,92,38,39,40,41,42,43,46,93,50,94,95,96,97,54,98,56,57,99,59,18,61,100,62,63,101,102,85,103,65,104,105,106,107,19,20,71,73,108,109,75],"tindex":"6dbac673-3e88-11e6-92da-a1e7ed3f40f5","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[110,111,112,51,53,113,114,115,116,117,118,119,106,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],"tindex":"6dbaed84-3e88-11e6-92da-f9ef61c554c9","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"6dbb1495-3e88-11e6-92da-27e2c511c02b","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"toResolve","toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[137],"tindex":"6dbb1496-3e88-11e6-92da-a5db116461f8","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6dbb3ba7-3e88-11e6-92da-d3f241b8e71f","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[138,139,140],"tindex":"6dbb3ba8-3e88-11e6-92da-b55271d83697","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[141,142,143,144,145,146,147,148,149],"tindex":"6dbb62b9-3e88-11e6-92da-2162b6f115e5","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (separator == null) {\n                {\n                    if (separator == null) {\n                        {\n                            if (separator == null) {\n                                {\n                                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                    for (int int = 0 ; i < (name.length()) ; i++) {\n                                        char char = name.charAt(i);\n                                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                            translation.append(separator);\n                                        } \n                                        translation.append(character);\n                                    }\n                                    return translation.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"6dbb62ba-3e88-11e6-92da-5d2619abcc90","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[112,150,119],"tindex":"6dbb89cb-3e88-11e6-92da-87bffd6bc5ec","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6dbbb0dc-3e88-11e6-92da-71e9ac5f6638","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"6dbbb0dd-3e88-11e6-92da-af346be01e68","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"6dbbb0de-3e88-11e6-92da-2f126a55f964","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"6dbbb0df-3e88-11e6-92da-5998e2d87d11","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    if (element == null) {\n                        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    java.util.List<com.google.gson.JsonElement>.add(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"6dbbd7f0-3e88-11e6-92da-f30bf370a65d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"6dbbd7f1-3e88-11e6-92da-371dc3d8c766","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (separator == null) {\n                {\n                    if (separator == null) {\n                        {\n                            if (separator == null) {\n                                {\n                                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                    for (int int = 0 ; i < (name.length()) ; i++) {\n                                        char char = name.charAt(i);\n                                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                            translation.append(separator);\n                                        } \n                                        translation.append(character);\n                                    }\n                                    return translation.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[151,31,32,35,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,47,168,169,170,171,172,48,49,50,94,95,173,96,97,174,175,176,177,178,179,180,181,182,183,184,185,18,186,113,187,188,189,190,191,192,193,67,68,194],"tindex":"6dbbd7f2-3e88-11e6-92da-5775a2bf1ff3","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"6dbbd7f3-3e88-11e6-92da-6dab45519f7e","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[31,32],"tindex":"6dbbff04-3e88-11e6-92da-05f310f23329","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[195,196,197,86,87,198,199,200,201,202,203,204,205,206,207,208,209,78,210,211,212,213,151,214,215,216,217,31,32,218,0,1,2,219,220,221,141,142,143,222,223,224,33,35,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,147,148,149,240,241,242,243,244,245,246,247,248,249,250,152,251,252,253,153,154,254,44,255,256,257,258,259,260,261,262,263,264,265,266,267,268,155,269,156,270,271,272,273,157,274,275,45,276,277,278,279,280,281,160,161,162,163,164,165,166,167,47,170,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,48,49,50,303,304,305,306,307,308,309,310,311,174,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,80,176,327,328,178,329,179,180,330,181,331,332,333,81,182,334,335,82,336,8,337,83,84,338,339,340,341,183,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,10,11,12,14,15,16,362,363,364,365,366,367,368,369,370,371,372,373,184,374,375,376,185,377,378,379,380,18,186,381,382,383,384,61,100,64,188,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,191,192,401,402,67,68,194],"tindex":"6dbbff05-3e88-11e6-92da-5ffc3577a371","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6dbbff06-3e88-11e6-92da-21e821faf4fa","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6dbc2617-3e88-11e6-92da-1d7cd2b87795","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[403,404,405,406,407,408,17],"tindex":"6dbc2618-3e88-11e6-92da-37f348106d06","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"6dbc2619-3e88-11e6-92da-1fbb5febf585","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6dbc261a-3e88-11e6-92da-51aa562f7bbc","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[409,410,411,412,413,414,415,416,417,418],"tindex":"6dbc4d2b-3e88-11e6-92da-cdd95012562e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6dbc743c-3e88-11e6-92da-9d02fcf02bdb","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[419,195,196,420,197,421,422,423,86,22,87,23,24,424,110,425,426,88,198,199,89,90,200,427,201,25,202,428,429,26,430,203,204,205,27,431,77,206,432,207,433,208,209,78,210,91,211,434,28,212,435,436,213,151,214,437,29,215,438,439,216,440,30,217,31,32,441,442,218,443,0,444,1,445,446,447,2,219,220,221,141,448,142,143,222,144,145,223,449,224,146,450,34,35,36,37,92,38,39,225,226,227,40,41,451,452,228,229,42,230,231,453,454,455,232,233,456,457,458,234,235,459,460,461,462,236,463,237,464,465,466,238,467,468,469,239,147,148,149,240,246,470,247,248,249,471,250,152,251,43,472,473,111,474,252,253,475,153,112,154,254,476,477,44,478,79,479,255,480,256,257,258,481,259,482,260,261,483,262,484,263,264,265,485,486,266,487,488,267,489,490,268,491,155,269,492,493,156,270,271,272,273,494,495,157,496,497,274,498,499,275,500,45,158,501,502,503,159,276,277,278,279,280,504,281,160,505,161,46,93,506,162,163,164,507,165,166,167,508,47,509,168,169,170,282,510,511,283,284,285,512,513,286,514,515,287,516,517,288,171,518,519,289,520,172,290,521,522,523,524,525,291,526,292,293,527,528,294,529,530,531,532,295,533,296,297,534,298,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,299,550,551,300,552,553,554,555,556,557,558,559,560,561,562,563,564,565,301,566,3,567,568,569,570,571,572,4,573,574,5,575,576,577,578,579,580,581,403,582,583,584,585,586,587,588,589,590,591,6,592,404,405,593,594,595,596,597,598,599,302,600,601,602,603,604,406,605,606,607,608,609,610,611,407,612,613,614,615,616,408,7,617,618,619,620,48,621,622,49,50,94,95,173,96,97,623,303,304,305,306,307,624,625,308,626,309,627,628,629,310,630,631,311,51,52,53,54,55,632,633,634,174,635,636,312,313,98,314,637,315,316,317,318,56,57,638,319,320,321,639,640,641,322,323,642,643,324,644,175,325,326,645,80,176,327,177,646,328,647,178,329,179,180,330,181,331,332,648,333,81,649,182,334,335,82,336,8,650,337,83,84,651,338,99,652,339,340,341,183,342,653,654,343,655,344,345,346,656,347,657,658,348,349,659,660,350,661,351,662,663,352,664,353,354,355,356,665,666,667,668,669,357,358,359,360,361,363,364,365,670,671,672,673,366,674,367,368,369,675,676,370,677,678,371,372,679,373,680,60,184,681,374,375,376,185,377,378,682,379,380,683,18,186,684,381,685,686,687,382,383,384,61,100,64,385,395,688,689,396,189,690,17,691,397,692,693,694,695,398,696,190,399,697,400,698,699,191,192],"tindex":"6dbc743d-3e88-11e6-92da-d73c65e58616","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"6dbc9b4e-3e88-11e6-92da-337656905681","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (separator == null) {\n                {\n                    if (separator == null) {\n                        {\n                            if (separator == null) {\n                                {\n                                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                    for (int int = 0 ; i < (name.length()) ; i++) {\n                                        char char = name.charAt(i);\n                                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                            translation.append(separator);\n                                        } \n                                        translation.append(character);\n                                    }\n                                    return translation.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"6dbc9b4f-3e88-11e6-92da-c50eca30bf78","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"6dbcc160-3e88-11e6-92da-b146cc5b0bbf","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"6dbcc161-3e88-11e6-92da-410ef8458ec0","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6dbce872-3e88-11e6-92da-eb2243dc5cfd","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"6dbce873-3e88-11e6-92da-0545a4520225","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            if (separator == null) {\n                {\n                    if (separator == null) {\n                        {\n                            if (separator == null) {\n                                {\n                                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                                    for (int int = 0 ; i < (name.length()) ; i++) {\n                                        char char = name.charAt(i);\n                                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                                            translation.append(separator);\n                                        } \n                                        translation.append(character);\n                                    }\n                                    return translation.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"6dbce874-3e88-11e6-92da-35c8541ea5b5","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"6dbd0f85-3e88-11e6-92da-79759904796c","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6dbd0f86-3e88-11e6-92da-e5ea531b4a58","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6dbd0f87-3e88-11e6-92da-bd53748c71dd","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"6dbd0f88-3e88-11e6-92da-63d4d48e1d7e","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6dbd3699-3e88-11e6-92da-fd2d52bd6d7d","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6dbd5daa-3e88-11e6-92da-e315ff3473ea","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"6dbd5dab-3e88-11e6-92da-f1d9b02a32c7","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"6dbd84bc-3e88-11e6-92da-7ff7a9f9056f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265714661/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":57,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
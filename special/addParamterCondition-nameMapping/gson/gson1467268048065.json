{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":304,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":162,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":266,"com.google.gson.functional.StringTest.testStringValueDeserialization":470,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":142,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":439,"com.google.gson.stream.JsonWriterTest.testRepeatedName":263,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":525,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":1,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":416,"com.google.gson.MixedStreamTest.testWriteLenient":286,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":308,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":107,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":299,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":176,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":184,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":395,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":569,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":40,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":247,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":119,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":534,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":384,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":602,"com.google.gson.functional.ObjectTest.testSingletonLists":67,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":104,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":163,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":520,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":272,"com.google.gson.stream.JsonWriterTest.testStrings":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":380,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":82,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":448,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":404,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":631,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":360,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":39,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":612,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":478,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":42,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":453,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":563,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":335,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":512,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":618,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":53,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":334,"com.google.gson.functional.EnumTest.testEnumCaseMapping":246,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":161,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":260,"com.google.gson.functional.JsonTreeTest.testToJsonTree":295,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":511,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":450,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":292,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":90,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":36,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":436,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":521,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":604,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":59,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":476,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":401,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":278,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":579,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":526,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":51,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":224,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":409,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":277,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":421,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":159,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":584,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":447,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":37,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":281,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":427,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":589,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":77,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":438,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":546,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":309,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":460,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":560,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":435,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":221,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":376,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":140,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":282,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":469,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":561,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":76,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":496,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":209,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":270,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":399,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":4,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":339,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":530,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":390,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":5,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":26,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":375,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":377,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":323,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":106,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":99,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":372,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":223,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":393,"com.google.gson.functional.CollectionTest.testSetDeserialization":351,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":120,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":71,"com.google.gson.functional.EnumTest.testEnumSet":240,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":485,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":553,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":12,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":628,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":430,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":73,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":25,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":565,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":374,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":573,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":48,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":83,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":228,"com.google.gson.functional.MapTest.testHashMapDeserialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":523,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":442,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":493,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":597,"com.google.gson.MixedStreamTest.testReadNulls":623,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":145,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":229,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":219,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":324,"com.google.gson.functional.MapTest.testSortedMap":337,"com.google.gson.functional.MapTest.testMapSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":230,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":488,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":558,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":502,"com.google.gson.functional.MapTest.testSerializeMaps":126,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":192,"com.google.gson.functional.MapTest.testComplexKeysSerialization":139,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":484,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":342,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":507,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":61,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":610,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":239,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":467,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":609,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":123,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":411,"com.google.gson.functional.MapTest.testStringKeyDeserialization":341,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":630,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":14,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":284,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":141,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":529,"com.google.gson.functional.PrettyPrintingTest.testMap":121,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":198,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":524,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":87,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":231,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":418,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":38,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":273,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":506,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":167,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":96,"com.google.gson.functional.CollectionTest.testQueueSerialization":179,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":314,"com.google.gson.functional.MapTest.testMapSerializationEmpty":340,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":554,"com.google.gson.functional.MapTest.testMapOfMapSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":545,"com.google.gson.JavaSerializationTest.testMapIsSerializable":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":437,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":350,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":174,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":381,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":164,"com.google.gson.functional.FieldNamingTest.testIdentity":193,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":318,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":44,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":412,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":3,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":66,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":294,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":301,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":514,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":619,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":165,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":298,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":461,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":445,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":97,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":449,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":325,"com.google.gson.functional.MapTest.testMapSubclassSerialization":125,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":582,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":154,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":387,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":486,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":200,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":257,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":543,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":611,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":425,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":595,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":417,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":24,"com.google.gson.functional.EnumTest.testEnumSubclass":243,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":564,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":402,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":632,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":513,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":222,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":620,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":568,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":464,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":516,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":144,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":549,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":462,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":288,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":254,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":500,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":321,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":555,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":369,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":547,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":110,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":394,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":458,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":355,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":344,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":60,"com.google.gson.CommentsTest.testParseComments":362,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":383,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":17,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":68,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":605,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":205,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":503,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":567,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":487,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":133,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":166,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":633,"com.google.gson.MixedStreamTest.testReadInvalidState":621,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":117,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":581,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":194,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":226,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":508,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":629,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":202,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":538,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":172,"com.google.gson.JsonArrayTest.testRemove":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":102,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":577,"com.google.gson.functional.MapTest.testMapDeserialization":330,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":98,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":456,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":457,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":601,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":8,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":128,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":235,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":233,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":468,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":116,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":423,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":78,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":403,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":147,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":385,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":143,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":152,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":122,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":336,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":114,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":319,"com.google.gson.functional.PrimitiveTest.testShortSerialization":580,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":237,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":571,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":544,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":431,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":522,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":189,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":242,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":178,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":153,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":327,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":537,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":187,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":587,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":444,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":608,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":274,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":593,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":34,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":368,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":79,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":84,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":248,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":276,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":575,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":317,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":550,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":414,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":398,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":148,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":188,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":428,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":196,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":379,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":103,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":236,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":528,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":433,"com.google.gson.stream.JsonWriterTest.testNullStringValue":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":441,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":290,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":517,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":576,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":552,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":285,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":206,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":234,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":241,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":600,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":489,"com.google.gson.functional.MapTest.testGeneralMapField":136,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":397,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":592,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":197,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":217,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":108,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":85,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":158,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":225,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":572,"com.google.gson.MixedStreamTest.testReadMixedStreamed":625,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":429,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":539,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":185,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":253,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":358,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":556,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":54,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":363,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":101,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":332,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":175,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":326,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":18,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":591,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":57,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":250,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":262,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":540,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":100,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":345,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":45,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":420,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":607,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":20,"com.google.gson.functional.ObjectTest.testNestedDeserialization":415,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":43,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":407,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":598,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":287,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":590,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":204,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":333,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":366,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":472,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":23,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":283,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":463,"com.google.gson.JavaSerializationTest.testListIsSerializable":365,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":303,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":312,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":353,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":150,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":479,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":328,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":135,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":515,"com.google.gson.functional.MapTest.testInterfaceTypeMap":134,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":199,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":518,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":33,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":244,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":466,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":86,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":532,"com.google.gson.MixedStreamTest.testWriteClosed":624,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":599,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":69,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":451,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":28,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":6,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":297,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":113,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":9,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":70,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":348,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":614,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":559,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":251,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":465,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":105,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":391,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":170,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":594,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":227,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":426,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":62,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":296,"com.google.gson.functional.CollectionTest.testQueueDeserialization":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":542,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":557,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":475,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":596,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":111,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":615,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":129,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":410,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":95,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":160,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":322,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":177,"com.google.gson.functional.MapTest.testRawMapSerialization":138,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":256,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":440,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":35,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":74,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":146,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":491,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":606,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":305,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":81,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":212,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":307,"com.google.gson.functional.PrimitiveTest.testByteSerialization":578,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":64,"com.google.gson.ObjectTypeAdapterTest.testSerialize":271,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":527,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":300,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":216,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":29,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":473,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":617,"com.google.gson.functional.MapTest.testMapWithQuotes":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":88,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":535,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":474,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":11,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":357,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":382,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":47,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":424,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":118,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":603,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":21,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":413,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":566,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":218,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":94,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":249,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":574,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":482,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":498,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":109,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":211,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":149,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":46,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":616,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":155,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":419,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":519,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":19,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":406,"com.google.gson.functional.ObjectTest.testNestedSerialization":75,"com.google.gson.JsonObjectTest.testAddingStringProperties":315,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":207,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":157,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":477,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":531,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":56,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":137,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":195,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":10,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":258,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":279,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":269,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":72,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":320,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":586,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":291,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":434,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":533,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":627,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":422,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":613,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":168,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":215,"com.google.gson.functional.CollectionTest.testSetSerialization":186,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":16,"com.google.gson.functional.StringTest.testStringValueSerialization":169,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":454,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":63,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":171,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":347,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":367,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":494,"com.google.gson.MixedStreamTest.testWriteInvalidState":622,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":536,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":504,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":541,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":92,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":58,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":313,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":392,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":49,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":443,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":65,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":329,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":265,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":371,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":497},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0],"tindex":"b7773d8e-3e8b-11e6-bc55-5bf5dac0146e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b777b2bf-3e8b-11e6-bc55-8dba1515b2f6","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],"tindex":"b777b2c0-3e8b-11e6-bc55-af16d873f8f6","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                            java.io.Writer.write(\"\\\"\");\n                            int int = 0;\n                            int int = value.length();\n                            for (int int = 0 ; i < length ; i++) {\n                                char char = value.charAt(i);\n                                java.lang.String java.lang.String;\n                                if (c < 128) {\n                                    replacement = replacements[c];\n                                    if (replacement == null) {\n                                        continue;\n                                    } \n                                } else if (c == '\\u2028') {\n                                    replacement = \"\\\\u2028\";\n                                } else if (c == '\\u2029') {\n                                    replacement = \"\\\\u2029\";\n                                } else {\n                                    continue;\n                                }\n                                if (last < i) {\n                                    java.io.Writer.write(value, last, (i - last));\n                                } \n                                java.io.Writer.write(replacement);\n                                last = i + 1;\n                            }\n                            if (last < length) {\n                                java.io.Writer.write(value, last, (length - last));\n                            } \n                            java.io.Writer.write(\"\\\"\");\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[280,281,282,283,284,285,286],"tindex":"b777d9d1-3e8b-11e6-bc55-b12752b7497b","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[287,288,289,290,291,292,22,42,293,116,294,295,142,296,297,298,299,300,301,302,303,304,305,306,307],"tindex":"b77800e2-3e8b-11e6-bc55-7903ab1737f0","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[13,14,15,19,64,65,308,309,310,311,312,298,299,300,302,303,313,314,315],"tindex":"b77800e3-3e8b-11e6-bc55-8397c4f90b79","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[288,6,316,10,317,12,318,319,20,21,23,24,25,28,29,30,31,32,320,57,67,321,76,79,322,323,324,89,117,118,120,122,124,325,326,327,328,127,329,128,330,129,331,332,333,132,334,335,336,337,134,338,135,136,137,339,139,340,341,140,342,343,141,142,154,155,344,345,170,171,172,173,174,176,177,346,347,179,348,181,349,350,183,351,352,353,354,202,203,205,296,297,355,356,219,357,358,220,221,222,359,224,360,232,234,235,239,240,241,242,243,361,245,305,306,362,286,258,363,364,365],"tindex":"b77827f4-3e8b-11e6-bc55-3bbad5d0156a","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"b7784f05-3e8b-11e6-bc55-bdb709539b49","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b7787616-3e8b-11e6-bc55-11f65674a606","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                            java.io.Writer.write(\"\\\"\");\n                            int int = 0;\n                            int int = value.length();\n                            for (int int = 0 ; i < length ; i++) {\n                                char char = value.charAt(i);\n                                java.lang.String java.lang.String;\n                                if (c < 128) {\n                                    replacement = replacements[c];\n                                    if (replacement == null) {\n                                        continue;\n                                    } \n                                } else if (c == '\\u2028') {\n                                    replacement = \"\\\\u2028\";\n                                } else if (c == '\\u2029') {\n                                    replacement = \"\\\\u2029\";\n                                } else {\n                                    continue;\n                                }\n                                if (last < i) {\n                                    java.io.Writer.write(value, last, (i - last));\n                                } \n                                java.io.Writer.write(replacement);\n                                last = i + 1;\n                            }\n                            if (last < length) {\n                                java.io.Writer.write(value, last, (length - last));\n                            } \n                            java.io.Writer.write(\"\\\"\");\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b7787617-3e8b-11e6-bc55-bf1675f98292","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[287,288,289,5,7,290,291,8,9,292,10,22,27,35,39,40,41,42,44,45,56,57,63,67,68,69,70,72,73,75,77,80,81,82,83,96,106,108,293,116,295,123,124,125,126,127,128,129,130,131,134,135,136,138,139,140,142,143,144,145,147,148,149,151,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,179,180,181,182,183,184,185,188,194,195,200,202,203,296,206,207,208,209,210,211,212,213,214,215,216,217,218,220,221,225,226,227,229,304,230,233,249,252,253,254,255,305,256,257,258,270],"tindex":"b7789d28-3e8b-11e6-bc55-f9c364a03bbb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[1,366,2,367,368,369,3,4,287,288,289,5,6,7,290,291,316,370,8,9,292,10,317,371,372,373,374,375,11,376,12,377,318,378,13,14,15,379,16,17,18,319,19,380,381,382,20,21,383,22,23,24,25,26,27,384,28,29,30,385,31,386,387,32,40,388,389,41,390,42,43,320,44,45,391,46,392,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,393,62,63,66,67,394,395,68,396,397,69,398,399,70,400,321,71,401,72,402,403,404,405,73,406,74,75,407,408,76,409,410,411,77,412,78,79,413,80,322,414,415,416,323,81,417,82,418,419,324,83,420,84,85,86,421,422,423,424,425,87,88,426,89,427,90,91,428,429,92,430,431,432,93,433,94,95,96,434,97,435,98,99,436,100,437,101,102,103,438,439,104,440,441,105,442,443,106,444,107,108,445,446,109,110,111,112,113,447,448,114,449,450,115,451,293,116,294,295,117,452,118,119,120,453,121,122,123,454,455,456,124,325,457,458,459,326,125,126,327,328,127,329,128,330,129,460,331,332,333,130,131,132,334,335,336,133,337,134,338,135,136,137,138,339,139,340,341,140,342,343,141,142,143,461,462,144,145,146,147,463,148,149,150,464,465,151,466,152,467,468,153,154,155,308,309,310,311,312,344,345,469,156,157,158,159,160,470,161,162,163,164,165,471,472,166,473,167,474,475,476,168,477,478,169,170,171,172,173,174,479,175,176,177,178,480,346,347,481,179,348,180,181,182,349,350,183,482,351,184,185,352,186,353,483,187,354,484,485,188,486,189,190,191,192,193,487,488,194,489,195,490,491,196,197,198,199,200,201,492,202,203,204,205,296,297,206,207,208,209,493,210,211,494,495,496,212,213,497,498,499,214,215,355,500,356,501,216,502,217,503,504,505,218,506,507,508,219,357,358,220,221,222,298,509,359,223,224,510,511,512,513,514,515,516,517,518,519,520,225,521,522,226,523,524,525,526,527,528,529,530,531,532,533,534,535,536,227,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,280,556,557,558,559,560,561,562,563,564,565,566,567,281,282,568,569,570,571,360,572,573,228,574,575,576,577,578,283,579,580,581,582,583,584,585,284,586,587,588,589,590,285,591,592,593,594,595,299,300,301,302,303,229,596,304,230,597,598,231,599,600,232,601,602,233,603,604,234,235,605,236,237,238,606,607,239,608,240,241,242,243,361,609,244,610,245,246,247,611,248,612,613,249,250,614,615,251,616,617,252,618,619,253,254,255,620,305,306,307,362,256,621,257,622,286,623,258,624,625,626,260,627,363,364,365,270,271,628,629,630,273,631,632,279],"tindex":"b7789d29-3e8b-11e6-bc55-5d5473e004ca","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"b778c43a-3e8b-11e6-bc55-bdff334b16d0","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (type instanceof java.lang.reflect.TypeVariable) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[431],"tindex":"b778c43b-3e8b-11e6-bc55-e5d8918b5b90","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b778c43c-3e8b-11e6-bc55-f10fe4ddac61","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                            java.io.Writer.write(\"\\\"\");\n                            int int = 0;\n                            int int = value.length();\n                            for (int int = 0 ; i < length ; i++) {\n                                char char = value.charAt(i);\n                                java.lang.String java.lang.String;\n                                if (c < 128) {\n                                    replacement = replacements[c];\n                                    if (replacement == null) {\n                                        continue;\n                                    } \n                                } else if (c == '\\u2028') {\n                                    replacement = \"\\\\u2028\";\n                                } else if (c == '\\u2029') {\n                                    replacement = \"\\\\u2029\";\n                                } else {\n                                    continue;\n                                }\n                                if (last < i) {\n                                    java.io.Writer.write(value, last, (i - last));\n                                } \n                                java.io.Writer.write(replacement);\n                                last = i + 1;\n                            }\n                            if (last < length) {\n                                java.io.Writer.write(value, last, (length - last));\n                            } \n                            java.io.Writer.write(\"\\\"\");\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b778c43d-3e8b-11e6-bc55-cf7f4086bcc0","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[42],"tindex":"b778eb4e-3e8b-11e6-bc55-a3c991007515","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[382,42,43,633,53,54,55,405,242,252],"tindex":"b778eb4f-3e8b-11e6-bc55-2765016ef9b6","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,287,288,289,5,6,7,290,291,8,9,292,10,13,15,16,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,44,45,46,47,57,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,101,446,113,293,116,294,295,117,118,119,120,122,123,124,129,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,170,171,172,173,174,176,178,182,184,186,189,190,191,192,193,194,195,200,202,203,204,205,296,297,206,207,208,209,217,219,220,221,222,223,224,299,300,302,303,229,304,230,231,232,234,235,236,238,239,244,248,249,250,251,252,254,255,256,257,270,271],"tindex":"b778eb50-3e8b-11e6-bc55-ffafbf33687a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[288,290,291,292,22,295,296,297,298,299,300,301,302,303,304],"tindex":"b778eb51-3e8b-11e6-bc55-d3273f51d6fc","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b7791262-3e8b-11e6-bc55-f393800ee319","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"b7791263-3e8b-11e6-bc55-555b5c3742a9","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b7791264-3e8b-11e6-bc55-6dc9176bb017","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[634],"tindex":"b7791265-3e8b-11e6-bc55-ebe73865bc4d","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"b7791266-3e8b-11e6-bc55-855af1e520d3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b7793977-3e8b-11e6-bc55-ef453de46132","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b7793978-3e8b-11e6-bc55-0131f2b9d2cd","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"b7793979-3e8b-11e6-bc55-b72c507161db","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"b779608a-3e8b-11e6-bc55-b9eb152cd9cf","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"b779608b-3e8b-11e6-bc55-1dfc1ee3a283","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"b779608c-3e8b-11e6-bc55-ad4588392160","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lenient) {\n                {\n                    com.google.gson.stream.JsonReader.this.boolean = lenient;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b779608d-3e8b-11e6-bc55-8348afeb0cf3","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"b779879e-3e8b-11e6-bc55-57cf2c60c69d","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"b779879f-3e8b-11e6-bc55-8b54a06dc5ee","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.equals(from)) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b77987a0-3e8b-11e6-bc55-fd9f79d2c757","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b77987a1-3e8b-11e6-bc55-e189c447453f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b779aeb2-3e8b-11e6-bc55-898e31c01fea","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b779aeb3-3e8b-11e6-bc55-df14fe7eeab2","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"b779aeb4-3e8b-11e6-bc55-3166183d8c6f","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"b779aeb5-3e8b-11e6-bc55-7148bb63048f","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b779aeb6-3e8b-11e6-bc55-4bf6a596071b","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b779aeb7-3e8b-11e6-bc55-53dcdd5af2f4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b779d5c8-3e8b-11e6-bc55-fb34cbbb0f56","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b779d5c9-3e8b-11e6-bc55-7d8dff462e5d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b779d5ca-3e8b-11e6-bc55-4df1d546d132","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"b779d5cb-3e8b-11e6-bc55-51537c557a0c","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b779fcdc-3e8b-11e6-bc55-611025cdfee6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b779fcdd-3e8b-11e6-bc55-d747cbf6196a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"b779fcde-3e8b-11e6-bc55-03b36bccc058","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (lenient) {\n                {\n                    com.google.gson.stream.JsonReader.this.boolean = lenient;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b77a23ef-3e8b-11e6-bc55-b934ecfbf890","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b77a23f0-3e8b-11e6-bc55-77e467d8a6f8","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"b77a23f1-3e8b-11e6-bc55-fba2e970c025","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"b77a23f2-3e8b-11e6-bc55-598bee9587ab","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"b77a4b03-3e8b-11e6-bc55-9b4ee9d6e8a8","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b77a4b04-3e8b-11e6-bc55-cd1c291ea87b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b77a4b05-3e8b-11e6-bc55-ddac17971510","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267172017/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":56,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
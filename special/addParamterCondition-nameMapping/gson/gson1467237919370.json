{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":20,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":267,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":19,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":113,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":50,"com.google.gson.MixedStreamTest.testWriteLenient":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":183,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":46,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":339,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":349,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":321,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":327,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":159,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":72,"com.google.gson.functional.ObjectTest.testSingletonLists":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":179,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":328,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":268,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":37,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":63,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":283,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":383,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":299,"com.google.gson.functional.EnumTest.testEnumCaseMapping":320,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":88,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":266,"com.google.gson.functional.JsonTreeTest.testToJsonTree":28,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":391,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":34,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":313,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":292,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":346,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":197,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":83,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":78,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":256,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":297,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":368,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":70,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":192,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":336,"com.google.gson.JsonParserTest.testParseString":66,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":248,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":242,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":5,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":139,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":1,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":51,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":62,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":125,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":45,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":107,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":249,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":135,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":225,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":67,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":362,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":394,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":117,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":234,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":127,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":38,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":174,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":367,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":160,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":216,"com.google.gson.functional.EnumTest.testEnumSet":314,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":308,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":202,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":93,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":221,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":306,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":382,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":195,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":294,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":252,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":363,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":4,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":118,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":43,"com.google.gson.functional.MapTest.testMapSerialization":97,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":85,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":110,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":12,"com.google.gson.functional.MapTest.testSerializeMaps":92,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":149,"com.google.gson.functional.MapTest.testComplexKeysSerialization":105,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":18,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":388,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":199,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":293,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":389,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":194,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":74,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":286,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":40,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":260,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":108,"com.google.gson.functional.PrettyPrintingTest.testMap":284,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":356,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":164,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":386,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":272,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":75,"com.google.gson.functional.MapTest.testMapSerializationEmpty":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":171,"com.google.gson.functional.CollectionTest.testQueueSerialization":343,"com.google.gson.functional.MapTest.testMapOfMapSerialization":96,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":240,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":155,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":245,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":206,"com.google.gson.functional.FieldNamingTest.testIdentity":150,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":269,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":276,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":27,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":116,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":211,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":265,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":384,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":64,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":270,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":243,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":87,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":191,"com.google.gson.functional.MapTest.testMapSubclassSerialization":91,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":259,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":370,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":322,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":358,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":376,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":52,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":305,"com.google.gson.functional.EnumTest.testEnumSubclass":317,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":246,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":387,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":230,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":365,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":39,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":210,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":30,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":86,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":186,"com.google.gson.MixedStreamTest.testWriteNulls":377,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":140,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":198,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":204,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":213,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":282,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":11,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":99,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":271,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":390,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":156,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":188,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":258,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":13,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":6,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":233,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":279,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":237,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":177,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":289,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":90,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":94,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":130,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":400,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":291,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":26,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":219,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":359,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":126,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":209,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":98,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":285,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":190,"com.google.gson.functional.PrimitiveTest.testShortSerialization":257,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":59,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":301,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":167,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":146,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":316,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":341,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":369,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":261,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":353,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":53,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":264,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":115,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":228,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":161,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":323,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":392,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":41,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":319,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":122,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":347,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":354,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":0,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":44,"com.google.gson.stream.JsonWriterTest.testNullStringValue":402,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":32,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":244,"com.google.gson.JsonArrayTest.testSet":395,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":262,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":331,"com.google.gson.JsonPrimitiveTest.testEquals":393,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":315,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":399,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":21,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":14,"com.google.gson.functional.MapTest.testGeneralMapField":103,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":134,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":355,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":184,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":7,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":232,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":335,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":251,"com.google.gson.JsonObjectTest.testDeepCopy":76,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":238,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":350,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":385,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":176,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":205,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":263,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":330,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":325,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":175,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":208,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":224,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":364,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":29,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":298,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":281,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":304,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":255,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":121,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":49,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":54,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":352,"com.google.gson.functional.ObjectTest.testNullSerialization":217,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":124,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":102,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":231,"com.google.gson.functional.MapTest.testInterfaceTypeMap":100,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":357,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":129,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":79,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":318,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":338,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":162,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":296,"com.google.gson.MixedStreamTest.testWriteClosed":381,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":345,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":309,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":57,"com.google.gson.stream.JsonWriterTest.testLongs":2,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":131,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":215,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":344,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":326,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":348,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":180,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":55,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":151,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":236,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":25,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":132,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":200,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":56,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":187,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":170,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":337,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":340,"com.google.gson.functional.MapTest.testRawMapSerialization":104,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":375,"com.google.gson.JsonParserTest.testParseReader":65,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":119,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":222,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":17,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":401,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":68,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":136,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":193,"com.google.gson.functional.PrimitiveTest.testByteSerialization":254,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":373,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":22,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":333,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":47,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":141,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":310,"com.google.gson.functional.MapTest.testMapWithQuotes":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":207,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":163,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":158,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":58,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":303,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":168,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":247,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":8,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":169,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":60,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":123,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":278,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":371,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":61,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":42,"com.google.gson.JsonObjectTest.testAddingStringProperties":77,"com.google.gson.functional.ObjectTest.testNestedSerialization":223,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":332,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":235,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":334,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":329,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":15,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":275,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":374,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":380,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":218,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":33,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":89,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":273,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":397,"com.google.gson.functional.CollectionTest.testSetSerialization":351,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":203,"com.google.gson.functional.StringTest.testStringValueSerialization":274,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":287,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":111,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":152,"com.google.gson.MixedStreamTest.testWriteInvalidState":378,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":143,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":36,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":148,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":196,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":71,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":295,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":181,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":138},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"915dd54a-3e45-11e6-94df-c59aebac60c8","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[0,1,2,3],"tindex":"915e4a7b-3e45-11e6-94df-f9ab7c16205a","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[4,5,6,7,8,9,10],"tindex":"915e4a7c-3e45-11e6-94df-a50b6bd3b1e4","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"tindex":"915e718d-3e45-11e6-94df-0fefe85a4543","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"915e718e-3e45-11e6-94df-8729679d8c1e","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[86,87,88,89,13,15,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,19,109,110,111,23,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,24,25,26,27,28,29,30,31,127,128,129,32,33,130,131,34,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,7,162,163,164,165,8,9,166,36,167,168,0,169,170,171,172,173,174,175,176,177,178,1,179,180,181,182,183,184,185,10,186,187,188,189,190,191,192,193,37,194,195,196,197,198,199,200,201,202,39,40,41,203,204,205,42,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,43,44,45,46,47,265,48,49,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,56,57,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,60,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,63,364,365,64,366,367,368,369,370,371,67,68,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,3,387,70,78,388],"tindex":"915e989f-3e45-11e6-94df-2f36710e9ef5","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"915e98a0-3e45-11e6-94df-9902b0cfb59a","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[88,252],"tindex":"915ebfb1-3e45-11e6-94df-33aa64760665","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[53,74,389],"tindex":"915ebfb2-3e45-11e6-94df-9d0b4a9a32e4","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[207,220,299,300,301,316,63,364,390,382],"tindex":"915ee6c3-3e45-11e6-94df-6758018624de","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"915f34e4-3e45-11e6-94df-45081b57b1ff","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"915f34e5-3e45-11e6-94df-abf3712f2aea","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[165,391,392,393,394,71],"tindex":"915f5bf6-3e45-11e6-94df-0b8aba8145e9","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"915f5bf7-3e45-11e6-94df-572d3fa3b938","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[395],"tindex":"915f5bf8-3e45-11e6-94df-636fd0b86773","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[124,167],"tindex":"915f5bf9-3e45-11e6-94df-ffdbea3cd676","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"915f830a-3e45-11e6-94df-13f5f293df37","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"915f830b-3e45-11e6-94df-fd1fe3319ab3","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"915f830c-3e45-11e6-94df-b77a77f57467","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"915f830d-3e45-11e6-94df-937797987c04","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"915faa1e-3e45-11e6-94df-1ba993f08f11","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[19,27,29,30,31,32,33,34],"tindex":"915faa1f-3e45-11e6-94df-a3e44f07cf6d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"915faa20-3e45-11e6-94df-7b80dd8a4bfa","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[396,100,102,19,127,129,131,397,144,152,167,185,398,291,399,400,401,293,346,402],"tindex":"915faa21-3e45-11e6-94df-f72863510846","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"915faa22-3e45-11e6-94df-7f3e9ad966e3","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"915fd133-3e45-11e6-94df-a38e71e5e63a","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"915fd134-3e45-11e6-94df-dbacebcebb0c","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"915fd135-3e45-11e6-94df-93e1629049d5","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"915ff846-3e45-11e6-94df-01261d069dc4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"915ff847-3e45-11e6-94df-1330740952d8","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"915ff848-3e45-11e6-94df-bbd10f0127f9","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b instanceof java.lang.reflect.GenericArrayType) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"915ff849-3e45-11e6-94df-15752af17acb","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"915ff84a-3e45-11e6-94df-b586741f25d9","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"91601f5b-3e45-11e6-94df-d1731af8731b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"91601f5c-3e45-11e6-94df-45c29d3ac863","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"91601f5d-3e45-11e6-94df-9ba7fd34091f","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"91601f5e-3e45-11e6-94df-c1f41e880af3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"9160466f-3e45-11e6-94df-e3648e3fed1f","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"91604670-3e45-11e6-94df-914ab5522efa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"91604671-3e45-11e6-94df-d743b5b1fdb7","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270759/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
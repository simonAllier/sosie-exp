{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":175,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":61,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":76,"com.google.gson.functional.PrimitiveTest.testShortSerialization":213,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":52,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":24,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":9,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":44,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":206,"com.google.gson.MixedStreamTest.testWriteLenient":265,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":109,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":143,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":27,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":241,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":242,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":246,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":261,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":133,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":216,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":152,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":117,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":78,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":219,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":35,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":68,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":118,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":252,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":71,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":124,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":185,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":245,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":72,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":101,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":5,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":23,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":136,"com.google.gson.functional.JsonTreeTest.testToJsonTree":92,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":141,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":184,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":200,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":223,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":217,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":51,"com.google.gson.JsonPrimitiveTest.testEquals":88,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":102,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":40,"com.google.gson.functional.MapTest.testGeneralMapField":167,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":47,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":161,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":212,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":207,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":268,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":21,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":82,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":119,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":259,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":177,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":266,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":54,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":204,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":218,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":234,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":195,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":116,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":87,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":164,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":137,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":80,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":64,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":125,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":22,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":193,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":81,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":10,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":16,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":179,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":211,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":180,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":31,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":248,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":56,"com.google.gson.functional.ObjectTest.testNullSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":66,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":174,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":42,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":53,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":150,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":49,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":262,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":34,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":229,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":65,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":20,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":231,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":55,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":18,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":240,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":208,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":182,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":170,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":236,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":105,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":237,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":257,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":244,"com.google.gson.functional.MapTest.testMapSerialization":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":36,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":238,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":38,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":110,"com.google.gson.functional.MapTest.testSerializeMaps":165,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":58,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":112,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":17,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":162,"com.google.gson.stream.JsonWriterTest.testNumbers":151,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":104,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":89,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":131,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":188,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":11,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":70,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":178,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":215,"com.google.gson.functional.MapTest.testRawMapSerialization":168,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":263,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":169,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":48,"com.google.gson.functional.PrettyPrintingTest.testMap":186,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":221,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":173,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":232,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":239,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":0,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":225,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":84,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":134,"com.google.gson.functional.PrimitiveTest.testByteSerialization":210,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":127,"com.google.gson.ObjectTypeAdapterTest.testSerialize":149,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":176,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":120,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":28,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":79,"com.google.gson.functional.FieldNamingTest.testIdentity":251,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":160,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":249,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":67,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":94,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":15,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":29,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":91,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":63,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":146,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":172,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":139,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":199,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":260,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":145,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":96,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":192,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":153,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":203,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":264,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":140,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":202,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":2,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":196,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":8,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":30,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":253,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":132,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":69,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":144,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":106,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":154,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":77,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":220,"com.google.gson.functional.ObjectTest.testNestedSerialization":233,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":197,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":14,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":198,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":41,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":32,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":25,"com.google.gson.MixedStreamTest.testWriteNulls":147,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":159,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":230,"com.google.gson.JsonPrimitiveTest.testBoolean":86,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":46,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":74,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":228,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":194,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":37,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":148,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":267,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":222,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":258,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":214,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":39,"com.google.gson.functional.CollectionTest.testSetSerialization":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":73,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":189,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":226,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":12,"com.google.gson.JsonParserTest.testParseMixedArray":111,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":57,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":142,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":250,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":45,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":191,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":123,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":121,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":171,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":103,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":108,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":19,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":100,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":235,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":128,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":158},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"b5086b99-3f20-11e6-a99f-b1a91e8f375e","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"b508e0ca-3f20-11e6-a99f-fd19821e4e47","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[96,97,98,99,100,101,102,103,104],"tindex":"b50907db-3f20-11e6-a99f-1577ef60b6b4","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[105,106,107,108,109,110],"tindex":"b5092eec-3f20-11e6-a99f-6f852dc0a5c1","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b5092eed-3f20-11e6-a99f-ebb03af8f955","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[6,111,112,113,114,115,116,117,118,119,85,120,121,122,18,20,21,23,90,123,26,124,125,27,28,29,30,31,126,32,127,128,129,130,131,132,133,49,52,134,135,136,137,138,139,94,140,141,142,143,144,61,145,63,65,69,70,71,73,74,75,77,79,146,80,147],"tindex":"b50955fe-3f20-11e6-a99f-3955d3811dbf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[148,6,149,81,113,114,115,120,121,150,151,152,153,154,155,156,9,11,15,157,158,159,160,161,162,163,164,90,123,165,166,167,168,169,124,170,171,172,173,174,175,176,177,178,96,126,179,97,98,180,181,182,99,100,183,184,32,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,34,35,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,93,240,241,242,243,244,245,246,247,248,109,249,250,110,251,252,253,254,255,135,136,137,139,94,142,256,257,258,259,260,261,262,70,71,73,77,79,146,263,264,265],"tindex":"b5097d0f-3f20-11e6-a99f-6dde05df87de","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b509a420-3f20-11e6-a99f-350c72223288","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b509a421-3f20-11e6-a99f-fbe3db7deb01","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[4,122,23,266,24,124,125,267,268,146],"tindex":"b509cb32-3f20-11e6-a99f-5b6749579820","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[204,215,217,265],"tindex":"b509f243-3f20-11e6-a99f-a1edb2b3e7d5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b509f244-3f20-11e6-a99f-d7467c756db7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b50a1955-3f20-11e6-a99f-3bba1461c44e","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"b50a1956-3f20-11e6-a99f-db0e67b4cc9d","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b50a4067-3f20-11e6-a99f-4d560a5a679f","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b50a6778-3f20-11e6-a99f-1988c94d65e2","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b50a8e89-3f20-11e6-a99f-d578491d39cd","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[],"tindex":"b50a8e8a-3f20-11e6-a99f-ffdf19965c00","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603301/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":18,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":527,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":309,"com.google.gson.functional.StringTest.testStringValueDeserialization":307,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":272,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":190,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":440,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":140,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":294,"com.google.gson.MixedStreamTest.testWriteLenient":586,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":199,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":520,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":327,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":100,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":344,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":488,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":64,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":560,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":222,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":449,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":653,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":55,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":536,"com.google.gson.functional.ObjectTest.testSingletonLists":98,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":191,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":310,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":43,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":144,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":209,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":118,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":597,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":491,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":563,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":323,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":69,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":480,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":645,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":254,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":425,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":573,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":83,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":253,"com.google.gson.functional.EnumTest.testEnumCaseMapping":559,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":308,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":593,"com.google.gson.functional.JsonTreeTest.testToJsonTree":218,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":424,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":212,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":20,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":654,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":165,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":607,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":183,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":435,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":539,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":640,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":337,"com.google.gson.functional.ObjectTest.testNullDeserialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":89,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":320,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":648,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":501,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":600,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":441,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":119,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":613,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":641,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":81,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":422,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":127,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":599,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":213,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":305,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":505,"com.google.gson.JsonParserTest.testParseString":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":208,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":485,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":608,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":164,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":512,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":131,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":189,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":462,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":246,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":295,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":477,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":631,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":180,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":416,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":29,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":268,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":301,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":486,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":478,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":126,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":390,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":106,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":384,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":595,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":7,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":264,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":445,"com.google.gson.metrics.PerformanceTest.testDummy":592,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":11,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":53,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":31,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":141,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":197,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":182,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":421,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":614,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":92,"com.google.gson.functional.CollectionTest.testSetDeserialization":343,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":223,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":111,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":353,"com.google.gson.functional.EnumTest.testEnumSet":550,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":469,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":30,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":170,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":241,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":120,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":52,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":572,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":482,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":26,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":493,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":78,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":150,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":494,"com.google.gson.functional.MapTest.testHashMapDeserialization":235,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":438,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":195,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":385,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":529,"com.google.gson.MixedStreamTest.testReadNulls":587,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":277,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":525,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":148,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":412,"com.google.gson.functional.MapTest.testSortedMap":257,"com.google.gson.functional.MapTest.testMapSerialization":252,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":528,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":650,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":362,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":475,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":403,"com.google.gson.functional.MapTest.testSerializeMaps":238,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":359,"com.google.gson.functional.MapTest.testComplexKeysSerialization":265,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":352,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":269,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":616,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":410,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":91,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":557,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":548,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":647,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":289,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":145,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":555,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":227,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":655,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":661,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":129,"com.google.gson.functional.MapTest.testStringKeyDeserialization":267,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":612,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":35,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":508,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":271,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":444,"com.google.gson.functional.PrettyPrintingTest.testMap":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":370,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":439,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":330,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":531,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":409,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":596,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":609,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":313,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":177,"com.google.gson.functional.MapTest.testMapSerializationEmpty":266,"com.google.gson.functional.CollectionTest.testQueueSerialization":334,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":470,"com.google.gson.functional.MapTest.testMapOfMapSerialization":251,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":461,"com.google.gson.JavaSerializationTest.testMapIsSerializable":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":185,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":340,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":472,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":625,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":644,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":44,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":311,"com.google.gson.functional.FieldNamingTest.testIdentity":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":32,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":73,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":132,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":662,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":6,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":97,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":217,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":522,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":427,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":574,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":312,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":418,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":274,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":201,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":211,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":624,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":232,"com.google.gson.functional.MapTest.testMapSubclassSerialization":237,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":504,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":62,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":292,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":355,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":459,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":561,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":159,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":519,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":143,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":51,"com.google.gson.functional.EnumTest.testEnumSubclass":553,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":481,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":116,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":598,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":426,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":417,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":284,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":429,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":276,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":465,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":275,"com.google.gson.stream.JsonWriterTest.testNullName":665,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":9,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":399,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":576,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":646,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":110,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":471,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":5,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":204,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":99,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":234,"com.google.gson.MixedStreamTest.testWriteNulls":584,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":398,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":299,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":392,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":90,"com.google.gson.CommentsTest.testParseComments":579,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":651,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":39,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":542,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":378,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":484,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":361,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":256,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":315,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":71,"com.google.gson.MixedStreamTest.testReadInvalidState":581,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":219,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":206,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":503,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":363,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":437,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":411,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":611,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":375,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":454,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":187,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":498,"com.google.gson.functional.MapTest.testMapDeserialization":244,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":181,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":230,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":233,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":535,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":18,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":243,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":541,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":537,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":290,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":632,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":216,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":157,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":117,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":279,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":373,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":166,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":59,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":273,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":288,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":226,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":255,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":210,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":423,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":41,"com.google.gson.functional.PrimitiveTest.testShortSerialization":502,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":544,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":490,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":460,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":643,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":171,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":436,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":356,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":552,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":642,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":329,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":291,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":638,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":239,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":453,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":350,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":510,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":297,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":198,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":549,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":591,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":617,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":517,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":511,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":604,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":4,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":33,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":152,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":562,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":619,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":496,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":36,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":466,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":138,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":105,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":558,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":281,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":167,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":338,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":37,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":188,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":174,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":415,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":193,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":14,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":331,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":430,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":497,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":468,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":514,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":381,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":540,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":551,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":533,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":364,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":103,"com.google.gson.functional.MapTest.testGeneralMapField":261,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":516,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":369,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":404,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":200,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":153,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":304,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":434,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":492,"com.google.gson.MixedStreamTest.testReadMixedStreamed":590,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":636,"com.google.gson.JsonObjectTest.testDeepCopy":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":168,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":247,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":455,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":345,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":414,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":575,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":630,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":66,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":473,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":84,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":186,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":248,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":326,"com.google.gson.JsonArrayTest.testDeepCopy":659,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":40,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":515,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":87,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":456,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":184,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":300,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":667,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":151,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":339,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":46,"com.google.gson.functional.ObjectTest.testNestedDeserialization":139,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":70,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":124,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":530,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":8,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":513,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":377,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":1,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":249,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":314,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":500,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":280,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":298,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":524,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":348,"com.google.gson.functional.ObjectTest.testNullSerialization":113,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":283,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":325,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":260,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":428,"com.google.gson.functional.MapTest.testInterfaceTypeMap":258,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":371,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":13,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":658,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":431,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":556,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":603,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":374,"com.google.gson.MixedStreamTest.testReadClosed":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":154,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":80,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":447,"com.google.gson.MixedStreamTest.testWriteClosed":589,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":532,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":16,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":56,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":380,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":207,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":19,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":107,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":335,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":666,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":476,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":569,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":285,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":341,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":194,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":75,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":518,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":621,"com.google.gson.JsonParserTest.testParseInvalidJson":660,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":452,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":162,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":93,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":386,"com.google.gson.functional.CollectionTest.testQueueDeserialization":351,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":379,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":458,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":474,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":526,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":669,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":205,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":568,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":128,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":176,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":137,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":306,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":328,"com.google.gson.functional.MapTest.testRawMapSerialization":263,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":580,"com.google.gson.JsonParserTest.testParseReader":634,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":192,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":605,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":122,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":278,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":367,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":546,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":615,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":142,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":391,"com.google.gson.functional.PrimitiveTest.testByteSerialization":499,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":627,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":95,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":442,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":521,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":402,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":357,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":57,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":316,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":571,"com.google.gson.functional.MapTest.testMapWithQuotes":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":161,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":450,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":318,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":28,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":413,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":664,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":45,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":620,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":158,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":221,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":538,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":47,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":231,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":173,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":483,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":109,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":175,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":523,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":495,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":149,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":342,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":394,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":203,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":387,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":282,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":76,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":570,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":293,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":61,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":432,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":42,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":602,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":121,"com.google.gson.functional.ObjectTest.testNestedSerialization":123,"com.google.gson.internal.LinkedTreeMapTest.testClear":639,"com.google.gson.JsonObjectTest.testAddingStringProperties":657,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":382,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":303,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":446,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":86,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":262,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":365,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":21,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":588,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":601,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":72,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":114,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":509,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":15,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":178,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":448,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":578,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":594,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":156,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":564,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":606,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":321,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":397,"com.google.gson.functional.CollectionTest.testSetSerialization":347,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":38,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":228,"com.google.gson.functional.StringTest.testStringValueSerialization":324,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":94,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":3,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":332,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":622,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":388,"com.google.gson.MixedStreamTest.testWriteInvalidState":585,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":108,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":451,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":406,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":457,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":169,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":358,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":637,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":88,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":652,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":77,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":79,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":668,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":196,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":96,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":242,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":393},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"fa50a373-3e85-11e6-88a6-f1865cd9f1a7","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"fa50f194-3e85-11e6-88a6-19fb935e34b2","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fa513fb5-3e85-11e6-88a6-e3af7b5f7fac","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"fa513fb6-3e85-11e6-88a6-619646bacafe","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"fa513fb7-3e85-11e6-88a6-ed6b22c696bf","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[0,2,6,12,54,602,603,604,605,606,607,608,609,216,402,483,515],"tindex":"fa5166c8-3e85-11e6-88a6-25fb39cfe62f","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[472,485,486,500,508,514,586],"tindex":"fa5166c9-3e85-11e6-88a6-8db460645286","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[610,611,612],"tindex":"fa518dda-3e85-11e6-88a6-e542de89aaec","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (to.getRawType().equals(from.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[164,613,614],"tindex":"fa518ddb-3e85-11e6-88a6-6ded5b77c4bd","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"fa51b4ec-3e85-11e6-88a6-fbb6dfe6984e","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"fa51b4ed-3e85-11e6-88a6-01a9c07ee14a","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"fa51b4ee-3e85-11e6-88a6-796e2f59393a","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[8,9,10,14,15,20,69,215,216,217,218,272,379,380,412,415,416,520,521,523,524,527,615,616,617,618,619],"tindex":"fa51b4ef-3e85-11e6-88a6-c9be689138a3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"fa51dc00-3e85-11e6-88a6-6bb3030d6636","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"fa51dc01-3e85-11e6-88a6-09eb83d6ebd5","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[0,2,4,6,7,8,9,10,11,12,13,14,15,18,19,20,21,28,30,34,35,36,38,39,40,42,44,45,46,47,49,50,51,52,53,54,56,57,58,60,63,603,64,67,69,70,73,74,76,620,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,96,97,98,101,104,107,111,113,114,117,119,120,122,123,124,126,131,133,134,136,142,144,145,150,152,153,154,158,160,161,163,165,166,169,171,173,174,175,176,177,179,181,182,184,186,187,188,189,191,194,196,197,199,200,202,203,204,205,206,207,210,211,213,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,233,237,238,241,243,250,251,252,255,256,258,259,260,261,263,265,266,268,271,272,273,276,277,278,279,280,281,282,283,286,288,291,292,293,302,303,304,305,306,308,309,310,311,312,315,317,321,324,621,622,623,624,625,326,327,328,329,330,334,335,336,337,338,341,344,345,347,348,350,354,356,357,358,359,360,363,365,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,389,390,391,392,393,396,398,402,404,406,408,410,412,415,416,417,418,419,421,422,426,428,434,437,445,446,452,454,455,458,461,463,464,467,468,472,481,483,485,486,489,492,494,498,499,500,501,502,503,504,508,510,514,515,517,520,521,522,523,524,526,528,537,539,548,550,551,552,553,556,558,559,560,561,562,565,566,569,572,573,574,575,576,577,615,626,627,580,583,584,585,586,588,589,593,594,595,596,597,598,616,599,600,601],"tindex":"fa51dc02-3e85-11e6-88a6-5b3e041e298d","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[539],"tindex":"fa520313-3e85-11e6-88a6-654dcf1d5884","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[171,211,546],"tindex":"fa520314-3e85-11e6-88a6-9f97173f3dd8","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"fa520315-3e85-11e6-88a6-278f1343d0e8","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[628],"tindex":"fa520316-3e85-11e6-88a6-33fda6cd3ad4","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[45,69,70,71,83,84,85,119,552,572],"tindex":"fa520317-3e85-11e6-88a6-eb1150ee1c4a","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[629],"tindex":"fa522a28-3e85-11e6-88a6-750533bff1be","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[630],"tindex":"fa522a29-3e85-11e6-88a6-c593e6d9ea32","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[8,9,10,14,15,20,217,272,379,380,522,616,619],"tindex":"fa52513a-3e85-11e6-88a6-6d53a62f0e26","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[8,9,10,14,15,20,31,32,34,35,36,42,49,61,631,632,69,75,620,95,96,144,155,169,215,216,217,218,236,239,240,242,244,248,253,264,267,269,272,292,293,294,295,296,297,298,299,349,361,362,363,364,365,366,367,379,380,412,415,416,418,520,521,523,524,527,533,538,544,615,633,634,635,595,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,617,618,619,651,599,652,653,654,655,628,656,657,600,658],"tindex":"fa52513b-3e85-11e6-88a6-15bfd7d8238f","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[659,660,649,661,662,663],"tindex":"fa52784c-3e85-11e6-88a6-6353835fee07","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element == null) {\n                                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            java.util.List<com.google.gson.JsonElement>.add(element);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[155,614,664,654],"tindex":"fa52784d-3e85-11e6-88a6-e589dc60de56","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"fa52784e-3e85-11e6-88a6-530e209caa64","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa529f5f-3e85-11e6-88a6-df240e180386","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[562,563,564,565,566,567,568,569],"tindex":"fa529f60-3e85-11e6-88a6-970af482b205","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"fa52c671-3e85-11e6-88a6-1963f9173fbb","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"fa52c672-3e85-11e6-88a6-eb07bf31941b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[494,593],"tindex":"fa52c673-3e85-11e6-88a6-d1ffe04da1f5","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"fa52c674-3e85-11e6-88a6-6707374ef102","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"fa52c675-3e85-11e6-88a6-ef97a6465b7c","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa52ed86-3e85-11e6-88a6-77f2d76747ad","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[665],"tindex":"fa52ed87-3e85-11e6-88a6-0f30c2dcf75c","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"fa52ed88-3e85-11e6-88a6-6bd8d8a95bbb","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"fa52ed89-3e85-11e6-88a6-8517cf8f94c8","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"fa52ed8a-3e85-11e6-88a6-491d17aa79ba","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[3,5,16,17,22,24,25,26,29,33,47,48,51,55,56,57,58,59,62,603,666,667,668,631,669,65,66,68,69,73,620,87,88,89,90,91,92,93,98,99,100,102,103,105,106,109,112,116,118,121,125,127,128,132,135,137,138,139,140,143,144,156,157,178,274,275,278,284,285,287,289,290,291,292,293,294,295,296,297,302,305,306,621,623,624,625,327,329,343,362,363,364,367,414,415,416,420,496,527,530,532,533,535,536,542,549,557,563,564,567,568,590,591,595],"tindex":"fa53149b-3e85-11e6-88a6-2f0f796472d0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"fa53149c-3e85-11e6-88a6-fba876d3b2da","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"fa53149d-3e85-11e6-88a6-fd24a81c0156","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"fa533bae-3e85-11e6-88a6-d70998ddc134","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[8,9,10,11,13,14,15,19,20,171,217,245,258,260,272,622,337,397,408,534,537,540,541,546,548],"tindex":"fa533baf-3e85-11e6-88a6-c9e09865c036","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[647],"tindex":"fa533bb0-3e85-11e6-88a6-291fe368b69e","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"fa5362c1-3e85-11e6-88a6-17ca49d93fdf","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"fa5362c2-3e85-11e6-88a6-2bc4291dd812","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa5389d3-3e85-11e6-88a6-3f97fbf7f8fe","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa5389d4-3e85-11e6-88a6-0d7c5874863c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"fa5389d5-3e85-11e6-88a6-032509500994","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element == null) {\n                                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            java.util.List<com.google.gson.JsonElement>.add(element);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa5389d6-3e85-11e6-88a6-e74178c35e41","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"fa5389d7-3e85-11e6-88a6-b9f7a58e9b46","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa53b0e8-3e85-11e6-88a6-3f9b761cf398","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa53b0e9-3e85-11e6-88a6-25256e4a3b37","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"fa53b0ea-3e85-11e6-88a6-9f1bd3ddf7dc","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"fa53d7fb-3e85-11e6-88a6-494cb66f2cb9","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"fa53d7fc-3e85-11e6-88a6-0dc0378e8d5a","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"fa53ff0d-3e85-11e6-88a6-b79f34d36315","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"fa53ff0e-3e85-11e6-88a6-5bf0fd454cf7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"fa54261f-3e85-11e6-88a6-452f5cb40f2d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"fa544d30-3e85-11e6-88a6-f9c252488a32","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"fa547441-3e85-11e6-88a6-89ff109dfb19","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"fa547442-3e85-11e6-88a6-a56cead0f511","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fa547443-3e85-11e6-88a6-cbdb14028b85","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fa547444-3e85-11e6-88a6-1b2d194db8cf","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"fa549b55-3e85-11e6-88a6-5958e314013c","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"fa549b56-3e85-11e6-88a6-c9f858ba5109","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (to.getRawType().equals(from.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"fa549b57-3e85-11e6-88a6-75e42f945573","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    if (element instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (element == null) {\n                                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            java.util.List<com.google.gson.JsonElement>.add(element);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"fa549b58-3e85-11e6-88a6-db00832fdf28","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"fa549b59-3e85-11e6-88a6-c3bbca5a4f04","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"fa54c26a-3e85-11e6-88a6-0965bfeaa64a","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"fa54c26b-3e85-11e6-88a6-e73c562caf0d","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"fa54e97c-3e85-11e6-88a6-796d68dc78a8","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"fa54e97d-3e85-11e6-88a6-8b213ef86a05","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"fa54e97e-3e85-11e6-88a6-91912d6ddfe5","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"fa54e97f-3e85-11e6-88a6-7345a135518a","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356205/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":77,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
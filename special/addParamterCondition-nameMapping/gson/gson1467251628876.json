{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":225,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":352,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":287,"com.google.gson.functional.StringTest.testStringValueDeserialization":514,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":145,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":480,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":560,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":117,"com.google.gson.MixedStreamTest.testWriteLenient":23,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":167,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":328,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":220,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":180,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":86,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":184,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":596,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":436,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":625,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":134,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":567,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":57,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":233,"com.google.gson.functional.ObjectTest.testSingletonLists":84,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":481,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":395,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":516,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":298,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":119,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":488,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":99,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":428,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":598,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":244,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":273,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":526,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":69,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":280,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":591,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":140,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":421,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":549,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":310,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":344,"com.google.gson.functional.EnumTest.testEnumCaseMapping":419,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":424,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":515,"com.google.gson.functional.JsonTreeTest.testToJsonTree":131,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":548,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":334,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":40,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":10,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":386,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":476,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":414,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":532,"com.google.gson.functional.ObjectTest.testNullDeserialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":77,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":523,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":96,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":605,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":637,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":561,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":446,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":308,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":218,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":106,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":636,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":490,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":173,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":608,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":487,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":11,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":18,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":263,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":462,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":611,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":108,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":323,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":575,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":168,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":341,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":588,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":473,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":213,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":46,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":346,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":19,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":349,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":589,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":105,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":376,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":92,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":206,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":270,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":28,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":398,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":509,"com.google.gson.metrics.PerformanceTest.testDummy":635,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":32,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":56,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":435,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":290,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":314,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":326,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":475,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":217,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":80,"com.google.gson.functional.CollectionTest.testSetDeserialization":183,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":135,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":95,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":541,"com.google.gson.functional.EnumTest.testEnumSet":621,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":4,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":289,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":465,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":496,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":100,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":55,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":593,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":45,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":600,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":120,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":305,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":601,"com.google.gson.functional.MapTest.testHashMapDeserialization":493,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":558,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":325,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":545,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":618,"com.google.gson.MixedStreamTest.testReadNulls":633,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":150,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":224,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":210,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":316,"com.google.gson.functional.MapTest.testSortedMap":505,"com.google.gson.functional.MapTest.testMapSerialization":502,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":226,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":191,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":586,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":388,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":189,"com.google.gson.functional.MapTest.testSerializeMaps":285,"com.google.gson.functional.MapTest.testComplexKeysSerialization":144,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":540,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":511,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":392,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":79,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":242,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":239,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":162,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":450,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":624,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":137,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":448,"com.google.gson.functional.MapTest.testStringKeyDeserialization":345,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":433,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":292,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":21,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":513,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":564,"com.google.gson.functional.PrettyPrintingTest.testMap":281,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":369,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":559,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":359,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":228,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":460,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":391,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":427,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":518,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":520,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":471,"com.google.gson.functional.MapTest.testMapSerializationEmpty":510,"com.google.gson.functional.CollectionTest.testQueueSerialization":531,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":582,"com.google.gson.functional.MapTest.testMapOfMapSerialization":343,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":478,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":534,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":299,"com.google.gson.functional.FieldNamingTest.testIdentity":190,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":353,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":291,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":70,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":109,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":83,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":130,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":276,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":551,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":422,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":262,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":275,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":517,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":147,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":485,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":466,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":489,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":492,"com.google.gson.functional.MapTest.testMapSubclassSerialization":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":409,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":63,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":165,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":196,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":257,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":573,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":626,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":616,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":118,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":54,"com.google.gson.functional.EnumTest.testEnumSubclass":417,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":592,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":98,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":429,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":550,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":214,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":595,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":48,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":157,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":552,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":149,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":577,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":148,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":30,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":254,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":385,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":442,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":583,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":27,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":486,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":85,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":337,"com.google.gson.MixedStreamTest.testWriteNulls":632,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":384,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":347,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":378,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":78,"com.google.gson.CommentsTest.testParseComments":629,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":87,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":294,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":200,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":208,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":594,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":365,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":354,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":504,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":437,"com.google.gson.MixedStreamTest.testReadInvalidState":630,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":132,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":332,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":408,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":192,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":426,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":397,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":430,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":393,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":432,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":197,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":267,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":400,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":603,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":381,"com.google.gson.functional.MapTest.testMapDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":474,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":284,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":336,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":232,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":38,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":340,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":235,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":412,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":163,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":13,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":122,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":110,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":445,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":152,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":371,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":463,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":61,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":161,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":136,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":503,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":333,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":296,"com.google.gson.functional.PrimitiveTest.testShortSerialization":606,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":597,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":312,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":574,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":124,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":557,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":186,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":416,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":181,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":164,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":494,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":571,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":364,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":411,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":170,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":327,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":261,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":614,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":610,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":7,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":26,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":47,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":111,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":455,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":219,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":578,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":115,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":91,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":154,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":123,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":182,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":367,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":231,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":479,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":563,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":468,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":483,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":34,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":528,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":553,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":407,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":580,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":22,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":234,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":622,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":230,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":193,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":89,"com.google.gson.functional.MapTest.testGeneralMapField":143,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":375,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":613,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":207,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":368,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":329,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":317,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":351,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":556,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":599,"com.google.gson.MixedStreamTest.testReadMixedStreamed":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":321,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":401,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":499,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":211,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":423,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":535,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":66,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":584,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":311,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":126,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":342,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":357,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":338,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":295,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":75,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":247,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":477,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":348,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":454,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":533,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":620,"com.google.gson.functional.ObjectTest.testNestedDeserialization":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":301,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":303,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":447,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":29,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":612,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":199,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":24,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":500,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":519,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":53,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":20,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":153,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":171,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":223,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":537,"com.google.gson.functional.ObjectTest.testNullSerialization":443,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":156,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":356,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":495,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":142,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":394,"com.google.gson.functional.MapTest.testInterfaceTypeMap":141,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":387,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":370,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":554,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":6,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":241,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":265,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":160,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":544,"com.google.gson.MixedStreamTest.testReadClosed":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":456,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":307,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":565,"com.google.gson.MixedStreamTest.testWriteClosed":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":229,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":361,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":36,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":491,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":58,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":202,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":113,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":128,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":39,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":93,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":360,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":587,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":250,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":158,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":324,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":304,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":175,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":615,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":570,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":81,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":372,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":201,"com.google.gson.functional.CollectionTest.testQueueDeserialization":539,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":403,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":585,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":253,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":522,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":617,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":331,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":107,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":470,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":114,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":174,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":358,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":256,"com.google.gson.functional.MapTest.testRawMapSerialization":508,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":482,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":8,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":102,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":151,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":195,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":619,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":277,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":279,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":315,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":377,"com.google.gson.functional.PrimitiveTest.testByteSerialization":604,"com.google.gson.ObjectTypeAdapterTest.testSerialize":271,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":439,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":172,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":562,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":221,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":14,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":187,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":59,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":355,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":420,"com.google.gson.functional.MapTest.testMapWithQuotes":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":318,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":568,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":521,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":288,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":546,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":300,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":458,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":133,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":413,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":51,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":112,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":15,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":467,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":94,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":319,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":222,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":602,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":453,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":363,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":380,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":330,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":373,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":155,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":72,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":627,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":166,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":268,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":452,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":302,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":555,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":264,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":297,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":101,"com.google.gson.functional.ObjectTest.testNestedSerialization":103,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":204,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":350,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":399,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":525,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":313,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":507,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":194,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":41,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":634,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":638,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":97,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":438,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":410,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":35,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":125,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":425,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":566,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":628,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":121,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":245,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":9,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":524,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":383,"com.google.gson.functional.CollectionTest.testSetSerialization":185,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":216,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":50,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":282,"com.google.gson.functional.StringTest.testStringValueSerialization":527,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":82,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":25,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":176,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":529,"com.google.gson.MixedStreamTest.testWriteInvalidState":258,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":374,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":441,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":569,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":209,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":402,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":464,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":188,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":76,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":73,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":306,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":484,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":440,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":497,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":286,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":379,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":434},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"7cddd32e-3e65-11e6-88c9-7f58e4ecbc95","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[17,18,19,20,21,22,23],"tindex":"7cde214f-3e65-11e6-88c9-f120cfd99075","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,24,1,25,26,27,2,28,29,30,31,32,3,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,4,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,13,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271],"tindex":"7cde4860-3e65-11e6-88c9-13e62207996f","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"7cde6f71-3e65-11e6-88c9-43c49992fd17","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"7cde6f72-3e65-11e6-88c9-29246651f2ba","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[272],"tindex":"7cde9683-3e65-11e6-88c9-07fd46f2e819","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (property == null) {\n                        {\n                            add(property, createJsonElement(value));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7cdebd94-3e65-11e6-88c9-fff5a9059af5","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"7cdebd95-3e65-11e6-88c9-a7d1f8d3148a","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,28,29,30,31,32,3,33,34,35,38,39,40,41,48,49,50,51,53,54,55,56,4,58,59,60,62,64,6,7,8,10,11,273,67,69,70,71,72,74,75,76,77,78,79,81,82,83,84,87,90,93,95,97,100,102,103,105,108,110,111,113,119,120,126,127,128,129,13,130,131,132,133,134,135,136,137,138,139,141,142,143,145,146,149,150,151,152,154,155,156,159,161,164,165,166,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,189,190,192,194,196,197,198,199,200,201,202,203,204,205,206,207,210,212,213,214,215,217,218,220,221,222,223,224,225,226,228,231,234,235,237,238,239,241,243,246,247,250,251,254,255,256,257,270,271],"tindex":"7cdee4a6-3e65-11e6-88c9-7181f01448c0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7cdee4a7-3e65-11e6-88c9-195ba2e3d59d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7cdf0bb8-3e65-11e6-88c9-e15b6fcd5113","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7cdf0bb9-3e65-11e6-88c9-31cf398321b6","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7cdf0bba-3e65-11e6-88c9-cfb80fccc91d","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7cdf0bbb-3e65-11e6-88c9-23311ee94111","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (property == null) {\n                        {\n                            add(property, createJsonElement(value));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[29,30,31,34,35,40,274,69,129,13,130,131,145,201,202,275,220,221,276,222,223,225,277,278,279],"tindex":"7cdf32cc-3e65-11e6-88c9-ed8c339386ba","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[69,280,281,136,137,282,283,284,138,285,257,286,287],"tindex":"7cdf32cd-3e65-11e6-88c9-6113b28d2d6a","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"7cdf32ce-3e65-11e6-88c9-3f04db155c29","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[2,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,288,46,289,290,291,47,48,292,49,293,50,294,295,296,297,298,299,300,301,51,274,53,54,55,4,58,59,60,302,63,69,303,70,304,72,73,74,305,306,307,308,309,310,311,312,313,75,76,77,78,79,81,82,83,84,85,86,87,88,89,93,97,98,99,100,102,103,106,108,109,112,116,314,315,119,316,317,318,319,320,321,124,322,323,324,325,326,327,328,329,330,331,332,333,334,13,132,335,133,134,135,280,281,136,137,282,283,284,138,336,337,338,339,285,340,139,341,342,343,344,140,141,142,143,144,345,346,145,146,147,148,149,151,160,161,164,165,166,167,347,348,349,172,350,351,173,174,352,353,354,355,175,176,177,178,179,356,357,180,358,181,359,360,361,182,362,363,184,185,364,186,187,188,189,190,365,191,192,193,194,366,195,367,368,369,370,371,197,199,200,201,202,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,14,388,207,208,209,389,390,391,392,393,210,211,212,213,214,275,215,216,217,218,394,395,396,397,398,399,400,401,402,403,404,405,17,15,18,19,406,407,20,408,409,21,410,411,22,16,220,221,276,222,223,225,231,233,412,413,414,234,235,415,239,416,417,241,242,418,419,243,244,245,247,250,420,251,421,422,423,277,278,256,257,260,261,424,425,270,426,271,427,428,429],"tindex":"7cdf32cf-3e65-11e6-88c9-51e35bada1ba","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7cdf59e0-3e65-11e6-88c9-433bcbd3bba3","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[430],"tindex":"7cdf59e1-3e65-11e6-88c9-13d1a8101cf5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7cdf59e2-3e65-11e6-88c9-3586177c5fe2","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"7cdf80f3-3e65-11e6-88c9-07be0f8ae8f9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[431,432,433],"tindex":"7cdfa804-3e65-11e6-88c9-3d09a627553a","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from == null) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"7cdfa805-3e65-11e6-88c9-e9fbc3fc5e7b","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"7cdfa806-3e65-11e6-88c9-4735f13bbbdf","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7cdfa807-3e65-11e6-88c9-4bcdbf5a70b2","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,24,1,25,26,27,2,28,29,30,31,32,3,33,34,35,36,37,38,39,40,41,42,434,43,44,45,435,288,46,289,290,291,47,48,292,49,293,50,294,295,296,297,298,299,300,301,51,52,274,53,54,55,56,4,57,58,59,60,61,62,302,63,64,436,65,66,67,68,69,303,437,438,70,71,304,72,73,305,306,307,308,309,310,311,312,313,75,76,77,78,79,80,81,82,439,440,83,84,85,86,87,88,89,90,91,92,93,441,94,442,95,96,443,97,444,98,445,99,446,100,101,102,103,447,104,105,106,107,448,449,108,109,110,111,112,113,114,115,116,117,314,315,118,119,450,451,452,316,453,120,454,455,317,456,457,121,122,458,459,460,318,461,319,462,320,463,123,321,464,465,124,466,467,468,469,470,471,125,472,473,474,475,476,477,478,126,322,479,323,480,481,482,483,324,325,484,326,327,328,329,485,127,330,486,331,332,128,487,488,333,489,334,490,491,129,13,130,131,132,335,133,134,135,280,281,136,137,282,283,284,138,492,336,337,493,338,339,285,494,495,496,497,340,498,139,341,499,342,500,501,343,502,344,140,503,504,505,141,506,142,143,507,508,509,144,510,345,346,511,512,513,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,347,348,349,172,350,351,173,174,514,515,352,516,353,517,518,519,354,355,520,521,522,523,524,525,526,527,356,357,180,358,181,359,528,529,530,531,360,361,532,182,533,534,362,363,183,184,535,536,185,537,538,364,539,540,541,542,543,186,187,188,189,190,365,191,192,193,194,366,195,367,368,369,370,196,371,544,197,198,199,200,201,202,203,204,205,206,545,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,14,388,207,208,209,389,390,391,392,393,210,546,211,212,213,214,275,215,216,217,218,547,548,549,550,551,394,552,553,554,555,395,556,396,557,397,558,559,560,561,562,563,564,398,399,565,566,567,568,569,570,571,400,401,572,402,403,573,574,404,575,576,405,577,578,579,580,581,582,583,17,584,585,586,587,588,589,590,591,592,593,15,594,18,19,595,596,406,597,598,599,600,601,602,219,407,603,604,20,605,606,408,409,607,608,609,21,410,411,610,611,612,22,16,613,614,615,616,220,221,276,222,223,224,617,225,226,618,227,228,229,230,231,232,233,412,413,414,234,235,236,237,415,238,619,620,239,240,621,622,416,417,623,624,241,242,418,419,625,626,243,244,245,246,247,248,249,250,627,420,251,421,422,423,254,255,628,629,256,630,631,257,632,258,23,633,634,259,260,261,635,424,425,270,427,428,429,636,637,638],"tindex":"7cdfcf18-3e65-11e6-88c9-431e0ebb333f","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7cdff629-3e65-11e6-88c9-55866f36dd04","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (property == null) {\n                        {\n                            add(property, createJsonElement(value));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7cdff62a-3e65-11e6-88c9-5f88e4b61129","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"7cdff62b-3e65-11e6-88c9-55be89ad2a77","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[124,489,619],"tindex":"7ce01d3c-3e65-11e6-88c9-9d7f3343a9fe","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[439,440],"tindex":"7ce01d3d-3e65-11e6-88c9-2543b01bf3bd","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"7ce01d3e-3e65-11e6-88c9-875e068bb278","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"7ce01d3f-3e65-11e6-88c9-ffcac4a6a12b","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ce04450-3e65-11e6-88c9-c996b18894c9","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251058886/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
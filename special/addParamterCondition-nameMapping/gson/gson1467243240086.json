{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":642,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":17,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":315,"com.google.gson.functional.StringTest.testStringValueDeserialization":584,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":0,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":480,"com.google.gson.JsonPrimitiveTest.testDeepCopy":664,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":533,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":21,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":195,"com.google.gson.MixedStreamTest.testWriteLenient":362,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":413,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":593,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":271,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":90,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":142,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":145,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":498,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":565,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":336,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":338,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":55,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":540,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":679,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":210,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":604,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":653,"com.google.gson.functional.ObjectTest.testSingletonLists":73,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":269,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":316,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":528,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":192,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":60,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":486,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":508,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":229,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":141,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":614,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":592,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":645,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":150,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":323,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":561,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":436,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":225,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":522,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":207,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":435,"com.google.gson.functional.EnumTest.testEnumCaseMapping":394,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":314,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":363,"com.google.gson.functional.JsonTreeTest.testToJsonTree":36,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":521,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":487,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":382,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":139,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":478,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":529,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":200,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":396,"com.google.gson.functional.ObjectTest.testNullDeserialization":514,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":63,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":590,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":505,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":660,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":307,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":412,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":534,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":280,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":678,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":205,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":154,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":511,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":411,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":466,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":134,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":573,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":572,"com.google.gson.JsonParserTest.testParseString":655,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":485,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":140,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":300,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":471,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":577,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":83,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":247,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":268,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":548,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":431,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":558,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":594,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":652,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":477,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":89,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":415,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":181,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":374,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":301,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":600,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":559,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":82,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":243,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":149,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":158,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":502,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":667,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":24,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":286,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":438,"com.google.gson.metrics.PerformanceTest.testDummy":422,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":621,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":37,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":117,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":183,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":441,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":489,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":270,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":265,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":494,"com.google.gson.functional.CollectionTest.testSetDeserialization":628,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":56,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":77,"com.google.gson.functional.EnumTest.testEnumSet":331,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":447,"com.google.gson.JsonStreamParserTest.testIterator":643,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":551,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":182,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":359,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":474,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":116,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":562,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":216,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":568,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":61,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":202,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":304,"com.google.gson.functional.MapTest.testHashMapDeserialization":425,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":531,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":483,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":350,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":442,"com.google.gson.MixedStreamTest.testReadNulls":636,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":16,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":25,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":647,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":87,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":493,"com.google.gson.functional.MapTest.testSortedMap":437,"com.google.gson.functional.MapTest.testMapSerialization":368,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":18,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":556,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":460,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":46,"com.google.gson.functional.MapTest.testSerializeMaps":233,"com.google.gson.functional.MapTest.testComplexKeysSerialization":372,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":446,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":414,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":440,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":65,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":613,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":451,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":386,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":612,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":105,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":671,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":680,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":22,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":513,"com.google.gson.functional.MapTest.testStringKeyDeserialization":439,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":361,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":186,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":310,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":375,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":221,"com.google.gson.functional.PrettyPrintingTest.testMap":324,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":532,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":343,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":256,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":491,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":228,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":463,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":320,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":262,"com.google.gson.functional.MapTest.testMapSerializationEmpty":373,"com.google.gson.functional.CollectionTest.testQueueSerialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":552,"com.google.gson.functional.MapTest.testMapOfMapSerialization":235,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":479,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":626,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":52,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":297,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":193,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":676,"com.google.gson.functional.FieldNamingTest.testIdentity":47,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":317,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":640,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":184,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":95,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":515,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":1,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":23,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":72,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":196,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":523,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":226,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":223,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":318,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":295,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":484,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":475,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":385,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":424,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":309,"com.google.gson.functional.MapTest.testMapSubclassSerialization":365,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":156,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":610,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":448,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":147,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":160,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":337,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":581,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":595,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":490,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":115,"com.google.gson.functional.EnumTest.testEnumSubclass":334,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":298,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":230,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":282,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":151,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":163,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":564,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":67,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":352,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":524,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":71,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":549,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":496,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":3,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":457,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":504,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":553,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":174,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":274,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":497,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":170,"com.google.gson.MixedStreamTest.testWriteNulls":407,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":377,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":598,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":64,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":609,"com.google.gson.CommentsTest.testParseComments":639,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":188,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":605,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":101,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":461,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":563,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":164,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":236,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":319,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":632,"com.google.gson.MixedStreamTest.testReadInvalidState":634,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":53,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":10,"com.google.gson.JsonParserTest.testParseMixedArray":400,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":650,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":285,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":232,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":464,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":360,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":98,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":417,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":289,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":50,"com.google.gson.JsonArrayTest.testRemove":670,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":175,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":305,"com.google.gson.functional.MapTest.testMapDeserialization":430,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":264,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":327,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":169,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":405,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":603,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":40,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":367,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":109,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":328,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":353,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":35,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":468,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":84,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":27,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":348,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":257,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":211,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":681,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":32,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":70,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":369,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":190,"com.google.gson.functional.PrimitiveTest.testShortSerialization":391,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":201,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":566,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":208,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":674,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":547,"com.google.gson.JsonParserTest.testParseEmptyString":657,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":354,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":530,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":43,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":333,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":143,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":155,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":427,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":543,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":219,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":311,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":596,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":648,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":177,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":607,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":418,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":638,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":392,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":576,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":137,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":173,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":185,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":453,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":421,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":661,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":570,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":550,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":518,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":501,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":28,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":238,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":472,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":347,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":187,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":107,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":267,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":536,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":482,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":5,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":622,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":525,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":571,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":296,"com.google.gson.JsonArrayTest.testSet":668,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":312,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":131,"com.google.gson.JsonPrimitiveTest.testEquals":663,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":108,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":332,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":445,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":166,"com.google.gson.functional.MapTest.testGeneralMapField":15,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":500,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":579,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":42,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":152,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":220,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":272,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":370,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":284,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":378,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":303,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":355,"com.google.gson.MixedStreamTest.testReadMixedStreamed":637,"com.google.gson.JsonObjectTest.testDeepCopy":672,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":290,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":473,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":227,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":397,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":583,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":231,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":620,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":554,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":329,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":675,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":57,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":433,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":330,"com.google.gson.JsonArrayTest.testDeepCopy":669,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":189,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":313,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":130,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":127,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":544,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":266,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":599,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":662,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":465,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":625,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":194,"com.google.gson.functional.ObjectTest.testNestedDeserialization":519,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":281,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":399,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":443,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":206,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":578,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":100,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":171,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":434,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":586,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":658,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":114,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":306,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":239,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":93,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":597,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":398,"com.google.gson.functional.ObjectTest.testNullSerialization":389,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":30,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":608,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":428,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":14,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":283,"com.google.gson.functional.MapTest.testInterfaceTypeMap":13,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":459,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":222,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":526,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":124,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":136,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":349,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":450,"com.google.gson.MixedStreamTest.testReadClosed":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":255,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":538,"com.google.gson.MixedStreamTest.testWriteClosed":410,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":345,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":444,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":75,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":488,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":119,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":38,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":103,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":86,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":99,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":59,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":41,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":76,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":344,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":616,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":218,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":557,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":449,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":346,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":646,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":677,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":682,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":176,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":198,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":48,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":580,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":666,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":288,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":470,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":66,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":240,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":102,"com.google.gson.functional.CollectionTest.testQueueDeserialization":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":291,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":555,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":589,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":275,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":617,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":12,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":261,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":135,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":517,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":342,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":159,"com.google.gson.functional.MapTest.testRawMapSerialization":237,"com.google.gson.JsonParserTest.testParseReader":654,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":481,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":138,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":26,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":80,"com.google.gson.JsonPrimitiveTest.testExponential":665,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":168,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":393,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":401,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":244,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":277,"com.google.gson.functional.PrimitiveTest.testByteSerialization":390,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":403,"com.google.gson.ObjectTypeAdapterTest.testSerialize":162,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":357,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":133,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":535,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":404,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":91,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":249,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":44,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":120,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":224,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":587,"com.google.gson.functional.MapTest.testMapWithQuotes":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":380,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":541,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":588,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":180,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":582,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":278,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":379,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":54,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":406,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":199,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":113,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":516,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":299,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":506,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":251,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":381,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":92,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":260,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":569,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":387,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":627,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":455,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":209,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":273,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":29,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":97,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":618,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":157,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":492,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":212,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":527,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":191,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":509,"com.google.gson.functional.ObjectTest.testNestedSerialization":81,"com.google.gson.JsonObjectTest.testAddingStringProperties":673,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":132,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":287,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":340,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":591,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":339,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":371,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":11,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":94,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":656,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":351,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":409,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":78,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":601,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":575,"com.google.gson.JsonPrimitiveTest.testBoolean":659,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":6,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":476,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":364,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":423,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":467,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":510,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":615,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":321,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":248,"com.google.gson.functional.CollectionTest.testSetSerialization":146,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":633,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":69,"com.google.gson.functional.StringTest.testStringValueSerialization":322,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":325,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":20,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":49,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":172,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":623,"com.google.gson.MixedStreamTest.testWriteInvalidState":408,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":454,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":388,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":542,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":250,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":545,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":383,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":45,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":356,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":62,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":602,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":641,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":203,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":416,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":384,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":358,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":429,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":213,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":246},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"f4c234c6-3e51-11e6-b6f5-6b4038284fa6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"f4c282e7-3e51-11e6-b6f5-4b2b28b15c49","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"f4c2a9f8-3e51-11e6-b6f5-75b5bf42910e","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.WildcardType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7],"tindex":"f4c2a9f9-3e51-11e6-b6f5-610be7a3fa67","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[8,9,10,11,12,13,14,15,0,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,1,36,2,3,4,37,38,39,5,6,40,41,7,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"tindex":"f4c2a9fa-3e51-11e6-b6f5-1fc7a554a02f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"f4c2d10b-3e51-11e6-b6f5-293135f0400e","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[163,164,165,10,166,11,167,168,169,170,0,21,171,22,172,173,174,23,24,175,176,177,178,179,62,64,180,181,182,183,184,185,67,186,68,187,69,188,189,190,191,192,193,194,195,90,91,196,92,93,94,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,136,137,218,219,220,221,222,223,224,161,225,226,227,228,229,230],"tindex":"f4c2d10c-3e51-11e6-b6f5-45b3f1c9ade1","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[231],"tindex":"f4c2f81d-3e51-11e6-b6f5-adda6173dbd8","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"f4c2f81e-3e51-11e6-b6f5-918740c392f3","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"f4c2f81f-3e51-11e6-b6f5-330ee6f7dffe","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"f4c31f30-3e51-11e6-b6f5-551a8760b73a","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[232],"tindex":"f4c34641-3e51-11e6-b6f5-ddb7b6c147a0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[8,9,10,11,233,12,234,235,236,13,14,15,237,0,16,19,20,238,21,22,173,23,24,25,26,27,239,28,29,30,31,32,33,35,38,40,41,240,241,242,243,244,245,246,247,248,249,42,250,251,252,43,44,45,46,47,48,49,50,51,52,53,253,54,55,56,254,255,256,257,258,259,260,261,262,263,264,265,266,57,267,268,269,270,271,272,58,273,274,275,178,59,179,276,277,60,62,63,64,65,66,180,67,186,68,69,188,189,191,278,70,71,72,73,74,75,76,77,78,279,280,79,80,81,281,82,83,84,85,86,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,95,96,97,98,99,100,101,323,324,104,105,325,326,327,107,328,200,108,109,110,201,111,112,202,203,204,205,206,207,329,208,330,117,331,332,333,334,124,335,336,337,125,126,127,128,338,129,339,130,131,132,133,340,341,134,135,142,342,343,344,345,144,346,145,146,347,220,221,222,147,348,349,148,149,350,151,223,152,153,154,155,156,158,351,225,226,227],"tindex":"f4c34642-3e51-11e6-b6f5-fde20b733839","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[25,29,352,353,43,46],"tindex":"f4c36d53-3e51-11e6-b6f5-9936485de0ae","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[354],"tindex":"f4c36d54-3e51-11e6-b6f5-81bbf6c375ce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[355,356],"tindex":"f4c36d55-3e51-11e6-b6f5-49da915de887","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"f4c36d56-3e51-11e6-b6f5-e13aa0ab793a","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f4c39467-3e51-11e6-b6f5-1f6eef05f8bf","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[357,358],"tindex":"f4c39468-3e51-11e6-b6f5-8d37ef510695","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"f4c39469-3e51-11e6-b6f5-0742c8391cdb","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f4c3946a-3e51-11e6-b6f5-91d9ea1af295","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f4c3bb7b-3e51-11e6-b6f5-370e5ab952d7","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"f4c3bb7c-3e51-11e6-b6f5-559ffb9ad3ac","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[359,360,361],"tindex":"f4c3bb7d-3e51-11e6-b6f5-b10ba66f04be","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[297,300,301,306,310,312,362],"tindex":"f4c3bb7e-3e51-11e6-b6f5-57e1b5b4fe75","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"f4c3e28f-3e51-11e6-b6f5-cfe47d2b8e71","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[8,9,363,364,10,11,169,365,233,366,367,12,234,235,368,369,236,13,370,14,15,371,237,372,373,374,375,0,16,376,17,18,19,20,357,358,238,21,22,173,23,24,25,26,27,28,29,30,31,32,33,34,35,1,36,2,3,4,37,38,39,5,6,40,41,7,240,241,242,243,244,245,246,247,248,377,249,42,250,251,252,43,44,45,46,47,48,49,50,51,52,53,253,54,55,56,254,378,255,379,256,380,381,382,257,383,354,258,259,260,261,262,263,264,265,266,57,175,267,268,269,176,384,270,271,272,58,273,274,275,178,59,179,385,276,277,60,386,387,61,62,63,64,65,66,180,182,67,186,68,69,188,189,191,193,278,194,70,71,72,73,74,75,76,388,77,389,78,279,280,79,80,81,281,82,83,84,85,86,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,390,306,307,391,308,309,310,311,312,313,392,87,88,89,90,91,196,92,93,314,315,316,317,318,319,320,321,322,94,95,96,97,98,99,100,101,102,103,323,324,104,105,325,326,327,106,107,328,200,108,109,110,201,111,393,112,202,203,204,205,206,207,329,208,330,113,209,114,115,116,117,118,119,120,121,122,123,331,332,333,334,124,335,394,336,337,125,126,127,128,338,129,339,130,131,132,133,340,341,134,135,136,142,342,143,343,395,344,345,396,144,346,145,397,146,398,219,347,220,221,222,147,348,349,148,149,350,150,399,151,223,152,153,154,155,156,157,158,400,401,402,403,404,405,351,406,159,160,407,408,362,409,410,161,225,226,227,228,229,230,411,412,413,414,415,416,417,418,419,420,421],"tindex":"f4c3e290-3e51-11e6-b6f5-fb4dd1022035","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"f4c3e291-3e51-11e6-b6f5-79b3bb36cc06","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"f4c409a2-3e51-11e6-b6f5-83bb7803b724","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[422,8,9,423,363,364,164,165,10,166,11,167,168,424,169,170,425,426,365,233,427,428,366,429,367,430,12,431,432,433,434,234,235,368,435,436,369,236,437,13,370,14,15,371,237,438,372,373,439,374,440,441,375,0,16,376,17,18,442,443,19,444,445,20,357,358,446,447,238,448,21,171,22,172,173,174,23,24,25,26,27,239,28,29,30,352,449,31,450,32,451,353,34,35,1,36,2,3,4,37,38,39,5,6,452,453,40,41,7,240,241,454,242,243,244,245,246,455,456,247,248,377,457,458,459,249,460,42,461,250,462,251,463,252,464,43,44,45,46,47,53,253,54,55,56,465,254,378,255,466,467,468,379,469,256,380,470,381,471,382,257,472,473,383,474,354,475,258,259,260,261,262,476,263,477,264,265,478,266,479,57,175,267,268,480,269,481,482,176,483,384,270,177,271,272,484,58,273,274,275,178,59,485,486,179,385,487,276,488,489,277,490,60,386,491,492,493,387,61,62,63,64,65,494,66,180,181,182,183,184,185,67,186,68,187,69,188,189,190,191,192,193,278,194,70,495,496,71,72,73,497,498,74,499,500,75,501,502,76,388,503,504,77,505,389,78,506,507,279,508,280,79,509,80,81,281,510,82,511,512,513,514,83,515,84,85,516,86,517,518,519,195,520,521,522,282,523,283,524,525,526,527,528,284,529,530,285,531,532,533,534,535,536,537,286,287,538,539,540,541,542,288,543,289,290,544,545,291,546,547,292,548,293,294,549,550,295,296,551,552,553,297,554,555,556,557,558,559,560,561,298,562,299,563,300,301,564,565,302,566,567,303,568,304,569,570,571,305,390,306,307,391,308,309,572,573,574,310,575,311,576,577,578,312,313,579,392,580,581,87,582,583,88,89,90,91,196,92,93,584,314,315,316,317,318,585,586,319,587,320,588,589,590,321,591,592,322,593,594,595,596,597,598,599,600,94,197,601,95,96,198,97,602,98,99,100,101,102,103,323,324,104,105,325,326,327,106,107,603,604,328,199,200,108,109,605,110,201,111,393,606,112,607,202,203,204,205,206,207,329,208,608,330,113,609,209,114,115,116,117,118,210,119,120,121,211,122,212,610,123,331,332,333,334,611,612,124,613,335,394,336,337,125,614,615,126,127,616,617,128,618,338,619,620,129,621,339,130,131,132,213,214,215,216,217,133,340,341,134,135,142,342,143,343,622,623,624,395,344,345,396,144,625,626,346,627,628,145,397,629,146,398,630,219,631,347,220,221,222,147,348,349,148,149,350,150,399,632,151,223,152,633,153,154,155,156,157,158,351,159,634,635,160,407,408,362,636,409,410,637,638,224,161,225,226,227,639,228,229,230,411,412],"tindex":"f4c409a3-3e51-11e6-b6f5-951a7c340633","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[378,381,382,271,273,179],"tindex":"f4c430b4-3e51-11e6-b6f5-0b9ef8b18462","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f4c430b5-3e51-11e6-b6f5-8bb65bcea142","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"f4c430b6-3e51-11e6-b6f5-e744c3bc3b81","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"f4c430b7-3e51-11e6-b6f5-973c6604366e","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[390],"tindex":"f4c457c8-3e51-11e6-b6f5-d55ab3801a42","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[640,641,642,643,644,645,646,647,648,649,650,651,164,165,10,166,11,167,168,13,15,440,0,17,445,357,358,33,34,35,1,36,2,3,4,5,6,7,378,380,381,382,271,273,179,487,277,60,180,182,184,67,188,189,190,192,194,87,88,89,90,91,196,92,93,593,594,595,596,597,94,198,102,103,199,202,204,205,207,209,212,333,652,219,220,222,150,399,223,653,654,655,158,656,400,657,658,401,402,403,659,405,660,661,662,663,664,665,666,667,407,668,669,670,411,671,672,673,413,414,415,416,674,675,676,417,418,419,420,421,677,678,679,680,681,682],"tindex":"f4c457c9-3e51-11e6-b6f5-750c6ea41015","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"f4c457ca-3e51-11e6-b6f5-cf4d1da5f911","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f4c457cb-3e51-11e6-b6f5-a751a699bbe7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[359,360,361],"tindex":"f4c47edc-3e51-11e6-b6f5-fb279a5b2e3f","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl","sourcecode":"(c < '0') || (c > '9')"},"failures":[],"tindex":"f4c47edd-3e51-11e6-b6f5-371fb250abab","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"f4c47ede-3e51-11e6-b6f5-bd4873b70d01","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"f4c47edf-3e51-11e6-b6f5-7f30682c9d7b","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"f4c47ee0-3e51-11e6-b6f5-c749f2edc16b","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f4c4a5f1-3e51-11e6-b6f5-8fc5aeb783e1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"f4c4a5f2-3e51-11e6-b6f5-53c5c98df310","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"f4c4a5f3-3e51-11e6-b6f5-af993167f911","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f4c4cd04-3e51-11e6-b6f5-eb894f1cb014","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242478509/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":47,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
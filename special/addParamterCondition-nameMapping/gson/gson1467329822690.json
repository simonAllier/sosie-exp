{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":635,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":93,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":478,"com.google.gson.functional.StringTest.testStringValueDeserialization":476,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":723,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":189,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":289,"com.google.gson.JsonPrimitiveTest.testDeepCopy":659,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":150,"com.google.gson.stream.JsonWriterTest.testRepeatedName":720,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":112,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":81,"com.google.gson.MixedStreamTest.testWriteLenient":13,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":395,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":612,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":298,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":33,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":446,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":41,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":463,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":198,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":394,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":494,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":531,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":159,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":608,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":709,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":346,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":368,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":642,"com.google.gson.functional.ObjectTest.testSingletonLists":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":290,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":497,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":143,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":479,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":717,"com.google.gson.stream.JsonWriterTest.testStrings":725,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":524,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":536,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":308,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":59,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":5,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":201,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":501,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":669,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":492,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":624,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":234,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":19,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":190,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":703,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":565,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":135,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":598,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":443,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":564,"com.google.gson.functional.EnumTest.testEnumCaseMapping":393,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":477,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":593,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":134,"com.google.gson.functional.JsonTreeTest.testToJsonTree":233,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":311,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":249,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":376,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":667,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":422,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":282,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":349,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":698,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":456,"com.google.gson.functional.ObjectTest.testNullDeserialization":71,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":585,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":489,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":694,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":53,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":655,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":211,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":591,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":151,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":60,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":607,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":699,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":441,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":321,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":68,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":590,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":312,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":216,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":406,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":215,"com.google.gson.JsonParserTest.testParseString":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":307,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":195,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":668,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":174,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":263,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":72,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":418,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":628,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":288,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":187,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":396,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":557,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":637,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":279,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":127,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":614,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":510,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":579,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":196,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":402,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":188,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":67,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":412,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":47,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":121,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":592,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":662,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":155,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":575,"com.google.gson.metrics.PerformanceTest.testDummy":3,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":498,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":240,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":111,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":512,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":533,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":581,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":296,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":281,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":320,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":602,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":588,"com.google.gson.functional.CollectionTest.testSetDeserialization":462,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":532,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":30,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":52,"com.google.gson.functional.EnumTest.testEnumSet":384,"com.google.gson.JsonStreamParserTest.testIterator":636,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":179,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":269,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":552,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":61,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":365,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":192,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":110,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":203,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":438,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":542,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":204,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":148,"com.google.gson.functional.MapTest.testHashMapDeserialization":546,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":294,"com.google.gson.MixedStreamTest.testReadNulls":14,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":95,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":91,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":330,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":626,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":123,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":540,"com.google.gson.functional.MapTest.testSortedMap":568,"com.google.gson.functional.MapTest.testMapSerialization":563,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":94,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":695,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":185,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":688,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":681,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":425,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":474,"com.google.gson.functional.MapTest.testSerializeMaps":549,"com.google.gson.functional.MapTest.testComplexKeysSerialization":576,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":29,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":580,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":613,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":683,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":432,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":391,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":587,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":358,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":705,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":537,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":389,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":22,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":609,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":639,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":716,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":114,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":70,"com.google.gson.functional.MapTest.testStringKeyDeserialization":578,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":516,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":218,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":154,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":582,"com.google.gson.functional.PrettyPrintingTest.testMap":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":379,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":259,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":538,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":4,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":431,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":727,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":482,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":276,"com.google.gson.functional.CollectionTest.testQueueSerialization":453,"com.google.gson.functional.MapTest.testMapSerializationEmpty":577,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":710,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":180,"com.google.gson.functional.MapTest.testMapOfMapSerialization":562,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":171,"com.google.gson.JavaSerializationTest.testMapIsSerializable":712,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":284,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":459,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":182,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":674,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":702,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":525,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":605,"com.google.gson.functional.FieldNamingTest.testIdentity":475,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":480,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":633,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":513,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":83,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":73,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":35,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":38,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":118,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":232,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":137,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":599,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":317,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":481,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":177,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":300,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":310,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":673,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":543,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":214,"com.google.gson.functional.MapTest.testMapSubclassSerialization":548,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":89,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":375,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":32,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":10,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":169,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":381,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":499,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":258,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":397,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":535,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":364,"com.google.gson.functional.EnumTest.testEnumSubclass":387,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":191,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":6,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":57,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":136,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":316,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":690,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":197,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":515,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":687,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":337,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":139,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":437,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":175,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":677,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":436,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":238,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":421,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":704,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":51,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":181,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":117,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":173,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":721,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":303,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":40,"com.google.gson.MixedStreamTest.testWriteNulls":11,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":545,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":420,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":400,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":414,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":361,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":586,"com.google.gson.CommentsTest.testParseComments":601,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":707,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":42,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":520,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":327,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":427,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":100,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":484,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":567,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":236,"com.google.gson.MixedStreamTest.testReadInvalidState":8,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":528,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":305,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":102,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":689,"com.google.gson.JsonParserTest.testParseMixedArray":646,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":629,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":147,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":714,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":433,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":679,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":324,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":618,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":164,"com.google.gson.JsonArrayTest.testRemove":632,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":672,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":286,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":417,"com.google.gson.functional.MapTest.testMapDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":280,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":25,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":544,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":345,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":654,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":247,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":554,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":351,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":343,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":706,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":231,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":256,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":58,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":332,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":382,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":265,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":372,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":610,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":341,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":434,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":21,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":566,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":133,"com.google.gson.functional.PrimitiveTest.testShortSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":522,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":200,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":445,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":170,"com.google.gson.JsonParserTest.testParseEmptyString":647,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":701,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":199,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":270,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":471,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":386,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":700,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":448,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":88,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":696,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":550,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":163,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":220,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":469,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":398,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":627,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":297,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":359,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":18,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":619,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":227,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":221,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":665,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":116,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":75,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":251,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":500,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":622,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":656,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":206,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":315,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":517,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":79,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":46,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":392,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":31,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":266,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":457,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":518,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":287,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":153,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":273,"com.google.gson.stream.JsonWriterTest.testNullStringValue":718,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":292,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":243,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":450,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":140,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":207,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":178,"com.google.gson.JsonArrayTest.testSet":630,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":224,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":131,"com.google.gson.JsonPrimitiveTest.testEquals":658,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":350,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":385,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":99,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":103,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":44,"com.google.gson.functional.MapTest.testGeneralMapField":572,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":226,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":318,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":378,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":426,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":299,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":570,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":252,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":405,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":202,"com.google.gson.MixedStreamTest.testReadMixedStreamed":17,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":692,"com.google.gson.JsonObjectTest.testDeepCopy":640,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":267,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":558,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":125,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":464,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":600,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":183,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":444,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":617,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":285,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":559,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":323,"com.google.gson.JsonArrayTest.testDeepCopy":631,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":547,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":521,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":28,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":504,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":719,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":166,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":283,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":401,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":657,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":250,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":458,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":357,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":682,"com.google.gson.functional.ObjectTest.testNestedDeserialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":527,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":65,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":96,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":237,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":223,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":326,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":113,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":483,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":560,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":648,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":363,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":210,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":333,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":37,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":399,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":467,"com.google.gson.functional.ObjectTest.testNullSerialization":54,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":336,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":322,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":551,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":138,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":571,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":423,"com.google.gson.functional.MapTest.testInterfaceTypeMap":569,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":242,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":711,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":141,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":390,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":664,"com.google.gson.MixedStreamTest.testReadClosed":9,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":340,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":253,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":440,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":157,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":685,"com.google.gson.MixedStreamTest.testWriteClosed":16,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":98,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":455,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":45,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":313,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":369,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":241,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":329,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":77,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":325,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":652,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":680,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":306,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":48,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":248,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":454,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":505,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":676,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":691,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":186,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":507,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":338,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":460,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":606,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":611,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":293,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":85,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":228,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":661,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":670,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":162,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":261,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":589,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":328,"com.google.gson.functional.CollectionTest.testQueueDeserialization":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":168,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":184,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":488,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":304,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":506,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":69,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":556,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":724,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":275,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":78,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":407,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":447,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":7,"com.google.gson.functional.MapTest.testRawMapSerialization":574,"com.google.gson.JsonParserTest.testParseReader":643,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":291,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":666,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":63,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":331,"com.google.gson.JsonPrimitiveTest.testExponential":660,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":106,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":356,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":649,"com.google.gson.functional.PrimitiveTest.testByteSerialization":209,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":413,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":534,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":651,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":129,"com.google.gson.ObjectTypeAdapterTest.testSerialize":663,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":152,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":678,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":34,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":675,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":424,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":684,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":472,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":370,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":485,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":596,"com.google.gson.functional.MapTest.testMapWithQuotes":561,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":260,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":509,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":124,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":603,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":526,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":638,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":257,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":530,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":348,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":360,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":76,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":713,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":26,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":56,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":272,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":50,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":262,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":274,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":503,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":205,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":541,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":461,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":302,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":362,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":409,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":335,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":86,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":686,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":508,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":90,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":539,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":142,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":523,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":62,"com.google.gson.functional.ObjectTest.testNestedSerialization":64,"com.google.gson.JsonObjectTest.testAddingStringProperties":641,"com.google.gson.internal.LinkedTreeMapTest.testClear":697,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":132,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":156,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":404,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":491,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":27,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":573,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":104,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":314,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":645,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":15,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":595,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":726,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":55,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":82,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":219,"com.google.gson.JsonPrimitiveTest.testBoolean":653,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":244,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":277,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":2,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":158,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":594,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":255,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":502,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":490,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":419,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":319,"com.google.gson.functional.CollectionTest.testSetSerialization":466,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":23,"com.google.gson.functional.StringTest.testStringValueSerialization":493,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":519,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":128,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":115,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":451,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":671,"com.google.gson.MixedStreamTest.testWriteInvalidState":12,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":410,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":49,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":161,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":167,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":428,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":268,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":473,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":693,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":584,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":708,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":87,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":634,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":439,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":615,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":295,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":130,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":715,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":553,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":722,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":107,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":415},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0714e8-3f1b-11e6-8487-c7feaf41d561","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c07ff49-3f1b-11e6-8487-412a0c90d132","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"8c084d6a-3f1b-11e6-8487-c76759336980","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0937cb-3f1b-11e6-8487-735571e4c995","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0937cc-3f1b-11e6-8487-51fdbbaebf3f","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c095edd-3f1b-11e6-8487-8b068e6db67e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (o instanceof java.util.Iterator) {\n                                {\n                                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[115,119,131,144],"tindex":"8c0985ee-3f1b-11e6-8487-83e5c42c2e65","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c09d40f-3f1b-11e6-8487-035f02bb660f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c09d410-3f1b-11e6-8487-87d0ed9d13c2","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8c09fb21-3f1b-11e6-8487-1ffc44ac7f18","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[602,254,603,604],"tindex":"8c0a2232-3f1b-11e6-8487-5bc8cc977af5","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0a2233-3f1b-11e6-8487-25815336be5f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[270],"tindex":"8c0a4944-3f1b-11e6-8487-5d9658337316","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0a4945-3f1b-11e6-8487-85d283e62a2e","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0a7056-3f1b-11e6-8487-17c54829161c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"8c0a7057-3f1b-11e6-8487-b56fcedb357c","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to.equals(to)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.equals(to)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0a9768-3f1b-11e6-8487-236c102e7ba6","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"8c0b0c99-3f1b-11e6-8487-397049c10508","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0b33aa-3f1b-11e6-8487-f5fa234ce409","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"8c0b5abb-3f1b-11e6-8487-1f4bf0f025de","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[234],"tindex":"8c0bcfec-3f1b-11e6-8487-b92f29468c77","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0c451d-3f1b-11e6-8487-a1782c381f97","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0c451e-3f1b-11e6-8487-e3c320cbddce","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (o instanceof java.util.Iterator) {\n                                {\n                                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0c451f-3f1b-11e6-8487-71c1cb351991","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0c6c30-3f1b-11e6-8487-93dea1b14d67","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[605,93,123,126,127,230,231,232,233,234,329,362],"tindex":"8c0c9341-3f1b-11e6-8487-0732ef2abc48","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            if (!(isLenient())) {\n                                double double = value.doubleValue();\n                                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                                } \n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0cba52-3f1b-11e6-8487-bd7a1a94e54a","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0cba53-3f1b-11e6-8487-5fd4319b1c59","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            if (!(isLenient())) {\n                                double double = value.doubleValue();\n                                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                                } \n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0ce164-3f1b-11e6-8487-55da6eb62506","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonArray) {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0ce165-3f1b-11e6-8487-77fc0f15a838","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0d0876-3f1b-11e6-8487-ebdb7f2d2d96","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0d0877-3f1b-11e6-8487-4f6044bcd53f","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[606,607,608,609,610,611,612,613,614,615,616,617,605,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,11,633,634,635,636,33,34,35,36,37,85,93,99,100,101,102,103,104,105,106,123,126,127,129,130,230,231,232,233,234,235,237,238,239,243,244,249,252,260,262,264,298,302,309,311,314,317,328,329,348,362,374,378,380,386,395,396,397,398,399,637,638,438,440,441,443,469,509,511,513,515,520,521,522,524,527,534,536,569,572,580,583,590,639,640,641,642,643,644,592,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662],"tindex":"8c0d2f88-3f1b-11e6-8487-0d1a1ee48e9d","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[0,1,663,7,10,21,22,26,28,33,34,36,37,38,39,42,45,48,52,55,61,63,64,67,72,74,75,77,83,84,86,88,89,90,91,93,94,97,102,104,112,114,118,119,120,121,123,126,127,128,131,132,230,231,232,233,234,237,238,239,240,241,242,243,244,247,248,249,285,301,306,314,316,318,320,321,324,325,326,327,328,329,330,331,332,334,335,336,339,341,344,350,351,353,355,358,360,363,364,365,366,367,369,370,371,373,376,381,390,403,406,407,664,665,666,667,668,669,638,426,434,437,446,448,457,463,466,471,472,473,474,475,497,500,503,504,507,515,517,519,528,530,531,532,536,542,556,569,571,572,583,584,585,586,587,589,670,671,672,673,674,592,597],"tindex":"8c0d5699-3f1b-11e6-8487-e5997835a3b3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0d569a-3f1b-11e6-8487-01038473234e","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0d569b-3f1b-11e6-8487-ff1fbc230b4d","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"8c0d7dac-3f1b-11e6-8487-51ebecd03e48","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to.equals(to)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.equals(to)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0d7dad-3f1b-11e6-8487-01391de16268","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0d7dae-3f1b-11e6-8487-49146d8af0c9","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[317,362],"tindex":"8c0da4bf-3f1b-11e6-8487-93089af692f2","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0da4c0-3f1b-11e6-8487-85d3e2c03029","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonArray) {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[230,233,254,263,311,675,676,677,678,679,680,681,682,683,684,685,686,687,657,658,688,662],"tindex":"8c0da4c1-3f1b-11e6-8487-0d904ecdfbdb","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0dcbd2-3f1b-11e6-8487-6339b84f28b1","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonArray) {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8c0dcbd3-3f1b-11e6-8487-9dc4c08a95b9","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8c0dcbd4-3f1b-11e6-8487-b9af8a2fb247","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"8c0df2e5-3f1b-11e6-8487-73dc8062d25b","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[344,350,351,358,360,364,365,370,371],"tindex":"8c0df2e6-3f1b-11e6-8487-51572dfd5d06","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[252,262,264,298,302,309],"tindex":"8c0e19f7-3f1b-11e6-8487-9d5c01d3d034","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[689,663,4,5,6,7,10,17,18,19,20,21,22,23,24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,48,55,57,59,61,63,64,68,72,73,76,80,83,85,86,87,88,89,90,93,100,101,102,103,104,105,106,108,109,110,118,123,125,126,127,128,138,143,145,147,155,156,164,165,167,168,171,174,182,193,195,196,199,207,210,213,214,218,219,220,224,225,231,234,235,237,238,239,240,242,243,244,246,247,248,249,252,260,262,264,267,270,286,288,293,294,296,297,298,299,302,304,305,309,311,314,315,316,317,318,319,320,321,322,323,324,326,327,328,329,331,340,341,344,346,347,348,349,350,351,354,358,360,362,363,364,365,367,369,370,371,374,375,377,378,379,380,382,386,387,390,391,392,393,395,400,401,402,403,404,405,406,407,638,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,454,455,457,459,460,461,463,466,469,471,472,473,474,475,478,480,484,485,500,501,502,504,507,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,536,540,544,545,547,548,549,554,556,557,559,562,564,565,569,571,572,576,578,579,583,584,585,586,587,589,670,671,672,673,674,592,649,650,593,594,596,597,598,599,600],"tindex":"8c0e4108-3f1b-11e6-8487-c50319868f9e","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8c0e4109-3f1b-11e6-8487-737001b42319","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[690,4,5,6,33,34,35,36,37,81,85,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,286,293,297,305,309,314,315,317,348,349,354,362,368,372,374,378,379,380,664,665,691,438,439,440,441,442,443,445,469,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,527,544,545,583,584,586,596,597,598,599,600],"tindex":"8c0e681a-3f1b-11e6-8487-257aef1adebc","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.TypeVariable) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0e681b-3f1b-11e6-8487-e5b2fc7a51af","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (o instanceof java.util.Iterator) {\n                                {\n                                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[332,334,335,337,338,342,472,473,474],"tindex":"8c0e8f2c-3f1b-11e6-8487-7d2e5d3dce31","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[395,396,397,399,516,517,523],"tindex":"8c0eb63d-3f1b-11e6-8487-6d7084ad4cb1","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0eb63e-3f1b-11e6-8487-e77def0cca65","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[33,34,35,36,37,85,100,101,102,103,104,105,106,309,314,315,317,348,349,354,362,374,378,380,438,439,440,441,443,469,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,527,544,583,596,597,598,599,600],"tindex":"8c0eb63f-3f1b-11e6-8487-cf08522aa18b","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[33,34,35,36,37,93,230,231,232,233,234,237,238,239,243,244,249,317,328,329,362,583,649,650,651],"tindex":"8c0edd50-3f1b-11e6-8487-09bd16017f8d","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0edd51-3f1b-11e6-8487-777aaca33173","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[692,693,694,606,695,619,620,622,696,697,698,699,700,701,702,703,704,705,33,34,36,37,85,89,90,93,99,100,101,102,103,104,105,106,123,126,127,129,130,230,231,232,233,234,237,238,239,243,244,249,254,268,317,328,329,348,354,362,374,395,396,397,398,399,400,637,706,638,468,512,513,515,516,517,523,536,547,550,551,553,555,559,564,575,578,580,583,707,590,708,709,604,639,710,640,641,591,711,643,644,592,649,712],"tindex":"8c0edd52-3f1b-11e6-8487-0dd2d814a728","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"8c0f2b73-3f1b-11e6-8487-2bf141966964","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0f5284-3f1b-11e6-8487-8bee3d68b9f7","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0f5285-3f1b-11e6-8487-c7363d8ae743","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0f7996-3f1b-11e6-8487-87658d9e15cd","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"8c0f7997-3f1b-11e6-8487-0bd40c3e8d2a","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[713,714,715,716],"tindex":"8c0fa0a8-3f1b-11e6-8487-532f9eca4736","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[0,1,663,717,619,620,622,4,7,10,15,718,719,720,721,722,723,724,725,726,20,21,22,26,27,28,31,38,39,42,45,48,52,55,61,63,64,67,72,74,75,77,83,84,86,88,89,90,91,94,97,102,104,112,114,118,119,120,121,123,126,127,128,129,130,131,132,144,147,162,204,231,234,235,240,241,242,247,248,251,252,253,259,260,262,264,265,268,272,274,275,276,278,280,281,283,285,286,287,290,293,296,298,299,302,303,304,305,306,309,312,314,316,320,321,323,324,325,326,327,330,331,332,334,335,336,339,341,344,347,350,351,353,354,355,358,360,362,363,364,365,366,367,369,370,371,373,376,377,378,379,380,381,382,384,385,386,387,390,392,393,394,403,404,405,406,407,664,665,666,667,668,727,669,638,408,409,413,414,418,419,424,426,430,434,437,438,439,440,441,442,443,444,445,446,447,448,453,455,456,457,460,463,464,466,469,471,472,473,474,475,477,478,479,480,481,484,486,490,493,494,497,500,503,504,507,509,511,515,516,517,519,520,521,523,527,528,530,531,532,534,536,542,548,549,552,554,556,561,562,563,567,569,571,572,573,574,576,579,582,583,584,585,586,587,589,670,671,672,673,674,590,591,592,593,595,654,597,600],"tindex":"8c0fc7b9-3f1b-11e6-8487-1dbd6215f61e","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c0feeca-3f1b-11e6-8487-09da1f71de25","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[692,693],"tindex":"8c0feecb-3f1b-11e6-8487-3dffdc5c86a6","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c1015dc-3f1b-11e6-8487-435e9e103307","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            if (!(isLenient())) {\n                                double double = value.doubleValue();\n                                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                                } \n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8c1015dd-3f1b-11e6-8487-8b0fc4ffd08f","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c1015de-3f1b-11e6-8487-7d8f58c33c54","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c103cef-3f1b-11e6-8487-41d6e8f18031","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[250,269,304],"tindex":"8c103cf0-3f1b-11e6-8487-99f3b4ee81d5","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[112,118,270,353,360,365,370,371,566,573],"tindex":"8c106401-3f1b-11e6-8487-0b5f705d1c00","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c106402-3f1b-11e6-8487-19133ae3dfa4","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8c106403-3f1b-11e6-8487-15fe167ad477","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c108b14-3f1b-11e6-8487-11fad424ce93","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        {\n                            if (json == null) {\n                                return null;\n                            } \n                            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                            T T = ((T)(fromJson(reader, typeOfT)));\n                            return target;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[632],"tindex":"8c108b15-3f1b-11e6-8487-05623137740e","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[182,196,210],"tindex":"8c10b226-3f1b-11e6-8487-f9a60d1af082","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c10b227-3f1b-11e6-8487-af7d2e59e498","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c10b228-3f1b-11e6-8487-93a0cc8badbc","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c10d939-3f1b-11e6-8487-57000af1ba7e","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c10d93a-3f1b-11e6-8487-036c93122d33","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c11004b-3f1b-11e6-8487-c7e14870285b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Iterator) {\n                        {\n                            if (o instanceof java.util.Iterator) {\n                                {\n                                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8c11004c-3f1b-11e6-8487-5fad2ae5fa0f","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[663,7,10,19,20,21,22,23,24,25,26,28,42,52,55,61,64,72,74,77,83,84,89,90,91,93,94,114,118,123,126,127,128,204,211,213,230,231,232,233,241,247,314,326,327,329,336,341,360,362,363,364,365,366,367,369,370,371,373,376,403,406,407,666,638,409,415,420,424,426,432,434,437,446,449,454,457,463,466,467,471,472,473,474,475,497,500,503,504,507,517,519,528,529,530,531,532,536,542,549,563,572,574,582,592],"tindex":"8c11004d-3f1b-11e6-8487-975fe7c6a591","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"8c11275e-3f1b-11e6-8487-6bf97d021b1a","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328005291/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":87,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":39,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":455,"com.google.gson.functional.StringTest.testStringValueDeserialization":453,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":688,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":181,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":412,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":530,"com.google.gson.stream.JsonWriterTest.testRepeatedName":685,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":75,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":373,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":25,"com.google.gson.MixedStreamTest.testWriteLenient":91,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":655,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":258,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":272,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":192,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":208,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":339,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":573,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":315,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":625,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":139,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":538,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":674,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":110,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":610,"com.google.gson.functional.ObjectTest.testSingletonLists":122,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":413,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":456,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":523,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":248,"com.google.gson.stream.JsonWriterTest.testStrings":690,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":311,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":13,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":427,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":355,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":649,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":228,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":278,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":682,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":469,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":141,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":566,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":164,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":516,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":630,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":332,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":22,"com.google.gson.functional.EnumTest.testEnumCaseMapping":624,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":454,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":646,"com.google.gson.functional.JsonTreeTest.testToJsonTree":19,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":515,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":429,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":4,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":56,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":286,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":257,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":83,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":405,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":525,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":678,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":613,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":48,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":202,"com.google.gson.functional.ObjectTest.testNullDeserialization":366,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":58,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":52,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":466,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":585,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":652,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":531,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":356,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":288,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":330,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":227,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":363,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":651,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":430,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":451,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":589,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":588,"com.google.gson.JsonParserTest.testParseString":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":426,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":84,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":570,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":287,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":595,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":367,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":411,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":549,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":26,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":158,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":563,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":7,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":402,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":38,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":657,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":303,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":177,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":448,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":571,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":564,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":125,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":496,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":44,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":344,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":490,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":72,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":174,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":254,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":294,"com.google.gson.metrics.PerformanceTest.testDummy":645,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":319,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":295,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":314,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":97,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":5,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":129,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":179,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":418,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":404,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":513,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":289,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":61,"com.google.gson.functional.CollectionTest.testSetDeserialization":207,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":140,"com.google.gson.functional.EnumTest.testEnumSet":233,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":348,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":475,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":555,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":99,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":249,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":394,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":357,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":109,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":629,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":568,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":302,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":577,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":327,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":380,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":578,"com.google.gson.functional.MapTest.testHashMapDeserialization":149,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":528,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":416,"com.google.gson.MixedStreamTest.testReadNulls":243,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":491,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":605,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":440,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":602,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":36,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":130,"com.google.gson.functional.MapTest.testSortedMap":167,"com.google.gson.functional.MapTest.testMapSerialization":163,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":53,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":604,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":481,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":561,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":504,"com.google.gson.functional.MapTest.testSerializeMaps":151,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":269,"com.google.gson.functional.MapTest.testComplexKeysSerialization":175,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":474,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":178,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":656,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":510,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":60,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":623,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":232,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":266,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":376,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":621,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":432,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":668,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":679,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":76,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":365,"com.google.gson.functional.MapTest.testStringKeyDeserialization":23,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":251,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":306,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":591,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":180,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":534,"com.google.gson.functional.PrettyPrintingTest.testMap":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":529,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":195,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":388,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":607,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":85,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":222,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":648,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":459,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":133,"com.google.gson.functional.MapTest.testMapSerializationEmpty":176,"com.google.gson.functional.CollectionTest.testQueueSerialization":199,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":654,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":556,"com.google.gson.functional.MapTest.testMapOfMapSerialization":162,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":87,"com.google.gson.JavaSerializationTest.testMapIsSerializable":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":407,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":205,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":191,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":558,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":312,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":660,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":457,"com.google.gson.functional.FieldNamingTest.testIdentity":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":100,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":322,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":126,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":18,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":77,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":274,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":337,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":518,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":631,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":271,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":458,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":437,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":420,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":395,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":428,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":147,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":73,"com.google.gson.functional.MapTest.testMapSubclassSerialization":435,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":24,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":117,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":477,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":485,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":547,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":626,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":639,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":601,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":375,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":108,"com.google.gson.functional.EnumTest.testEnumSubclass":236,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":567,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":353,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":650,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":517,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":225,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":572,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":305,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":519,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":439,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":551,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":438,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":502,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":633,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":50,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":124,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":557,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":293,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":550,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":686,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":422,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":338,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":434,"com.google.gson.MixedStreamTest.testWriteNulls":640,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":220,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":184,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":497,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":59,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":105,"com.google.gson.CommentsTest.testParseComments":242,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":672,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":101,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":614,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":217,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":569,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":480,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":166,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":461,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":321,"com.google.gson.MixedStreamTest.testReadInvalidState":637,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":136,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":424,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":587,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":482,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":670,"com.google.gson.JsonParserTest.testParseMixedArray":681,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":527,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":74,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":511,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":250,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":215,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":661,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":86,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":409,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":582,"com.google.gson.functional.MapTest.testMapDeserialization":20,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":403,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":145,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":148,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":609,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":665,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":156,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":298,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":231,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":611,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":8,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":447,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":17,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":385,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":354,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":368,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":66,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":391,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":114,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":436,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":446,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":143,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":165,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":260,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":514,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":102,"com.google.gson.functional.PrimitiveTest.testShortSerialization":586,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":575,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":334,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":659,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":548,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":49,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":132,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":526,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":478,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":235,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":194,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":46,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":182,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":152,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":542,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":213,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":593,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":28,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":419,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":620,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":54,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":644,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":599,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":594,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":80,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":292,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":127,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":297,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":304,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":382,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":663,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":580,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":307,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":552,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":371,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":343,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":238,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":262,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":476,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":392,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":63,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":308,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":410,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":615,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":533,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":397,"com.google.gson.stream.JsonWriterTest.testNullStringValue":683,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":414,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":2,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":196,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":520,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":581,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":554,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":597,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":487,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":230,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":234,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":40,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":31,"com.google.gson.functional.MapTest.testGeneralMapField":171,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":341,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":598,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":64,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":505,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":135,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":256,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":450,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":524,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":576,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":92,"com.google.gson.MixedStreamTest.testReadMixedStreamed":643,"com.google.gson.JsonObjectTest.testDeepCopy":675,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":393,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":543,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":209,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":224,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":632,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":317,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":559,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":333,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":245,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":408,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":21,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":472,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":150,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":310,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":120,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":281,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":684,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":544,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":55,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":406,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":185,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":323,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":381,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":619,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":103,"com.google.gson.functional.ObjectTest.testNestedDeserialization":372,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":320,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":361,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":606,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":331,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":596,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":486,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":160,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":290,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":460,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":107,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":584,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":442,"com.google.gson.JavaSerializationTest.testListIsSerializable":246,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":29,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":276,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":212,"com.google.gson.functional.ObjectTest.testNullSerialization":350,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":443,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":471,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":153,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":71,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":170,"com.google.gson.functional.MapTest.testInterfaceTypeMap":168,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":503,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":666,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":65,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":296,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":521,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":79,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":622,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":67,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":445,"com.google.gson.MixedStreamTest.testReadClosed":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":383,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":329,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":536,"com.google.gson.MixedStreamTest.testWriteClosed":642,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":608,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":93,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":431,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":111,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":68,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":35,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":216,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":370,"com.google.gson.stream.JsonWriterTest.testLongs":669,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":425,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":299,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":345,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":200,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":562,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":265,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":206,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":671,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":415,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":324,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":187,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":600,"com.google.gson.stream.JsonWriterTest.testNumbers":667,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":541,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":390,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":62,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":492,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":34,"com.google.gson.functional.CollectionTest.testQueueDeserialization":214,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":252,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":546,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":560,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":465,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":603,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":423,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":157,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":364,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":399,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":128,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":452,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":193,"com.google.gson.functional.MapTest.testRawMapSerialization":173,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":636,"com.google.gson.JsonParserTest.testParseReader":42,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":134,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":81,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":359,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":441,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":33,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":618,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":239,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":218,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":374,"com.google.gson.functional.PrimitiveTest.testByteSerialization":583,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":11,"com.google.gson.ObjectTypeAdapterTest.testSerialize":247,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":449,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":532,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":664,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":273,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":70,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":267,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":112,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":462,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":628,"com.google.gson.functional.MapTest.testMapWithQuotes":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":389,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":539,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":464,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":98,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":223,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":313,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":10,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":386,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":138,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":680,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":612,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":104,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":369,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":677,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":146,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":89,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":396,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":347,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":131,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":275,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":398,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":579,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":379,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":473,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":498,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":259,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":493,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":263,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":325,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":253,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":627,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":183,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":285,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":378,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":116,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":6,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":78,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":358,"com.google.gson.internal.LinkedTreeMapTest.testClear":47,"com.google.gson.functional.ObjectTest.testNestedSerialization":360,"com.google.gson.JsonObjectTest.testAddingStringProperties":676,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":488,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":186,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":468,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":535,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":335,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":172,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":483,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":94,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":244,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":653,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":691,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":119,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":351,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":592,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":3,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":537,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":635,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":647,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":384,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":279,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":82,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":467,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":501,"com.google.gson.functional.CollectionTest.testSetSerialization":211,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":226,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":309,"com.google.gson.functional.StringTest.testStringValueSerialization":470,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":121,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":188,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":197,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":291,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":494,"com.google.gson.MixedStreamTest.testWriteInvalidState":641,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":346,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":540,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":507,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":545,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":15,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":45,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":268,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":336,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":673,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":328,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":658,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":417,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":12,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":155,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":687,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":96,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":219},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2e8ee822-3e4d-11e6-a054-b113c4ac66bb","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"2e8f3643-3e4d-11e6-a054-712a7f069343","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2e8f5d54-3e4d-11e6-a054-ab6dc012521e","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[10,58,59,60,61,62,63,64,65,66,67],"tindex":"2e8f5d55-3e4d-11e6-a054-2f8118c220b9","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2e8f8466-3e4d-11e6-a054-83b685e7ad6d","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2e8f8467-3e4d-11e6-a054-afb0c9fec428","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[68,69,17,70,71,72,73],"tindex":"2e8fab78-3e4d-11e6-a054-3b8633f278eb","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[74],"tindex":"2e8fab79-3e4d-11e6-a054-f92ba30e47ad","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                {\n                    if (!insert) {\n                        {\n                            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                int int = left != null ? left.int : 0;\n                                int int = right != null ? right.int : 0;\n                                int int = leftHeight - rightHeight;\n                                if (delta == (-2)) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = rightRight != null ? rightRight.int : 0;\n                                    int int = rightLeft != null ? rightLeft.int : 0;\n                                    int int = rightLeftHeight - rightRightHeight;\n                                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                        rotateLeft(node);\n                                    } else {\n                                        assert rightDelta == 1;\n                                        rotateRight(right);\n                                        rotateLeft(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 2) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = leftRight != null ? leftRight.int : 0;\n                                    int int = leftLeft != null ? leftLeft.int : 0;\n                                    int int = leftLeftHeight - leftRightHeight;\n                                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                        rotateRight(node);\n                                    } else {\n                                        assert leftDelta == (-1);\n                                        rotateLeft(left);\n                                        rotateRight(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 0) {\n                                    node.int = leftHeight + 1;\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else {\n                                    assert (delta == (-1)) || (delta == 1);\n                                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                    if (!insert) {\n                                        break;\n                                    } \n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[75,76,77,69,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"tindex":"2e8fd28a-3e4d-11e6-a054-d739eaacf6dd","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[92,45],"tindex":"2e8ff99b-3e4d-11e6-a054-d39718958423","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[0,68,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,69,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,20,157,158,159,21,160,161,162,163,22,164,165,166,167,168,169,170,171,172,173,174,175,176,23,177,178,179,180,181,182,24,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,34,35,218,219,220,221,222,36,223,224,37,38,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,91,243,244,245,41,246,247,248,249,250,251],"tindex":"2e8ff99c-3e4d-11e6-a054-0f9329bd32bd","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.Class) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[74,252,253,254,255],"tindex":"2e9020ad-3e4d-11e6-a054-d1915cfd93c7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[104,108,109,112,113,229,230,231,232],"tindex":"2e906ece-3e4d-11e6-a054-6957392e9568","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[256,131,257,258,259,260],"tindex":"2e9095df-3e4d-11e6-a054-f7ad621f4ebe","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[261,262,263,264,265,266,267,268,269],"tindex":"2e9095e0-3e4d-11e6-a054-cdd007f81721","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2e9095e1-3e4d-11e6-a054-4d21264b45f4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[270,0,1,2,3,4,106,9,16,17,18,19,181,34,35,271,272,273,274,275,276,39,239,240,241],"tindex":"2e90bcf2-3e4d-11e6-a054-65588428600e","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[277,278,279,280,281,282,283,284,285,286],"tindex":"2e90bcf3-3e4d-11e6-a054-23424a4dfa88","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2e90bcf4-3e4d-11e6-a054-d96d4208e53f","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"2e90bcf5-3e4d-11e6-a054-77bfee50b806","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[287,288,289],"tindex":"2e90bcf6-3e4d-11e6-a054-5701ede3bab5","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2e90e407-3e4d-11e6-a054-b95eebc04414","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2e90e408-3e4d-11e6-a054-cdce835f7eca","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[75,290,76,291,292,293,77,294,270,0,1,295,68,296,2,3,93,297,298,299,4,94,95,96,300,301,302,97,98,303,99,5,100,304,305,306,307,308,309,101,310,102,6,311,312,313,103,104,105,106,107,108,109,314,69,110,111,112,113,114,115,116,117,118,315,316,317,318,319,9,320,321,119,322,323,324,325,326,327,328,329,330,331,332,333,334,335,120,336,58,59,60,61,62,121,11,12,337,122,338,339,123,340,341,342,343,344,345,346,347,124,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,125,363,364,365,366,367,126,368,127,369,370,128,371,372,373,129,374,375,13,376,377,378,130,379,380,381,382,256,383,14,384,385,386,387,388,389,390,131,287,257,391,392,393,15,394,132,395,396,397,398,399,133,400,401,402,403,404,405,406,407,408,409,410,411,412,413,134,414,415,416,417,418,419,258,135,420,421,259,422,423,424,425,426,427,260,428,429,430,431,16,17,18,19,136,137,138,139,140,141,142,143,432,144,433,145,146,147,148,434,149,150,435,151,152,153,154,155,156,20,157,158,159,21,160,161,162,163,22,164,165,166,167,168,169,170,171,172,173,174,175,176,23,177,178,179,180,181,436,437,438,439,440,441,261,442,262,263,443,264,265,444,445,446,266,447,182,24,183,25,26,27,28,29,184,185,448,449,186,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,473,207,208,209,210,211,212,30,213,214,474,475,476,477,478,267,268,269,479,480,481,482,31,483,32,33,63,64,484,65,485,66,67,215,216,486,217,34,35,487,488,489,490,491,492,493,494,495,496,218,497,219,498,499,500,501,220,502,221,503,70,504,505,506,507,508,509,222,510,511,36,223,224,37,38,225,271,512,226,513,227,514,515,516,517,518,71,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,72,535,536,537,538,539,540,541,542,86,543,544,545,546,547,548,87,549,550,88,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,89,569,570,571,572,573,574,575,228,576,577,578,579,580,581,582,583,584,585,586,587,73,588,589,590,591,592,593,594,595,596,597,90,598,599,600,601,272,273,274,275,276,602,603,39,604,605,606,607,608,40,229,609,610,611,612,613,230,231,614,615,616,617,618,619,232,620,233,234,235,236,237,621,622,623,238,624,625,626,277,278,279,280,281,282,283,284,627,628,629,630,631,632,633,634,635,242,636,637,638,639,640,641,91,243,244,642,643,644,645,646,647,44,648,649,650,651,652,653],"tindex":"2e90e409-3e4d-11e6-a054-8bc9914f2547","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2e910b1a-3e4d-11e6-a054-e9070e9a6d68","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[654],"tindex":"2e910b1b-3e4d-11e6-a054-11634d281b51","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2e910b1c-3e4d-11e6-a054-532e42f75924","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"2e910b1d-3e4d-11e6-a054-55bacd553472","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                {\n                    if (!insert) {\n                        {\n                            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                int int = left != null ? left.int : 0;\n                                int int = right != null ? right.int : 0;\n                                int int = leftHeight - rightHeight;\n                                if (delta == (-2)) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = rightRight != null ? rightRight.int : 0;\n                                    int int = rightLeft != null ? rightLeft.int : 0;\n                                    int int = rightLeftHeight - rightRightHeight;\n                                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                        rotateLeft(node);\n                                    } else {\n                                        assert rightDelta == 1;\n                                        rotateRight(right);\n                                        rotateLeft(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 2) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = leftRight != null ? leftRight.int : 0;\n                                    int int = leftLeft != null ? leftLeft.int : 0;\n                                    int int = leftLeftHeight - leftRightHeight;\n                                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                        rotateRight(node);\n                                    } else {\n                                        assert leftDelta == (-1);\n                                        rotateLeft(left);\n                                        rotateRight(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 0) {\n                                    node.int = leftHeight + 1;\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else {\n                                    assert (delta == (-1)) || (delta == 1);\n                                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                    if (!insert) {\n                                        break;\n                                    } \n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[132,428,618],"tindex":"2e91322e-3e4d-11e6-a054-6324ea23fb7a","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2e91322f-3e4d-11e6-a054-5babe68370a0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"2e913230-3e4d-11e6-a054-0d3db995b3f9","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"2e915941-3e4d-11e6-a054-f7e3f1f001ce","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"2e915942-3e4d-11e6-a054-25f42f07422c","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"2e915943-3e4d-11e6-a054-0f3c7f261052","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"2e915944-3e4d-11e6-a054-a757e340b908","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2e915945-3e4d-11e6-a054-e53ecdbf7c25","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            if (b instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[132],"tindex":"2e918056-3e4d-11e6-a054-03471a461ef7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[270,0,1,2,3,4,106,9,16,17,18,19,168,171,181,34,35,36,37,38,272,273,274,275,276,39,239,240,241,655,656,657,658,659,660,661,54,55,662,663],"tindex":"2e918057-3e4d-11e6-a054-6b37a290cab3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[658,54],"tindex":"2e918058-3e4d-11e6-a054-4346aab2a52c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"2e918059-3e4d-11e6-a054-0bfddb71bc19","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[75,76,77,68,298,94,306,307,309,6,312,313,104,106,107,108,109,314,69,111,112,113,115,118,78,79,80,81,82,83,84,85,318,9,322,323,10,120,121,337,123,348,351,357,359,360,367,368,370,13,380,386,389,15,408,425,17,136,137,138,139,140,141,142,143,432,144,433,145,146,148,151,163,171,173,180,436,439,441,443,446,24,183,449,451,452,192,194,195,200,203,208,211,212,478,267,268,269,479,486,217,493,219,220,70,505,510,36,37,38,517,535,550,553,554,558,567,89,570,571,574,576,578,582,583,584,585,586,587,591,593,597,90,599,602,604,607,277,280,281,284,631,636,639,91,664,665,647,666,667,44,247,657,658,54],"tindex":"2e91ce7a-3e4d-11e6-a054-7b7cd796813e","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"2e91ce7b-3e4d-11e6-a054-233d05559e3c","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[75,76,291,293,77,294,270,0,1,295,68,296,2,3,93,297,298,299,4,94,95,300,301,302,303,304,305,307,309,104,105,107,108,109,314,69,110,111,112,113,114,115,117,118,316,317,318,319,9,322,323,325,326,10,120,336,58,59,60,61,62,121,337,122,338,339,123,340,341,342,343,344,345,347,348,349,351,353,355,357,358,359,360,362,125,363,364,367,126,368,127,369,370,128,371,372,373,375,13,380,384,385,392,132,400,408,421,425,16,17,18,19,136,138,139,140,143,432,146,157,164,168,170,171,175,181,436,437,438,439,440,441,261,442,262,263,443,264,265,444,445,446,266,447,182,24,183,25,26,27,28,29,449,451,452,187,188,189,190,191,192,194,203,207,208,211,478,267,268,269,479,481,482,31,483,33,485,215,216,486,217,34,35,487,488,489,490,505,506,507,36,224,37,38,225,512,226,513,227,580,272,273,275,276,602,39,604,606,607,608,40,229,609,610,230,231,614,615,617,232,620,622,623,277,278,279,280,281,282,283,284,629,633,634,636,639,641,642,643,644,44,247],"tindex":"2e91ce7c-3e4d-11e6-a054-512e7a060e65","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2e91f58d-3e4d-11e6-a054-c3f0df5986cd","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"2e91f58e-3e4d-11e6-a054-73fac93e5b35","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2e91f58f-3e4d-11e6-a054-3d3f116c4d49","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[28,51,668],"tindex":"2e91f590-3e4d-11e6-a054-4125591f86f2","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"2e921ca1-3e4d-11e6-a054-9119bec1e85a","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[75,290,76,291,292,293,77,294,270,0,1,295,68,296,2,3,93,297,298,299,4,94,95,300,301,302,303,304,305,307,309,104,105,107,108,109,314,69,110,111,112,113,114,115,117,118,316,317,318,319,9,322,323,325,326,10,120,336,58,59,60,61,62,121,337,122,338,339,123,340,341,342,343,344,345,347,348,349,351,353,355,357,358,359,360,361,362,125,363,364,365,367,126,368,127,369,370,128,371,372,373,375,13,380,384,385,392,132,400,408,421,425,16,17,18,19,136,138,139,140,143,432,146,157,164,168,170,171,175,181,436,437,438,439,440,441,261,442,262,263,443,264,265,444,445,446,266,447,182,24,183,25,26,27,28,29,449,451,452,187,188,189,190,191,192,194,203,207,208,211,478,267,268,269,479,481,482,31,483,33,485,215,216,486,217,34,35,487,488,489,490,505,506,507,36,224,37,38,225,512,226,513,227,580,272,273,275,276,602,39,604,606,607,608,40,229,609,610,230,231,614,615,617,232,620,622,623,277,278,279,280,281,282,283,284,629,633,634,636,639,641,642,643,644,44,247],"tindex":"2e921ca2-3e4d-11e6-a054-7779552a97d5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[127,396,398,399,423],"tindex":"2e9243b3-3e4d-11e6-a054-93b76e3b7908","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[270,0,1,2,3,4,106,9,16,17,19,168,171,181,34,38,272,273,275,276,39,239,661],"tindex":"2e9243b4-3e4d-11e6-a054-ad2f62d08764","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2e9243b5-3e4d-11e6-a054-2b54bc9e16f5","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.get();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[397,411,669,649],"tindex":"2e9243b6-3e4d-11e6-a054-e38bfaeb2822","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"2e926ac7-3e4d-11e6-a054-81b41be7cd5d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2e926ac8-3e4d-11e6-a054-1d78d73c3657","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"2e926ac9-3e4d-11e6-a054-15fad4aae1f1","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                            boolean boolean = writer.isLenient();\n                            writer.setLenient(true);\n                            boolean boolean = writer.isHtmlSafe();\n                            writer.setHtmlSafe(boolean);\n                            boolean boolean = writer.getSerializeNulls();\n                            writer.setSerializeNulls(boolean);\n                            try {\n                                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            } finally {\n                                writer.setLenient(oldLenient);\n                                writer.setHtmlSafe(oldHtmlSafe);\n                                writer.setSerializeNulls(oldSerializeNulls);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2e926aca-3e4d-11e6-a054-ebbe03ced176","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"2e926acb-3e4d-11e6-a054-cb3a0472dea8","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"2e9291dc-3e4d-11e6-a054-c3fdc8154ebf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                {\n                    if (!insert) {\n                        {\n                            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                int int = left != null ? left.int : 0;\n                                int int = right != null ? right.int : 0;\n                                int int = leftHeight - rightHeight;\n                                if (delta == (-2)) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = rightRight != null ? rightRight.int : 0;\n                                    int int = rightLeft != null ? rightLeft.int : 0;\n                                    int int = rightLeftHeight - rightRightHeight;\n                                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                        rotateLeft(node);\n                                    } else {\n                                        assert rightDelta == 1;\n                                        rotateRight(right);\n                                        rotateLeft(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 2) {\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                    int int = leftRight != null ? leftRight.int : 0;\n                                    int int = leftLeft != null ? leftLeft.int : 0;\n                                    int int = leftLeftHeight - leftRightHeight;\n                                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                        rotateRight(node);\n                                    } else {\n                                        assert leftDelta == (-1);\n                                        rotateLeft(left);\n                                        rotateRight(node);\n                                    }\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else if (delta == 0) {\n                                    node.int = leftHeight + 1;\n                                    if (insert) {\n                                        break;\n                                    } \n                                } else {\n                                    assert (delta == (-1)) || (delta == 1);\n                                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                    if (!insert) {\n                                        break;\n                                    } \n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"2e92b8ed-3e4d-11e6-a054-63990c264939","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"2e92b8ee-3e4d-11e6-a054-1d054939913f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"2e92dfff-3e4d-11e6-a054-3fabb36e63b7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            if (b instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2e92e000-3e4d-11e6-a054-0bea3d37eb0f","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[670,247,248],"tindex":"2e92e001-3e4d-11e6-a054-d396e435373d","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"2e92e002-3e4d-11e6-a054-fd1c7f0a05a9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[270,0,1,2,3,4,5,305,306,307,6,106,116,7,9,324,10,11,12,13,14,15,16,17,18,19,178,181,25,26,27,28,29,480,481,482,31,483,32,33,34,35,36,37,38,271,272,273,275,276,39,40,612,239,42,43,44,52,671,53,54,55,672,651,673,674,56,668,654,675,676,652],"tindex":"2e930613-3e4d-11e6-a054-45f86e62574c","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[249,250,251],"tindex":"2e930614-3e4d-11e6-a054-7d0efd72e9a8","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[270,0,1,2,3,4,106,9,11,346,379,16,17,18,19,151,157,172,181,34,35,501,271,272,273,274,275,276,602,39,607,229,611,230,231,615,616,617,618,232,239,240,241,636,639,640,641,91,244,642,663],"tindex":"2e930615-3e4d-11e6-a054-d3bdda644b16","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"2e932d26-3e4d-11e6-a054-41c652d60c43","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"2e932d27-3e4d-11e6-a054-05ac9284d236","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[677,74,678,679],"tindex":"2e932d28-3e4d-11e6-a054-f5a61bd3075f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"2e935439-3e4d-11e6-a054-0d6fe1da02fd","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"2e93543a-3e4d-11e6-a054-b384e3c8d779","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[75,76,292,77,294,68,298,299,98,305,306,307,309,101,310,6,313,314,315,318,322,323,325,10,327,328,329,330,331,332,333,334,335,120,336,58,59,60,62,121,337,122,123,342,345,348,351,354,356,357,359,360,361,125,367,368,127,370,374,13,382,383,388,391,396,397,398,399,133,401,403,404,406,408,410,411,413,418,258,135,421,259,422,423,424,425,260,430,17,136,137,138,139,140,141,142,143,432,144,433,145,151,157,161,162,166,168,170,171,173,181,436,439,440,441,261,442,262,263,443,444,446,182,24,449,186,450,451,452,454,455,456,457,458,461,463,467,470,187,188,189,190,191,472,192,193,195,200,201,203,206,208,211,476,478,267,268,269,479,482,483,63,64,484,65,485,66,67,215,216,486,217,487,488,489,490,491,492,493,495,496,218,497,219,500,501,70,505,507,509,510,225,271,512,513,227,517,71,524,527,72,535,541,86,543,546,87,550,88,553,554,558,567,89,570,571,574,576,578,582,584,585,587,73,591,593,597,90,602,607,229,611,613,230,231,615,616,617,232,233,234,235,236,622,238,625,626,277,280,281,284,630,631,632,633,634,44,653],"tindex":"2e937b4b-3e4d-11e6-a054-f16467f2225c","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[305,306,307,6,11,12,25,26,27,28,29,271,272,273,275,276,673,654,676],"tindex":"2e937b4c-3e4d-11e6-a054-63b5f621ad86","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"2e937b4d-3e4d-11e6-a054-49b4476434fc","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"2e93a25e-3e4d-11e6-a054-1f7ffc739a3d","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.Class) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[306,307,6,25,26,27,29],"tindex":"2e93a25f-3e4d-11e6-a054-3f0d25e4b7c0","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"2e93a260-3e4d-11e6-a054-79f87946e7b0","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2e93a261-3e4d-11e6-a054-55cf4b30813f","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"2e93a262-3e4d-11e6-a054-85aef30a0252","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[570,591,597,91],"tindex":"2e93c973-3e4d-11e6-a054-89edd570846d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"2e93c974-3e4d-11e6-a054-7d847e147a3a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[75,76,291,293,77,294,270,0,1,295,68,296,2,3,93,297,298,299,4,94,95,300,301,302,303,304,305,307,309,104,105,107,108,109,314,69,110,111,112,113,114,115,117,118,316,317,318,319,9,322,323,325,326,10,120,336,58,59,60,61,62,121,337,122,338,339,123,340,341,342,343,344,345,347,348,349,351,353,355,357,358,359,360,362,125,363,364,367,126,368,127,369,370,128,371,372,373,375,13,380,384,385,392,132,400,408,421,425,16,17,18,19,136,138,139,140,143,432,146,157,164,168,170,171,175,181,436,437,438,439,440,441,261,442,262,263,443,264,265,444,445,446,266,447,182,24,183,25,26,27,28,29,449,451,452,187,188,189,190,191,192,194,203,207,208,211,478,267,268,269,479,481,482,31,483,33,485,215,216,486,217,34,35,487,488,489,490,505,506,507,36,224,37,38,225,512,226,513,227,580,272,273,275,276,602,39,604,606,607,608,40,229,609,610,230,231,614,615,617,232,620,622,623,277,278,279,280,281,282,283,284,629,633,634,636,639,641,642,643,644,44,247],"tindex":"2e93f085-3e4d-11e6-a054-4150bc83e90a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!serialize) && (!deserialize)) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[348,127,373,187,188,189,190,191,489,490,247],"tindex":"2e941796-3e4d-11e6-a054-4fa8ed630982","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[75,76,291,293,77,294,270,0,1,295,68,296,2,3,93,297,298,299,4,94,95,300,301,302,303,304,305,307,309,104,105,107,108,109,314,69,110,111,112,113,114,115,116,117,118,316,317,318,319,9,322,323,325,326,10,120,336,58,59,60,61,62,121,337,122,338,339,123,340,341,342,343,344,345,347,348,349,351,353,355,357,358,359,360,362,125,363,364,367,126,368,127,369,370,128,371,372,373,375,13,380,384,385,392,132,400,408,421,425,16,17,18,19,136,138,139,140,143,432,146,157,164,168,170,171,175,181,436,437,438,439,440,441,261,442,262,263,443,264,265,444,445,446,266,447,182,24,183,25,26,27,28,29,449,451,452,187,188,189,190,191,192,194,203,207,208,211,478,267,268,269,479,481,482,31,483,33,485,215,216,486,217,34,35,487,488,489,490,505,506,507,36,224,37,38,225,512,226,513,227,580,272,273,275,276,602,39,604,606,607,608,40,229,609,610,230,231,614,615,617,232,620,622,623,277,278,279,280,281,282,283,284,629,633,634,636,639,641,642,643,644,44,247],"tindex":"2e941797-3e4d-11e6-a054-c72ae8603d25","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"2e941798-3e4d-11e6-a054-6db7abdbeabc","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"2e941799-3e4d-11e6-a054-3952d50d5519","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"2e94179a-3e4d-11e6-a054-e70b9ad37169","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[75,76,292,77,294,270,0,1,295,68,296,2,3,298,299,4,94,98,99,305,306,307,309,101,310,6,312,313,103,104,106,107,108,109,314,69,111,112,113,115,118,79,315,318,9,320,322,323,325,10,327,328,329,330,331,332,333,334,335,120,336,58,59,60,62,121,11,12,337,122,123,342,345,346,348,350,351,354,356,357,359,360,361,125,367,368,127,370,374,13,376,379,380,382,256,383,386,388,389,131,257,391,15,132,396,397,398,399,133,401,403,404,406,408,409,410,411,413,415,417,418,258,135,421,259,422,423,424,425,260,428,430,16,17,18,19,136,137,138,139,140,141,142,143,432,144,433,145,146,148,435,151,154,156,157,161,162,163,165,166,168,169,170,171,172,173,175,176,177,180,181,436,439,440,441,261,262,263,443,444,446,182,24,183,449,186,450,451,452,454,455,456,457,458,461,463,467,470,187,188,189,190,191,472,192,193,194,195,199,200,201,202,203,206,208,209,211,212,213,476,478,267,268,269,479,482,483,63,64,484,65,485,66,67,215,216,486,217,34,35,487,488,489,490,491,492,493,495,496,218,497,219,500,501,220,70,505,507,509,510,36,37,38,225,271,512,513,227,517,71,524,527,72,535,541,86,543,546,87,550,88,553,554,558,567,89,570,571,574,576,578,582,583,584,585,586,587,73,591,593,597,90,599,272,273,274,275,276,602,603,39,604,607,229,611,613,230,231,615,616,617,618,232,233,234,235,236,622,238,624,625,626,277,280,281,284,629,630,631,632,633,634,239,240,241,636,639,640,641,91,244,642,664,665,646,647,680,44,681,648,649,650,655,656,657,658,661,54,55,662,663,651,652,653],"tindex":"2e9465bb-3e4d-11e6-a054-0573f3505e51","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"2e9465bc-3e4d-11e6-a054-7dbb3407d746","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"2e9465bd-3e4d-11e6-a054-5f3983b84e99","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n                    if (annotation != null) {\n                        com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                        if (adapter != null)\n                            return adapter;\n                        \n                    } \n                    return gson.getAdapter(fieldType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[75,76,77,68,69,78,79,80,81,82,83,84,85,17,70,89,90],"tindex":"2e948cce-3e4d-11e6-a054-f1a9382e32ab","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[75,76,77,294,295,68,296,298,299,94,98,99,305,306,307,309,101,310,6,103,104,106,107,108,109,314,69,111,112,113,115,118,79,80,81,83,84,85,682,315,318,9,320,322,323,325,10,327,328,329,330,331,332,333,334,335,120,336,58,59,60,62,121,11,12,337,122,123,342,345,348,351,357,359,360,125,367,368,127,370,374,13,380,382,256,383,388,389,131,257,391,15,396,398,399,133,401,403,404,406,408,409,410,413,415,418,258,135,259,422,423,424,425,260,430,17,136,138,139,140,142,143,432,146,435,151,154,156,157,161,162,163,166,168,170,171,172,173,175,177,180,181,436,439,440,441,261,262,263,443,444,446,182,24,183,449,186,450,451,452,454,455,456,457,458,461,463,467,470,187,188,189,190,191,472,192,193,194,199,201,202,203,206,208,209,211,213,476,478,267,268,269,479,482,483,63,64,484,65,485,66,215,216,486,217,487,488,489,490,492,493,218,497,500,501,70,505,509,36,37,38,225,513,227,524,527,541,578,602,604,607,229,611,230,231,615,616,617,232,233,234,235,236,622,238,624,625,277,280,281,284,629,632,633,634,636,639,244,665,646,683,684,685,686,687,688,689,690,691,44,247,248,648,54,55,663,651,652,653],"tindex":"2e948ccf-3e4d-11e6-a054-1bb8fda646af","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[440,263,264,447,478,269],"tindex":"2e948cd0-3e4d-11e6-a054-9b20a271ddf3","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,12],"tindex":"2e948cd1-3e4d-11e6-a054-4fc01bc10d9c","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"2e948cd2-3e4d-11e6-a054-2980358fe55a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[],"tindex":"2e94b3e3-3e4d-11e6-a054-9d54d5f37f6e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!serialize) && (!deserialize)) {\n        {\n            if (field.isSynthetic()) {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239596335/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"deserialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"2e94b3e4-3e4d-11e6-a054-edb0363fe4a0","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"2e94b3e5-3e4d-11e6-a054-47b5fe492211","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
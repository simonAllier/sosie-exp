{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":388,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":397,"com.google.gson.functional.StringTest.testStringValueDeserialization":395,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":12,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":548,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":252,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":78,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":385,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":465,"com.google.gson.MixedStreamTest.testWriteLenient":605,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":557,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":200,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":427,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":345,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":444,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":300,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":52,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":73,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":573,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":261,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":212,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":490,"com.google.gson.functional.ObjectTest.testSingletonLists":343,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":549,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":245,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":398,"com.google.gson.stream.JsonWriterTest.testStrings":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":595,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":420,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":566,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":363,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":36,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":303,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":480,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":637,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":411,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":169,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":223,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":292,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":151,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":41,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":237,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":123,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":150,"com.google.gson.functional.EnumTest.testEnumCaseMapping":72,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":33,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":396,"com.google.gson.functional.JsonTreeTest.testToJsonTree":128,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":236,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":569,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":18,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":31,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":100,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":541,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":0,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":437,"com.google.gson.functional.ObjectTest.testNullDeserialization":375,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":453,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":408,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":357,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":51,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":253,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":364,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":121,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":579,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":372,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":50,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":570,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":198,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":318,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":565,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":297,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":276,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":523,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":27,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":96,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":376,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":547,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":143,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":289,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":466,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":538,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":507,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":644,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":581,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":165,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":298,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":472,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":290,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":90,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":371,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":49,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":58,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":351,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":85,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":161,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":257,"com.google.gson.metrics.PerformanceTest.testDummy":45,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":56,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":174,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":210,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":512,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":583,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":167,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":417,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":555,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":540,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":578,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":22,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":456,"com.google.gson.functional.CollectionTest.testSetDeserialization":443,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":8,"com.google.gson.functional.EnumTest.testEnumSet":63,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":356,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":414,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":281,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":582,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":528,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":365,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":294,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":511,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":305,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":118,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":426,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":306,"com.google.gson.functional.MapTest.testHashMapDeserialization":132,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":250,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":553,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":390,"com.google.gson.MixedStreamTest.testReadNulls":606,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":181,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":386,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":424,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":503,"com.google.gson.functional.MapTest.testSortedMap":154,"com.google.gson.functional.MapTest.testMapSerialization":149,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":287,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":333,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":103,"com.google.gson.functional.MapTest.testSerializeMaps":135,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":476,"com.google.gson.functional.MapTest.testComplexKeysSerialization":162,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":413,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":9,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":166,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":110,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":455,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":501,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":193,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":421,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":68,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":226,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":628,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":641,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":80,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":374,"com.google.gson.functional.MapTest.testStringKeyDeserialization":164,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":107,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":587,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":320,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":168,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":256,"com.google.gson.functional.PrettyPrintingTest.testMap":224,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":251,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":460,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":430,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":392,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":520,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":35,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":109,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":401,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":405,"com.google.gson.functional.MapTest.testMapSerializationEmpty":163,"com.google.gson.functional.CollectionTest.testQueueSerialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":535,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":282,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":630,"com.google.gson.functional.MapTest.testMapOfMapSerialization":148,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":273,"com.google.gson.JavaSerializationTest.testMapIsSerializable":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":543,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":440,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":284,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":621,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":596,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":399,"com.google.gson.functional.FieldNamingTest.testIdentity":477,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":584,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":113,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":377,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":642,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":11,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":19,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":84,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":342,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":239,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":42,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":400,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":575,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":75,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":559,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":568,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":620,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":129,"com.google.gson.functional.MapTest.testMapSubclassSerialization":134,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":316,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":61,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":218,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":416,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":271,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":462,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":478,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":602,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":331,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":519,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":419,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":208,"com.google.gson.functional.EnumTest.testEnumSubclass":66,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":293,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":37,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":361,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":238,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":574,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":299,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":586,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":188,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":241,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":277,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":76,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":14,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":46,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":99,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":283,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":355,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":83,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":561,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":344,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":131,"com.google.gson.MixedStreamTest.testWriteNulls":603,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":98,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":470,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":92,"com.google.gson.CommentsTest.testParseComments":38,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":205,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":454,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":346,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":495,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":591,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":105,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":232,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":296,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":332,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":153,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":403,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":171,"com.google.gson.MixedStreamTest.testReadInvalidState":600,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":563,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":334,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":28,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":249,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":626,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":111,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":3,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":266,"com.google.gson.JsonArrayTest.testRemove":21,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":619,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":545,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":95,"com.google.gson.functional.MapTest.testMapDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":539,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":229,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":130,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":489,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":629,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":140,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":179,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":494,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":491,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":194,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":67,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":517,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":362,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":378,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":183,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":463,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":524,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":216,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":192,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":152,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":225,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":567,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":235,"com.google.gson.functional.PrimitiveTest.testShortSerialization":314,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":593,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":497,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":302,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":125,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":272,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":301,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":529,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":473,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":65,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":429,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":60,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":136,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":265,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":322,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":450,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":468,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":643,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":556,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":610,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":635,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":82,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":178,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":585,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":10,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":514,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":308,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":220,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":588,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":383,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":350,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":71,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":185,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":415,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":525,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":589,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":488,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":255,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":532,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":551,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":16,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":431,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":242,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":309,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":280,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":326,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":172,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":64,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":493,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":394,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":335,"com.google.gson.functional.MapTest.testGeneralMapField":158,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":348,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":328,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":104,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":459,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":558,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":29,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":197,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":246,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":304,"com.google.gson.MixedStreamTest.testReadMixedStreamed":609,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":623,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":144,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":526,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":43,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":445,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":505,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":285,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":124,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":611,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":544,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":145,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":222,"com.google.gson.JsonArrayTest.testDeepCopy":638,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":133,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":327,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":592,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":234,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":483,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":542,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":471,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":114,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":513,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":500,"com.google.gson.functional.ObjectTest.testNestedDeserialization":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":598,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":170,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":369,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":122,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":325,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":231,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":79,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":146,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":402,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":312,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":184,"com.google.gson.JavaSerializationTest.testListIsSerializable":613,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":203,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":469,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":448,"com.google.gson.functional.ObjectTest.testNullSerialization":358,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":187,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":221,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":137,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":157,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":240,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":101,"com.google.gson.functional.MapTest.testInterfaceTypeMap":155,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":461,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":243,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":69,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":634,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":464,"com.google.gson.MixedStreamTest.testReadClosed":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":515,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":259,"com.google.gson.MixedStreamTest.testWriteClosed":608,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":393,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":436,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":177,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":571,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":213,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":20,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":4,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":564,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":180,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":352,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":435,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":288,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":486,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":189,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":441,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":552,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":115,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":330,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":617,"com.google.gson.JsonParserTest.testParseInvalidJson":639,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":264,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":522,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":86,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":457,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":5,"com.google.gson.functional.CollectionTest.testQueueDeserialization":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":270,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":286,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":407,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":387,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":562,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":142,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":534,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":199,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":382,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":428,"com.google.gson.functional.MapTest.testRawMapSerialization":160,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":599,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":550,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":636,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":182,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":367,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":338,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":499,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":614,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":91,"com.google.gson.functional.PrimitiveTest.testByteSerialization":311,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":418,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":340,"com.google.gson.ObjectTypeAdapterTest.testSerialize":616,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":195,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":254,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":646,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":201,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":102,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":474,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":214,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":404,"com.google.gson.functional.MapTest.testMapWithQuotes":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":521,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":406,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":580,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":23,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":504,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":597,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":622,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":518,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":7,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":492,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":204,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":380,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":625,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":230,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":295,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":531,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":30,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":202,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":533,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":307,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":425,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":442,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":32,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":186,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":116,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":487,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":62,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":423,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":217,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":594,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":366,"com.google.gson.functional.ObjectTest.testNestedSerialization":368,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":173,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":196,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":258,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":410,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":233,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":159,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":336,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":219,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":44,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":607,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":633,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":112,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":359,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":321,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":17,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":536,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":34,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":48,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":260,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":516,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":481,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":409,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":97,"com.google.gson.functional.CollectionTest.testSetSerialization":447,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":577,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":227,"com.google.gson.functional.StringTest.testStringValueSerialization":412,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":590,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":339,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":81,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":432,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":618,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":88,"com.google.gson.MixedStreamTest.testWriteInvalidState":604,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":353,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":263,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":106,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":269,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":527,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":631,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":475,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":624,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":452,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":117,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":645,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":554,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":341,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":627,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":139,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":93,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":508},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"0479dd6a-3f14-11e6-b7bd-e5bf2a85b59a","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047a79ab-3f14-11e6-b7bd-37bff69c9b82","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,4,5,6,7,8],"tindex":"047a79ac-3f14-11e6-b7bd-531038c047d7","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[9,10,11,12,13,14,15,16,17,18,19,5,20],"tindex":"047aa0bd-3f14-11e6-b7bd-3775eacfc8b5","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047ac7ce-3f14-11e6-b7bd-7f79e14ad18c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[21],"tindex":"047ac7cf-3f14-11e6-b7bd-8b41ab61746c","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047aeee0-3f14-11e6-b7bd-2d8862655bb9","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[22,23,24,25],"tindex":"047aeee1-3f14-11e6-b7bd-fb411387c642","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047b15f2-3f14-11e6-b7bd-1d816ad8fb60","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[26,27,28,29,30,31,32],"tindex":"047b3d03-3f14-11e6-b7bd-7f06750af983","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,11,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,12,169,170,171,172,173,13,14,15,174,175,176,16,17,177,178,179,180,18,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,19,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,1,217,218,2,219,220,221,222,223,224,225,226,227,228,229,230,3,4,231,232,5,20,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,0,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,29,515,25,516,517,518,519,520,521,522,30,523,31,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,32,561,562,563,564,565,566,567,568,569,570,571,6,572,7,573,8,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610],"tindex":"047b6414-3f14-11e6-b7bd-13575a9ef177","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[387,391,392,393],"tindex":"047bb235-3f14-11e6-b7bd-31b8ff60c030","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"047bb236-3f14-11e6-b7bd-276b321bebe8","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[611,612,613,38,614,615,616,57,58,61,62,63,64,65,66,67,71,617,618,619,620,621,78,80,81,83,84,85,98,100,112,127,129,133,136,137,138,139,140,141,142,144,145,146,149,150,151,152,154,155,156,157,158,159,161,162,163,164,165,166,167,168,12,172,173,14,175,16,177,178,179,18,622,181,182,183,184,185,186,187,188,189,193,194,200,201,202,203,204,207,208,209,213,214,215,1,2,219,220,225,229,230,3,4,231,232,5,20,234,246,303,338,343,354,355,356,371,378,379,382,417,424,427,428,430,431,432,434,435,437,438,439,440,441,442,443,446,447,448,449,451,452,453,454,455,456,457,462,470,471,488,493,494,501,503,504,505,506,507,509,516,517,30,529,536,544,558,564,6,572,7,573,8,574,577,579,581,582,584,586,593,598,605,607],"tindex":"047bd947-3f14-11e6-b7bd-f7c16676c2b1","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[623,624],"tindex":"047c0058-3f14-11e6-b7bd-d9850c284689","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[625,626,627,628],"tindex":"047c0059-3f14-11e6-b7bd-ef9a09d49fb3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[33,35,40,43,44,46,47,49,50,629,630,631,632,633,52,55,57,58,61,62,63,64,65,66,69,71,72,73,617,618,619,620,621,74,77,86,87,91,92,96,97,102,104,108,113,114,118,119,120,121,122,123,124,125,127,134,135,138,140,142,147,148,155,157,158,160,162,165,12,169,170,172,173,174,175,176,179,180,622,181,183,185,186,190,195,196,197,198,199,206,211,219,222,226,230,3,4,233,234,246,249,264,306,634,635,636,637,334,336,339,340,341,343,346,349,352,359,365,368,376,379,381,386,389,396,397,398,399,400,403,405,409,412,415,418,420,426,427,428,434,436,437,438,441,444,445,450,452,453,454,455,457,458,459,460,461,462,463,482,491,506,507,514,29,515,520,521,30,31,524,531,533,534,535,537,539,540,545,549,552,555,557,558,32,561,562,563,567,570,580,582,586,591,592,598,599,602,607],"tindex":"047c276a-3f14-11e6-b7bd-efe6a99b2542","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047c4e7b-3f14-11e6-b7bd-19e200b9aabd","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[121,124],"tindex":"047c4e7c-3f14-11e6-b7bd-b7eb37b9b4cd","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047c758d-3f14-11e6-b7bd-fb76d6f14066","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[638,639,640,641,642,643],"tindex":"047c758e-3f14-11e6-b7bd-6f2070243c7c","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"047c758f-3f14-11e6-b7bd-2d37c7ce706d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[42,644,645,643,646,629,65,118,120,121,123,130,170,19,219,358,421,425,450,461,0,499,29,30,31,557,32,567,580,582,590,591,592,596,597,598,603],"tindex":"047c9ca0-3f14-11e6-b7bd-1b8c54a88114","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047c9ca1-3f14-11e6-b7bd-6116347e5554","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"047cc3b2-3f14-11e6-b7bd-1955083f8ca9","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"047cc3b3-3f14-11e6-b7bd-4f4a839da4db","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"047ceac4-3f14-11e6-b7bd-3133d990418c","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d11d5-3f14-11e6-b7bd-cb5801c2a922","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d11d6-3f14-11e6-b7bd-7136d8308c01","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2028') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d11d7-3f14-11e6-b7bd-3d218891bfe8","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d38e8-3f14-11e6-b7bd-291798b6411b","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d38e9-3f14-11e6-b7bd-61e610aa74e5","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"047d5ffa-3f14-11e6-b7bd-c755800d836d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d5ffb-3f14-11e6-b7bd-c53506fe1ea2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d5ffc-3f14-11e6-b7bd-3fe49c2e4c74","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (element == null) {\n                        {\n                            return java.util.List<com.google.gson.JsonElement>.remove(element);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047d870d-3f14-11e6-b7bd-19166c2b5433","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047dae1e-3f14-11e6-b7bd-33f6928c5701","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047dd52f-3f14-11e6-b7bd-a786ad67231a","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047dfc40-3f14-11e6-b7bd-b191d6f58b62","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047dfc41-3f14-11e6-b7bd-53fde16c7de3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047e2352-3f14-11e6-b7bd-678af129baae","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"047e2353-3f14-11e6-b7bd-0b389289e098","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047e2354-3f14-11e6-b7bd-c360fff19976","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047e4a65-3f14-11e6-b7bd-fdd38e7416a3","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047e4a66-3f14-11e6-b7bd-23009203054a","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"047e4a67-3f14-11e6-b7bd-7393d3454710","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325591991/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
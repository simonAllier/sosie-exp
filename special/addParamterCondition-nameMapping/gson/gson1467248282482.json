{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":96,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":586,"com.google.gson.functional.StringTest.testStringValueDeserialization":584,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":144,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":440,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":513,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":193,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":496,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":7,"com.google.gson.MixedStreamTest.testWriteLenient":138,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":314,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":3,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":287,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":297,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":473,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":555,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":631,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":633,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":217,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":520,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":120,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":609,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":624,"com.google.gson.functional.ObjectTest.testSingletonLists":238,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":441,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":506,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":587,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":673,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":469,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":150,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":454,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":483,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":17,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":557,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":76,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":286,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":599,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":72,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":57,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":547,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":377,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":499,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":668,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":329,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":93,"com.google.gson.functional.EnumTest.testEnumCaseMapping":630,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":18,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":585,"com.google.gson.functional.JsonTreeTest.testToJsonTree":148,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":498,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":344,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":103,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":84,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":313,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":283,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":435,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":508,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":324,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":128,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":294,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":227,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":167,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":596,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":480,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":162,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":567,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":514,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":484,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":129,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":328,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":305,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":488,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":161,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":456,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":278,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":570,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":569,"com.google.gson.JsonParserTest.testParseString":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":453,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":284,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":552,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":343,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":575,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":32,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":15,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":530,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":8,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":374,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":544,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":159,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":432,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":107,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":465,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":188,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":553,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":603,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":545,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":28,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":243,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":160,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":303,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":360,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":477,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":94,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":133,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":195,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":636,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":204,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":260,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":105,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":383,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":458,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":434,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":638,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":73,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":464,"com.google.gson.functional.CollectionTest.testSetDeserialization":648,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":218,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":241,"com.google.gson.functional.EnumTest.testEnumSet":265,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":389,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":536,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":232,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":365,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":425,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":48,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":65,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":310,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":549,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":640,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":559,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":225,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":326,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":560,"com.google.gson.functional.MapTest.testHashMapDeserialization":372,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":511,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":445,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":385,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":657,"com.google.gson.MixedStreamTest.testReadNulls":663,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":196,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":154,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":463,"com.google.gson.functional.MapTest.testSortedMap":379,"com.google.gson.functional.MapTest.testMapSerialization":182,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":169,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":191,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":140,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":359,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":542,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":350,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":407,"com.google.gson.functional.MapTest.testSerializeMaps":20,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":212,"com.google.gson.functional.MapTest.testComplexKeysSerialization":187,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":388,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":143,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":173,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":352,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":39,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":229,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":629,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":615,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":317,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":628,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":58,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":122,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":677,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":194,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":490,"com.google.gson.functional.MapTest.testStringKeyDeserialization":95,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":367,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":409,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":151,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":572,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":189,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":517,"com.google.gson.functional.PrettyPrintingTest.testMap":256,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":512,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":654,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":290,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":419,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":461,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":285,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":410,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":671,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":590,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":593,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":220,"com.google.gson.functional.CollectionTest.testQueueSerialization":291,"com.google.gson.functional.MapTest.testMapSerializationEmpty":382,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":537,"com.google.gson.functional.MapTest.testMapOfMapSerialization":181,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":135,"com.google.gson.JavaSerializationTest.testMapIsSerializable":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":437,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":646,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":44,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":539,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":320,"com.google.gson.functional.FieldNamingTest.testIdentity":213,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":588,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":106,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":249,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":491,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":678,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":23,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":45,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":98,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":170,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":501,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":337,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":12,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":589,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":470,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":448,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":426,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":455,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":369,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":137,"com.google.gson.functional.MapTest.testMapSubclassSerialization":176,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":113,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":626,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":391,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":301,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":308,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":528,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":418,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":581,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":460,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":259,"com.google.gson.functional.EnumTest.testEnumSubclass":268,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":548,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":481,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":672,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":500,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":304,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":368,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":554,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":2,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":356,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":340,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":502,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":237,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":347,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":532,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":471,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":100,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":174,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":404,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":131,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":479,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":538,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":395,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":450,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":472,"com.google.gson.MixedStreamTest.testWriteNulls":336,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":371,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":34,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":601,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":228,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":623,"com.google.gson.CommentsTest.testParseComments":670,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":118,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":612,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":255,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":551,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":139,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":56,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":183,"com.google.gson.MixedStreamTest.testReadInvalidState":661,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":214,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":452,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":85,"com.google.gson.JsonParserTest.testParseMixedArray":333,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":510,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":411,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":348,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":366,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":82,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":252,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":134,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":564,"com.google.gson.functional.MapTest.testMapDeserialization":91,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":433,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":61,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":370,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":335,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":608,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":178,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":611,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":62,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":398,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":147,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":416,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":245,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":482,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":198,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":655,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":422,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":625,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":203,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":236,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":257,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":378,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":468,"com.google.gson.functional.PrimitiveTest.testShortSerialization":568,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":157,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":556,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":620,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":529,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":338,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":509,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":209,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":267,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":130,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":289,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":127,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":306,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":89,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":524,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":54,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":330,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":10,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":447,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":616,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":164,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":666,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":579,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":574,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":281,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":394,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":246,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":400,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":466,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":75,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":413,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":562,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":152,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":533,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":494,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":476,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":270,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":199,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":390,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":423,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":652,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":467,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":607,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":439,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":14,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":155,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":613,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":443,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":24,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":642,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":503,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":563,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":535,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":577,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":274,"com.google.gson.JsonPrimitiveTest.testEquals":358,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":266,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":610,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":145,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":86,"com.google.gson.functional.MapTest.testGeneralMapField":21,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":475,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":27,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":578,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":653,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":223,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":380,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":312,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":507,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":558,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":125,"com.google.gson.MixedStreamTest.testReadMixedStreamed":665,"com.google.gson.JsonObjectTest.testDeepCopy":124,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":51,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":424,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":298,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":583,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":669,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":635,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":540,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":619,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":362,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":221,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":92,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":622,"com.google.gson.JsonArrayTest.testDeepCopy":675,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":88,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":319,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":273,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":525,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":436,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":602,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":357,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":412,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":645,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":351,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":614,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":235,"com.google.gson.functional.ObjectTest.testNestedDeserialization":495,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":332,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":486,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":386,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":99,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":618,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":576,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":254,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":376,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":392,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":591,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":64,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":566,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":396,"com.google.gson.JavaSerializationTest.testListIsSerializable":364,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":6,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":11,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":300,"com.google.gson.functional.ObjectTest.testNullSerialization":323,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":201,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":621,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":90,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":132,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":185,"com.google.gson.functional.MapTest.testInterfaceTypeMap":184,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":406,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":206,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":163,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":504,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":269,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":280,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":397,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":414,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":327,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":518,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":354,"com.google.gson.MixedStreamTest.testWriteClosed":664,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":293,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":387,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":239,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":457,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":66,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":110,"com.google.gson.stream.JsonWriterTest.testLongs":16,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":247,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":253,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":224,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":208,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":240,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":292,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":79,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":543,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":341,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":296,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":444,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":108,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":40,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":580,"com.google.gson.JsonParserTest.testParseInvalidJson":674,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":523,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":421,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":25,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":230,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":109,"com.google.gson.functional.CollectionTest.testQueueDeserialization":651,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":527,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":541,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":595,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":451,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":632,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":179,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":429,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":279,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":493,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":288,"com.google.gson.functional.MapTest.testRawMapSerialization":186,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":307,"com.google.gson.JsonParserTest.testParseReader":115,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":442,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":282,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":49,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":197,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":142,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":325,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":117,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":29,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":172,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":459,"com.google.gson.functional.PrimitiveTest.testByteSerialization":565,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":0,"com.google.gson.ObjectTypeAdapterTest.testSerialize":311,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":276,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":515,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":334,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":4,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":345,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":35,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":353,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":210,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":67,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":592,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":667,"com.google.gson.functional.MapTest.testMapWithQuotes":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":420,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":521,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":231,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":582,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":321,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":417,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":216,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":156,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":63,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":492,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":427,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":550,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":38,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":219,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":5,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":561,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":318,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":647,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":402,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":315,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":200,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":251,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":355,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":81,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":83,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":114,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":462,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":111,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":505,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":361,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":70,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":153,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":485,"com.google.gson.JsonObjectTest.testAddingStringProperties":13,"com.google.gson.functional.ObjectTest.testNestedSerialization":242,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":50,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":277,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":598,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":68,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":381,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":87,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":248,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":309,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":660,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":47,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":605,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":573,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":102,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":430,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":19,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":415,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":487,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":77,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":71,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":597,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":33,"com.google.gson.functional.CollectionTest.testSetSerialization":299,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":659,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":59,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":233,"com.google.gson.functional.StringTest.testStringValueSerialization":600,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":22,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":41,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":393,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":643,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":401,"com.google.gson.MixedStreamTest.testWriteInvalidState":662,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":322,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":522,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":37,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":526,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":149,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":126,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":226,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":119,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":606,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":617,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":446,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":1,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":373,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":31,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":637},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"b2429f17-3e5d-11e6-bd60-c525d3db4a18","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"b242ed38-3e5d-11e6-bd60-4bfa475f0675","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[14,15,16,17],"tindex":"b242ed39-3e5d-11e6-bd60-8d315e0e0ba7","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b242ed3a-3e5d-11e6-bd60-e9e9ec02ccab","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,3,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"tindex":"b243144b-3e5d-11e6-bd60-1d09563170f8","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b243144c-3e5d-11e6-bd60-23fa768e52c3","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b2433b5d-3e5d-11e6-bd60-ef9c138f94ea","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[74,75,76,77,78,79,80,81,82,83,84],"tindex":"b2433b5e-3e5d-11e6-bd60-19b704202ef0","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b243626f-3e5d-11e6-bd60-2db223c819ab","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,24,102,103,104,105,106,107,3,4,5,6,10,108,109,110,111,112,72,113,114,115,116,117,118,119,120,121,122,123,124,13,125,126,127,128,129,130,131],"tindex":"b2436270-3e5d-11e6-bd60-5726af4d07ff","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b243b091-3e5d-11e6-bd60-7fd80edc3f1e","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[132,133,134,135,136,137,138],"tindex":"b243b092-3e5d-11e6-bd60-515f8023c727","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[139,140,85,86,87,141,142,143,144,96,145,0,1,97,146,147,98,148,99,100,101,24,102,103,104,149,150,105,2,151,152,153,154,155,107,3,4,5,6,7,8,9,10,11,108,109,110,156,157,158,111,159,72,12,115,116,160,117,118,161,119,120,121,122,123,124,13,162,163,164,165,166,167,168,169],"tindex":"b243b093-3e5d-11e6-bd60-d1e588849948","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"b24425c4-3e5d-11e6-bd60-a76e2b44f255","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[144,96,146,147,98,148,99,100,101,24,102,103,3,4,170,5,6,109,110,158,72,12,117,171,172],"tindex":"b24425c5-3e5d-11e6-bd60-6d78cdf17ec3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b24425c6-3e5d-11e6-bd60-c30b950dac5e","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"b24425c7-3e5d-11e6-bd60-53b34ea1911e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[144,96,146,147,98,148,99,100,101,24,102,103,154,155,107,3,4,5,6,109,110,72,117,173,164,165,166],"tindex":"b2444cd8-3e5d-11e6-bd60-7f21abba3bc9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        {\n                            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                                throw new java.lang.IllegalStateException();\n                            } \n                            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                            if (element instanceof com.google.gson.JsonObject) {\n                                java.lang.String = name;\n                                return com.google.gson.internal.bind.JsonTreeWriter.this;\n                            } \n                            throw new java.lang.IllegalStateException();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b2444cd9-3e5d-11e6-bd60-a9c6855ebed9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        {\n                            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                                throw new java.lang.IllegalStateException();\n                            } \n                            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                            if (element instanceof com.google.gson.JsonObject) {\n                                java.lang.String = name;\n                                return com.google.gson.internal.bind.JsonTreeWriter.this;\n                            } \n                            throw new java.lang.IllegalStateException();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[174,175,18,19,85,87,176,20,177,178,179,180,181,182,183,184,185,21,186,187,188,189,144,190,96,191,192,22,193,194,23,195,196,197,198,199,200,201,202,203,97,146,147,98,148,99,100,101,204,205,206,24,102,207,208,103,25,26,29,30,31,32,33,34,35,36,38,39,209,210,211,212,213,40,41,42,43,44,214,215,216,217,218,219,220,221,222,223,224,150,225,226,227,228,229,230,231,232,2,152,233,234,235,236,237,45,238,46,239,240,241,47,48,49,242,243,244,245,246,247,50,51,52,53,54,55,154,155,107,3,4,5,6,56,248,249,250,251,252,253,254,255,109,110,57,256,257,58,59,60,61,258,62,63,64,259,65,260,261,66,67,262,263,264,265,266,267,268,269,270,75,271,78,80,272,68,273,274,275,276,277,69,278,279,70,280,281,282,71,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,72,304,73,305,306,113,114,160,117,307,308,138,309,310,311],"tindex":"b2444cda-3e5d-11e6-bd60-df92daf5f8f2","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                                type = value.getClass();\n                            } \n                            return type;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[144,0,1,147,312,219,313,314,315,316,317,318,231,232,2,151,152,233,234,319,153,320,321,235,322,323,154,155,107,3,4,170,5,6,248,324,157,325,326,327,328,329,158,267,330,331,72,332,333,334,335,336,337,161,162,173,164,165,166],"tindex":"b24473eb-3e5d-11e6-bd60-15caee926131","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[338,339],"tindex":"b24473ec-3e5d-11e6-bd60-0904c33092e2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"b24473ed-3e5d-11e6-bd60-f346ed623c36","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[198,199,200,340,341,342,210,211,212],"tindex":"b24473ee-3e5d-11e6-bd60-01ff09803bb3","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b24473ef-3e5d-11e6-bd60-3f3e3783db87","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b2449b00-3e5d-11e6-bd60-1f787036aa49","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b2449b01-3e5d-11e6-bd60-5bdc92c29cb3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        {\n                            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                                throw new java.lang.IllegalStateException();\n                            } \n                            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                            if (element instanceof com.google.gson.JsonObject) {\n                                java.lang.String = name;\n                                return com.google.gson.internal.bind.JsonTreeWriter.this;\n                            } \n                            throw new java.lang.IllegalStateException();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"b2449b02-3e5d-11e6-bd60-cd5fc9a07ca7","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"b244c213-3e5d-11e6-bd60-fd376cd78c87","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b244c214-3e5d-11e6-bd60-29eb0c21bcad","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[146,148,104,343,344,345,346,347,334,348,349,350,351,352,353,354,355,356,357,358,359,360],"tindex":"b244c215-3e5d-11e6-bd60-8536347e85b6","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[361],"tindex":"b244c216-3e5d-11e6-bd60-51b267df304e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b2451037-3e5d-11e6-bd60-89f810efd770","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b2451038-3e5d-11e6-bd60-df9568427722","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[362,363,364,365,366,367,174,175,368,18,19,139,140,85,86,87,141,142,369,370,371,372,88,176,20,89,90,177,373,178,91,179,374,375,92,376,180,181,182,93,377,378,183,379,184,380,185,21,381,186,94,187,382,95,188,143,383,189,144,190,384,96,191,385,386,192,387,145,22,388,389,390,391,193,392,194,393,394,395,23,195,196,197,198,396,199,200,201,340,341,202,397,203,342,398,97,146,147,98,148,99,100,101,204,205,206,24,102,399,400,207,208,103,25,26,401,27,28,29,30,31,402,403,32,33,34,404,405,406,35,407,36,408,37,409,38,410,39,411,209,210,211,212,213,40,41,42,43,44,214,215,216,217,218,412,413,312,414,104,415,416,417,418,419,420,421,219,343,313,422,423,424,149,425,338,426,427,14,428,429,220,430,431,432,433,434,435,436,437,221,438,439,15,440,441,442,443,444,445,446,222,447,314,223,448,449,315,450,451,452,224,453,454,316,455,344,456,457,458,459,460,150,461,462,463,225,226,227,228,229,464,230,231,465,232,105,106,466,2,151,152,467,233,234,319,468,153,469,320,321,235,236,470,471,237,45,238,472,473,46,474,475,239,476,477,240,478,479,241,480,47,481,482,483,484,48,485,49,242,486,487,243,488,489,490,244,491,245,246,492,247,493,494,495,496,497,498,499,500,501,132,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,133,50,518,519,520,521,522,523,524,134,51,525,526,527,528,529,135,530,531,136,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,52,556,557,558,559,560,561,562,563,564,565,566,567,568,53,137,569,570,571,572,573,54,574,575,576,577,55,578,579,580,581,154,582,583,155,107,3,4,170,5,6,584,585,586,587,588,589,590,591,56,592,593,594,595,596,597,598,599,600,7,8,9,10,11,601,602,603,248,604,605,249,250,108,251,606,252,253,254,255,109,110,57,256,257,58,59,60,61,258,607,608,609,62,156,324,610,611,612,339,157,613,325,614,615,616,326,617,327,328,618,329,619,620,621,622,63,623,158,64,259,65,260,261,624,66,67,262,625,263,111,626,264,265,266,267,268,627,628,269,629,270,630,631,74,75,76,77,271,78,79,632,80,81,633,634,635,272,636,68,273,274,275,637,638,639,640,641,276,277,69,278,279,287,288,289,290,642,643,644,291,292,293,294,295,645,646,296,647,648,297,298,649,299,300,650,330,651,652,653,654,331,301,655,656,302,303,657,72,332,304,12,658,659,73,305,306,113,114,160,117,171,172,660,307,661,308,662,138,663,309,664,665,666,667,310,668,337,669,670,671,17,672,311,673],"tindex":"b2453749-3e5d-11e6-bd60-c708d6e4e4ec","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1],"tindex":"b245374a-3e5d-11e6-bd60-ab640dfd0ad7","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b2455e5b-3e5d-11e6-bd60-77a3c6828315","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"b2455e5c-3e5d-11e6-bd60-0b99fae1cc91","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                                type = value.getClass();\n                            } \n                            return type;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[365,366,367],"tindex":"b2455e5d-3e5d-11e6-bd60-01ef607de99e","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.equals(from)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"b2455e5e-3e5d-11e6-bd60-6f76ac7e8119","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[174,175,18,19,85,87,370,176,20,177,178,179,180,181,182,378,183,184,380,185,21,381,186,187,382,188,189,144,190,384,191,192,22,390,193,194,394,23,195,196,197,198,396,199,200,201,202,203,97,147,204,205,206,207,208,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,209,210,211,212,213,40,41,42,43,44,214,215,216,217,218,413,312,414,417,419,420,219,313,422,149,427,14,428,429,220,431,433,434,436,221,438,439,15,441,444,446,222,314,223,449,315,450,451,452,224,316,456,459,150,226,227,228,229,230,231,232,2,151,152,233,234,319,153,320,321,235,236,237,45,238,46,239,240,241,47,482,484,48,49,242,486,243,244,245,246,247,500,132,507,510,133,50,523,134,51,527,135,531,136,534,535,539,548,550,552,553,52,558,560,564,565,566,567,568,53,137,572,54,577,55,579,154,155,107,585,586,587,588,589,56,593,597,600,248,249,250,251,252,253,254,255,57,256,257,58,59,60,61,258,607,62,324,610,611,339,157,613,615,326,617,327,328,618,329,619,620,622,63,158,64,259,65,260,261,66,67,262,263,265,266,267,268,269,270,630,631,74,75,271,78,80,633,272,68,273,274,275,276,277,69,278,279,280,287,288,289,290,291,292,293,294,295,296,297,298,299,300,330,652,653,654,331,301,655,656,302,303,657,72,332,304,12,658,73,305,306,113,114,160,660,310,668,337,669,671,17,672],"tindex":"b245856f-3e5d-11e6-bd60-49a503b0025a","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"b245ac80-3e5d-11e6-bd60-69b248d10cc1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n                {\n                    if (b instanceof java.lang.Class) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b245ac81-3e5d-11e6-bd60-41b632fae818","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b245ac82-3e5d-11e6-bd60-5149c5d286db","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"b245ac83-3e5d-11e6-bd60-3db3147c8936","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n                {\n                    if (b instanceof java.lang.Class) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b245ac84-3e5d-11e6-bd60-e735718af6fc","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"b245d395-3e5d-11e6-bd60-413f6271f189","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.equals(from)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b245d396-3e5d-11e6-bd60-9d4d8c9c4e90","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b245d397-3e5d-11e6-bd60-1bb3f58f322e","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b245d398-3e5d-11e6-bd60-3b55b261b75e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[427,428,429,451,246],"tindex":"b245d399-3e5d-11e6-bd60-9f261f15b31e","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"b245faaa-3e5d-11e6-bd60-8b7723c886d9","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[96,148,100,24,102,103,3,4,170,5,6,109,110,158,12],"tindex":"b245faab-3e5d-11e6-bd60-a92447cac781","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"b245faac-3e5d-11e6-bd60-3d5bc0538938","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b245faad-3e5d-11e6-bd60-1511fe5e55cd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n                {\n                    if (b instanceof java.lang.Class) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b24621be-3e5d-11e6-bd60-3db4352325be","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"b24621bf-3e5d-11e6-bd60-47cad1c5cf38","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[338],"tindex":"b24621c0-3e5d-11e6-bd60-097cf6561eda","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[539,552,553,566,572,577,138],"tindex":"b24621c1-3e5d-11e6-bd60-df4402baf143","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"b24621c2-3e5d-11e6-bd60-57f8d5424584","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[365,366,367],"tindex":"b24648d3-3e5d-11e6-bd60-e3a515959945","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b24648d4-3e5d-11e6-bd60-a10f842b3fce","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[20,27,288,311,673],"tindex":"b24648d5-3e5d-11e6-bd60-a355a3bac46c","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"b24648d6-3e5d-11e6-bd60-cfc7abde06db","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[674,675,676,168,677,678],"tindex":"b2466fe7-3e5d-11e6-bd60-e3533e37478f","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"b2466fe8-3e5d-11e6-bd60-77a1bb1efb6a","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"b2466fe9-3e5d-11e6-bd60-b9ef79eda965","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                                type = value.getClass();\n                            } \n                            return type;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"b2466fea-3e5d-11e6-bd60-33564a5ada4b","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl","sourcecode":"(c == 't') || (c == 'T')"},"failures":[],"tindex":"b24696fb-3e5d-11e6-bd60-d937553a5c4f","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'A') && (c <= 'F')) {\n        {\n            if ((c == 't') || (c == 'T')) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    switch (c) {\n                        case '/' :\n                        case '\\\\' :\n                        case ';' :\n                        case '#' :\n                        case '=' :\n                            checkLenient();\n                        case '{' :\n                        case '}' :\n                        case '[' :\n                        case ']' :\n                        case ':' :\n                        case ',' :\n                        case ' ' :\n                        case '\\t' :\n                        case '\\f' :\n                        case '\\r' :\n                        case '\\n' :\n                            return false;\n                        default :\n                            return true;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"b24696fc-3e5d-11e6-bd60-45f96ef54643","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b246be0d-3e5d-11e6-bd60-3f4bc3ef5fbf","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'A') && (c <= 'F')"},"failures":[],"tindex":"b246e51e-3e5d-11e6-bd60-93979e4aa037","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'A') && (c <= 'F')) {\n        {\n            if ((c == 't') || (c == 'T')) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    switch (c) {\n                        case '/' :\n                        case '\\\\' :\n                        case ';' :\n                        case '#' :\n                        case '=' :\n                            checkLenient();\n                        case '{' :\n                        case '}' :\n                        case '[' :\n                        case ']' :\n                        case ':' :\n                        case ',' :\n                        case ' ' :\n                        case '\\t' :\n                        case '\\f' :\n                        case '\\r' :\n                        case '\\n' :\n                            return false;\n                        default :\n                            return true;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467247142167/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":72,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
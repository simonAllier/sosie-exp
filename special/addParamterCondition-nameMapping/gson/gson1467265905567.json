{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":668,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":64,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":371,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":110,"com.google.gson.functional.StringTest.testStringValueDeserialization":369,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":341,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":272,"com.google.gson.JsonPrimitiveTest.testDeepCopy":675,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":712,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":490,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":112,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":225,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":50,"com.google.gson.MixedStreamTest.testWriteLenient":626,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":691,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":281,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":21,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":389,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":189,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":406,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":538,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":159,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":600,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":300,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":499,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":104,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":687,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":154,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":579,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":680,"com.google.gson.functional.ObjectTest.testSingletonLists":187,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":273,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":372,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":483,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":704,"com.google.gson.stream.JsonWriterTest.testStrings":649,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":146,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":38,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":291,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":205,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":636,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":541,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":718,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":603,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":645,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":385,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":660,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":34,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":302,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":530,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":325,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":475,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":613,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":176,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":47,"com.google.gson.functional.EnumTest.testEnumCaseMapping":599,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":370,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":633,"com.google.gson.functional.JsonTreeTest.testToJsonTree":44,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":474,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":294,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":29,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":248,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":265,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":485,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":582,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":73,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":399,"com.google.gson.functional.ObjectTest.testNullDeserialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":182,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":77,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":382,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":200,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":671,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":551,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":639,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":491,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":206,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":686,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":100,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":174,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":472,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":212,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":638,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":295,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":367,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":556,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":555,"com.google.gson.JsonParserTest.testParseString":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":290,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":535,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":247,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":562,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":216,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":450,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":271,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":512,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":51,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":319,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":527,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":32,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":63,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":693,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":135,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":337,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":363,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":536,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":528,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":211,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":444,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":69,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":194,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":438,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":678,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":91,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":495,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":711,"com.google.gson.metrics.PerformanceTest.testDummy":632,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":163,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":120,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":152,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":133,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":30,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":226,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":339,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":279,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":264,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":20,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":652,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":185,"com.google.gson.functional.CollectionTest.testSetDeserialization":405,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":301,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":199,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":414,"com.google.gson.functional.EnumTest.testEnumSet":590,"com.google.gson.JsonStreamParserTest.testIterator":669,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":519,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":136,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":705,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":252,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":315,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":4,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":612,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":532,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":132,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":543,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":171,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":234,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":544,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":714,"com.google.gson.functional.MapTest.testHashMapDeserialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":488,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":277,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":574,"com.google.gson.MixedStreamTest.testReadNulls":627,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":346,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":571,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":662,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":61,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":232,"com.google.gson.functional.MapTest.testSortedMap":328,"com.google.gson.functional.MapTest.testMapSerialization":324,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":78,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":573,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":423,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":525,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":457,"com.google.gson.functional.MapTest.testSerializeMaps":314,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":420,"com.google.gson.functional.MapTest.testComplexKeysSerialization":335,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":413,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":338,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":692,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":464,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":184,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":597,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":25,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":358,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":229,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":595,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":14,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":105,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":688,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":724,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":114,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":214,"com.google.gson.functional.MapTest.testStringKeyDeserialization":48,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":707,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":461,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":139,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":558,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":340,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":494,"com.google.gson.functional.PrettyPrintingTest.testMap":303,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":426,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":489,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":392,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":576,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":463,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":635,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":375,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":379,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":259,"com.google.gson.functional.MapTest.testMapSerializationEmpty":336,"com.google.gson.functional.CollectionTest.testQueueSerialization":396,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":520,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":647,"com.google.gson.functional.MapTest.testMapOfMapSerialization":323,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":511,"com.google.gson.JavaSerializationTest.testMapIsSerializable":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":267,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":402,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":19,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":147,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":697,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":373,"com.google.gson.functional.FieldNamingTest.testIdentity":421,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":666,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":85,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":167,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":217,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":9,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":43,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":118,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":570,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":477,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":614,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":374,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":469,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":343,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":283,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":254,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":293,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":309,"com.google.gson.functional.MapTest.testMapSubclassSerialization":313,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":554,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":49,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":157,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":416,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":428,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":509,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":601,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":623,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":569,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":228,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":3,"com.google.gson.functional.EnumTest.testEnumSubclass":593,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":531,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":203,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":476,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":468,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":701,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":717,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":537,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":479,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":345,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":515,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":344,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":26,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":453,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":616,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":75,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":198,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":521,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":117,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":286,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":188,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":311,"com.google.gson.MixedStreamTest.testWriteNulls":624,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":452,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":361,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":446,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":150,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":183,"com.google.gson.CommentsTest.testParseComments":619,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":102,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":143,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":583,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":434,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":534,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":422,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":327,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":377,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":165,"com.google.gson.MixedStreamTest.testReadInvalidState":621,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":297,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":288,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":553,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":93,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":719,"com.google.gson.JsonParserTest.testParseMixedArray":682,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":665,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":487,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":655,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":465,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":706,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":431,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":698,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":504,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":17,"com.google.gson.JsonArrayTest.testRemove":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":269,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":548,"com.google.gson.functional.MapTest.testMapDeserialization":45,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":263,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":307,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":310,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":578,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":646,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":720,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":125,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":317,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":24,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":580,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":359,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":42,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":240,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":204,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":348,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":429,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":249,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":155,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":689,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":342,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":357,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":304,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":326,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":145,"com.google.gson.functional.PrimitiveTest.testShortSerialization":552,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":585,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":540,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":178,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":695,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":510,"com.google.gson.JsonParserTest.testParseEmptyString":683,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":74,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":253,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":486,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":417,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":592,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":101,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":391,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":71,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":360,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":89,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":503,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":411,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":560,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":53,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":663,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":699,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":589,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":79,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":567,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":561,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":644,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":116,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":124,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":137,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":236,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":602,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":672,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":700,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":546,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":128,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":140,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":516,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":223,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":193,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":598,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":350,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":250,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":400,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":424,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":141,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":270,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":584,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":493,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":709,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":256,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":275,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":0,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":393,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":480,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":547,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":518,"com.google.gson.JsonArrayTest.testSet":651,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":564,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":435,"com.google.gson.JsonPrimitiveTest.testEquals":674,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":23,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":591,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":65,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":56,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":191,"com.google.gson.functional.MapTest.testGeneralMapField":332,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":443,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":721,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":566,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":425,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":458,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":470,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":659,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":282,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":237,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":366,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":484,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":542,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":99,"com.google.gson.MixedStreamTest.testReadMixedStreamed":630,"com.google.gson.JsonObjectTest.testDeepCopy":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":251,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":320,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":505,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":716,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":407,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":467,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":615,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":523,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":177,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":696,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":702,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":268,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":46,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":388,"com.google.gson.JsonArrayTest.testDeepCopy":658,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":88,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":144,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":565,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":180,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":606,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":506,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":266,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":715,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":362,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":673,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":235,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":401,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":588,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":149,"com.google.gson.functional.ObjectTest.testNestedDeserialization":224,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":164,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":209,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":575,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":84,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":563,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":433,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":113,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":321,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":376,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":684,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":2,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":550,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":349,"com.google.gson.JavaSerializationTest.testListIsSerializable":703,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":54,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":97,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":410,"com.google.gson.functional.ObjectTest.testNullSerialization":201,"com.google.gson.stream.JsonWriterTest.testDoubles":111,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":352,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":387,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":331,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":478,"com.google.gson.functional.MapTest.testInterfaceTypeMap":329,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":455,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":427,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":122,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":481,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":596,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":643,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":356,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":430,"com.google.gson.MixedStreamTest.testReadClosed":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":238,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":173,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":497,"com.google.gson.MixedStreamTest.testWriteClosed":629,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":577,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":123,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":296,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":713,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":5,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":121,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":60,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":221,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":432,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":679,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":289,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":126,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":195,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":397,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":526,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":609,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":354,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":403,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":661,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":685,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":690,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":276,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":87,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":15,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":568,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":677,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":502,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":186,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":440,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":59,"com.google.gson.functional.CollectionTest.testQueueDeserialization":412,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":708,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":508,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":524,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":381,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":287,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":608,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":213,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":258,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":222,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":368,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":390,"com.google.gson.functional.MapTest.testRawMapSerialization":334,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":620,"com.google.gson.JsonParserTest.testParseReader":67,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":274,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":641,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":13,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":347,"com.google.gson.JsonPrimitiveTest.testExponential":676,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":58,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":587,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":98,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":227,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":445,"com.google.gson.functional.PrimitiveTest.testByteSerialization":549,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":657,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":36,"com.google.gson.ObjectTypeAdapterTest.testSerialize":642,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":364,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":492,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":95,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":456,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":418,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":6,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":378,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":611,"com.google.gson.functional.MapTest.testMapWithQuotes":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":244,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":500,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":134,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":466,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":653,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":148,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":241,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":299,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":1,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":220,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":722,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":308,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":533,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":197,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":246,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":257,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":545,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":233,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":404,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":285,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":441,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":351,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":169,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":610,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":710,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":92,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":86,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":482,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":31,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":207,"com.google.gson.internal.LinkedTreeMapTest.testClear":72,"com.google.gson.JsonObjectTest.testAddingStringProperties":108,"com.google.gson.functional.ObjectTest.testNestedSerialization":208,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":436,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":365,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":384,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":496,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":179,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":333,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":94,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":127,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":681,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":628,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":640,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":650,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":11,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":166,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":559,"com.google.gson.JsonPrimitiveTest.testBoolean":670,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":28,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":260,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":498,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":618,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":634,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":239,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":604,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":383,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":451,"com.google.gson.functional.CollectionTest.testSetSerialization":409,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":471,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":142,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":305,"com.google.gson.functional.StringTest.testStringValueSerialization":386,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":8,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":16,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":115,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":394,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":442,"com.google.gson.MixedStreamTest.testWriteInvalidState":625,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":196,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":501,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":460,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":507,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":40,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":648,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":70,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":419,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":181,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":103,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":170,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":667,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":172,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":694,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":278,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":37,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":723,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":316,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":109,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":129,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":447},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"ba7024d8-3e86-11e6-b744-cf7736c109a5","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[26,27,0,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"ba7072f9-3e86-11e6-b744-77d96ef0af59","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"ba709a0a-3e86-11e6-b744-ad03eb56a315","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"ba709a0b-3e86-11e6-b744-218d07193979","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ba709a0c-3e86-11e6-b744-e77e08cab5ed","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[83],"tindex":"ba70c11d-3e86-11e6-b744-af91a568352b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ba70c11e-3e86-11e6-b744-73be4e36a72a","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba70e82f-3e86-11e6-b744-594344790903","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[1,3,4,6,7,22,23,24,25],"tindex":"ba70e830-3e86-11e6-b744-b5bbfcbdac7f","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ba710f41-3e86-11e6-b744-271d527afc7b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[84,26,27,0,28,29,30,85,86,33,34,87,35,39,43,88,89,90,45,46,47,91,48,49,92,53,93,56,94,59,60,63,21,95,96,97,64,98,67,68,99,70,71,73,100,101,75,102,103,104,81,105,106,107,108],"tindex":"ba710f42-3e86-11e6-b744-b3bacf91c255","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"ba713653-3e86-11e6-b744-1b32b3aa84f5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"ba718474-3e86-11e6-b744-252ae632957f","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"ba718475-3e86-11e6-b744-e1988eade011","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"ba718476-3e86-11e6-b744-5770a92cc9e0","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"ba718477-3e86-11e6-b744-61a3dd9e0210","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[109,110,111],"tindex":"ba71ab88-3e86-11e6-b744-bd33364cfdf3","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"ba71ab89-3e86-11e6-b744-3dfa686d599a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[112,113,114,115,116,117,118,119,84,26,27,120,121,122,0,28,123,124,125,126,29,127,128,129,130,131,132,133,134,135,136,30,85,137,138,139,140,141,142,143,144,145,31,146,147,148,149,1,150,151,2,3,4,152,153,154,5,6,7,155,156,86,157,158,159,160,161,162,163,34,164,165,166,167,168,87,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,8,36,37,9,187,188,189,10,190,191,192,193,194,195,196,197,198,199,200,201,11,202,203,204,205,206,12,207,13,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,38,229,230,231,232,233,234,235,236,237,238,39,239,240,241,242,243,244,245,246,247,248,249,250,251,40,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,41,42,43,44,297,298,299,300,301,302,303,304,14,305,306,307,308,309,310,311,312,88,313,314,89,90,315,316,317,45,318,319,320,46,321,322,323,324,47,325,326,327,328,329,330,331,332,333,334,91,335,336,48,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,49,92,50,51,52,53,54,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,55,411,412,413,414,415,416,417,418,419,420,421,422,423,93,56,94,57,58,424,425,426,427,428,429,430,431,432,433,434,59,60,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,61,466,467,62,63,468,469,470,471,20,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,21,95,570,96,97,571,572,64,573,574,575,576,577,65,22,578,579,580,581,582,23,24,583,584,585,586,587,588,25,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,69,635,636,637,638,639,640],"tindex":"ba71ab8a-3e86-11e6-b744-a5e14e23cd30","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ba71d29b-3e86-11e6-b744-db09577977f8","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ba71d29c-3e86-11e6-b744-c76d9157bea4","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"ba71d29d-3e86-11e6-b744-9153a6f2b1de","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to.getRawType().equals(to.getRawType())) {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"ba71f9ae-3e86-11e6-b744-c1ae1662e861","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[34],"tindex":"ba71f9af-3e86-11e6-b744-317a42f10967","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"ba71f9b0-3e86-11e6-b744-199fd7e4b4e8","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to.getRawType().equals(to.getRawType())) {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[253],"tindex":"ba71f9b1-3e86-11e6-b744-a9dff2ddcf76","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"ba71f9b2-3e86-11e6-b744-5513cccc9f2f","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[518],"tindex":"ba721fc3-3e86-11e6-b744-c95c1324b0e3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[535,558,564,626],"tindex":"ba721fc4-3e86-11e6-b744-a36084fea5fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba721fc5-3e86-11e6-b744-43c6056e2be7","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[114,118,121,125,127,140,142,1,151,2,3,4,152,153,5,6,7,156,158,641,162,167,168,35,180,8,10,199,11,12,208,216,218,221,38,234,41,42,43,44,297,298,299,300,301,302,303,304,14,305,306,307,308,314,324,332,334,340,342,345,352,357,49,92,364,367,368,389,392,397,400,406,409,410,417,418,419,420,421,433,434,60,441,447,452,456,458,464,61,62,63,544,551,553,571,64,573,602,605,606,609,620,623,69,642],"tindex":"ba721fc6-3e86-11e6-b744-4f95a1a100d7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"ba721fc7-3e86-11e6-b744-e9f77422fc02","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"ba7246d8-3e86-11e6-b744-23b932898558","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[129,151,154,155,86,310,411],"tindex":"ba7246d9-3e86-11e6-b744-5b73a15888ef","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ba7246da-3e86-11e6-b744-d95c43f9ad63","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[582],"tindex":"ba7246db-3e86-11e6-b744-85529366e2ce","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ba726dec-3e86-11e6-b744-73ce3936d9a5","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"ba726ded-3e86-11e6-b744-ed3d26b8a22d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[120,121,122,125,126,127,134,136,138,143,144,149,151,153,643,644,641,645,159,162,34,164,167,168,35,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,8,36,37,187,10,192,195,11,12,208,216,219,221,227,38,234,236,237,238,243,244,246,248,249,255,257,258,259,261,263,264,269,273,276,279,281,282,285,286,287,288,292,295,42,14,308,313,314,315,317,318,322,323,329,331,332,334,335,337,341,342,345,346,348,350,351,355,49,92,364,365,366,367,368,370,371,372,373,374,377,379,383,386,15,16,17,18,19,388,389,390,396,398,399,400,403,406,407,411,415,93,94,424,425,426,427,428,429,431,432,435,436,437,438,440,441,445,446,450,451,456,458,462,62,63,484,487,502,544,571,573,580,590,591,592,593,596,598,599,600,605,612,615,616,617,620,623,628,646,633,647,648,649,650,69,635,638,640],"tindex":"ba726dee-3e86-11e6-b744-b52ae64fdf7d","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"ba726def-3e86-11e6-b744-152a79b923c0","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[651],"tindex":"ba729500-3e86-11e6-b744-4bce3323f1f0","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"ba729501-3e86-11e6-b744-970024bdaac9","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[346,351,353,359,417,420],"tindex":"ba729502-3e86-11e6-b744-b51716c9b41e","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"ba729503-3e86-11e6-b744-e7006e2faa29","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"ba729504-3e86-11e6-b744-0f8c826442ec","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.getRawType().equals(from.getRawType())) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[39,652,653,81],"tindex":"ba72bc15-3e86-11e6-b744-5dab9c37ce90","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[654],"tindex":"ba72bc16-3e86-11e6-b744-794dc802a4f6","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba72bc17-3e86-11e6-b744-09470d7660e0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba72bc18-3e86-11e6-b744-93da5b36ec46","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[571,64,573,574,65],"tindex":"ba72bc19-3e86-11e6-b744-d57336d6eedb","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (serialization) {\n                {\n                    if (serialization) {\n                        {\n                            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                            if (serialization) {\n                                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                            } \n                            if (deserialization) {\n                                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                            } \n                            return result;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ba72e32a-3e86-11e6-b744-11ab121f3b56","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ba72e32b-3e86-11e6-b744-2be6e55563d4","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[99,70],"tindex":"ba72e32c-3e86-11e6-b744-7d04e654bc30","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[655],"tindex":"ba72e32d-3e86-11e6-b744-8d44d8d1e966","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[],"tindex":"ba730a3e-3e86-11e6-b744-4d58e9831514","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (serialization) {\n                {\n                    if (serialization) {\n                        {\n                            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                            if (serialization) {\n                                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                            } \n                            if (deserialization) {\n                                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                            } \n                            return result;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba730a3f-3e86-11e6-b744-a3962f89119f","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[84,26,27,0,28,29,127,134,136,85,138,143,144,145,146,149,151,86,32,34,164,87,35,171,173,174,176,36,37,227,38,237,244,246,248,281,285,292,294,41,42,43,44,329,332,338,341,50,51,52,53,54,411,422,423,93,56,94,57,58,425,427,59,60,61,62,63,469,21,95,570,96,97,64,65,581,592,98,656,657,651,658,654,659,660,661,662,663,664,665,624,666,667,668,669,670,646,671,672,673,674,675,676,677,678,679,680,67,68,69,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,79,80,699,700,638,105,107,108],"tindex":"ba730a40-3e86-11e6-b744-5f449cfbee17","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"ba733151-3e86-11e6-b744-439de18c7e7a","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (serialization) {\n                {\n                    if (serialization) {\n                        {\n                            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                            if (serialization) {\n                                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                            } \n                            if (deserialization) {\n                                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                            } \n                            return result;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[112,113,114,115,116,117,118,119,84,26,27,120,121,122,0,28,123,124,125,126,29,127,128,129,130,131,132,133,134,135,136,30,85,137,138,139,140,141,142,143,144,145,31,146,147,148,149,1,150,151,2,3,4,152,153,154,5,6,7,155,156,86,157,158,159,160,161,162,163,34,164,165,166,167,168,87,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,8,36,37,9,187,188,189,10,190,191,192,193,194,195,196,197,198,199,200,201,11,202,203,204,205,206,12,207,13,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,38,229,230,231,232,233,234,235,236,237,238,39,239,240,241,242,243,244,245,246,247,248,249,250,251,40,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,41,42,43,44,297,298,299,300,301,302,303,304,14,305,306,307,308,309,310,311,312,88,313,314,89,90,315,316,317,45,318,319,320,46,321,322,323,324,47,325,326,327,328,329,330,331,332,333,334,91,335,336,48,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,49,92,50,51,52,53,54,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,55,411,412,413,414,415,416,417,418,419,420,421,422,423,93,56,94,57,58,424,425,426,427,428,429,430,431,432,433,434,59,60,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,61,466,467,62,63,468,469,470,471,20,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,21,95,570,96,97,571,572,64,573,574,575,576,577,65,22,578,579,580,581,582,23,24,583,584,585,586,587,588,25,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,69,635,636,637,638,639,640],"tindex":"ba733152-3e86-11e6-b744-2dfeda8c5507","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ba735863-3e86-11e6-b744-1b3d4615640e","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[201,229,233,293,570,587,624],"tindex":"ba735864-3e86-11e6-b744-6900b0ef0c3d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[112,113,114,115,116,117,118,119,84,26,27,120,121,122,0,28,123,124,125,126,29,127,128,129,130,131,132,133,134,135,136,30,85,137,138,139,140,141,142,143,144,145,31,146,147,148,149,1,150,151,2,3,4,152,153,154,5,6,7,155,156,86,157,158,159,160,161,162,163,34,164,166,167,168,87,169,170,35,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,8,9,187,188,189,10,190,191,192,193,194,195,197,198,199,200,11,203,204,205,206,12,207,13,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,224,225,226,227,228,38,230,231,232,234,235,236,237,238,39,239,240,241,242,243,244,245,246,247,248,249,250,251,40,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,41,42,43,44,297,298,299,300,301,302,303,304,14,305,306,307,308,309,310,311,312,88,313,314,89,90,315,316,317,45,318,319,320,46,321,322,323,324,47,325,326,327,328,329,330,331,332,333,334,91,335,336,48,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,49,92,50,51,52,53,54,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,15,16,17,18,19,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,55,411,412,413,414,415,416,417,418,419,420,421,422,423,93,56,94,57,58,424,425,426,427,428,429,430,431,432,433,434,59,60,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,61,466,467,62,63,468,469,470,471,20,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,21,95,570,96,97,571,572,64,573,574,575,576,577,65,22,578,579,580,581,582,23,24,583,584,585,586,587,588,25,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,701,98,656,657,619,620,621,623,625,626,627,628,629,630,631,633,634,702,66,703,69,642,704,705,706,707,635,636,637,640],"tindex":"ba737f75-3e86-11e6-b744-e7eea8e16b70","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba737f76-3e86-11e6-b744-792e1cca564e","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba737f77-3e86-11e6-b744-8f3d25107edf","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[219,255,257,258,287],"tindex":"ba737f78-3e86-11e6-b744-37e8862752be","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ba73a689-3e86-11e6-b744-235592758f32","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"ba73a68a-3e86-11e6-b744-538771e91ae6","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ba73a68b-3e86-11e6-b744-6f175e58738e","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"ba73a68c-3e86-11e6-b744-63f870e61530","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return ((float)(in.nextDouble()));\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    float float = value.floatValue();\n                                    checkValidFloatingPoint(floatValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[199,219,225,15,16,17,18,19,437,438,642],"tindex":"ba73cd9d-3e86-11e6-b744-5d3146e106e0","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[655,708,709,710,711,712,713,714,715,83],"tindex":"ba73cd9e-3e86-11e6-b744-53e89f9cc2e8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[35,182,183,184,185,186,424,425,427,429,430],"tindex":"ba73f4af-3e86-11e6-b744-37c95ae80e57","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"ba73f4b0-3e86-11e6-b744-6b84de778ada","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[26,0,32,34,241,247,310,50,52,54,21,651,658,654,652,682,684,716,685,686,717,718,719,687,688,689,720,721,690,693,694,698,107],"tindex":"ba73f4b1-3e86-11e6-b744-15444975cc54","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ba73f4b2-3e86-11e6-b744-6ddfdfa48f2e","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof com.google.gson.JsonObject) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[84,26,27,120,122,0,28,126,29,253,43,318,329,331,341,16,399,451,462,22,580,23,24,587,25],"tindex":"ba741bc3-3e86-11e6-b744-6fb47624ec28","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ba741bc4-3e86-11e6-b744-8141f86227fc","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ba741bc5-3e86-11e6-b744-e58ce566be38","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[84,26,27,0,28,29,43,341],"tindex":"ba741bc6-3e86-11e6-b744-27ed6ecd97bb","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ba741bc7-3e86-11e6-b744-29e246485deb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[76],"tindex":"ba7442d8-3e86-11e6-b744-895a3950edd1","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ba7442d9-3e86-11e6-b744-4f1f459d5612","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ba7442da-3e86-11e6-b744-038d5d5e9b1f","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"ba7469eb-3e86-11e6-b744-fd538a1ced79","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[654],"tindex":"ba7469ec-3e86-11e6-b744-fdb933ef1ce1","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[602,603,604,606,607,609],"tindex":"ba7469ed-3e86-11e6-b744-a15626738534","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ba7469ee-3e86-11e6-b744-478d7b68966b","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"ba7469ef-3e86-11e6-b744-c9e44c3e5133","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ba7469f0-3e86-11e6-b744-ff14b121cd4c","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ba7469f1-3e86-11e6-b744-6181154b5ec0","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ba749102-3e86-11e6-b744-abd30681c3d2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonObject) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"ba749103-3e86-11e6-b744-99148012d221","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            if (!create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ba74b814-3e86-11e6-b744-afbad8c5b450","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[722,655,723,724],"tindex":"ba74b815-3e86-11e6-b744-953e8bbe6f6c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"ba74b816-3e86-11e6-b744-d1412753c49e","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"ba74b817-3e86-11e6-b744-814043c50826","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[112,114,116,118,119,84,26,27,120,121,122,0,28,125,126,29,127,134,136,138,139,140,142,143,144,31,147,148,149,1,151,2,3,4,152,153,5,6,7,156,158,643,159,162,34,164,167,168,169,35,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,8,37,9,187,10,192,195,199,201,11,204,206,12,13,208,209,211,216,218,219,221,227,38,229,234,236,237,238,241,243,244,246,248,249,40,253,255,256,257,258,259,261,263,264,266,268,269,270,271,273,276,278,279,281,282,284,285,286,287,288,289,292,293,295,41,42,43,44,297,298,299,300,301,302,303,304,14,305,306,307,308,310,313,314,315,317,322,323,324,326,327,329,330,331,332,334,335,336,337,340,341,342,345,346,347,348,349,350,351,352,355,357,360,49,92,364,365,366,367,368,370,371,372,373,374,377,379,383,386,15,16,17,18,19,388,389,390,391,392,396,397,398,399,400,403,406,407,409,410,411,415,417,418,419,420,421,93,94,424,425,426,427,428,429,430,431,432,433,434,59,60,435,436,437,438,439,440,441,443,444,445,446,447,450,452,456,458,460,462,464,61,62,63,468,469,470,20,472,476,478,484,487,495,496,502,504,505,508,511,513,514,517,518,522,531,533,535,536,539,542,544,548,549,550,551,552,553,554,558,560,564,565,567,21,95,570,96,97,572,573,580,582,25,590,591,592,593,596,598,599,600,601,602,605,606,609,612,613,614,615,616,617,98,656,657,620,623,624,625,626,628,629,633,634,69,635,636,637,692,638,639,640],"tindex":"ba74df28-3e86-11e6-b744-a3b350f9f6e6","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"ba74df29-3e86-11e6-b744-d99dd85b86ac","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[294,41,44,673,674,678],"tindex":"ba74df2a-3e86-11e6-b744-33539841cef3","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356349/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"ba75063b-3e86-11e6-b744-7317e52b7fe1","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
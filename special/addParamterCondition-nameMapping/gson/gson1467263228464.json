{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":543,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":334,"com.google.gson.functional.StringTest.testStringValueDeserialization":332,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":630,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":35,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":222,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":460,"com.google.gson.stream.JsonWriterTest.testRepeatedName":627,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":61,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":178,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":319,"com.google.gson.MixedStreamTest.testWriteLenient":598,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":30,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":41,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":352,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":139,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":369,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":508,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":111,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":573,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":249,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":469,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":102,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":552,"com.google.gson.functional.ObjectTest.testSingletonLists":137,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":223,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":335,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":453,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":635,"com.google.gson.stream.JsonWriterTest.testStrings":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":94,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":182,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":238,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":156,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":609,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":511,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":576,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":618,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":348,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":14,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":251,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":500,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":280,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":445,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":586,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":19,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":279,"com.google.gson.functional.EnumTest.testEnumCaseMapping":572,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":333,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":605,"com.google.gson.functional.JsonTreeTest.testToJsonTree":245,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":444,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":240,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":27,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":110,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":615,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":215,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":455,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":45,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":362,"com.google.gson.functional.ObjectTest.testNullDeserialization":168,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":130,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":345,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":150,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":521,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":461,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":157,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":18,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":442,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":165,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":59,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":241,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":330,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":526,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":237,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":505,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":616,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":198,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":532,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":169,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":221,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":482,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":272,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":320,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":497,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":212,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":40,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":53,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":88,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":294,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":326,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":506,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":498,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":164,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":413,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":145,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":407,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":607,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":68,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":290,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":465,"com.google.gson.metrics.PerformanceTest.testDummy":604,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":115,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":72,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":100,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":89,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":179,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":228,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":390,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":214,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":441,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":133,"com.google.gson.functional.CollectionTest.testSetDeserialization":368,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":250,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":149,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":377,"com.google.gson.functional.EnumTest.testEnumSet":564,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":489,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":202,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":267,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":158,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":99,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":585,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":502,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":86,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":513,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":16,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":188,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":514,"com.google.gson.functional.MapTest.testHashMapDeserialization":261,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":458,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":227,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":408,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":545,"com.google.gson.MixedStreamTest.testReadNulls":599,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":302,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":541,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":38,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":186,"com.google.gson.functional.MapTest.testSortedMap":283,"com.google.gson.functional.MapTest.testMapSerialization":278,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":544,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":386,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":495,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":426,"com.google.gson.functional.MapTest.testSerializeMaps":264,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":383,"com.google.gson.functional.MapTest.testComplexKeysSerialization":291,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":376,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":52,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":295,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":433,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":132,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":570,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":562,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":314,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":183,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":568,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":254,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":63,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":167,"com.google.gson.functional.MapTest.testStringKeyDeserialization":293,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":430,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":4,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":528,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":297,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":464,"com.google.gson.functional.PrettyPrintingTest.testMap":252,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":459,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":355,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":196,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":547,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":432,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":608,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":617,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":338,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":209,"com.google.gson.functional.MapTest.testMapSerializationEmpty":292,"com.google.gson.functional.CollectionTest.testQueueSerialization":359,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":490,"com.google.gson.functional.MapTest.testMapOfMapSerialization":277,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":217,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":365,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":492,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":624,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":10,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":336,"com.google.gson.functional.FieldNamingTest.testIdentity":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":90,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":118,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":170,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":67,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":136,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":244,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":540,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":447,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":48,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":337,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":438,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":299,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":231,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":239,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":623,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":259,"com.google.gson.functional.MapTest.testMapSubclassSerialization":263,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":524,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":109,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":317,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":379,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":395,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":479,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":574,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":195,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":321,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":539,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":181,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":98,"com.google.gson.functional.EnumTest.testEnumSubclass":566,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":501,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":154,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":610,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":446,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":437,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":507,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":3,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":449,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":485,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":300,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":70,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":422,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":588,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":148,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":491,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":66,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":483,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":233,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":138,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":260,"com.google.gson.MixedStreamTest.testWriteNulls":596,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":421,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":324,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":415,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":131,"com.google.gson.CommentsTest.testParseComments":591,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":7,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":557,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":401,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":504,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":385,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":282,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":340,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":116,"com.google.gson.MixedStreamTest.testReadInvalidState":593,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":235,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":523,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":387,"com.google.gson.JsonParserTest.testParseMixedArray":51,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":457,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":434,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":398,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":474,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":219,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":518,"com.google.gson.functional.MapTest.testMapDeserialization":270,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":213,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":257,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":34,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":50,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":551,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":79,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":269,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":556,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":553,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":315,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":33,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":194,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":155,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":171,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":304,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":396,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":106,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":298,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":313,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":253,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":32,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":443,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":93,"com.google.gson.functional.PrimitiveTest.testShortSerialization":522,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":46,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":510,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":480,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":203,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":456,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":380,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":47,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":354,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":316,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":265,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":473,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":530,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":322,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":229,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":563,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":55,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":603,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":537,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":531,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":613,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":65,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":78,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":91,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":172,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":190,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":575,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":516,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":486,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":176,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":144,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":571,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":306,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":200,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":363,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":392,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":92,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":220,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":558,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":463,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":206,"com.google.gson.stream.JsonWriterTest.testNullStringValue":625,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":225,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":75,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":450,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":517,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":488,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":534,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":404,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":555,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":565,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":549,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":388,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":142,"com.google.gson.functional.MapTest.testGeneralMapField":287,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":536,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":393,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":427,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":230,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":23,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":329,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":454,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":512,"com.google.gson.MixedStreamTest.testReadMixedStreamed":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":201,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":273,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":475,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":370,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":436,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":587,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":113,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":493,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":125,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":218,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":274,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":351,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":262,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":8,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":535,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":128,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":579,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":626,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":476,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":216,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":325,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":189,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":364,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":561,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":12,"com.google.gson.functional.ObjectTest.testNestedDeserialization":177,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":15,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":162,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":546,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":69,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":124,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":533,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":400,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":62,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":275,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":339,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":97,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":520,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":305,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":44,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":323,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":373,"com.google.gson.functional.ObjectTest.testNullSerialization":151,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":308,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":350,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":266,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":286,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":448,"com.google.gson.functional.MapTest.testInterfaceTypeMap":284,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":424,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":37,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":451,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":569,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":612,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":312,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":397,"com.google.gson.MixedStreamTest.testReadClosed":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":191,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":17,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":467,"com.google.gson.MixedStreamTest.testWriteClosed":601,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":361,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":548,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":77,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":242,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":103,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":73,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":403,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":174,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":236,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":80,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":146,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":360,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":580,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":496,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":582,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":310,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":226,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":120,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":538,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":620,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":472,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":134,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":409,"com.google.gson.functional.CollectionTest.testQueueDeserialization":375,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":478,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":494,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":344,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":234,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":581,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":166,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":271,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":208,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":175,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":331,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":353,"com.google.gson.functional.MapTest.testRawMapSerialization":289,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":592,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":224,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":614,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":160,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":303,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":391,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":560,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":180,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":414,"com.google.gson.functional.PrimitiveTest.testByteSerialization":519,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":20,"com.google.gson.ObjectTypeAdapterTest.testSerialize":634,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":327,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":462,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":49,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":42,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":425,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":104,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":341,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":584,"com.google.gson.functional.MapTest.testMapWithQuotes":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":25,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":470,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":1,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":435,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":11,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":619,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":24,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":248,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":554,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":95,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":258,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":205,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":503,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":147,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":26,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":207,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":515,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":187,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":367,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":417,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":31,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":410,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":307,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":121,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":583,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":318,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":108,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":9,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":159,"com.google.gson.functional.ObjectTest.testNestedSerialization":161,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":405,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":328,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":347,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":466,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":127,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":288,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":389,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":0,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":600,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":611,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":633,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":117,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":152,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":529,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":76,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":210,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":468,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":590,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":606,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":193,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":577,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":346,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":420,"com.google.gson.functional.CollectionTest.testSetSerialization":372,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":440,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":6,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":255,"com.google.gson.functional.StringTest.testStringValueSerialization":349,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":135,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":64,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":357,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":621,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":411,"com.google.gson.MixedStreamTest.testWriteInvalidState":597,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":22,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":471,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":429,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":477,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":28,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":382,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":129,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":122,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":54,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":123,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":29,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":21,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":268,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":629,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":83,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":416},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"7ec2a482-3e80-11e6-b494-535126592fa7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"7ec340c3-3e80-11e6-b494-819b07f5f763","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"7ec367d4-3e80-11e6-b494-49030180448a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,0,82,83,84,85,86,87,1,88,2,89,90,91,3,4,5,92,6,7,8,93,9,94,10,11,12,95,96,13,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,14,15,116,117,118,119,120,121,122,16,123,17,18,124,19,125,126,127,128,129,130,131,132,133,134,135,20,21,136,137,138,139,140,141,142,143,144,145,146,22,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,23,191,192,193,194,24,195,196,25,197,26,198,27,199,200,201,28,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,29,228,229,30,230,231,232,31,233,234,235,236,237,238,32,239,240,241,242,243,33,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,34,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,35,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,36,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,37,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,38,435,436,39,40,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,41,42,540,43,44,541,542,543,544,545,546,547,548,549,550,551,552,553,554,45,555,556,557,558,46,559,560,561,562,563,564,565,47,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,48,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,59,60,611],"tindex":"7ec367d5-3e80-11e6-b494-c5e8cf22a400","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[61,63,67,68,72,73,74,79,80,0,1,2,3,4,5,6,7,8,9,12,95,13,97,98,99,100,101,103,104,105,107,110,612,613,614,615,616,617,618,111,114,14,15,118,119,121,619,16,123,17,18,124,19,125,126,127,128,129,130,131,132,134,135,20,21,136,137,140,143,146,149,152,158,160,161,164,169,171,172,174,180,182,188,190,23,191,196,25,26,27,199,28,205,207,208,209,211,213,214,216,218,219,220,223,226,228,30,230,31,233,234,235,236,32,241,33,246,248,249,250,252,253,254,258,263,264,267,269,271,276,277,278,282,284,286,287,288,289,291,294,297,35,298,301,302,303,304,306,307,308,311,313,316,317,318,327,328,329,330,331,333,334,335,336,337,340,342,346,349,620,621,622,623,624,351,352,353,354,359,361,362,363,366,369,370,372,36,378,380,381,382,383,384,387,389,392,393,394,37,395,396,398,399,400,401,404,405,406,407,409,410,414,415,419,420,425,427,431,38,39,40,437,441,442,454,457,472,514,541,544,547,550,553,555,556,558,46,559,562,564,565,47,566,569,571,572,573,575,578,579,582,585,587,588,589,592,595,600,50,605,625,626,627,628,629,630,631,632,633,607,634,635,608,55,56,58,59,60,611],"tindex":"7ec38ee6-3e80-11e6-b494-f37b45f2996b","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,0,82,83,84,85,86,87,1,88,2,89,90,91,3,4,5,92,6,7,8,93,9,94,10,11,12,95,96,13,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,14,15,116,117,118,119,120,121,122,16,123,17,18,124,19,125,126,127,128,129,130,131,132,133,134,135,20,21,136,137,138,139,140,141,142,143,144,145,146,22,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,23,191,192,193,194,24,195,196,25,197,26,198,27,199,200,201,28,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,29,228,229,30,230,231,232,31,233,234,235,236,237,238,32,239,240,241,242,243,33,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,34,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,35,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,36,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,37,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,38,435,436,39,40,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,41,42,540,43,44,541,542,543,544,545,546,547,548,549,550,551,552,553,554,45,555,556,557,558,46,559,560,561,562,563,564,565,47,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,48,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,59,60,611],"tindex":"7ec47947-3e80-11e6-b494-a3592adeec98","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[95,98,99,104,105,550,555,556,562],"tindex":"7ec4a058-3e80-11e6-b494-79116bc60a90","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"7ec4ee79-3e80-11e6-b494-67188354c26e","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value.isJsonNull()) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"7ec5158a-3e80-11e6-b494-6160d1677e5c","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7ec5158b-3e80-11e6-b494-19c969823e48","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"7ec5158c-3e80-11e6-b494-d18adc3928bf","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"7ec53c9d-3e80-11e6-b494-058ce6cb9219","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7ec53c9e-3e80-11e6-b494-419088381026","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"7ec53c9f-3e80-11e6-b494-f5c79f46739b","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"7ec53ca0-3e80-11e6-b494-29727464c461","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"7ec53ca1-3e80-11e6-b494-13da935776ec","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7ec563b2-3e80-11e6-b494-9d73e83a95fb","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (value instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7ec58ac3-3e80-11e6-b494-4fe613539a9b","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"7ec58ac4-3e80-11e6-b494-7b529c02a963","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"7ec5b1d5-3e80-11e6-b494-8386466d212e","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"7ec5b1d6-3e80-11e6-b494-1b1088116c22","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"7ec5b1d7-3e80-11e6-b494-131c053ac319","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"7ec5b1d8-3e80-11e6-b494-959e99649ea5","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (value instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7ec5d8e9-3e80-11e6-b494-f3605ef992c6","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262814938/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":24,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":97,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":478,"com.google.gson.functional.StringTest.testStringValueDeserialization":476,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":189,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":289,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":150,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":116,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":85,"com.google.gson.MixedStreamTest.testWriteLenient":17,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":395,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":298,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":37,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":446,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":45,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":463,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":198,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":394,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":494,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":531,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":159,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":346,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":368,"com.google.gson.functional.ObjectTest.testSingletonLists":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":290,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":497,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":144,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":524,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":536,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":308,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":63,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":9,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":201,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":501,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":492,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":234,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":23,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":190,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":565,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":136,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":598,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":443,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":564,"com.google.gson.functional.EnumTest.testEnumCaseMapping":393,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":477,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":593,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":135,"com.google.gson.functional.JsonTreeTest.testToJsonTree":233,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":311,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":249,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":376,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":422,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":282,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":349,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":456,"com.google.gson.functional.ObjectTest.testNullDeserialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":585,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":489,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":57,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":211,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":591,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":151,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":64,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":441,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":321,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":72,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":590,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":312,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":216,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":406,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":307,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":195,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":174,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":263,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":76,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":418,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":288,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":187,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":396,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":557,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":279,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":129,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":510,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":579,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":196,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":402,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":188,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":71,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":412,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":51,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":123,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":592,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":1,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":155,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":575,"com.google.gson.metrics.PerformanceTest.testDummy":7,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":498,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":240,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":115,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":512,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":533,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":581,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":296,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":281,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":320,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":588,"com.google.gson.functional.CollectionTest.testSetDeserialization":462,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":532,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":34,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":56,"com.google.gson.functional.EnumTest.testEnumSet":384,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":179,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":269,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":552,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":65,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":365,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":192,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":114,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":203,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":438,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":542,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":204,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":148,"com.google.gson.functional.MapTest.testHashMapDeserialization":546,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":294,"com.google.gson.MixedStreamTest.testReadNulls":18,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":99,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":124,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":95,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":330,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":125,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":540,"com.google.gson.functional.MapTest.testSortedMap":568,"com.google.gson.functional.MapTest.testMapSerialization":563,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":98,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":105,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":185,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":425,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":474,"com.google.gson.functional.MapTest.testSerializeMaps":549,"com.google.gson.functional.MapTest.testComplexKeysSerialization":576,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":33,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":580,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":432,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":391,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":587,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":358,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":537,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":389,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":26,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":118,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":74,"com.google.gson.functional.MapTest.testStringKeyDeserialization":578,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":516,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":218,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":154,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":582,"com.google.gson.functional.PrettyPrintingTest.testMap":24,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":379,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":259,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":538,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":8,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":431,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":482,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":276,"com.google.gson.functional.CollectionTest.testQueueSerialization":453,"com.google.gson.functional.MapTest.testMapSerializationEmpty":577,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":180,"com.google.gson.functional.MapTest.testMapOfMapSerialization":562,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":284,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":459,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":182,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":610,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":525,"com.google.gson.functional.FieldNamingTest.testIdentity":475,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":513,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":87,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":77,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":39,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":42,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":121,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":232,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":138,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":599,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":317,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":481,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":177,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":300,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":310,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":609,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":543,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":214,"com.google.gson.functional.MapTest.testMapSubclassSerialization":548,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":93,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":375,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":36,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":14,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":169,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":381,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":499,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":258,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":397,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":535,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":364,"com.google.gson.functional.EnumTest.testEnumSubclass":387,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":191,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":10,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":61,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":137,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":316,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":197,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":515,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":337,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":140,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":437,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":175,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":436,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":238,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":4,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":421,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":55,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":181,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":120,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":303,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":44,"com.google.gson.MixedStreamTest.testWriteNulls":15,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":545,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":420,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":400,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":414,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":361,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":586,"com.google.gson.CommentsTest.testParseComments":601,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":46,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":520,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":327,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":427,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":104,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":484,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":567,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":236,"com.google.gson.MixedStreamTest.testReadInvalidState":12,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":528,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":305,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":106,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":147,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":433,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":324,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":164,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":608,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":286,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":417,"com.google.gson.functional.MapTest.testMapDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":280,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":29,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":544,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":345,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":247,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":554,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":351,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":343,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":231,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":256,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":62,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":332,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":382,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":265,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":372,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":341,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":434,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":25,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":566,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":613,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":134,"com.google.gson.functional.PrimitiveTest.testShortSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":522,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":200,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":445,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":170,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":199,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":270,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":471,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":386,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":448,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":92,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":550,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":163,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":220,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":469,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":297,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":359,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":227,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":221,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":119,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":79,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":251,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":500,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":611,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":206,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":315,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":517,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":83,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":50,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":392,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":266,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":457,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":518,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":287,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":153,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":273,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":292,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":243,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":450,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":141,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":207,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":178,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":224,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":2,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":350,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":385,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":103,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":107,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":48,"com.google.gson.functional.MapTest.testGeneralMapField":572,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":411,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":226,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":318,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":378,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":299,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":570,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":252,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":405,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":202,"com.google.gson.MixedStreamTest.testReadMixedStreamed":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":267,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":558,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":127,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":464,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":600,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":183,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":444,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":285,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":559,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":323,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":547,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":521,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":32,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":504,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":283,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":401,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":250,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":458,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":357,"com.google.gson.functional.ObjectTest.testNestedDeserialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":527,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":69,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":100,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":237,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":223,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":326,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":117,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":483,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":560,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":363,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":210,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":333,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":41,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":399,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":467,"com.google.gson.functional.ObjectTest.testNullSerialization":58,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":336,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":322,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":551,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":571,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":423,"com.google.gson.functional.MapTest.testInterfaceTypeMap":569,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":142,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":390,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":604,"com.google.gson.MixedStreamTest.testReadClosed":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":340,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":253,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":440,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":157,"com.google.gson.MixedStreamTest.testWriteClosed":20,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":102,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":455,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":49,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":313,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":369,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":241,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":329,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":81,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":306,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":52,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":248,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":454,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":505,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":186,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":507,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":338,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":293,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":89,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":228,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":606,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":162,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":261,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":589,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":328,"com.google.gson.functional.CollectionTest.testQueueDeserialization":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":168,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":184,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":488,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":304,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":506,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":73,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":275,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":82,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":407,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":447,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":11,"com.google.gson.functional.MapTest.testRawMapSerialization":574,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":291,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":67,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":331,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":110,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":356,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":612,"com.google.gson.functional.PrimitiveTest.testByteSerialization":209,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":413,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":534,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":614,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":131,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":152,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":38,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":424,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":472,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":370,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":485,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":596,"com.google.gson.functional.MapTest.testMapWithQuotes":561,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":260,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":509,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":126,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":526,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":257,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":530,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":348,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":360,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":80,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":30,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":272,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":54,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":262,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":274,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":503,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":205,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":541,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":461,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":302,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":362,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":409,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":335,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":90,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":508,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":94,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":602,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":539,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":523,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":66,"com.google.gson.functional.ObjectTest.testNestedSerialization":68,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":133,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":156,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":404,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":491,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":31,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":573,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":108,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":314,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":19,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":595,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":59,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":86,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":219,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":244,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":277,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":6,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":158,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":594,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":255,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":502,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":490,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":419,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":319,"com.google.gson.functional.CollectionTest.testSetSerialization":466,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":27,"com.google.gson.functional.StringTest.testStringValueSerialization":493,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":519,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":130,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":0,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":451,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":607,"com.google.gson.MixedStreamTest.testWriteInvalidState":16,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":410,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":53,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":161,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":167,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":428,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":268,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":473,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":584,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":91,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":439,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":295,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":132,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":553,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":111,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":415},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[0,1,2,3],"tindex":"f686657f-3f08-11e6-9432-bd7e501935e1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,0,119,120,121,1,122,123,124,125,126,127,128,129,130,131,132,2,133,134,135,136,137,138,139,140,141,142,143,144,3,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"f68776f0-3f08-11e6-9432-c5b670597450","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[],"tindex":"f687c511-3f08-11e6-9432-d739db74f2e4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[209],"tindex":"f6883a42-3f08-11e6-9432-7d3972b1b939","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6883a43-3f08-11e6-9432-e5c0d1909c0f","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6886154-3f08-11e6-9432-a116d6823595","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[344,350,351,358,360,364,365,370,371],"tindex":"f6888865-3f08-11e6-9432-bff4d3d19f27","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (array == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.beginArray();\n                            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                                com.google.gson.TypeAdapter<E>.write(out, value);\n                            }\n                            out.endArray();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[500,501,502,503,504,505,506,507,602,603],"tindex":"f688af76-3f08-11e6-9432-09c76d9039aa","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f688af77-3f08-11e6-9432-156721e67b5e","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[4,5,8,9,10,23,24,25,26,27,28,29,30,31,32,35,42,43,46,49,52,56,59,62,64,65,67,68,69,71,76,78,79,81,87,88,90,92,93,94,95,96,98,101,106,108,116,118,119,121,1,122,123,124,125,128,129,130,2,133,137,139,3,147,155,156,162,164,165,168,171,173,174,177,178,182,191,193,195,196,199,202,204,208,209,210,211,212,213,214,218,220,224,225,227,231,234,235,240,241,242,247,248,251,252,253,257,259,260,262,264,265,268,272,273,274,275,276,278,280,281,283,285,286,287,288,290,293,295,296,298,299,301,302,303,304,305,306,309,312,314,316,317,318,320,321,323,324,325,326,327,330,331,332,333,334,335,336,339,341,344,347,349,350,351,353,354,355,358,360,362,363,364,365,366,367,369,370,371,373,377,378,379,380,381,382,383,384,385,386,387,390,392,393,394,403,404,405,406,407,604,605,408,409,411,412,413,414,415,418,419,420,424,426,428,430,432,434,437,438,439,440,441,442,443,444,445,446,447,448,449,453,454,455,456,457,460,463,464,466,467,469,471,472,473,474,475,477,478,479,480,481,484,486,490,493,494,497,499,500,503,504,507,509,511,515,516,517,519,520,521,523,525,526,527,528,529,530,531,532,534,536,544,548,549,552,554,556,561,562,563,566,567,569,570,571,572,573,574,576,577,579,582,583,584,585,586,587,589,606,607,608,609,610,592,593,594,595,597,598,599,600],"tindex":"f688d688-3f08-11e6-9432-237148169116","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[611,11,14,15,16,17,19,20,37,38,39,40,41,53,95,97,101,131,230,231,232,233,234,237,238,239,243,244,249,317,328,329,344,347,350,351,353,354,355,356,358,362,419,541,549,556,573,583,612,613,614],"tindex":"f68924a9-3f08-11e6-9432-d32bee9008eb","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68924aa-3f08-11e6-9432-1531a34d03a9","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6894bbb-3f08-11e6-9432-5b63c159ac0b","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f68999dc-3f08-11e6-9432-4d5616949866","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68999dd-3f08-11e6-9432-45011ebafe9e","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f689c0ee-3f08-11e6-9432-5bac5317762c","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f689c0ef-3f08-11e6-9432-077ee0feef40","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (array == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.beginArray();\n                            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                                com.google.gson.TypeAdapter<E>.write(out, value);\n                            }\n                            out.endArray();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f689e800-3f08-11e6-9432-5dd3046bbe04","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68a0f11-3f08-11e6-9432-2528fa3a4e64","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (array == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.beginArray();\n                            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                                com.google.gson.TypeAdapter<E>.write(out, value);\n                            }\n                            out.endArray();\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68a3622-3f08-11e6-9432-6f22150f1463","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68a5d33-3f08-11e6-9432-7116b622aeae","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68a8444-3f08-11e6-9432-0bdc26a3640a","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68aab55-3f08-11e6-9432-2db7c87fa7a5","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68aab56-3f08-11e6-9432-6d054a6af74a","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68ad267-3f08-11e6-9432-3de0f6326a71","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f68af978-3f08-11e6-9432-1f65aff94188","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68b4799-3f08-11e6-9432-818f26be5a13","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f68b6eaa-3f08-11e6-9432-e3237bff37f8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321362967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":28,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
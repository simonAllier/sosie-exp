{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":23,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":336,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":9,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":62,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":134,"com.google.gson.MixedStreamTest.testWriteLenient":39,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":360,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":374,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":17,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":344,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":320,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":353,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":53,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":382,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":364,"com.google.gson.functional.ObjectTest.testSingletonLists":318,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":56,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":211,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":194,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":327,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":43,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":478,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":156,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":10,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":105,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":272,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":47,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":115,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":77,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":271,"com.google.gson.functional.EnumTest.testEnumCaseMapping":227,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":40,"com.google.gson.functional.JsonTreeTest.testToJsonTree":8,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":378,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":16,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":368,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":405,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":250,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":303,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":168,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":484,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":355,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":413,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":133,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":75,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":388,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":331,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":497,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":193,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":118,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":37,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":247,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":371,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":268,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":428,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":401,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":26,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":442,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":197,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":276,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":119,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":363,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":241,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":416,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":59,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":219,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":410,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":34,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":69,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":473,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":57,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":277,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":403,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":184,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":199,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":340,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":476,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":373,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":181,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":387,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":494,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":426,"com.google.gson.functional.CollectionTest.testSetDeserialization":425,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":383,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":412,"com.google.gson.functional.EnumTest.testEnumSet":456,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":198,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":393,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":464,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":328,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":46,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":291,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":183,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":72,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":424,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":120,"com.google.gson.functional.MapTest.testHashMapDeserialization":461,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":372,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":60,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":27,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":135,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":24,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":343,"com.google.gson.functional.MapTest.testSortedMap":471,"com.google.gson.functional.MapTest.testMapSerialization":469,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":137,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":125,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":253,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":32,"com.google.gson.functional.MapTest.testSerializeMaps":82,"com.google.gson.functional.MapTest.testComplexKeysSerialization":274,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":1,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":475,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":260,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":356,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":96,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":448,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":108,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":64,"com.google.gson.functional.MapTest.testStringKeyDeserialization":275,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":395,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":203,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":122,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":477,"com.google.gson.functional.PrettyPrintingTest.testMap":106,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":149,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":347,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":140,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":143,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":42,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":259,"com.google.gson.functional.MapTest.testMapSerializationEmpty":474,"com.google.gson.functional.CollectionTest.testQueueSerialization":483,"com.google.gson.functional.MapTest.testMapOfMapSerialization":270,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":36,"com.google.gson.JavaSerializationTest.testMapIsSerializable":453,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":486,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":117,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":232,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":212,"com.google.gson.functional.FieldNamingTest.testIdentity":153,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":337,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":200,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":262,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":333,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":7,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":68,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":98,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":317,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":48,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":195,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":234,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":51,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":231,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":460,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":38,"com.google.gson.functional.MapTest.testMapSubclassSerialization":266,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":221,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":296,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":154,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":390,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":427,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":429,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":423,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":290,"com.google.gson.functional.EnumTest.testEnumSubclass":223,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":44,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":326,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":384,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":29,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":236,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":235,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":12,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":50,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":249,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":479,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":67,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":319,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":81,"com.google.gson.MixedStreamTest.testWriteNulls":449,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":248,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":361,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":147,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":402,"com.google.gson.CommentsTest.testParseComments":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":207,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":321,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":432,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":301,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":124,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":338,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":88,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":379,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":192,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":312,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":126,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":217,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":304,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":261,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":394,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":299,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":35,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":187,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":246,"com.google.gson.functional.MapTest.testMapDeserialization":466,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":111,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":80,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":165,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":446,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":267,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":170,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":30,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":6,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":434,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":89,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":359,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":101,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":95,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":233,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":107,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":470,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":209,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":172,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":79,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":370,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":31,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":61,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":346,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":220,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":462,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":145,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":314,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":430,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":444,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":190,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":2,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":392,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":66,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":201,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":279,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":4,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":155,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":407,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":204,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":422,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":409,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":226,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":91,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":164,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":188,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":493,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":173,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":14,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":480,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":311,"com.google.gson.JsonArrayTest.testSet":499,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":123,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":397,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":169,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":457,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":142,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":127,"com.google.gson.functional.MapTest.testGeneralMapField":85,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":323,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":240,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":148,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":254,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":375,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":472,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":365,"com.google.gson.MixedStreamTest.testReadMixedStreamed":391,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":369,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":467,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":49,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":179,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":487,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":55,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":78,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":452,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":437,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":269,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":298,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":208,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":315,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":114,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":159,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":186,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":362,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":396,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":485,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":175,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":214,"com.google.gson.functional.ObjectTest.testNestedDeserialization":335,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":87,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":139,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":11,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":76,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":300,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":63,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":468,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":289,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":121,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":90,"com.google.gson.JavaSerializationTest.testListIsSerializable":454,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":20,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":431,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":489,"com.google.gson.functional.ObjectTest.testNullSerialization":447,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":92,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":297,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":463,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":33,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":273,"com.google.gson.functional.MapTest.testInterfaceTypeMap":84,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":251,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":150,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":278,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":224,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":94,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":74,"com.google.gson.MixedStreamTest.testWriteClosed":441,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":141,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":349,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":400,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":408,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":293,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":399,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":22,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":406,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":420,"com.google.gson.stream.JsonWriterTest.testLongs":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":439,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":281,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":324,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":348,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":160,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":162,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":93,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":189,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":71,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":228,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":116,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":5,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":237,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":21,"com.google.gson.functional.CollectionTest.testQueueDeserialization":490,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":136,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":191,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":83,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":417,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":287,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":421,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":345,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":389,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":491,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":283,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":329,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":130,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":174,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":242,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":341,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":131,"com.google.gson.ObjectTypeAdapterTest.testSerialize":218,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":97,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":445,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":18,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":252,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":151,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":294,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":196,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":178,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":495,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":213,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":282,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":381,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":167,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":288,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":334,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":185,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":309,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":258,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":367,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":19,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":158,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":144,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":352,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":99,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":376,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":28,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":263,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":163,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":222,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":210,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":450,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":414,"com.google.gson.functional.ObjectTest.testNestedSerialization":330,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":398,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":284,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":305,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":113,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":86,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":128,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":103,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":215,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":325,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":459,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":313,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":15,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":436,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":41,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":52,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":433,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":157,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":451,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":70,"com.google.gson.functional.CollectionTest.testSetSerialization":354,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":386,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":109,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":206,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":316,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":65,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":229,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":481,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":239,"com.google.gson.MixedStreamTest.testWriteInvalidState":440,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":132,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":256,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":307,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":58,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":152,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":146,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":498,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":264,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":73,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":443,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":295,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":465,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":180,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":244},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72632938-3f30-11e6-9ac9-f30bad0d22b7","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7263c579-3f30-11e6-9ac9-4fe55940dd6a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"7263ec8a-3f30-11e6-9ac9-171f04e76442","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                    if (element instanceof com.google.gson.JsonObject) {\n                        java.lang.String = name;\n                        return com.google.gson.internal.bind.JsonTreeWriter.this;\n                    } \n                    throw new java.lang.IllegalStateException();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[27,28,29,30,31,32],"tindex":"7264139b-3f30-11e6-9ac9-39af878b1cac","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7264139c-3f30-11e6-9ac9-83e191454a98","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72643aad-3f30-11e6-9ac9-1d33cb8374a0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"726461be-3f30-11e6-9ac9-c37d74c2f440","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"726461bf-3f30-11e6-9ac9-531d09011949","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[10],"tindex":"726488d0-3f30-11e6-9ac9-458151947854","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[33,34,35,36,37,38,39],"tindex":"7264afe1-3f30-11e6-9ac9-dfbc900e72fe","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,9,10,87,88,27,89,90,91,28,92,29,93,94,95,96,30,97,17,18,98,19,20,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,23,137,138,139,140,141,142,143,144,145,146,147,148,149,150,31,151,152,32,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,24,178,179,25,26,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,39,215],"tindex":"7264afe2-3f30-11e6-9ac9-0b9f8230b0db","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[40,41,42,43,44,45,46,47,48,49,0,216,217,218,219,220,221,222,61,223,224,225,226,227,228,229,230,231,232,233,234,235,236,68,237,238,239,240,241,242,243,244,245,246,247,70,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,71,263,264,72,73,74,75,76,77,78,79,6,80,81,265,266,82,267,83,268,269,270,271,272,84,273,85,274,275,276,9,10,87,11,12,13,277,278,14,15,279,280,281,16,282,283,94,95,97,284,285,286,287,17,18,98,19,20,288,99,289,290,291,292,293,294,295,102,296,103,104,297,298,105,106,107,108,109,110,111,112,299,300,301,21,22,113,114,33,302,303,304,34,305,35,306,307,308,36,37,117,309,118,119,310,311,121,312,38,122,313,314,123,315,124,125,126,127,128,129,130,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,23,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,145,146,355,147,356,357,358,148,149,150,359,360,361,362,363,31,151,152,32,153,155,156,157,159,162,164,364,166,167,168,169,170,172,176,24,179,25,26,181,182,183,365,366,367,368,369,370,187,371,189,372,373,190,374,375,376,191,192,377,378,379,380,381,382,383,384,195,385,386,387,388,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,389,390,391,392],"tindex":"7264fe03-3f30-11e6-9ac9-89528c1d41b0","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72652514-3f30-11e6-9ac9-fd2dff07637f","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72652515-3f30-11e6-9ac9-af2a62024ae8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                    if (element instanceof com.google.gson.JsonObject) {\n                        java.lang.String = name;\n                        return com.google.gson.internal.bind.JsonTreeWriter.this;\n                    } \n                    throw new java.lang.IllegalStateException();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[27,28,29,30,31,32],"tindex":"72652516-3f30-11e6-9ac9-31fa8619a3a2","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72654c27-3f30-11e6-9ac9-950ee1077e7b","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72654c28-3f30-11e6-9ac9-c53514b53f61","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[393,394,395],"tindex":"72654c29-3f30-11e6-9ac9-7fde680670cc","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7265733a-3f30-11e6-9ac9-03f9b612b8d6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"72659a4b-3f30-11e6-9ac9-f74dac840da6","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[46,218,50,51,219,54,55,56,57,58,59,220,221,222,224,225,228,229,230,231,232,233,234,235,236,62,64,65,67,68,69,254,255,256,262,396,263,264,5,6,7,8,83,272,84,273,85,274,9,10,397,398,11,12,13,277,399,278,14,15,400,279,280,281,16,282,27,283,89,90,91,28,92,29,93,401,94,95,96,30,97,286,287,17,18,19,20,288,402,289,290,291,403,292,100,293,294,295,101,404,296,405,103,104,107,108,112,299,406,300,301,21,22,114,407,125,126,127,128,130,316,317,318,319,320,321,322,323,408,409,410,324,411,412,413,325,326,327,328,414,329,330,415,416,331,417,332,333,418,419,334,420,421,422,335,134,135,23,137,139,140,141,142,423,342,424,344,346,350,425,353,354,146,355,147,356,426,357,427,360,428,429,430,431,31,151,152,32,153,155,156,157,158,159,160,161,162,164,165,364,169,170,432,171,173,176,177,24,179,25,26,181,182,183,433,434,435,370,436,437,438,439,379,381,382,383,384,385,386,387,388,197,201,202,204,206,389,390,440,441,391,392],"tindex":"7265c15c-3f30-11e6-9ac9-038568fdf171","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7265e86d-3f30-11e6-9ac9-effe45d3e9ef","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[48,442,443,444,445,446,61,72,74,75,77,80,87,98,103,447,448,144,145,150,168,174,365,367,368,374,376,377,196,198,206,207,208,212,213,214,449],"tindex":"72660f7e-3f30-11e6-9ac9-83bd47922f3d","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[40,41,228,229,230,231,232,68,237,238,240,241,242,243,244,247,70,248,252,254,256,258,260,82,85,10,14,285,17,288,289,291,293,294,105,108,109,110,111,113,305,306,310,312,314,315,450,451,316,317,321,325,328,329,338,166,387],"tindex":"72660f7f-3f30-11e6-9ac9-c364dd884e60","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[171,370],"tindex":"72660f80-3f30-11e6-9ac9-7b0d6d9d011f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72663691-3f30-11e6-9ac9-0f347095a9b5","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[168],"tindex":"72663692-3f30-11e6-9ac9-1fdb3177c21f","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[452,453,454,393,394,395,455,0,216,220,221,222,456,457,61,223,458,226,228,229,230,231,232,248,250,459,460,80,461,265,462,463,464,465,267,466,83,268,467,269,468,469,271,272,470,471,84,472,273,85,86,473,274,474,275,276,475,476,477,9,12,399,400,288,402,99,289,290,291,292,100,293,294,295,101,404,102,296,405,103,104,107,112,299,406,301,21,22,114,478,318,479,416,419,421,340,343,344,345,346,480,481,482,483,348,484,485,486,351,425,487,488,489,145,490,361,362,164,169,170,176,24,178,179,25,26,180,184,367,491,379,381,383,384,386,388,198,200,209,214,39,215],"tindex":"72663693-3f30-11e6-9ac9-45e35c4254b2","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[43,492,493,371],"tindex":"72665da4-3f30-11e6-9ac9-6599ebb6e758","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[118,122,123,39],"tindex":"72665da5-3f30-11e6-9ac9-0be19189e1bf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[494,495,496,497],"tindex":"72665da6-3f30-11e6-9ac9-ad2694742156","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"726684b7-3f30-11e6-9ac9-f1f672e66058","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[498],"tindex":"726684b8-3f30-11e6-9ac9-e79f638e6813","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"726684b9-3f30-11e6-9ac9-efd1d4d92f79","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266abca-3f30-11e6-9ac9-97d75bf61bcb","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266abcb-3f30-11e6-9ac9-35318268c614","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266abcc-3f30-11e6-9ac9-1da70f9cf9e7","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[499],"tindex":"7266d2dd-3f30-11e6-9ac9-7f94d304f80a","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266d2de-3f30-11e6-9ac9-65b5251f22de","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266d2df-3f30-11e6-9ac9-8d6278ff1221","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266f9f0-3f30-11e6-9ac9-91cc20e88648","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[46,61,77,78,79,10,87,88,133,213],"tindex":"7266f9f1-3f30-11e6-9ac9-a5f5770239d0","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7266f9f2-3f30-11e6-9ac9-df6b12c36b08","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72672103-3f30-11e6-9ac9-a91fe794c088","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[155,156,157,158,159,160,161,162],"tindex":"72672104-3f30-11e6-9ac9-0df0146fd52f","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"72674815-3f30-11e6-9ac9-4b73569cffba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"72674816-3f30-11e6-9ac9-ed90e70138dd","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467337681434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":47,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
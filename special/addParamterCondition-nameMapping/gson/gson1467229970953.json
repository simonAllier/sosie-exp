{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":0,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":482,"com.google.gson.functional.StringTest.testStringValueDeserialization":480,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":621,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":49,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":401,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":50,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":384,"com.google.gson.MixedStreamTest.testWriteLenient":186,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":498,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":310,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":6,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":157,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":351,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":576,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":449,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":547,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":558,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":83,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":410,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":515,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":539,"com.google.gson.functional.ObjectTest.testSingletonLists":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":302,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":561,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":395,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":483,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":616,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":342,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":326,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":318,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":366,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":610,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":116,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":550,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":496,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":586,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":441,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":509,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":33,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":387,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":606,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":531,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":32,"com.google.gson.functional.EnumTest.testEnumCaseMapping":546,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":194,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":481,"com.google.gson.functional.JsonTreeTest.testToJsonTree":1,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":386,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":321,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":279,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":295,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":396,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":518,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":164,"com.google.gson.functional.ObjectTest.testNullDeserialization":377,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":96,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":493,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":360,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":461,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":613,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":402,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":367,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":529,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":181,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":374,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":612,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":466,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":571,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":317,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":446,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":278,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":472,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":249,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":378,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":300,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":423,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":207,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":438,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":499,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":626,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":292,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":121,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":101,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":45,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":447,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":503,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":439,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":111,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":243,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":178,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":357,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":592,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":41,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":55,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":406,"com.google.gson.metrics.PerformanceTest.testDummy":190,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":562,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":236,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":537,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":567,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":333,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":47,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":93,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":308,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":294,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":590,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":628,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":99,"com.google.gson.functional.CollectionTest.testSetDeserialization":170,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":84,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":110,"com.google.gson.functional.EnumTest.testEnumSet":147,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":430,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":102,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":284,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":368,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":141,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":443,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":566,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":453,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":526,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":454,"com.google.gson.functional.MapTest.testHashMapDeserialization":204,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":399,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":306,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":215,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":585,"com.google.gson.MixedStreamTest.testReadNulls":600,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":56,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":212,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":617,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":94,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":117,"com.google.gson.functional.MapTest.testSortedMap":35,"com.google.gson.functional.MapTest.testMapSerialization":31,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":214,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":197,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":436,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":254,"com.google.gson.functional.MapTest.testSerializeMaps":206,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":266,"com.google.gson.functional.MapTest.testComplexKeysSerialization":42,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":223,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":46,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":98,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":545,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":137,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":65,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":327,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":543,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":511,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":625,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":51,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":376,"com.google.gson.functional.MapTest.testStringKeyDeserialization":44,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":258,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":335,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":468,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":48,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":400,"com.google.gson.functional.PrettyPrintingTest.testMap":510,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":581,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":159,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":275,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":328,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":260,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":609,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":486,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":490,"com.google.gson.functional.MapTest.testMapSerializationEmpty":43,"com.google.gson.functional.CollectionTest.testQueueSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":431,"com.google.gson.functional.MapTest.testMapOfMapSerialization":209,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":422,"com.google.gson.JavaSerializationTest.testMapIsSerializable":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":297,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":167,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":79,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":343,"com.google.gson.functional.FieldNamingTest.testIdentity":267,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":484,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":103,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":504,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":379,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":8,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":54,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":233,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":349,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":389,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":607,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":14,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":485,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":346,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":311,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":285,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":320,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":19,"com.google.gson.functional.MapTest.testMapSubclassSerialization":205,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":464,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":182,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":542,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":226,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":176,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":420,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":548,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":274,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":479,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":500,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":325,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":140,"com.google.gson.functional.EnumTest.testEnumSubclass":150,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":442,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":364,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":611,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":388,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":179,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":448,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":104,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":63,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":391,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":348,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":426,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":347,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":2,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":191,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":251,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":109,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":432,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":53,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":314,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":350,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":203,"com.google.gson.MixedStreamTest.testWriteNulls":598,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":73,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":122,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":97,"com.google.gson.CommentsTest.testParseComments":188,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":536,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":339,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":352,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":519,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":130,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":256,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":445,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":196,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":210,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":488,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":588,"com.google.gson.MixedStreamTest.testReadInvalidState":595,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":316,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":463,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":198,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":630,"com.google.gson.JsonParserTest.testParseMixedArray":627,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":619,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":398,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":623,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":262,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":127,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":614,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":415,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":298,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":458,"com.google.gson.functional.MapTest.testMapDeserialization":26,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":293,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":132,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":202,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":514,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":25,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":72,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":136,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":516,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":66,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":68,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":86,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":112,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":365,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":58,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":583,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":280,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":540,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":231,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":345,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":34,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":131,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":385,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":105,"com.google.gson.functional.PrimitiveTest.testShortSerialization":462,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":521,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":451,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":533,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":421,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":88,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":397,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":263,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":149,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":573,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":591,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":21,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":414,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":470,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":578,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":309,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":525,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":603,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":477,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":471,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":228,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":71,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":269,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":549,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":456,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":336,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":427,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":382,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":356,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":60,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":225,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":281,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":579,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":337,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":299,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":520,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":404,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":287,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":304,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":3,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":160,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":392,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":457,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":429,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":474,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":154,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":135,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":219,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":199,"com.google.gson.functional.MapTest.testGeneralMapField":39,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":354,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":476,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":580,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":91,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":37,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":270,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":570,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":452,"com.google.gson.MixedStreamTest.testReadMixedStreamed":602,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":282,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":416,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":119,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":577,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":608,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":434,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":532,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":15,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":90,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":29,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":535,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":340,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":475,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":153,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":553,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":296,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":123,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":505,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":268,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":106,"com.google.gson.functional.ObjectTest.testNestedDeserialization":383,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":372,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":587,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":216,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":234,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":530,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":473,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":129,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":30,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":227,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":487,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":139,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":460,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":59,"com.google.gson.JavaSerializationTest.testListIsSerializable":17,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":10,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":502,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":173,"com.google.gson.functional.ObjectTest.testNullSerialization":361,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":62,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":534,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":22,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":38,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":390,"com.google.gson.functional.MapTest.testInterfaceTypeMap":36,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":582,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":393,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":544,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":584,"com.google.gson.MixedStreamTest.testReadClosed":596,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":271,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":528,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":408,"com.google.gson.MixedStreamTest.testWriteClosed":601,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":218,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":575,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":323,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":355,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":142,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":69,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":128,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":92,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":238,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":358,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":163,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":554,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":437,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":556,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":64,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":168,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":305,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":506,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":75,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":478,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":413,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":277,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":100,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":11,"com.google.gson.functional.CollectionTest.testQueueDeserialization":175,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":419,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":435,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":492,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":315,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":555,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":27,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":289,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":114,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":572,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":158,"com.google.gson.functional.MapTest.testRawMapSerialization":211,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":594,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":303,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":615,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":57,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":370,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":18,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":523,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":184,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":244,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":324,"com.google.gson.functional.PrimitiveTest.testByteSerialization":459,"com.google.gson.ObjectTypeAdapterTest.testSerialize":189,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":221,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":568,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":403,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":7,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":253,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":143,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":489,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":604,"com.google.gson.functional.MapTest.testMapWithQuotes":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":276,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":411,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":332,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":118,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":344,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":273,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":82,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":517,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":138,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":380,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":622,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":286,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":363,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":444,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":108,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":87,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":288,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":455,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":330,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":169,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":247,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":13,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":313,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":61,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":507,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":557,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":183,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":329,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":394,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":541,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":341,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":369,"com.google.gson.functional.ObjectTest.testNestedSerialization":371,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":155,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":407,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":495,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":569,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":563,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":40,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":200,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":124,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":187,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":593,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":126,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":362,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":4,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":89,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":193,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":195,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":85,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":373,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":551,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":494,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":250,"com.google.gson.functional.CollectionTest.testSetSerialization":172,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":180,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":338,"com.google.gson.functional.StringTest.testStringValueSerialization":497,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":512,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":220,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":52,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":76,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":161,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":241,"com.google.gson.MixedStreamTest.testWriteInvalidState":599,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":359,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":412,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":257,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":418,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":283,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":265,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":95,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":527,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":307,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":222,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":624,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":24,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":620,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":246,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":564},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"0fbd57c9-3e33-11e6-8ab8-59f053243be3","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,2,69,3,70,71,72,5,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,6,7,9,10,122,123,124,125,126,127,128,129,130,11,12,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],"tindex":"0fbdccfa-3e33-11e6-8ab8-4f12e953943a","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"0fbe1b1b-3e33-11e6-8ab8-45459c115fff","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[190,191,192,193,194,195,196,197,198,199,200,201,18,19,202,203,204,20,205,206,21,22,23,24,25,26,27,207,28,29,30,208,209,31,32,33,34,210,35,36,37,38,39,40,211,41,42,43,44,45,46,47,48,49,212,213,0,214,215,216,217,218,219,220,221,222,223,224,225,226,50,227,51,52,228,53,54,55,56,57,58,59,60,61,62,63,64,229,230,231,65,66,232,68,233,1,234,2,235,236,69,237,3,4,70,71,72,238,5,239,240,241,242,243,244,245,246,247,248,249,250,73,251,74,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,80,81,82,83,84,268,269,270,271,272,85,86,273,274,275,276,277,87,278,279,280,281,282,283,284,88,285,286,287,288,289,290,89,291,292,293,294,295,296,297,90,298,299,300,301,302,303,304,305,306,307,308,309,310,91,311,312,313,314,315,316,92,317,318,319,320,321,322,323,93,324,325,326,327,328,329,94,330,331,95,96,97,98,99,100,332,101,102,333,103,334,104,335,336,337,338,339,340,105,341,342,343,344,106,345,346,347,348,349,107,350,351,352,353,354,355,356,357,358,359,108,109,110,360,361,362,363,364,365,366,367,368,369,370,371,372,373,111,374,375,376,377,378,379,112,113,380,381,114,382,383,384,385,386,387,388,389,390,391,392,393,394,395,115,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,116,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,117,118,119,120,121,6,7,8,9,10,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,122,123,503,124,125,126,504,505,506,507,508,127,128,129,130,11,12,509,510,131,511,512,513,132,133,134,514,515,516,517,518,135,136,519,520,521,522,523,524,137,525,526,527,528,529,530,531,532,533,534,535,138,536,13,139,140,141,537,538,539,142,143,144,540,145,541,542,146,147,148,149,150,151,543,544,545,152,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,153,154,155,564,156,565,566,567,568,569,570,571,572,157,158,573,159,160,161,574,162,163,575,164,165,166,167,168,169,170,576,577,171,172,173,174,578,175,579,580,581,582,176,583,584,177,178,585,586,587,588,179,14,589,180,590,181,591,182,183,592,593,594,595,596,597,598,599,186,600,187,601,602,603,604,605,606,607,608,188,609,610,611,612,613],"tindex":"0fbe1b1c-3e33-11e6-8ab8-3d9f033af0ac","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[75,76,77,78,79,110,113,384,177,178,189],"tindex":"0fbe422d-3e33-11e6-8ab8-6baa0407d1a3","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[36,39,49,0,232,68,1,234,2,235,3,4,5,121,6,7,9,10,11,13,586,184,614],"tindex":"0fbe693e-3e33-11e6-8ab8-8d964dfa4130","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[286,288,289,315,113],"tindex":"0fbe693f-3e33-11e6-8ab8-d7eea50d47e4","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[586],"tindex":"0fbe9050-3e33-11e6-8ab8-7ba02c5cc5e6","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[206,31,39,211,48,212,0,214,220,51,54,62,231,67,232,68,233,1,69,72,240,246,73,253,255,261,263,264,265,266,267,80,81,82,83,84,326,331,336,338,345,348,352,110,362,368,371,378,112,381,454,461,463,117,120,121,124,504,505,129,130,12,509,510,131,511,512,513,132,133,138,13,139,140,141,537,538,142,143,144,145,146,549,552,553,556,561,153,568,571,572,615,157,159,163,165,576,172,173,182,183,592,594,597,189],"tindex":"0fbe9051-3e33-11e6-8ab8-c37ec2f71edf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[206,242,158,189,616],"tindex":"0fbe9052-3e33-11e6-8ab8-73c611066a5c","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[390,406,415,422,425,464,186],"tindex":"0fbeb763-3e33-11e6-8ab8-5faac805615e","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"0fbeb764-3e33-11e6-8ab8-6715544b0b5f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"0fbeb765-3e33-11e6-8ab8-45147c2a3e75","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[617,618,619,270,87,279,313],"tindex":"0fbede76-3e33-11e6-8ab8-bf848fb23387","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[206,509,510,131,511,512,513,132,133,586,620,621,597],"tindex":"0fbede77-3e33-11e6-8ab8-91463ca1cee1","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"0fbede78-3e33-11e6-8ab8-574f69aed1e2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[622,623,624,625],"tindex":"0fbf0589-3e33-11e6-8ab8-b39b75830ceb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[2,3,6,502,626,586,627,628,629],"tindex":"0fbf058a-3e33-11e6-8ab8-f7349c6d423b","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[13,14],"tindex":"0fbf058b-3e33-11e6-8ab8-e9a39270c0f0","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[549,550,551,552,553,554,555,556],"tindex":"0fbf058c-3e33-11e6-8ab8-f1d6d9c46b61","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[429],"tindex":"0fbf058d-3e33-11e6-8ab8-91f8a3b071f6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[68,69,253,390,406,464,538],"tindex":"0fbf2c9e-3e33-11e6-8ab8-d965b0b4aa6c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"0fbf2c9f-3e33-11e6-8ab8-8b5a6f186d8e","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[630,189,616],"tindex":"0fbf2ca0-3e33-11e6-8ab8-7bd67a17395c","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[67,96,97,98,99,100,579,580,582,583,584],"tindex":"0fbf2ca1-3e33-11e6-8ab8-3fad2b1e38da","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"0fbf2ca2-3e33-11e6-8ab8-fdad0ee3ad05","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"0fbf53b3-3e33-11e6-8ab8-f1f8bb59adfc","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"0fbf53b4-3e33-11e6-8ab8-07002ae82c35","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"0fbf53b5-3e33-11e6-8ab8-cd5fd0c090cd","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0fbf7ac6-3e33-11e6-8ab8-e39b1926662a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"0fbf7ac7-3e33-11e6-8ab8-1b92f358f1bd","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"0fbf7ac8-3e33-11e6-8ab8-eb345efbbcde","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"0fbf7ac9-3e33-11e6-8ab8-b96f70838ae3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"0fbfa1da-3e33-11e6-8ab8-07e678199245","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0fbfa1db-3e33-11e6-8ab8-d59b51489ea8","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (property == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            add(property, createJsonElement(value));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0fbfa1dc-3e33-11e6-8ab8-bda5204d13e6","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (property == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            add(property, createJsonElement(value));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0fbfc8ed-3e33-11e6-8ab8-a11a839556c4","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (property == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            add(property, createJsonElement(value));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"0fbfc8ee-3e33-11e6-8ab8-6d2c138abaed","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"0fbfc8ef-3e33-11e6-8ab8-797f6869ab88","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"0fbfc8f0-3e33-11e6-8ab8-0f8eb5b83bd0","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"0fbff001-3e33-11e6-8ab8-d5457e3b2223","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0fbff002-3e33-11e6-8ab8-abb9e70569f5","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"0fbff003-3e33-11e6-8ab8-bbd93be1f966","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"0fbff004-3e33-11e6-8ab8-cd5d39866175","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"0fc01715-3e33-11e6-8ab8-ef115a542c32","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"0fc01716-3e33-11e6-8ab8-7197e9194f3c","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"0fc01717-3e33-11e6-8ab8-95d82789ac08","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0fc01718-3e33-11e6-8ab8-1dee33c063a6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"0fc01719-3e33-11e6-8ab8-8b4287c82fc0","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"0fc03e2a-3e33-11e6-8ab8-cbb4202d529d","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"0fc03e2b-3e33-11e6-8ab8-3d02c9ebeac5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"0fc03e2c-3e33-11e6-8ab8-0b48c847a3f9","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142615/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":52,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":25,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":403,"com.google.gson.functional.StringTest.testStringValueDeserialization":625,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":170,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":545,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":575,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":4,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":79,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":84,"com.google.gson.MixedStreamTest.testWriteLenient":268,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":343,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":211,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":123,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":61,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":440,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":607,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":431,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":434,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":188,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":582,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":97,"com.google.gson.functional.ObjectTest.testSingletonLists":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":341,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":435,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":404,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":495,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":48,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":554,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":69,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":653,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":208,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":104,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":633,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":126,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":413,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":603,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":154,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":446,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":564,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":281,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":153,"com.google.gson.functional.EnumTest.testEnumCaseMapping":639,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":402,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":505,"com.google.gson.functional.JsonTreeTest.testToJsonTree":478,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":563,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":479,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":181,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":453,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":18,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":542,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":571,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":419,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":250,"com.google.gson.functional.ObjectTest.testNullDeserialization":561,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":50,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":631,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":396,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":468,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":576,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":280,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":426,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":265,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":72,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":467,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":350,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":116,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":615,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":553,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":19,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":389,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":536,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":619,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":315,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":340,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":590,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":85,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":510,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":600,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":121,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":541,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":83,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":470,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":55,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":166,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":390,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":634,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":601,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":204,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":311,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":65,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":131,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":263,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":162,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":171,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":376,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":489,"com.google.gson.metrics.PerformanceTest.testDummy":503,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":110,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":520,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":429,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":642,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":493,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":168,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":342,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":492,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":337,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":444,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":1,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":53,"com.google.gson.functional.CollectionTest.testSetDeserialization":125,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":189,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":203,"com.google.gson.functional.EnumTest.testEnumSet":236,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":515,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":593,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":12,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":197,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":500,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":539,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":367,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":233,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":286,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":604,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":114,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":609,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":423,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":558,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":393,"com.google.gson.functional.MapTest.testHashMapDeserialization":508,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":573,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":549,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":442,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":513,"com.google.gson.MixedStreamTest.testReadNulls":650,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":172,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":300,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":196,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":209,"com.google.gson.functional.MapTest.testSortedMap":156,"com.google.gson.functional.MapTest.testMapSerialization":152,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":512,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":598,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":528,"com.google.gson.functional.MapTest.testSerializeMaps":295,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":324,"com.google.gson.functional.MapTest.testComplexKeysSerialization":163,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":514,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":469,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":320,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":52,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":103,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":35,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":455,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":638,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":415,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":5,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":560,"com.google.gson.functional.MapTest.testStringKeyDeserialization":165,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":502,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":530,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":353,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":399,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":169,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":579,"com.google.gson.functional.PrettyPrintingTest.testMap":414,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":441,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":574,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":245,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":328,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":556,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":20,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":531,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":652,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":408,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":626,"com.google.gson.functional.MapTest.testMapSerializationEmpty":164,"com.google.gson.functional.CollectionTest.testQueueSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":334,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":594,"com.google.gson.functional.MapTest.testMapOfMapSerialization":297,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":382,"com.google.gson.JavaSerializationTest.testMapIsSerializable":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":543,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":253,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":43,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":457,"com.google.gson.functional.FieldNamingTest.testIdentity":325,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":405,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":198,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":89,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":74,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":6,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":361,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":460,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":477,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":565,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":447,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":277,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":406,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":57,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":552,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":540,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":335,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":140,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":398,"com.google.gson.functional.MapTest.testMapSubclassSerialization":509,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":102,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":129,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":516,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":261,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":432,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":588,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":648,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":534,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":624,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":47,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":96,"com.google.gson.functional.EnumTest.testEnumSubclass":239,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":388,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":68,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":654,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":373,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":264,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":32,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":566,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":591,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":58,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":178,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":292,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":526,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":202,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":595,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":30,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":346,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":60,"com.google.gson.MixedStreamTest.testWriteNulls":466,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":507,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":182,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":215,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":51,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":95,"com.google.gson.CommentsTest.testParseComments":270,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":483,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":356,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":362,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":222,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":529,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":605,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":491,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":298,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":407,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":285,"com.google.gson.MixedStreamTest.testReadInvalidState":646,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":348,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":22,"com.google.gson.JsonParserTest.testParseMixedArray":463,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":375,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":486,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":532,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":501,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":219,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":379,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":41,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":544,"com.google.gson.functional.MapTest.testMapDeserialization":147,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":336,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":226,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":449,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":90,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":465,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":146,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":180,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":230,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":36,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":7,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":45,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":205,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":366,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":173,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":290,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":329,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":101,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":306,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":359,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":155,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":225,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":349,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":200,"com.google.gson.functional.PrimitiveTest.testShortSerialization":613,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":421,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":608,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":283,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":589,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":191,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":572,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":321,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":238,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":124,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":128,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":142,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":585,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":400,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":462,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":87,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":474,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":551,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":133,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":472,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":622,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":618,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":15,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":304,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":39,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":206,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":326,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":475,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":80,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":88,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":354,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":592,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":77,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":64,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":241,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":175,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":303,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":494,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":339,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":420,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":578,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":331,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":547,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":179,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":246,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":567,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":611,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":386,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":401,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":242,"com.google.gson.JsonPrimitiveTest.testEquals":482,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":229,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":237,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":28,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":23,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":63,"com.google.gson.functional.MapTest.testGeneralMapField":160,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":621,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":288,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":317,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":193,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":158,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":207,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":450,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":392,"com.google.gson.MixedStreamTest.testReadMixedStreamed":132,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":149,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":380,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":538,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":81,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":448,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":644,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":109,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":596,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":282,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":137,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":192,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":150,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":428,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":141,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":11,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":357,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":111,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":586,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":338,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":490,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":216,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":119,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":481,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":411,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":533,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":636,"com.google.gson.functional.ObjectTest.testNestedDeserialization":78,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":201,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":284,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":370,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":26,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":427,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":620,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":221,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":151,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":517,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":627,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":232,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":395,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":174,"com.google.gson.JavaSerializationTest.testListIsSerializable":139,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":214,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":276,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":258,"com.google.gson.functional.ObjectTest.testNullSerialization":459,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":177,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":637,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":143,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":159,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":374,"com.google.gson.functional.MapTest.testInterfaceTypeMap":157,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":289,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":521,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":14,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":430,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":34,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":291,"com.google.gson.MixedStreamTest.testReadClosed":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":327,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":425,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":580,"com.google.gson.MixedStreamTest.testWriteClosed":651,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":27,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":439,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":38,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":555,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":98,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":220,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":194,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":307,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":364,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":249,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":106,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":118,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":599,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":33,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":548,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":496,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":40,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":623,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":378,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":476,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":535,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":54,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":308,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":223,"com.google.gson.functional.CollectionTest.testQueueDeserialization":260,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":487,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":381,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":597,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":630,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":511,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":347,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":73,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":333,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":76,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":117,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":244,"com.google.gson.functional.MapTest.testRawMapSerialization":299,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":645,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":546,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":16,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":31,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":368,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":24,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":273,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":266,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":312,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":351,"com.google.gson.functional.PrimitiveTest.testByteSerialization":612,"com.google.gson.ObjectTypeAdapterTest.testSerialize":271,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":274,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":115,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":577,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":655,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":464,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":212,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":9,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":322,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":99,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":499,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":628,"com.google.gson.functional.MapTest.testMapWithQuotes":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":452,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":583,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":352,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":2,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":210,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":279,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":37,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":451,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":187,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":497,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":94,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":227,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":330,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":559,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":66,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":190,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":332,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":433,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":610,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":456,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":255,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":524,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":345,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":461,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":176,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":412,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":488,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":640,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":130,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":557,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":498,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":569,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":358,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":70,"com.google.gson.JsonObjectTest.testAddingStringProperties":278,"com.google.gson.functional.ObjectTest.testNestedSerialization":369,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":243,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":377,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":437,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":632,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":436,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":161,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":294,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":217,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":269,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":445,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":218,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":365,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":617,"com.google.gson.JsonPrimitiveTest.testBoolean":480,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":522,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":46,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":504,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":506,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":44,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":71,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":105,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":17,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":409,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":316,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":127,"com.google.gson.functional.CollectionTest.testSetSerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":355,"com.google.gson.functional.StringTest.testStringValueSerialization":410,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":416,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":302,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":29,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":184,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":247,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":523,"com.google.gson.MixedStreamTest.testWriteInvalidState":649,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":458,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":584,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":318,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":587,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":454,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":323,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":49,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":635,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":120,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":424,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":471,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":550,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":275,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":145,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":314,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":641},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[0,1,2,3],"tindex":"253ae389-3e79-11e6-82d7-b33f3079b8c6","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"tindex":"253b31aa-3e79-11e6-82d7-3d96fb0c7fcd","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,14,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133],"tindex":"253b58bb-3e79-11e6-82d7-a7ad4d460812","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[134,104,105,135,106,136],"tindex":"253b58bc-3e79-11e6-82d7-6340ef944fa3","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[137,138,139,24,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,4,5,29,30,6,171,172,31,173,174,175,176,177,32,33,35,36,37,7,178,8,179,38,39,180,181,182,183,40,184,41,42,43,185,186,187,188,189,44,45,190,191,46,192,193,194,195,196,49,50,51,52,53,54,55,197,198,199,200,201,59,66,202,203,204,205,206,76,207,208,209,210,81,82,83,211,212,213,214,215,216,217,88,218,219,220,221,222,223,224,225,226,227,228,229,230,231,94,232,96,233,98,99,100,234,235,236,237,238,239,240,241,111,242,243,112,123,244,245,246,247,248,249,250,251,252,253,254,255,125,256,257,258,259,260,261,262,263,264,127,265,129,130,266,267,268,269,270,271],"tindex":"253b7fcd-3e79-11e6-82d7-a36cf3ed8377","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[191,272,273],"tindex":"253ba6de-3e79-11e6-82d7-652973f13ec7","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[274,275,199,211,212,213,214,84,85,86,87,276,277,278],"tindex":"253ba6df-3e79-11e6-82d7-ffb741cc129f","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"253bcdf0-3e79-11e6-82d7-af9a0782f43e","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[279,280,281,282,283,238,126,284,285,286],"tindex":"253bf501-3e79-11e6-82d7-5dc09f86043e","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[37,50,51,52,53,54,287,288,289,290,291],"tindex":"253bf502-3e79-11e6-82d7-dd742f47165e","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"253c4323-3e79-11e6-82d7-5f11b2f481c6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"253c6a34-3e79-11e6-82d7-ad50e362a4ff","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[191],"tindex":"253c6a35-3e79-11e6-82d7-217fc9a72752","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"253c6a36-3e79-11e6-82d7-7176f01452e3","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"253c6a37-3e79-11e6-82d7-b320d11d37a7","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[292,293,22,294,295,148,296,297,298,157,159,160,299,170,300,301,302,303,4,5,304,6,171,172,31,173,174,175,176,177,305,306,37,7,8,180,307,308,309,310,311,312,313,314,315,316,9,317,318,319,320,321,322,323,324,325,40,184,41,42,43,185,186,187,188,189,326,327,328,329,330,331,332,333,334,335,336,337,338,192,339,340,341,342,343,193,344,345,346,347,348,194,349,350,351,48,49,50,51,52,54,352,199,353,354,355,356,357,358,279,359,360,361,59,362,363,364,203,365,366,280,367,368,369,370,204,371,205,206,372,373,374,207,375,376,377,378,379,380,381,382,383,384,385,386,387,388,10,389,390,391,392,393,394,395,396,397,398,399,400,401,11,402,403,404,405,406,407,408,409,410,89,411,412,219,220,221,222,413,414,225,415,416,417,226,228,418,419,229,230,420,421,422,231,423,424,425,426,427,281,282,283,428,429,236,237,238,239,430,241,431,432,134,433,135,136,434,435,436,111,242,243,115,437,438,116,117,123,244,245,249,439,251,254,440,257,287,288,441,289,261,290,291,262,263,442,264,277,443,444,265,128,129,131,445,446,447,448],"tindex":"253c9148-3e79-11e6-82d7-d349944ed96a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[449,170,274,275,7,450,451,452,190,453,454,343,345,349,272,455,456,352,197,199,353,354,355,356,357,358,457,279,201,458,459,209,82,83,211,212,460,213,214,217,421,273,423,425,426,281,461,238,462,289,126,284,463,464,465,466,447,467,468,469,470,471,472,473,474,475],"tindex":"253c9149-3e79-11e6-82d7-f392aea36068","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[170,274,275,7,199,353,354,358,458,209,82,83,211,212,213,214,421,461,126,463,467,468,469,472,473,475],"tindex":"253c914a-3e79-11e6-82d7-a77aeb4ba3f0","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[476,7,477,478,452,479,48,131,480,481,482,483,484,468,485],"tindex":"253cb85b-3e79-11e6-82d7-673233c48c16","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[7,8,9,374,376,398,12],"tindex":"253cb85c-3e79-11e6-82d7-65a7324d5acb","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[471,472],"tindex":"253cb85d-3e79-11e6-82d7-37d50cf1a3c5","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"253cb85e-3e79-11e6-82d7-95683124e724","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[155,161,4,6,191,420,94,233,99,100],"tindex":"253cdf6f-3e79-11e6-82d7-ab83630b2bd4","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"253cdf70-3e79-11e6-82d7-a7e312bab98f","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"253cdf71-3e79-11e6-82d7-c9ea54cea498","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"253d54a2-3e79-11e6-82d7-ab9648f5c0ef","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"253d54a3-3e79-11e6-82d7-69739fcde6f2","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[450,190,453,343,345,349],"tindex":"253d7bb4-3e79-11e6-82d7-374b1fed49e2","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"253d7bb5-3e79-11e6-82d7-1b2f1031569d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"253d7bb6-3e79-11e6-82d7-9766d367c101","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"253da2c7-3e79-11e6-82d7-430b5e600bf9","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4,5,6,379,382,384,10,11,12,13,14,15,16,17,18,19,20,268],"tindex":"253da2c8-3e79-11e6-82d7-15d35f8f92ef","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[486,487,488,489,490],"tindex":"253da2c9-3e79-11e6-82d7-fb69f22a7c9e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[386],"tindex":"253dc9da-3e79-11e6-82d7-45a808df06cc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"253dc9db-3e79-11e6-82d7-292585099904","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"253dc9dc-3e79-11e6-82d7-d3876ca33ee8","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"253df0ed-3e79-11e6-82d7-5ff31f9086ae","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[126],"tindex":"253df0ee-3e79-11e6-82d7-d944c61a8c97","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"253e17ff-3e79-11e6-82d7-1b31c9b748d2","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"253e1800-3e79-11e6-82d7-27a933f2bf58","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[491,21,22,23,294,492,24,449,170,349,352,55,197,493,198,56,199,353,354,494,355,356,357,200,358,495,457,201,211,212,460,213,214,217,88,496,497,419,421,423,424,425,426,281,461,498,462,288,289,277,499,286,446,447,448],"tindex":"253e1801-3e79-11e6-82d7-f399c56ac404","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"253e1802-3e79-11e6-82d7-7dde6700a0e8","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"253e3f13-3e79-11e6-82d7-c1801b09dc4a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"253e3f14-3e79-11e6-82d7-4538a0b34521","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[500,501,502],"tindex":"253e3f15-3e79-11e6-82d7-e749f3811e82","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"253e6626-3e79-11e6-82d7-5772c20f7124","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[503,292,293,504,505,506,491,21,22,23,294,492,24,140,449,507,508,141,509,295,142,143,144,145,146,147,148,510,149,150,151,296,297,152,153,154,155,298,156,157,158,159,160,161,299,162,163,164,165,166,167,168,169,170,300,511,25,512,513,26,301,27,28,302,274,275,514,515,303,516,4,517,5,29,304,30,6,171,172,31,173,174,175,176,177,32,33,305,34,306,35,36,476,7,477,478,518,178,519,520,8,521,179,522,38,39,180,307,181,308,309,523,310,311,312,313,314,524,525,315,316,182,526,183,527,9,528,317,529,318,530,319,531,320,532,321,322,323,324,325,185,186,187,188,189,533,326,450,327,0,44,45,451,534,328,452,535,190,536,453,329,537,538,454,539,191,540,330,331,332,333,334,46,335,541,336,337,542,338,543,192,544,339,340,545,341,546,547,548,549,550,342,551,343,193,552,344,345,346,347,348,194,553,554,349,272,479,350,555,195,351,47,48,455,556,557,196,456,558,49,50,51,52,53,54,352,55,197,493,198,56,199,353,354,494,355,356,357,200,358,495,457,279,201,359,57,58,360,361,59,60,61,362,62,63,363,64,65,364,458,66,202,203,67,459,365,559,68,366,69,280,367,70,368,369,370,71,204,72,73,560,561,371,74,205,206,75,372,76,77,78,79,562,563,564,373,565,374,566,567,568,569,570,207,571,572,375,573,574,575,576,577,578,579,376,377,580,581,582,583,584,378,585,379,380,586,587,381,588,589,382,590,383,384,591,592,385,386,593,594,595,387,596,597,598,599,600,601,602,603,388,604,10,605,389,390,606,607,391,608,208,392,609,393,610,80,611,394,612,395,396,613,397,398,614,615,616,399,617,400,618,619,620,401,11,621,622,623,624,209,210,81,82,83,211,212,460,213,214,625,402,403,404,405,406,626,627,407,628,408,629,630,631,409,632,633,410,84,85,86,87,276,215,216,634,217,88,218,89,411,496,412,635,219,220,221,222,223,224,413,414,225,415,416,417,226,227,228,90,91,418,497,419,229,230,92,420,421,422,273,636,231,93,423,424,425,426,427,281,282,283,637,428,94,95,461,232,96,233,429,12,97,98,99,100,101,234,498,102,235,236,237,238,239,240,638,430,103,241,639,431,432,134,104,105,433,135,106,107,136,640,434,108,109,435,110,436,111,242,243,641,112,113,114,642,115,437,438,116,117,123,244,124,245,246,247,643,248,249,439,250,251,252,253,254,255,125,440,644,256,257,258,259,462,260,287,288,441,289,261,290,291,262,263,442,126,284,285,264,277,443,127,444,265,128,129,130,131,445,645,646,647,648,466,649,268,650,269,651,132,133,499,286,446,447,448,270,652,653,654,467,468],"tindex":"253e6627-3e79-11e6-82d7-8f98a7ed784c","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[500,501,502,655],"tindex":"253e8d38-3e79-11e6-82d7-07cbd8cd0789","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"253e8d39-3e79-11e6-82d7-d74d9dfc5f9f","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"253e8d3a-3e79-11e6-82d7-af501c72d2d9","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"253eb44b-3e79-11e6-82d7-7d04078256c0","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228557/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":51,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":334,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":226,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":47,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":76,"com.google.gson.MixedStreamTest.testWriteLenient":369,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":42,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":53,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":240,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":250,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":104,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":351,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":180,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":412,"com.google.gson.functional.ObjectTest.testSingletonLists":123,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":164,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":227,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":142,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":376,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":439,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":444,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":26,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":182,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":358,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":31,"com.google.gson.functional.EnumTest.testEnumCaseMapping":350,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":225,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":372,"com.google.gson.functional.JsonTreeTest.testToJsonTree":176,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":419,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":91,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":413,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":102,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":437,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":57,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":247,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":117,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":407,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":72,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":322,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":131,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":30,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":295,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":71,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":392,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":223,"com.google.gson.JsonParserTest.testParseString":406,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":314,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":438,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":418,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":137,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":163,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":395,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":390,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":215,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":52,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":65,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":208,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":315,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":136,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":279,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":274,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":374,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":434,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":80,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":300,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":385,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":84,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":96,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":166,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":158,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":294,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":181,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":127,"com.google.gson.functional.EnumTest.testEnumSet":345,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":97,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":14,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":10,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":192,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":132,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":95,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":357,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":28,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":145,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":318,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":275,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":212,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":332,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":50,"com.google.gson.functional.MapTest.testMapSerialization":197,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":335,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":409,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":399,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":433,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":425,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":8,"com.google.gson.functional.MapTest.testSerializeMaps":191,"com.google.gson.functional.MapTest.testComplexKeysSerialization":206,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":64,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":393,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":427,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":119,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":344,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":5,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":143,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":185,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":77,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":443,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":16,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":326,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":209,"com.google.gson.functional.PrettyPrintingTest.testMap":183,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":261,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":336,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":375,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":155,"com.google.gson.functional.MapTest.testMapSerializationEmpty":207,"com.google.gson.functional.CollectionTest.testQueueSerialization":244,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":414,"com.google.gson.functional.MapTest.testMapOfMapSerialization":196,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":306,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":238,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":22,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":379,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":228,"com.google.gson.functional.FieldNamingTest.testIdentity":256,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":106,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":79,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":122,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":175,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":331,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":60,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":229,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":292,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":309,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":172,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":237,"com.google.gson.functional.MapTest.testMapSubclassSerialization":190,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":325,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":262,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":352,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":366,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":396,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":94,"com.google.gson.functional.EnumTest.testEnumSubclass":347,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":312,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":296,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":291,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":15,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":431,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":3,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":211,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":422,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":82,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":360,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":169,"com.google.gson.MixedStreamTest.testWriteNulls":367,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":285,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":281,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":118,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":19,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":124,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":268,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":398,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":199,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":230,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":177,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":170,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":324,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":257,"com.google.gson.JsonParserTest.testParseMixedArray":63,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":299,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":382,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":423,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":442,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":387,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":303,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":236,"com.google.gson.JsonArrayTest.testRemove":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":161,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":157,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":188,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":46,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":62,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":89,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":340,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":338,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":45,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":130,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":0,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":263,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":149,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":210,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":216,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":184,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":198,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":44,"com.google.gson.functional.PrimitiveTest.testShortSerialization":323,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":58,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":113,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":378,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":150,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":255,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":59,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":242,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":217,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":48,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":327,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":73,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":69,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":330,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":435,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":78,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":146,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":353,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":17,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":349,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":1,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":254,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":248,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":162,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":341,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":152,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":342,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":87,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":310,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":328,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":271,"com.google.gson.JsonPrimitiveTest.testEquals":432,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":339,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":346,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":403,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":400,"com.google.gson.functional.MapTest.testGeneralMapField":203,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":260,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":287,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":167,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":35,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":222,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":298,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":317,"com.google.gson.JsonObjectTest.testDeepCopy":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":304,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":251,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":359,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":160,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":20,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":329,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":115,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":355,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":159,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":386,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":9,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":24,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":27,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":135,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":81,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":111,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":267,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":93,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":321,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":56,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":397,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":253,"com.google.gson.functional.ObjectTest.testNullSerialization":128,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":214,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":202,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":297,"com.google.gson.functional.MapTest.testInterfaceTypeMap":200,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":49,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":86,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":103,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":348,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":147,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":29,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":429,"com.google.gson.MixedStreamTest.testWriteClosed":371,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":246,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":125,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":98,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":85,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":270,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":140,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":266,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":90,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":126,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":245,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":421,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":446,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":356,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":4,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":249,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":165,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":391,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":234,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":302,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":174,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":120,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":276,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":269,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":383,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":305,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":11,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":447,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":154,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":224,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":241,"com.google.gson.functional.MapTest.testRawMapSerialization":205,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":365,"com.google.gson.JsonParserTest.testParseReader":405,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":436,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":133,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":213,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":402,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":343,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":362,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":141,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":280,"com.google.gson.functional.PrimitiveTest.testByteSerialization":320,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":364,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":32,"com.google.gson.ObjectTypeAdapterTest.testSerialize":440,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":220,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":61,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":54,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":420,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":286,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":428,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":99,"com.google.gson.functional.MapTest.testMapWithQuotes":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":23,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":36,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":179,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":404,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":92,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":313,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":38,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":153,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":354,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":144,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":43,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":277,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":2,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":108,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":430,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":384,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":219,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":21,"com.google.gson.functional.ObjectTest.testNestedSerialization":134,"com.google.gson.JsonObjectTest.testAddingStringProperties":416,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":272,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":221,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":301,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":114,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":204,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":258,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":12,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":370,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":380,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":129,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":88,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":373,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":445,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":232,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":284,"com.google.gson.functional.CollectionTest.testSetSerialization":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":18,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":186,"com.google.gson.functional.StringTest.testStringValueSerialization":233,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":121,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":235,"com.google.gson.MixedStreamTest.testWriteInvalidState":368,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":34,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":288,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":40,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":7,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":116,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":411,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":66,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":110,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":41,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":33,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":282},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"66efa34d-3e77-11e6-804c-8583697ffd3e","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"66eff16e-3e77-11e6-804c-5d573fb204ff","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"66eff16f-3e77-11e6-804c-21a142369197","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"66f01880-3e77-11e6-804c-3b2442a5e387","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[9,10,11],"tindex":"66f01881-3e77-11e6-804c-dfb6a8c95578","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"tindex":"66f01882-3e77-11e6-804c-313080bde13f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"66f03f93-3e77-11e6-804c-05e64d551728","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"66f03f94-3e77-11e6-804c-13b32b0707f1","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[73,74,75],"tindex":"66f066a5-3e77-11e6-804c-77b748bbe713","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"66f066a6-3e77-11e6-804c-7384a078a4e5","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,12,13,14,15,16,17,18,19,20,21,22,23,24,92,25,93,94,95,96,97,98,99,100,101,102,103,104,105,26,27,106,107,108,109,28,110,29,30,111,31,112,113,114,115,116,117,118,119,120,121,32,33,122,123,124,125,126,34,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,35,147,36,148,37,38,39,149,40,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,41,166,42,167,168,43,169,11,170,171,44,172,173,174,45,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,46,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,47,210,211,212,213,0,1,2,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,48,254,255,6,7,8,256,257,258,259,260,261,49,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,50,51,52,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,53,54,331,55,56,332,333,334,335,336,337,338,57,339,340,341,58,342,343,344,345,346,59,347,348,349,350,351,352,353,354,355,356,357,358,60,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,71,72,380],"tindex":"66f08db7-3e77-11e6-804c-cdaec4ee14f2","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[381],"tindex":"66f0b4c8-3e77-11e6-804c-d97a88037f3c","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[382,383,384,385,386],"tindex":"66f0b4c9-3e77-11e6-804c-d72f400a4bee","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"66f0dbda-3e77-11e6-804c-11a90c624c71","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"66f0dbdb-3e77-11e6-804c-7929f6a6d9d8","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[92,94,95,99,100,337,339,340,344],"tindex":"66f102ec-3e77-11e6-804c-a3a0eb8efd99","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"66f102ed-3e77-11e6-804c-17238420d3be","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[139,151,153,154,11],"tindex":"66f102ee-3e77-11e6-804c-1796d69403bd","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[81,82,83,87,88,91,25,26,174,45,176,200,203,47,269,52,53,54,55,56,334,362,387],"tindex":"66f129ff-3e77-11e6-804c-2f9b187713d1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[81,82,83,87,88,91,388,15,16,17,21,25,389,390,26,391,109,32,33,142,392,40,174,45,175,176,393,47,394,395,396,73,397,398,399,257,400,258,401,402,269,270,50,51,52,292,53,54,55,56,334,403,404,58,362,405,406,374,407,408,409,67,68,70,410,71,411,412,413,75,414,415,416,72,417],"tindex":"66f12a00-3e77-11e6-804c-27b44c335f5c","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"66f12a01-3e77-11e6-804c-69f5459f730d","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"66f12a02-3e77-11e6-804c-9118c25650be","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"66f15113-3e77-11e6-804c-b1ccbf5a2376","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            if (annotation != null) {\n                {\n                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                    } \n                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                    } \n                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[318,372],"tindex":"66f15114-3e77-11e6-804c-3b32886aaea7","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"66f15115-3e77-11e6-804c-597deea648c3","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"66f15116-3e77-11e6-804c-b507786e75df","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"toResolve","toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"66f17827-3e77-11e6-804c-a1c66ffbd71e","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[81,82,83,87,88,91,25,26,174,45,175,176,47,269,270,292,53,54,331,55,56,334,362,363,364],"tindex":"66f17828-3e77-11e6-804c-ff45d2d8b30e","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"66f17829-3e77-11e6-804c-f1ae9f243a93","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"66f1782a-3e77-11e6-804c-89b1f6fc9832","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            if (annotation != null) {\n                {\n                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                    } \n                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                    } \n                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"66f19f3b-3e77-11e6-804c-150fcb04c51b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[82,87,88,91,25,176,269,270,292,53,54,331,55,56,334],"tindex":"66f19f3c-3e77-11e6-804c-917e8ff0dddd","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[392,418,419,174,176,420,421,422,61,423,424,425,426,427,428,429,430,431,432,433,434],"tindex":"66f19f3d-3e77-11e6-804c-dbfc59943e25","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"66f2146e-3e77-11e6-804c-3d39ae49e019","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,12,15,17,18,92,93,94,95,96,97,98,99,100,101,102,103,435,436,437,438,439,105,26,106,107,108,109,115,116,117,118,119,120,121,122,123,124,125,126,127,129,132,133,134,136,137,138,139,140,142,145,160,168,171,174,45,175,176,177,179,180,181,184,185,189,194,200,202,203,47,210,211,212,213,0,1,2,214,215,216,217,218,219,220,223,224,234,235,236,237,238,240,242,248,250,252,255,6,7,8,256,257,258,262,265,266,267,268,269,270,271,272,273,274,287,50,51,52,291,294,295,53,54,55,56,332,334,335,336,337,339,340,341,342,344,348,353,354,355,356,357,360,361,365,366,374,440],"tindex":"66f23b7f-3e77-11e6-804c-31e827f1a57e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"66f23b80-3e77-11e6-804c-d59a0d2e68b2","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"66f23b81-3e77-11e6-804c-71e617455af9","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"66f23b82-3e77-11e6-804c-63bc61bbbf50","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[441,442,443],"tindex":"66f26293-3e77-11e6-804c-7d197ec18b4f","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[353,444,445,354,355,446,447,356,448,449],"tindex":"66f26294-3e77-11e6-804c-339295f771b7","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"66f26295-3e77-11e6-804c-45b9a2cf21c4","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"66f289a6-3e77-11e6-804c-c778b3d46aa0","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[323],"tindex":"66f289a7-3e77-11e6-804c-d9ee37289211","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"66f289a8-3e77-11e6-804c-1fb663154a30","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"66f289a9-3e77-11e6-804c-153b7b429fc8","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"66f2b0ba-3e77-11e6-804c-3360b01817f7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"66f2b0bb-3e77-11e6-804c-a97ca6f184a0","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'f') || (c == 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"66f2b0bc-3e77-11e6-804c-e3b81c3f840f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"66f2d7cd-3e77-11e6-804c-25fc66a93a18","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"66f2d7ce-3e77-11e6-804c-25be22757d09","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258515797/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":50,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
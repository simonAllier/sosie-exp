{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":531,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":314,"com.google.gson.functional.StringTest.testStringValueDeserialization":312,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":277,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":200,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":444,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":21,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":152,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":299,"com.google.gson.MixedStreamTest.testWriteLenient":591,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":209,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":524,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":337,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":11,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":117,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":492,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":84,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":564,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":8,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":453,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":76,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":540,"com.google.gson.functional.ObjectTest.testSingletonLists":115,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":201,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":315,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":437,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":64,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":156,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":219,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":131,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":603,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":495,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":567,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":328,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":89,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":230,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":484,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":259,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":429,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":577,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":103,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":258,"com.google.gson.functional.EnumTest.testEnumCaseMapping":563,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":313,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":596,"com.google.gson.functional.JsonTreeTest.testToJsonTree":228,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":428,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":222,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":41,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":175,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":193,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":439,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":543,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":347,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":109,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":325,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":128,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":505,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":445,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":132,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":101,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":426,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":140,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":223,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":310,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":510,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":218,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":489,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":174,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":516,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":143,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":199,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":466,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":251,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":300,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":481,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":190,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":420,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":617,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":50,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":273,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":306,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":490,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":482,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":139,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":395,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":123,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":389,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":601,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":608,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":28,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":269,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":449,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":88,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":32,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":48,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":52,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":153,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":207,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":371,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":192,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":425,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":112,"com.google.gson.functional.CollectionTest.testSetDeserialization":351,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":9,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":127,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":358,"com.google.gson.functional.EnumTest.testEnumSet":554,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":473,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":51,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":180,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":246,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":133,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":73,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":576,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":486,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":47,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":497,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":98,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":160,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":498,"com.google.gson.functional.MapTest.testHashMapDeserialization":240,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":442,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":205,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":390,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":533,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":282,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":529,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":416,"com.google.gson.functional.MapTest.testSortedMap":262,"com.google.gson.functional.MapTest.testMapSerialization":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":532,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":367,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":479,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":408,"com.google.gson.functional.MapTest.testSerializeMaps":243,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":364,"com.google.gson.functional.MapTest.testComplexKeysSerialization":270,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":357,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":274,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":414,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":111,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":561,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":552,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":294,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":610,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":559,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":3,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":233,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":23,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":142,"com.google.gson.functional.MapTest.testStringKeyDeserialization":272,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":20,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":411,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":56,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":512,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":276,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":448,"com.google.gson.functional.PrettyPrintingTest.testMap":231,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":375,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":443,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":340,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":170,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":535,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":413,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":602,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":318,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":187,"com.google.gson.functional.MapTest.testMapSerializationEmpty":271,"com.google.gson.functional.CollectionTest.testQueueSerialization":344,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":474,"com.google.gson.functional.MapTest.testMapOfMapSerialization":256,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":465,"com.google.gson.JavaSerializationTest.testMapIsSerializable":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":195,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":348,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":334,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":476,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":65,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":316,"com.google.gson.functional.FieldNamingTest.testIdentity":365,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":53,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":92,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":144,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":27,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":114,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":227,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":526,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":431,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":578,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":317,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":422,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":279,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":211,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":221,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":333,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":238,"com.google.gson.functional.MapTest.testMapSubclassSerialization":242,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":508,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":82,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":297,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":463,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":565,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":169,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":301,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":523,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":155,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":72,"com.google.gson.functional.EnumTest.testEnumSubclass":557,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":485,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":129,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":604,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":430,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":421,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":582,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":491,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":55,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":289,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":433,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":281,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":469,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":280,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":30,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":404,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":580,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":126,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":475,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":26,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":214,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":116,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":239,"com.google.gson.MixedStreamTest.testWriteNulls":614,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":403,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":304,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":397,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":69,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":110,"com.google.gson.CommentsTest.testParseComments":586,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":60,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":118,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":546,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":383,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":409,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":488,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":366,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":261,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":320,"com.google.gson.MixedStreamTest.testReadInvalidState":588,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":216,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":507,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":14,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":368,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":441,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":415,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":19,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":380,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":458,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":197,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":502,"com.google.gson.functional.MapTest.testMapDeserialization":249,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":191,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":236,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":612,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":539,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":616,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":39,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":248,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":545,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":541,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":295,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":226,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":167,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":130,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":284,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":176,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":80,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":293,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":232,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":260,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":220,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":427,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":62,"com.google.gson.functional.PrimitiveTest.testShortSerialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":548,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":494,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":105,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":464,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":181,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":440,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":361,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":556,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":339,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":296,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":244,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":457,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":514,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":613,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":302,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":208,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":553,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":595,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":521,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":515,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":25,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":38,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":54,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":162,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":500,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":470,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":150,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":122,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":562,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":286,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":359,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":373,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":58,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":198,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":547,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":184,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":419,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":203,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":35,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":341,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":434,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":501,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":472,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":518,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":386,"com.google.gson.JsonPrimitiveTest.testEquals":607,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":544,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":555,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":537,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":369,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":120,"com.google.gson.functional.MapTest.testGeneralMapField":266,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":520,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":13,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":374,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":210,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":163,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":309,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":438,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":496,"com.google.gson.MixedStreamTest.testReadMixedStreamed":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":178,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":252,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":459,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":352,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":418,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":579,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":86,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":477,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":104,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":598,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":196,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":253,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":336,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":61,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":519,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":107,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":570,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":194,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":305,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":606,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":161,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":551,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":67,"com.google.gson.functional.ObjectTest.testNestedDeserialization":151,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":90,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":137,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":534,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":29,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":102,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":517,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":382,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":22,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":254,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":319,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":71,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":504,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":285,"com.google.gson.JavaSerializationTest.testListIsSerializable":600,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":303,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":528,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":354,"com.google.gson.functional.ObjectTest.testNullSerialization":609,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":288,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":335,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":245,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":265,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":432,"com.google.gson.functional.MapTest.testInterfaceTypeMap":263,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":406,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":376,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":34,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":435,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":560,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":292,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":164,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":100,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":451,"com.google.gson.MixedStreamTest.testWriteClosed":593,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":346,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":536,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":37,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":224,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":77,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":385,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":148,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":40,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":124,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":345,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":571,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":480,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":573,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":290,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":204,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":94,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":330,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":522,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":456,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":172,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":113,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":391,"com.google.gson.functional.CollectionTest.testQueueDeserialization":356,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":384,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":462,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":478,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":324,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":215,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":572,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":141,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":186,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":149,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":311,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":338,"com.google.gson.functional.MapTest.testRawMapSerialization":268,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":587,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":202,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":135,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":283,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":372,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":550,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":583,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":154,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":396,"com.google.gson.functional.PrimitiveTest.testByteSerialization":503,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":585,"com.google.gson.ObjectTypeAdapterTest.testSerialize":15,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":307,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":446,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":615,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":525,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":407,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":362,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":78,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":321,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":575,"com.google.gson.functional.MapTest.testMapWithQuotes":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":171,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":454,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":323,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":49,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":417,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":66,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":168,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":7,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":542,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":68,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":147,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":183,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":487,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":125,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":185,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":527,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":499,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":611,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":350,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":399,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":213,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":392,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":287,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":95,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":574,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":298,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":158,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":436,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":63,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":134,"com.google.gson.functional.ObjectTest.testNestedSerialization":136,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":387,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":308,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":327,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":450,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":267,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":370,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":42,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":592,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":605,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":5,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":91,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":513,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":36,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":188,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":452,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":597,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":166,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":568,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":326,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":402,"com.google.gson.functional.CollectionTest.testSetSerialization":12,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":424,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":59,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":234,"com.google.gson.functional.StringTest.testStringValueSerialization":329,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":4,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":24,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":331,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":342,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":393,"com.google.gson.MixedStreamTest.testWriteInvalidState":590,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":455,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":410,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":461,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":179,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":363,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":108,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":99,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":618,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":206,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":2,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":247,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":44,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":398},"transformations":[{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"a7edfec8-3e40-11e6-9b5a-75aefc7b02b4","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[0,1,2,3],"tindex":"a7ee4ce9-3e40-11e6-9b5a-a5a8c3e5edc2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"a7ee73fa-3e40-11e6-9b5a-a303b1a27d59","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"a7ee73fb-3e40-11e6-9b5a-a18593df369a","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"a7ee9b0c-3e40-11e6-9b5a-f95b04976175","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[1,17],"tindex":"a7eec21d-3e40-11e6-9b5a-37fbc89e9d21","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[18,19,20],"tindex":"a7eee92e-3e40-11e6-9b5a-7f3c25d42e29","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,4,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,5,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,6,229,7,8,9,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,10,348,349,350,351,11,352,353,12,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,13,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,15,602,603,604,605],"tindex":"a7eee92f-3e40-11e6-9b5a-8333e7d52c8f","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[181],"tindex":"a7ef1040-3e40-11e6-9b5a-e1c601f6902a","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[222,225,228,606,607,608],"tindex":"a7ef3751-3e40-11e6-9b5a-2d34057179cc","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[42,49,51,59,60,61,65,66,67,90,98,100,101,103,609,610,611,163,173,175,209,213,220,612,613,376,526,543,550,556,578,614,615,616,617,618,619],"tindex":"a7ef3752-3e40-11e6-9b5a-c16bc37d2124","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a7ef3753-3e40-11e6-9b5a-85544f826a5f","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"a7ef3754-3e40-11e6-9b5a-a34bd814935d","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a7ef5e65-3e40-11e6-9b5a-b1168d5147c7","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"a7ef5e66-3e40-11e6-9b5a-f3eb1ad3d404","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a7ef5e67-3e40-11e6-9b5a-dbb263dfc005","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a7ef8578-3e40-11e6-9b5a-b7d3be6bdeb7","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a7ef8579-3e40-11e6-9b5a-f7c2d6fe406e","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"a7ef857a-3e40-11e6-9b5a-056625fff270","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"a7ef857b-3e40-11e6-9b5a-a74a6b854400","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"a7ef857c-3e40-11e6-9b5a-19b6ba5df19e","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"a7ef857d-3e40-11e6-9b5a-09ba4b612596","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a7efac8e-3e40-11e6-9b5a-7b32278fe5d9","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"a7efac8f-3e40-11e6-9b5a-77b1711c2473","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a7efac90-3e40-11e6-9b5a-295cc88630c4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"a7efac91-3e40-11e6-9b5a-b3cd21608988","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"a7efd3a2-3e40-11e6-9b5a-e5301bdae667","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7f048d3-3e40-11e6-9b5a-87f6c8ae9a2d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"a7f06fe4-3e40-11e6-9b5a-338f97af098d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7f06fe5-3e40-11e6-9b5a-a90ea3f3bdcd","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"a7f06fe6-3e40-11e6-9b5a-e3ac601e2828","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"a7f06fe7-3e40-11e6-9b5a-e16ddb4ea268","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"a7f096f8-3e40-11e6-9b5a-07f5a3859abf","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a7f0be09-3e40-11e6-9b5a-3d45b3da25bd","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"a7f0be0a-3e40-11e6-9b5a-5ba73c9d50a7","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7f0be0b-3e40-11e6-9b5a-094aba40e78c","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"a7f0be0c-3e40-11e6-9b5a-df97b5511362","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a7f0e51d-3e40-11e6-9b5a-834d7f2c9be1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7f0e51e-3e40-11e6-9b5a-ef89eff65ac1","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a7f0e51f-3e40-11e6-9b5a-5bc8025ac73e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a7f10c30-3e40-11e6-9b5a-0774b0021aa5","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235161521/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
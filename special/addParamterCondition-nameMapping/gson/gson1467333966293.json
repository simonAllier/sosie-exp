{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":376,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":281,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":435,"com.google.gson.functional.StringTest.testStringValueDeserialization":631,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":20,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":674,"com.google.gson.stream.JsonWriterTest.testRepeatedName":432,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":576,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":164,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":492,"com.google.gson.MixedStreamTest.testWriteLenient":122,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":424,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":46,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":23,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":293,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":303,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":474,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":608,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":147,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":161,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":357,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":583,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":415,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":464,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":502,"com.google.gson.functional.ObjectTest.testSingletonLists":264,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":343,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":282,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":571,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":427,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":687,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":290,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":681,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":482,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":135,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":413,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":610,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":127,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":443,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":639,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":93,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":604,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":455,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":138,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":565,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":17,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":555,"com.google.gson.functional.EnumTest.testEnumCaseMapping":160,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":61,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":280,"com.google.gson.functional.JsonTreeTest.testToJsonTree":177,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":564,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":403,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":226,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":440,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":535,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":672,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":34,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":300,"com.google.gson.functional.ObjectTest.testNullDeserialization":629,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":308,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":637,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":480,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":256,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":577,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":270,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":411,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":16,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":362,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":485,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":9,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":401,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":218,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":615,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":680,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":249,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":441,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":402,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":619,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":76,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":342,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":591,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":499,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":551,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":601,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":521,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":671,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":38,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":3,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":514,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":192,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":250,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":658,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":602,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":72,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":273,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":146,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":150,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":400,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":478,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":117,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":167,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":557,"com.google.gson.metrics.PerformanceTest.testDummy":526,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":447,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":199,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":222,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":664,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":683,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":560,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":345,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":337,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":506,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":115,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":406,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":498,"com.google.gson.functional.CollectionTest.testSetDeserialization":497,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":358,"com.google.gson.functional.EnumTest.testEnumSet":155,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":267,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":641,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":594,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":50,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":669,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":90,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":137,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":605,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":508,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":611,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":14,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":292,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":252,"com.google.gson.functional.MapTest.testHashMapDeserialization":545,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":574,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":677,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":151,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":630,"com.google.gson.MixedStreamTest.testReadNulls":690,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":207,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":375,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":36,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":646,"com.google.gson.functional.MapTest.testSortedMap":556,"com.google.gson.functional.MapTest.testMapSerialization":183,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":279,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":399,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":599,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":391,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":537,"com.google.gson.functional.MapTest.testSerializeMaps":84,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":321,"com.google.gson.functional.MapTest.testComplexKeysSerialization":190,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":640,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":2,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":393,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":559,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":83,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":310,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":448,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":324,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":461,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":291,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":529,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":94,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":124,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":416,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":165,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":628,"com.google.gson.functional.MapTest.testStringKeyDeserialization":558,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":52,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":193,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":580,"com.google.gson.functional.PrettyPrintingTest.testMap":228,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":314,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":575,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":327,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":377,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":644,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":134,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":442,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":539,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":285,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":632,"com.google.gson.functional.MapTest.testMapSerializationEmpty":191,"com.google.gson.functional.CollectionTest.testQueueSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":595,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":437,"com.google.gson.functional.MapTest.testMapOfMapSerialization":182,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":673,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":651,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":429,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":67,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":58,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":372,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":283,"com.google.gson.functional.FieldNamingTest.testIdentity":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":684,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":168,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":487,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":419,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":68,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":108,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":176,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":220,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":566,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":0,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":284,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":360,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":244,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":679,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":670,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":352,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":543,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":121,"com.google.gson.functional.MapTest.testMapSubclassSerialization":178,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":153,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":467,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":642,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":315,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":323,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":364,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":589,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":425,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":666,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":496,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":221,"com.google.gson.functional.EnumTest.testEnumSubclass":157,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":247,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":136,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":481,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":238,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":359,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":412,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":607,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":51,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":397,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":458,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":567,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":163,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":592,"com.google.gson.stream.JsonWriterTest.testTwoNames":428,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":450,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":197,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":144,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":534,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":596,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":626,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":243,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":452,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":348,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":473,"com.google.gson.MixedStreamTest.testWriteNulls":365,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":544,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":78,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":656,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":309,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":463,"com.google.gson.CommentsTest.testParseComments":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":55,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":503,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":234,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":453,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":606,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":624,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":113,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":185,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":561,"com.google.gson.MixedStreamTest.testReadInvalidState":688,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":350,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":262,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":692,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":414,"com.google.gson.JsonParserTest.testParseMixedArray":1,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":240,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":691,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":540,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":389,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":231,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":422,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":118,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":65,"com.google.gson.JsonArrayTest.testRemove":405,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":340,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":533,"com.google.gson.functional.MapTest.testMapDeserialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":336,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":97,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":19,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":12,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":418,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":501,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":180,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":381,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":114,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":462,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":18,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":510,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":269,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":275,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":209,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":316,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":328,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":465,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":417,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":162,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":184,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":229,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":48,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":563,"com.google.gson.functional.PrimitiveTest.testShortSerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":686,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":609,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":174,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":371,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":590,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":573,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":318,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":13,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":295,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":152,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":547,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":586,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":103,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":125,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":7,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":678,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":5,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":517,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":260,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":618,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":438,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":166,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":276,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":515,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":8,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":325,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":469,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":468,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":53,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":593,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":490,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":477,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":211,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":288,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":511,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":685,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":341,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":382,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":579,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":331,"com.google.gson.stream.JsonWriterTest.testNullStringValue":430,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":676,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":86,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":647,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":568,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":613,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":245,"com.google.gson.JsonArrayTest.testSet":385,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":259,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":194,"com.google.gson.JsonPrimitiveTest.testEquals":398,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":156,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":380,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":495,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":471,"com.google.gson.functional.MapTest.testGeneralMapField":85,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":476,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":71,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":420,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":621,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":80,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":313,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":346,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":39,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":87,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":239,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":251,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":369,"com.google.gson.MixedStreamTest.testReadMixedStreamed":516,"com.google.gson.JsonObjectTest.testDeepCopy":423,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":100,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":409,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":668,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":139,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":304,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":505,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":446,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":597,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":173,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":339,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":553,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":227,"com.google.gson.JsonArrayTest.testDeepCopy":404,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":546,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":56,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":104,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":237,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":130,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":431,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":587,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":338,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":657,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":519,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":169,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":665,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":392,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":661,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":60,"com.google.gson.functional.ObjectTest.testNestedDeserialization":491,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":22,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":272,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":493,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":196,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":172,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":620,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":233,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":407,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":530,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":554,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":633,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":89,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":255,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":210,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":26,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":500,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":306,"com.google.gson.functional.ObjectTest.testNullSerialization":268,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":213,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":562,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":548,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":116,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":188,"com.google.gson.functional.MapTest.testInterfaceTypeMap":186,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":33,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":201,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":569,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":158,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":261,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":317,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":460,"com.google.gson.MixedStreamTest.testReadClosed":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":581,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":395,"com.google.gson.MixedStreamTest.testWriteClosed":368,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":299,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":494,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":265,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":682,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":91,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":200,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":236,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":232,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":277,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":351,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":204,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":266,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":298,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":131,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":387,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":518,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":600,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":459,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":302,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":410,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":344,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":542,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":63,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":622,"com.google.gson.JsonParserTest.testParseInvalidJson":408,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":241,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":667,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":69,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":311,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":235,"com.google.gson.functional.CollectionTest.testQueueDeserialization":655,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":242,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":598,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":636,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":278,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":522,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":349,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":373,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":486,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":333,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":219,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":489,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":294,"com.google.gson.functional.MapTest.testRawMapSerialization":189,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":363,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":675,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":439,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":112,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":208,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":472,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":384,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":141,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":73,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":143,"com.google.gson.functional.PrimitiveTest.testByteSerialization":254,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":289,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":29,"com.google.gson.ObjectTypeAdapterTest.testSerialize":426,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":216,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":578,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":11,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":24,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":386,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":79,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":394,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":319,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":92,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":525,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":634,"com.google.gson.functional.MapTest.testMapWithQuotes":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":41,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":584,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":49,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":662,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":59,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":206,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":40,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":356,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":660,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":88,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":488,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":230,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":330,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":627,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":82,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":42,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":25,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":332,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":612,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":378,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":652,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":532,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":47,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":70,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":212,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":170,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":396,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":659,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":154,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":645,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":466,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":570,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":523,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":57,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":105,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":483,"com.google.gson.functional.ObjectTest.testNestedSerialization":271,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":195,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":99,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":217,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":638,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":98,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":374,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":263,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":28,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":140,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":367,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":110,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":541,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":617,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":202,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":512,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":62,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":527,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":582,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":509,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":128,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":106,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":286,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":77,"com.google.gson.functional.CollectionTest.testSetSerialization":305,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":513,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":54,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":95,"com.google.gson.functional.StringTest.testStringValueSerialization":287,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":107,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":64,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":451,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":648,"com.google.gson.MixedStreamTest.testWriteInvalidState":366,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":531,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":31,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":585,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":81,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":588,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":44,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":320,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":370,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":307,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":454,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":4,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":171,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":520,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":45,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":30,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":549,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":434,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":75,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":663},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"31cc2198-3f25-11e6-92a6-7d6f11e381d1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cc96c9-3f25-11e6-92a6-5d90cebc82bc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,21,86,87,23,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"tindex":"31cd0bfa-3f25-11e6-92a6-add77bdef74d","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[116,117,118,119,120,121,122],"tindex":"31cd0bfb-3f25-11e6-92a6-bf123fce4b4d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cd330c-3f25-11e6-92a6-55f15aa8dfef","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cd812d-3f25-11e6-92a6-e72f527e3b62","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[123,124,125],"tindex":"31cda83e-3f25-11e6-92a6-2910c1208055","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cdf65f-3f25-11e6-92a6-5b50464a0d7d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[126,127,128,129,130,131,132,133],"tindex":"31cdf660-3f25-11e6-92a6-8f7e43b626d0","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        {\n                            if (annotation != null) {\n                                double double = annotation.value();\n                                if (annotationVersion > (double)) {\n                                    return false;\n                                } \n                            } \n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[61,62,134,135,136,137,138,0,139,140,141,142,143,144,145,146,2,9,10,147,148,149,150,151,152,153,154,155,156,13,157,158,159,160,161,63,64,65,66,67,162,163,164,165,166,68,167,69,70,71,72,73,74,75,76,78,79,80,81,82,83,168,169,170,14,171,15,16,172,17,173,174,175,18,176,177,19,178,84,179,180,181,182,183,184,185,186,187,188,85,189,190,191,192,193,20,21,22,194,195,196,197,198,199,200,201,86,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,87,218,219,23,24,220,25,26,88,27,89,221,90,222,223,91,92,224,225,226,28,227,93,228,229,94,95,96,97,230,231,232,233,234,235,236,98,237,238,116,239,240,117,99,241,118,100,242,119,243,120,244,245,246,247,248,249,250,101,251,252,253,254,255,256,257,102,121,258,103,259,104,260,261,262,263,107,30,108,264,109,265,266,267,268,110,269,270,111,112,271,272,273,274,275,276,277,278,279,280,281,282,283,284,113,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,32,307,308,309,310,311,312,313,314,33,315,316,317,318,319,320,321,322,323,126,129,130,133,114,34,324,36,37,38,325,39,326,40,327,41,42,43,328,44,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,45,345,46,346,347,47,348,349,350,351,48,352,353,354,355,356,357,358,359,360,361,115,362,49,50,51,52,53,54,55,56,57,58,59,60,363,364,365,366,122,367,368],"tindex":"31ce1d71-3f25-11e6-92a6-91c1b42ce4ce","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (serializeNulls) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[369,370],"tindex":"31ce4482-3f25-11e6-92a6-bd4e4c9d56bb","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[126,127,128,130,131,133],"tindex":"31ce4483-3f25-11e6-92a6-79b7f40efe61","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[61,62,134,135,136,137,138,0,139,140,141,142,143,144,145,146,371,372,9,10,147,148,149,150,151,152,153,154,155,156,13,157,158,159,160,161,63,64,65,66,67,162,163,164,165,166,68,167,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,168,169,170,14,171,15,16,172,17,173,174,175,18,176,177,19,178,84,179,180,373,181,182,183,184,185,186,187,188,85,374,189,190,191,192,193,20,21,22,194,195,196,197,198,199,200,201,86,202,203,204,205,206,207,208,209,211,212,213,214,215,216,217,87,218,219,23,24,220,25,26,88,27,89,221,90,222,223,91,92,224,225,226,28,227,93,228,229,94,95,96,97,230,231,232,233,234,235,236,98,237,238,116,239,240,117,99,241,118,100,242,119,243,120,244,245,246,247,248,249,250,101,251,252,253,254,255,256,257,102,121,258,103,259,104,260,261,262,263,107,29,30,108,264,109,265,266,31,267,268,110,269,270,111,112,271,272,273,274,275,276,277,375,278,376,279,377,280,281,282,283,284,113,285,286,287,288,289,290,291,378,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,32,307,308,309,310,311,312,313,314,33,315,316,317,318,319,320,321,322,323,126,129,130,133,379,114,34,380,381,382,35,383,384,324,36,37,38,325,39,326,40,327,41,42,43,328,44,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,45,345,46,346,347,47,348,349,350,351,48,352,353,354,355,356,357,358,359,360,361,115,362,49,50,51,52,53,54,55,56,57,58,59,60,363,364,365,366,122,367,368],"tindex":"31ce6b94-3f25-11e6-92a6-abe5114c46c4","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"31ce92a5-3f25-11e6-92a6-0724d1df1f41","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31ce92a6-3f25-11e6-92a6-1d372955b775","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31ce92a7-3f25-11e6-92a6-07768236c685","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31ceb9b8-3f25-11e6-92a6-d58de6c6a8cc","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[385],"tindex":"31ceb9b9-3f25-11e6-92a6-6ba1d9e07725","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31ceb9ba-3f25-11e6-92a6-0946f743913e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cee0cb-3f25-11e6-92a6-c1685c8be75d","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cee0cc-3f25-11e6-92a6-ffae54d5b605","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        {\n                            if (annotation != null) {\n                                double double = annotation.value();\n                                if (annotationVersion > (double)) {\n                                    return false;\n                                } \n                            } \n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[386,387,388,11,389,390,391,392,393,394,395,396,397,398,399,400,175,177,401,402,403],"tindex":"31cee0cd-3f25-11e6-92a6-33bd4f46a45d","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[385,404,405,406,1,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,3,4,422,7,423,19,424,425,40,402],"tindex":"31cf07de-3f25-11e6-92a6-1dc23e18f114","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cf07df-3f25-11e6-92a6-c5f86d5ff95f","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"31cf07e0-3f25-11e6-92a6-41fb7e9fd7a6","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cf07e1-3f25-11e6-92a6-cff522196e9d","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cf2ef2-3f25-11e6-92a6-094904f17330","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cf2ef3-3f25-11e6-92a6-5340dddd4509","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[21],"tindex":"31cf2ef4-3f25-11e6-92a6-f1b267af0414","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cf5605-3f25-11e6-92a6-79277141722f","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[137,426,427,144,145,146,5,6,8,9,10,428,429,430,431,432,433,434,435,436,437,148,149,150,152,153,154,158,63,64,65,66,67,162,163,164,165,68,167,80,168,169,170,18,178,84,179,180,373,181,182,183,184,185,186,187,188,85,374,189,190,192,193,20,21,194,195,199,200,201,203,204,206,207,208,209,211,212,213,214,215,216,218,219,88,27,89,221,90,222,223,91,92,224,225,226,28,228,229,94,230,231,232,233,234,237,261,438,439,440,441,442,443,262,263,107,29,30,108,264,109,265,266,267,110,111,112,271,273,274,275,276,277,375,279,377,290,292,293,295,301,303,305,307,308,309,310,311,312,315,318,319,320,321,322,126,129,130,133,379,380,381,382,35,383,324,36,37,38,44,338,339,341,345,347,351,354,356,357,358,359,115,362,51,52,53,54,55,57,60,363,364],"tindex":"31cf5606-3f25-11e6-92a6-13d83252c230","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cf7d17-3f25-11e6-92a6-5d7a46d84173","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[123,124,125],"tindex":"31cf7d18-3f25-11e6-92a6-31b973228f47","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[246,250,255],"tindex":"31cfa429-3f25-11e6-92a6-43d1215533e5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cfa42a-3f25-11e6-92a6-a19933ce1bfe","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cfcb3b-3f25-11e6-92a6-15e82a779dbc","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cfcb3c-3f25-11e6-92a6-2b6f3b688271","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31cff24d-3f25-11e6-92a6-19ed6c1facc7","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from instanceof java.lang.Class<?>) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (from == null) {\n                                        return false;\n                                    } \n                                    if (to.equals(from)) {\n                                        return true;\n                                    } \n                                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                                    } \n                                    if (ptype != null) {\n                                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                                arg = typeVarMap.get(v.getName());\n                                            }\n                                            typeVarMap.put(var.getName(), arg);\n                                        }\n                                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                                            return true;\n                                        } \n                                    } \n                                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                                            return true;\n                                        } \n                                    }\n                                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[444],"tindex":"31cff24e-3f25-11e6-92a6-85cec6a4d2c6","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[],"tindex":"31d0195f-3f25-11e6-92a6-f7a4499c186f","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (serializeNulls) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d01960-3f25-11e6-92a6-3f99c21214f9","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    if (o instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"31d01961-3f25-11e6-92a6-cfb0ec901634","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from instanceof java.lang.Class<?>) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (from == null) {\n                                        return false;\n                                    } \n                                    if (to.equals(from)) {\n                                        return true;\n                                    } \n                                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                                    } \n                                    if (ptype != null) {\n                                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                                arg = typeVarMap.get(v.getName());\n                                            }\n                                            typeVarMap.put(var.getName(), arg);\n                                        }\n                                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                                            return true;\n                                        } \n                                    } \n                                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                                            return true;\n                                        } \n                                    }\n                                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[],"tindex":"31d04072-3f25-11e6-92a6-03e05b9324f8","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[137,426,144,145,146,445,446,148,447,149,150,152,153,154,158,448,63,64,65,66,67,162,449,450,163,164,165,451,452,68,167,80,453,81,168,169,170,454,175,18,176,177,373,455,186,188,85,190,20,21,194,195,196,197,198,199,200,201,86,202,456,457,203,204,205,206,207,208,209,210,211,212,213,458,459,214,460,215,461,462,216,218,219,23,24,25,26,88,463,89,221,90,222,223,464,91,92,224,465,225,466,467,226,28,468,229,94,230,231,232,233,234,235,236,237,469,470,262,471,263,472,107,108,264,473,474,109,475,476,265,477,478,266,479,267,480,110,481,482,111,483,112,271,484,273,485,486,274,487,275,276,488,277,489,490,491,492,375,376,279,493,377,494,495,496,290,292,293,295,301,497,303,305,307,308,309,310,498,311,315,424,499,425,125,500,318,319,320,321,322,126,127,128,129,130,131,132,133,379,501,502,380,381,503,382,383,324,504,36,505,37,38,506,507,508,509,510,511,329,512,339,347,351,354,356,357,358,359,361,513,115,362,514,515,51,53,54,363,364,366,368,516,517],"tindex":"31d06783-3f25-11e6-92a6-df5bb029a6a1","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d08e94-3f25-11e6-92a6-450cf1528232","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"31d08e95-3f25-11e6-92a6-439aa3bc2312","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isString()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[146,445,446,447,152,153,154,448,63,65,66,67,449,450,451,452,168,21,456,457,206,208,458,459,460,461,462,216,218,219,88,463,221,464,91,92,224,465,467,468,237,469,261,518,519,520,521,522,470,262,471,472,264,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,376,493,494,495,496,290,293,295,497,307,308,309,310,498,311,424,499,425,125,127,128,131,132,501,502,503,504,505,37,38,506,507,508,509,510,512,513,514,515,516,517],"tindex":"31d0b5a6-3f25-11e6-92a6-f3e5466c5c12","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"31d0b5a7-3f25-11e6-92a6-3928c1939e92","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d0b5a8-3f25-11e6-92a6-3d37d4e314c0","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d0b5a9-3f25-11e6-92a6-59341ed27c21","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        {\n                            if (annotation != null) {\n                                double double = annotation.value();\n                                if (annotationVersion > (double)) {\n                                    return false;\n                                } \n                            } \n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d0dcba-3f25-11e6-92a6-cf063dc093a2","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[141,2,5,6,8,175,18,176,177,20,21,196,197,198,86,202,205,23,24,25,26,235,236,376,36,37,38],"tindex":"31d0dcbb-3f25-11e6-92a6-770712c48719","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d103cc-3f25-11e6-92a6-d7db55a124e1","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from instanceof java.lang.Class<?>) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (from == null) {\n                                        return false;\n                                    } \n                                    if (to.equals(from)) {\n                                        return true;\n                                    } \n                                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                                    } \n                                    if (ptype != null) {\n                                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                                arg = typeVarMap.get(v.getName());\n                                            }\n                                            typeVarMap.put(var.getName(), arg);\n                                        }\n                                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                                            return true;\n                                        } \n                                    } \n                                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                                            return true;\n                                        } \n                                    }\n                                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[0,3,4,7,11,12,13,14,15,16,17,19,22,220,28,268,291,378,32,33,34,384,39,42,43,46,47,48,49,50,54,55,56,58,59,60,365],"tindex":"31d103cd-3f25-11e6-92a6-196516fc7e31","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[523],"tindex":"31d12ade-3f25-11e6-92a6-733273110b7c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"31d151ef-3f25-11e6-92a6-73382881ae59","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[426,146,148,153,154,162,163,165,68,70,75,78,79,80,83,168,169,175,18,176,177,84,183,85,189,193,200,203,206,213,215,216,218,219,88,27,89,221,90,222,223,91,92,224,225,226,28,93,228,229,94,95,96,97,230,233,234,236,237,252,256,102,439,107,109,267,110,111,271,274,275,277,375,376,279,290,292,293,296,298,301,303,305,306,318,319,320,321,322,126,129,130,133,36,37,38,354,355,356,357,358,53,54,363,364],"tindex":"31d151f0-3f25-11e6-92a6-fbcc4e808a8c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d151f1-3f25-11e6-92a6-b781745e76a3","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[61,62,134,135,136,524,525,137,138,0,139,140,526,144,145,527,146,9,10,147,445,446,148,447,149,150,151,152,153,154,155,156,13,157,528,529,158,448,159,160,161,162,449,450,163,164,530,165,451,166,452,68,167,69,70,531,71,72,73,74,75,532,533,76,77,78,534,535,536,79,537,80,453,81,538,82,539,83,540,541,168,169,542,170,454,14,171,15,16,172,17,173,174,175,18,176,177,543,19,544,545,546,178,84,547,548,179,549,180,550,373,551,552,553,554,181,182,183,555,455,184,185,556,186,187,188,85,374,189,557,190,191,558,192,559,560,193,20,21,22,561,194,195,196,197,198,199,200,201,86,202,456,457,203,204,205,207,208,209,210,211,212,213,458,459,214,460,215,461,462,216,217,87,218,219,23,24,220,25,26,88,463,27,89,221,90,222,223,464,91,92,224,465,225,466,467,226,28,468,562,227,93,228,229,94,95,96,97,230,231,232,233,234,235,236,98,237,563,564,565,238,566,116,567,568,569,570,571,239,572,573,240,574,575,576,577,578,579,580,117,99,581,582,583,584,585,241,586,118,100,587,588,242,589,590,119,591,243,120,592,593,244,245,594,595,596,246,597,598,599,600,601,602,603,604,247,605,248,606,249,250,607,608,101,609,610,251,611,252,612,469,613,253,254,255,256,257,102,121,614,615,616,258,617,103,618,619,620,259,104,621,260,622,623,624,470,262,471,263,625,472,107,29,30,108,264,473,474,109,475,476,265,477,478,266,31,479,626,267,480,268,110,627,481,269,482,270,111,483,112,271,272,484,273,485,486,628,629,274,487,275,276,488,277,489,490,491,492,375,278,376,279,630,493,377,494,495,631,280,281,282,283,284,632,633,113,634,285,635,636,637,286,638,639,287,640,641,288,642,643,289,496,290,291,644,645,646,378,292,293,294,295,296,647,648,649,297,298,299,300,301,650,651,302,652,497,303,304,653,305,306,654,32,655,307,308,309,310,498,311,312,313,314,33,315,316,317,424,499,425,125,500,656,657,658,318,319,320,321,322,323,126,127,128,129,130,131,132,133,659,379,501,502,114,660,34,380,381,503,382,35,383,384,661,324,504,36,662,505,37,38,663,506,507,508,664,665,325,39,326,401,509,510,40,666,327,41,667,42,402,43,328,511,668,44,669,329,670,330,331,332,333,334,512,335,671,336,337,672,338,673,339,340,341,342,674,343,675,676,344,677,45,345,678,46,346,679,347,47,348,349,350,351,680,681,48,352,403,353,682,354,355,356,357,358,359,360,361,513,115,362,49,514,50,683,684,515,51,52,53,685,54,55,56,686,57,687,58,59,60,363,688,689,364,365,366,122,690,367,368,516,517],"tindex":"31d17902-3f25-11e6-92a6-691123370a54","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[691],"tindex":"31d1a013-3f25-11e6-92a6-9716aea90657","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d1c724-3f25-11e6-92a6-51c63884a9ba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof java.util.Iterator) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[451,167,194,239],"tindex":"31d1c725-3f25-11e6-92a6-5f82ac1df0bd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"31d1ee36-3f25-11e6-92a6-4f649ae6cb07","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[692,426,427,80,107,110,301,303,305,354,356,357,358],"tindex":"31d1ee37-3f25-11e6-92a6-1fbddfa55504","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"31d1ee38-3f25-11e6-92a6-4b72947bf108","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d21549-3f25-11e6-92a6-a1ea1bb7b009","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d2154a-3f25-11e6-92a6-092b714221fc","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d2154b-3f25-11e6-92a6-73c1cf54bc6d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d2154c-3f25-11e6-92a6-b1aea8766ec7","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'a') && (c <= 'f')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d23c5d-3f25-11e6-92a6-2b1835ebe24a","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d23c5e-3f25-11e6-92a6-294aeb7f06fe","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d23c5f-3f25-11e6-92a6-979e17edbcab","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d23c60-3f25-11e6-92a6-174009d58882","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d26271-3f25-11e6-92a6-d32981625154","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                {\n                    if (to.getRawType().equals(to.getRawType())) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from instanceof java.lang.Class<?>) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (from == null) {\n                                        return false;\n                                    } \n                                    if (to.equals(from)) {\n                                        return true;\n                                    } \n                                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                                    } \n                                    if (ptype != null) {\n                                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                                arg = typeVarMap.get(v.getName());\n                                            }\n                                            typeVarMap.put(var.getName(), arg);\n                                        }\n                                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                                            return true;\n                                        } \n                                    } \n                                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                                            return true;\n                                        } \n                                    }\n                                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d26272-3f25-11e6-92a6-05aa3e8c29e6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d28983-3f25-11e6-92a6-8f93536a46ac","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31d28984-3f25-11e6-92a6-4b34e396f5d2","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332259767/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":77,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
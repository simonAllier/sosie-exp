{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":285,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":330,"com.google.gson.functional.StringTest.testStringValueDeserialization":483,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":232,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":436,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":543,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":216,"com.google.gson.MixedStreamTest.testWriteLenient":144,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":247,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":444,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":281,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":86,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":194,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":581,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":315,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":613,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":60,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":551,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":178,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":291,"com.google.gson.functional.ObjectTest.testSingletonLists":192,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":437,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":331,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":375,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":49,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":451,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":204,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":627,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":583,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":301,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":314,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":491,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":33,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":62,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":577,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":228,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":531,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":617,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":387,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":469,"com.google.gson.functional.EnumTest.testEnumCaseMapping":612,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":329,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":625,"com.google.gson.functional.JsonTreeTest.testToJsonTree":226,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":530,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":454,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":29,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":430,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":539,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":601,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":341,"com.google.gson.functional.ObjectTest.testNullDeserialization":400,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":187,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":489,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":202,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":126,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":630,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":544,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":397,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":385,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":279,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":208,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":629,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":455,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":84,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":589,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":450,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":30,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":118,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":416,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":593,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":46,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":435,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":563,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":248,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":465,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":574,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":427,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":109,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":152,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":174,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":326,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":119,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":482,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":575,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":207,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":518,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":150,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":199,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":271,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":158,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":475,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":548,"com.google.gson.metrics.PerformanceTest.testDummy":624,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":183,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":162,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":17,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":369,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":401,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":319,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":508,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":429,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":190,"com.google.gson.functional.CollectionTest.testSetDeserialization":257,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":61,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":41,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":505,"com.google.gson.functional.EnumTest.testEnumSet":605,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":567,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":368,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":358,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":420,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":16,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":578,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":173,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":584,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":50,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":382,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":122,"com.google.gson.functional.MapTest.testHashMapDeserialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":541,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":441,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":515,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":599,"com.google.gson.MixedStreamTest.testReadNulls":623,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":235,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":107,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":405,"com.google.gson.functional.MapTest.testSortedMap":472,"com.google.gson.functional.MapTest.testMapSerialization":72,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":135,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":572,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":524,"com.google.gson.functional.MapTest.testSerializeMaps":71,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":97,"com.google.gson.functional.MapTest.testComplexKeysSerialization":231,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":504,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":478,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":106,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":189,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":300,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":297,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":361,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":244,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":402,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":610,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":65,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":362,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":399,"com.google.gson.functional.MapTest.testStringKeyDeserialization":477,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":360,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":525,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":6,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":129,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":75,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":547,"com.google.gson.functional.PrettyPrintingTest.testMap":63,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":542,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":136,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":413,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":31,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":526,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":626,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":335,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":484,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":318,"com.google.gson.functional.CollectionTest.testQueueSerialization":339,"com.google.gson.functional.MapTest.testMapSerializationEmpty":476,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":568,"com.google.gson.functional.MapTest.testMapOfMapSerialization":325,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":432,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":498,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":115,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":10,"com.google.gson.functional.FieldNamingTest.testIdentity":98,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":332,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":370,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":34,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":210,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":39,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":225,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":313,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":532,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":141,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":312,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":333,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":113,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":445,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":421,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":453,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":457,"com.google.gson.functional.MapTest.testMapSubclassSerialization":321,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":587,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":81,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":180,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":506,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":143,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":263,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":560,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":614,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":597,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":217,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":15,"com.google.gson.functional.EnumTest.testEnumSubclass":608,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":116,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":203,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":628,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":110,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":275,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":580,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":534,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":565,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":234,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":160,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":306,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":521,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":393,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":569,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":112,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":447,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":193,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":458,"com.google.gson.MixedStreamTest.testWriteNulls":622,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":103,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":480,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":347,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":188,"com.google.gson.CommentsTest.testParseComments":619,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":637,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":40,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":294,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":372,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":100,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":272,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":579,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":507,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":334,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":471,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":379,"com.google.gson.MixedStreamTest.testReadInvalidState":620,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":449,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":259,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":352,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":527,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":359,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":264,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":555,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":254,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":433,"com.google.gson.functional.MapTest.testMapDeserialization":464,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":428,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":68,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":70,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":146,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":290,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":4,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":323,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":293,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":354,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":245,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":56,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":219,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":47,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":396,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":236,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":513,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":418,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":179,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":80,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":452,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":529,"com.google.gson.functional.PrimitiveTest.testShortSerialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":374,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":602,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":582,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":561,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":221,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":540,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":94,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":607,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":87,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":246,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":461,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":554,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":130,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":502,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":250,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":443,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":154,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":311,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":133,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":592,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":26,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":364,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":167,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":175,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":211,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":408,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":280,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":566,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":214,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":198,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":611,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":238,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":344,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":220,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":509,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":371,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":289,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":434,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":546,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":423,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":439,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":164,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":494,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":535,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":586,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":114,"com.google.gson.JsonArrayTest.testSet":632,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":131,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":268,"com.google.gson.JsonPrimitiveTest.testEquals":635,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":292,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":606,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":288,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":260,"com.google.gson.functional.MapTest.testGeneralMapField":73,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":196,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":517,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":595,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":105,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":276,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":320,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":473,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":328,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":409,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":121,"com.google.gson.MixedStreamTest.testReadMixedStreamed":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":419,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":466,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":556,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":636,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":274,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":343,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":355,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":182,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":570,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":388,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":54,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":467,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":493,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":460,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":132,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":373,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":37,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":139,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":431,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":481,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":634,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":407,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":497,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":604,"com.google.gson.functional.ObjectTest.testNestedDeserialization":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":376,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":378,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":286,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":159,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":386,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":594,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":99,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":363,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":468,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":485,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":14,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":125,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":237,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":251,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":284,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":93,"com.google.gson.functional.ObjectTest.testNullSerialization":394,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":79,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":492,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":462,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":230,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":533,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":148,"com.google.gson.functional.MapTest.testInterfaceTypeMap":229,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":523,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":512,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":163,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":536,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":25,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":514,"com.google.gson.MixedStreamTest.testReadClosed":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":410,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":384,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":549,"com.google.gson.MixedStreamTest.testWriteClosed":309,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":287,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":340,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":166,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":456,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":19,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":267,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":55,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":168,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":200,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":89,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":303,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":573,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":241,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":440,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":381,"com.google.gson.stream.JsonWriterTest.testNumbers":149,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":252,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":596,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":353,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":414,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":191,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":345,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":266,"com.google.gson.functional.CollectionTest.testQueueDeserialization":503,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":559,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":571,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":488,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":598,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":448,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":209,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":425,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":85,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":213,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":338,"com.google.gson.functional.MapTest.testRawMapSerialization":74,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":142,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":438,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":27,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":44,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":78,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":262,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":603,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":356,"com.google.gson.functional.PrimitiveTest.testByteSerialization":124,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":317,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":346,"com.google.gson.ObjectTypeAdapterTest.testSerialize":151,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":390,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":83,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":545,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":145,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":282,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":104,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":95,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":20,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":486,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":616,"com.google.gson.functional.MapTest.testMapWithQuotes":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":52,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":552,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":367,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":528,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":11,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":36,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":51,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":59,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":600,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":12,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":212,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":69,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":117,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":422,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":201,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":415,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":138,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":424,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":585,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":406,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":499,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":519,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":13,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":446,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":239,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":184,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":615,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":82,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":404,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":377,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":537,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":24,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":205,"com.google.gson.functional.ObjectTest.testNestedSerialization":45,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":269,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":111,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":327,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":490,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":316,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":474,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":261,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":5,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":357,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":631,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":42,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":380,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":591,"com.google.gson.JsonPrimitiveTest.testBoolean":633,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":165,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":222,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":147,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":550,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":618,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":218,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":302,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":28,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":336,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":349,"com.google.gson.functional.CollectionTest.testSetSerialization":92,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":8,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":66,"com.google.gson.functional.StringTest.testStringValueSerialization":337,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":38,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":156,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":253,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":495,"com.google.gson.MixedStreamTest.testWriteInvalidState":308,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":516,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":392,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":553,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":273,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":558,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":53,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":186,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":185,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":153,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":442,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":391,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":463,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":365},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"36a905c3-3e6e-11e6-a61d-3f239d1194d0","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"36a953e4-3e6e-11e6-a61d-8f8d60aef8be","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"36a97af5-3e6e-11e6-a61d-6be8c241ed11","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[155],"tindex":"36a9a206-3e6e-11e6-a61d-37da5c1bfc57","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,1,156,157,2,158,159,160,161,162,3,163,164,165,166,167,4,168,169,5,170,171,172,173,174,175,176,7,8,12,177,14,15,16,17,18,178,19,20,21,179,22,180,23,181,182,32,183,33,34,35,184,185,36,37,186,187,188,189,190,191,38,39,192,193,194,40,195,196,197,198,199,200,201,41,202,42,203,204,43,205,44,45,206,207,208,209,46,210,47,211,212,48,213,214,215,216,217,49,50,218,219,220,221,222,54,223,55,224,56,225,226,57,59,60,61,64,65,69,227,228,229,230,73,231,232,76,233,234,77,235,78,236,237,238,239,79,240,241,242,243,80,244,245,246,81,82,247,248,249,250,251,83,84,85,252,253,254,255,256,86,87,90,257,91,92,94,95,96,97,98,258,259,260,261,262,263,264,265,99,100,266,267,268,269,270,271,105,272,273,107,274,108,109,275,276,277,278,279,280,281,282,283,284,134,285,135,286,136,287,288,289,290,291,292,293,294,295,296,297,298,299,300,137,301,302,138,139,303,304,140,305,306,307,142,143,308,309,310,311,150,151],"tindex":"36a9a207-3e6e-11e6-a61d-d7a3a4f6dbcb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[160,164,165,169,13,226,266,267,312,281,282,313,283,284,285],"tindex":"36a9c918-3e6e-11e6-a61d-1bbbd341b92f","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[159,160,161,162,163,164,165,4,168,169,5,13,18,27,314,315,32,33,34,35,316,37,38,192,40,197,200,42,43,45,46,48,317,49,50,318,319,320,224,56,226,65,69,321,71,322,323,227,324,325,229,230,73,74,231,326,232,76,77,235,236,238,239,242,81,82,83,327,328,84,85,329,330,331,332,333,334,335,336,337,252,253,254,255,256,86,338,339,340,341,90,342,91,343,344,259,261,263,264,265,266,268,269,270,271,345,101,346,347,348,349,104,105,350,108,109,351,352,353,134,285,135,354,138,305,355,306,307,356,142,143,357,150],"tindex":"36a9c919-3e6e-11e6-a61d-554b03585694","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"36a9c91a-3e6e-11e6-a61d-7945d2e52da0","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive.isNumber()) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[358,359,360],"tindex":"36a9f02b-3e6e-11e6-a61d-5d7f72b86fc8","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"36aa173c-3e6e-11e6-a61d-39599ff4eda1","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[250,361,362],"tindex":"36aa173d-3e6e-11e6-a61d-09778a432c9a","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,363,1,156,364,157,2,158,159,160,161,162,3,163,164,165,166,167,4,168,169,5,170,365,171,172,173,366,367,174,368,369,370,175,176,6,7,371,8,372,373,374,9,375,10,11,376,12,177,13,14,15,16,17,18,178,19,20,21,179,22,377,180,23,315,181,182,32,183,33,378,379,380,34,35,381,184,185,382,383,384,385,386,387,388,389,316,37,186,187,188,189,190,191,38,390,391,39,192,193,194,40,195,196,197,198,199,200,392,201,393,41,202,394,42,395,203,396,204,397,43,205,44,45,398,206,207,208,209,399,400,46,210,47,211,212,48,213,214,215,216,401,317,217,49,402,403,404,405,406,50,407,408,409,410,411,218,219,51,412,413,52,414,415,416,417,418,220,419,53,420,221,421,422,423,424,425,318,222,426,427,428,429,430,431,432,54,433,434,435,436,437,438,439,440,441,442,319,443,444,320,445,223,446,447,448,449,55,450,451,452,453,454,455,456,224,56,225,226,57,58,59,60,61,62,63,64,65,66,67,68,69,457,70,458,459,460,321,71,461,462,322,463,323,464,227,465,466,467,468,324,325,72,469,228,470,471,472,229,473,230,73,474,74,475,231,476,477,326,478,479,75,232,76,233,234,77,235,78,236,237,238,239,79,240,241,242,243,80,244,245,246,81,82,247,248,249,250,251,480,481,482,83,327,328,84,85,483,329,330,331,332,333,484,485,334,486,335,487,488,489,336,490,491,337,492,493,86,338,87,88,494,495,496,339,89,340,341,90,497,498,342,499,257,91,343,500,92,93,501,502,503,504,505,344,506,94,95,96,97,98,507,258,259,260,261,508,262,509,510,511,512,263,513,514,264,265,99,100,266,267,268,269,270,271,515,345,101,516,517,518,346,347,102,519,520,348,349,103,521,522,523,104,524,105,272,273,525,350,526,106,527,107,528,274,108,109,275,312,276,277,278,279,529,530,531,110,532,533,534,535,536,537,538,351,539,540,352,541,542,543,544,545,546,547,548,111,549,550,551,552,553,353,554,555,556,557,558,559,560,561,562,563,112,564,565,566,113,114,567,568,569,115,570,571,572,573,574,575,576,577,116,578,117,579,118,119,580,581,120,582,583,121,584,122,585,280,586,123,124,125,126,127,128,587,588,589,590,129,591,130,592,593,594,131,132,595,133,596,597,281,282,313,283,284,134,598,285,135,599,286,136,287,288,289,290,291,354,600,601,292,293,294,295,602,296,603,604,297,298,605,606,607,608,609,610,299,300,611,612,613,614,137,301,302,138,139,303,304,140,615,616,305,617,141,355,306,307,618,619,142,620,621,143,622,308,144,623,357,309,310,311,624,625,147,150,626,627,628,629,630,631],"tindex":"36aa655e-3e6e-11e6-a61d-330cd2031ee3","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"36aa8c6f-3e6e-11e6-a61d-fb25a7d1635d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[0,1,2,158,159,160,161,162,3,163,164,165,4,168,169,5,176,7,8,12,14,15,16,17,18,19,20,21,22,23,25,26,27,29,30,314,32,33,34,35,184,36,37,186,187,188,189,191,38,39,192,40,197,200,41,42,43,44,45,207,46,47,211,48,49,50,54,223,55,224,56,225,226,57,59,60,61,64,65,69,227,229,230,73,232,76,77,235,78,236,238,239,79,242,80,246,81,82,83,84,85,252,253,254,255,256,86,87,90,91,92,94,95,96,97,98,259,261,263,264,265,99,100,266,267,268,269,270,271,105,107,108,109,275,276,278,279,281,282,283,284,134,285,135,136,289,292,293,295,296,297,299,137,138,139,140,305,306,307,142,143,150,151],"tindex":"36aa8c70-3e6e-11e6-a61d-053739a33d08","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[632],"tindex":"36aa8c71-3e6e-11e6-a61d-69e620df9837","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"36aa8c72-3e6e-11e6-a61d-2f7cee8e105c","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[49,52,454,224,56,225,226,633,634,635,150,636,637,155,630],"tindex":"36aab383-3e6e-11e6-a61d-85268b7520bf","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"36aab384-3e6e-11e6-a61d-d5dd9431909c","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"36aab385-3e6e-11e6-a61d-150b48845847","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive.isNumber()) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"36aab386-3e6e-11e6-a61d-411c21ecaae8","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[236,238,239,240,241,244,95,96,97],"tindex":"36aada97-3e6e-11e6-a61d-8b4e0c443b4d","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"36ab01a8-3e6e-11e6-a61d-17d516da17bf","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\r'"},"failures":[],"tindex":"36ab01a9-3e6e-11e6-a61d-f37fa83e6277","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"36ab01aa-3e6e-11e6-a61d-8f0c2f3ff307","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"36ab01ab-3e6e-11e6-a61d-43f3ccf916ce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"36ab28bc-3e6e-11e6-a61d-c76145faf23e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"36ab28bd-3e6e-11e6-a61d-81d123a12bd9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"36ab28be-3e6e-11e6-a61d-657026f8f718","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254907883/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":28,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":103,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":522,"com.google.gson.functional.StringTest.testStringValueDeserialization":520,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":35,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":367,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":249,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":189,"com.google.gson.MixedStreamTest.testWriteLenient":127,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":448,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":63,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":44,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":492,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":150,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":508,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":296,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":447,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":538,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":563,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":258,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":112,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":414,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":425,"com.google.gson.functional.ObjectTest.testSingletonLists":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":368,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":541,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":242,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":523,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":626,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":559,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":568,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":382,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":167,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":119,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":299,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":545,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":536,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":54,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":133,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":289,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":595,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":234,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":621,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":75,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":594,"com.google.gson.functional.EnumTest.testEnumCaseMapping":446,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":521,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":616,"com.google.gson.functional.JsonTreeTest.testToJsonTree":104,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":233,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":384,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":431,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":13,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":474,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":360,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":67,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":31,"com.google.gson.functional.ObjectTest.testNullDeserialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":610,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":533,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":161,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":91,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":309,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":250,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":168,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":74,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":392,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":176,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":90,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":385,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":314,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":459,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":381,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":14,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":293,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":273,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":344,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":180,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":471,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":366,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":286,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":449,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":587,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":357,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":51,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":38,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":553,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":605,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":294,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":455,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":287,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":175,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":465,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":156,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":225,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":615,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":223,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":254,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":601,"com.google.gson.metrics.PerformanceTest.testDummy":117,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":542,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":18,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":424,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":554,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":565,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":607,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":373,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":359,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":391,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":613,"com.google.gson.functional.CollectionTest.testSetDeserialization":507,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":564,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":144,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":160,"com.google.gson.functional.EnumTest.testEnumSet":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":278,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":583,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":97,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":620,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":291,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":217,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":301,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":72,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":574,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":247,"com.google.gson.functional.MapTest.testHashMapDeserialization":577,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":372,"com.google.gson.MixedStreamTest.testReadNulls":128,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":202,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":399,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":49,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":572,"com.google.gson.functional.MapTest.testSortedMap":597,"com.google.gson.functional.MapTest.testMapSerialization":593,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":201,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":208,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":284,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":476,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":518,"com.google.gson.functional.MapTest.testSerializeMaps":580,"com.google.gson.functional.MapTest.testComplexKeysSerialization":602,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":143,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":37,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":606,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":482,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":444,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":612,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":411,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":569,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":442,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":136,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":178,"com.google.gson.functional.MapTest.testStringKeyDeserialization":604,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":80,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":316,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":253,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":608,"com.google.gson.functional.PrettyPrintingTest.testMap":134,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":248,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":434,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":495,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":570,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":15,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":118,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":481,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":526,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":354,"com.google.gson.functional.CollectionTest.testQueueSerialization":499,"com.google.gson.functional.MapTest.testMapSerializationEmpty":603,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":279,"com.google.gson.functional.MapTest.testMapOfMapSerialization":592,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":270,"com.google.gson.JavaSerializationTest.testMapIsSerializable":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":362,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":504,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":281,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":631,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":86,"com.google.gson.functional.FieldNamingTest.testIdentity":519,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":555,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":191,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":181,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":102,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":147,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":328,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":236,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":95,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":109,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":525,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":276,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":376,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":383,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":630,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":575,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":312,"com.google.gson.functional.MapTest.testMapSubclassSerialization":579,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":197,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":430,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":146,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":124,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":268,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":435,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":341,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":450,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":567,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":423,"com.google.gson.functional.EnumTest.testEnumSubclass":440,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":290,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":120,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":165,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":235,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":388,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":624,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":295,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":79,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":406,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":238,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":487,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":274,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":486,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":105,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":114,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":473,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":159,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":280,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":222,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":377,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":149,"com.google.gson.MixedStreamTest.testWriteNulls":125,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":576,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":472,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":453,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":467,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":421,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":611,"com.google.gson.CommentsTest.testParseComments":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":83,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":151,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":416,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":292,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":398,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":478,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":207,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":528,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":596,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":329,"com.google.gson.MixedStreamTest.testReadInvalidState":122,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":560,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":428,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":379,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":209,"com.google.gson.JsonParserTest.testParseMixedArray":92,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":246,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":113,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":483,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":395,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":263,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":629,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":364,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":470,"com.google.gson.functional.MapTest.testMapDeserialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":358,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":139,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":89,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":94,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":413,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":334,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":585,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":26,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":412,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":5,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":340,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":166,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":182,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":436,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":345,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":427,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":410,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":484,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":100,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":135,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":65,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":232,"com.google.gson.functional.PrimitiveTest.testShortSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":558,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":68,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":298,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":491,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":269,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":21,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":245,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":515,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":71,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":494,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":196,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":581,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":262,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":76,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":318,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":451,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":374,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":420,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":40,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":132,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":324,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":319,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":10,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":221,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":183,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":556,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":336,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":304,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":81,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":275,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":187,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":155,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":445,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":346,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":502,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":557,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":365,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":417,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":252,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":351,"com.google.gson.stream.JsonWriterTest.testNullStringValue":17,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":370,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":106,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":305,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":277,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":322,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":230,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":25,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":206,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":210,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":153,"com.google.gson.functional.MapTest.testGeneralMapField":599,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":464,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":323,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":389,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":433,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":375,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":56,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":243,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":458,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":300,"com.google.gson.MixedStreamTest.testReadMixedStreamed":131,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":347,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":588,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":228,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":509,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":622,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":540,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":282,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":490,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":635,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":363,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":589,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":394,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":578,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":4,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":84,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":142,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":361,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":454,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":335,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":503,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":419,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":88,"com.google.gson.functional.ObjectTest.testNestedDeserialization":188,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":55,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":173,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":203,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":330,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":489,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":321,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":397,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":219,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":527,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":590,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":422,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":308,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":402,"com.google.gson.JavaSerializationTest.testListIsSerializable":637,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":452,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":512,"com.google.gson.functional.ObjectTest.testNullSerialization":162,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":405,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":393,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":582,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":34,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":237,"com.google.gson.functional.MapTest.testInterfaceTypeMap":33,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":475,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":70,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":19,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":240,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":9,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":443,"com.google.gson.MixedStreamTest.testReadClosed":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":409,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":337,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":73,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":256,"com.google.gson.MixedStreamTest.testWriteClosed":130,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":205,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":501,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":154,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":386,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":426,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":6,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":111,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":185,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":20,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":157,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":500,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":549,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":285,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":551,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":407,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":371,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":193,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":325,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":628,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":261,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":343,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":614,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":110,"com.google.gson.functional.CollectionTest.testQueueDeserialization":514,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":267,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":283,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":532,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":378,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":550,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":32,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":353,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":186,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":460,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":493,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":121,"com.google.gson.functional.MapTest.testRawMapSerialization":600,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":369,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":11,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":171,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":400,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":213,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":27,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":632,"com.google.gson.functional.PrimitiveTest.testByteSerialization":307,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":466,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":566,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":634,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":52,"com.google.gson.ObjectTypeAdapterTest.testSerialize":625,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":251,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":93,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":45,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":16,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":516,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":98,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":529,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":619,"com.google.gson.functional.MapTest.testMapWithQuotes":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":58,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":259,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":531,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":77,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":227,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":87,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":627,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":57,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":562,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":415,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":96,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":184,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":140,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":3,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":350,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":30,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":59,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":352,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":547,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":303,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":573,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":506,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":64,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":69,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":462,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":404,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":194,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":552,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":198,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":571,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":241,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":429,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":85,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":170,"com.google.gson.functional.ObjectTest.testNestedSerialization":172,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":231,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":255,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":457,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":535,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":141,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":101,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":211,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":66,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":129,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":618,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":163,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":190,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":317,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":107,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":355,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":116,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":257,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":617,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":339,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":546,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":12,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":534,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":29,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":390,"com.google.gson.functional.CollectionTest.testSetSerialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":82,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":137,"com.google.gson.functional.StringTest.testStringValueSerialization":537,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":229,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":36,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":220,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":497,"com.google.gson.MixedStreamTest.testWriteInvalidState":126,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":463,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":48,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":260,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":266,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":479,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":61,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":517,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":609,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":195,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":39,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":488,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":62,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":53,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":584,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":214,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":468},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"b25fe818-3f1d-11e6-9c37-c11f46534ee7","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"b260ab69-3f1d-11e6-9c37-716a778bb827","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,5,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,35,90,91,92,93,94,95],"tindex":"b260d27a-3f1d-11e6-9c37-5780db971a58","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[0,2,21,96,97,98,99,100,101],"tindex":"b260f98b-3f1d-11e6-9c37-f1b988693790","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b261209c-3f1d-11e6-9c37-69d9fbff097c","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[44,45,102,46,47,103,104,105,106,107,108,109,110,111,69],"tindex":"b26147ad-3f1d-11e6-9c37-ef3a12927653","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[112],"tindex":"b2620afe-3f1d-11e6-9c37-6be40fae2676","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"b262320f-3f1d-11e6-9c37-851b25060314","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b2625920-3f1d-11e6-9c37-cdb7c7fe5076","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[113],"tindex":"b2625921-3f1d-11e6-9c37-7120f50efc19","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2628032-3f1d-11e6-9c37-7f7a6027f625","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b262a743-3f1d-11e6-9c37-d10c603e7492","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,44,45,102,46,47,147,148,149,150,151,152,153,154,155,156,157,48,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,103,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,0,219,1,220,221,222,2,223,224,225,226,49,227,228,50,51,229,52,53,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,3,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,4,323,324,325,326,327,5,328,104,54,55,329,330,105,331,18,6,19,106,107,332,333,334,20,108,335,336,56,337,338,339,340,57,341,342,58,343,59,344,60,345,346,347,61,348,21,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,62,373,374,63,375,376,22,64,377,378,379,380,381,382,65,383,384,385,386,66,387,388,109,389,390,391,392,393,394,395,396,397,398,110,111,399,400,401,402,403,404,405,406,407,408,409,410,411,412,23,413,414,24,415,67,25,26,416,417,68,418,27,419,28,420,96,421,69,422,423,97,424,7,425,426,98,99,427,428,429,430,431,432,433,434,70,435,436,437,438,439,71,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,29,472,473,474,475,16,476,477,478,479,480,30,481,482,483,484,485,486,487,72,488,73,74,489,75,490,491,492,493,494,495,496,497,498,499,500,501,31,502,503,504,505,506,507,508,509,510,511,512,513,76,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,77,553,78,554,555,556,79,80,81,557,82,83,84,558,85,559,86,87,88,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,89,576,577,578,579,580,581,582,583,584,585,586,32,587,588,589,590,591,592,593,594,595,100,596,597,33,598,34,599,101,600,601,602,603,604,605,606,607,608,35,609,610,611,612,613,614,90,91,615,616,617,618,619,620,621,95,622,623],"tindex":"b262ce54-3f1d-11e6-9c37-bdd564cfe826","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b2634385-3f1d-11e6-9c37-0f37ae51e1ee","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[114,115,116,118,119,120,127,129,133,134,135,136,137,138,139,140,141,142,44,45,102,46,47,48,168,189,193,199,200,103,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,0,219,1,220,221,222,2,223,224,225,226,49,227,228,50,51,52,234,261,281,293,294,302,308,316,322,54,55,329,350,361,364,365,371,374,378,379,381,382,66,387,109,399,401,402,403,404,405,406,407,409,410,411,412,23,413,24,415,67,25,26,417,68,418,27,419,28,420,69,425,427,429,433,434,70,71,456,29,72,488,73,74,489,75,490,491,76,515,516,517,518,519,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,77,553,78,554,555,556,79,80,81,557,82,83,84,558,85,559,86,87,88,570,573,89,576,580,32,33,599,101,35,609,611,616,617,619,620,621,95,622],"tindex":"b2634386-3f1d-11e6-9c37-c77697d5b1ad","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        {\n                            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                {\n                                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                                    } else {\n                                        return ;\n                                    }\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b26391a7-3f1d-11e6-9c37-1d64d4f66a2f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b26391a8-3f1d-11e6-9c37-bb38a7828d74","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[114,115,624,625,626,118,119,120,121,122,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,44,45,102,46,47,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,103,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,0,219,1,220,221,222,2,223,224,225,226,49,227,228,50,51,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,3,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,4,323,324,325,326,327,5,328,104,54,55,330,105,331,18,6,19,106,107,332,333,334,20,108,335,336,56,337,338,339,340,57,341,342,58,343,59,344,60,345,346,347,61,348,21,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,62,373,374,63,375,376,22,64,377,378,379,380,381,382,65,383,384,385,386,66,387,388,109,389,390,391,392,393,394,395,396,397,398,110,111,399,400,401,402,403,404,405,406,407,408,409,410,411,412,23,413,414,24,415,67,25,26,416,417,68,418,27,419,28,420,96,421,69,422,423,97,424,7,425,426,98,99,427,428,430,431,432,433,434,70,435,436,437,438,439,71,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,627,461,462,463,464,465,466,467,468,469,470,471,29,472,473,474,475,16,476,477,478,479,480,30,481,482,483,484,485,486,487,72,488,73,74,489,75,490,491,492,493,494,495,496,497,498,499,500,501,31,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,77,553,78,554,555,556,79,80,81,557,82,83,84,558,85,559,86,87,88,560,561,562,563,564,565,566,567,568,570,571,572,574,575,576,577,578,579,580,581,582,583,584,585,586,32,587,588,589,590,591,592,593,594,595,100,596,597,33,598,34,599,101,600,601,602,603,604,605,606,607,608,35,609,610,611,612,613,614,628,36,629,630,631,615,632,633,634,616,617,618,635,636,637,619,620,621,95,622,623],"tindex":"b263b8b9-3f1d-11e6-9c37-fbb610b6c8e8","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[21,405],"tindex":"b26406da-3f1d-11e6-9c37-7594fdb966f5","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"b26406db-3f1d-11e6-9c37-83b6fae654e6","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2642dec-3f1d-11e6-9c37-f1fdc5a8d42b","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        {\n                            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                {\n                                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                                    } else {\n                                        return ;\n                                    }\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b2642ded-3f1d-11e6-9c37-df4950e4f799","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b26454fe-3f1d-11e6-9c37-db11456aa751","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"b26454ff-3f1d-11e6-9c37-61705a8f99d6","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2647c10-3f1d-11e6-9c37-3b528632e02d","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2647c11-3f1d-11e6-9c37-697990e8c48e","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b264a322-3f1d-11e6-9c37-23c62b7fa4e4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b264a323-3f1d-11e6-9c37-7dea9a131f3d","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b264a324-3f1d-11e6-9c37-39bb1d20bf41","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b264ca35-3f1d-11e6-9c37-75e5698419c4","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b264ca36-3f1d-11e6-9c37-c5e606cf1463","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b264f147-3f1d-11e6-9c37-910c45ad2321","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"b264f148-3f1d-11e6-9c37-b79eb912ff1c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2651859-3f1d-11e6-9c37-23f0e8c3be5a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b265185a-3f1d-11e6-9c37-4b64d57d3cc6","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        {\n                            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                {\n                                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                                    } else {\n                                        return ;\n                                    }\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2653f6b-3f1d-11e6-9c37-7f62cacd1375","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2653f6c-3f1d-11e6-9c37-319cc09af21f","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2653f6d-3f1d-11e6-9c37-e9bef8655d3f","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2653f6e-3f1d-11e6-9c37-cd1c75382285","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"b265667f-3f1d-11e6-9c37-0bc75b35e87b","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2656680-3f1d-11e6-9c37-dfbf46c95980","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2658d91-3f1d-11e6-9c37-1d5196ecd3a7","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2658d92-3f1d-11e6-9c37-4df5880e02c9","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b2658d93-3f1d-11e6-9c37-d13b61eb96c5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"b265dbb4-3f1d-11e6-9c37-276c9760dbaa","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b265dbb5-3f1d-11e6-9c37-fb859c9cd0a3","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"b26602c6-3f1d-11e6-9c37-bdd791d53f24","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b26602c7-3f1d-11e6-9c37-35b55fac45e3","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b26602c8-3f1d-11e6-9c37-dd504d7ae95d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b26629d9-3f1d-11e6-9c37-073c7111fb1e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b26629da-3f1d-11e6-9c37-ab9c26853e43","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b26650eb-3f1d-11e6-9c37-d14f42f85751","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b26677fc-3f1d-11e6-9c37-c92167259b99","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2669f0d-3f1d-11e6-9c37-376694ab4765","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b2669f0e-3f1d-11e6-9c37-eda82219bf89","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        {\n                            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                {\n                                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                                    } else {\n                                        return ;\n                                    }\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b266c61f-3f1d-11e6-9c37-a500f12c464a","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b266c620-3f1d-11e6-9c37-6d01a0ee5d4e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b266c621-3f1d-11e6-9c37-712ffc56e21d","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"b266ed32-3f1d-11e6-9c37-5f71937cffc3","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329838840/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":59,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":46,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":229,"com.google.gson.functional.StringTest.testStringValueDeserialization":591,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":44,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":509,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":542,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":52,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":417,"com.google.gson.MixedStreamTest.testWriteLenient":16,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":420,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":136,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":223,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":308,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":318,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":399,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":574,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":290,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":296,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":106,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":549,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":650,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":428,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":432,"com.google.gson.functional.ObjectTest.testSingletonLists":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":132,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":297,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":230,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":537,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":626,"com.google.gson.stream.JsonWriterTest.testStrings":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":526,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":148,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":516,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":407,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":359,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":576,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":436,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":453,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":599,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":333,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":247,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":570,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":375,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":355,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":531,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":269,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":477,"com.google.gson.functional.EnumTest.testEnumCaseMapping":289,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":19,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":228,"com.google.gson.functional.JsonTreeTest.testToJsonTree":68,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":530,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":365,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":78,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":645,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":115,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":282,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":662,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":507,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":538,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":257,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":315,"com.google.gson.functional.ObjectTest.testNullDeserialization":637,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":153,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":597,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":657,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":212,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":362,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":543,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":181,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":0,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":339,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":410,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":361,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":499,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":305,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":581,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":580,"com.google.gson.JsonParserTest.testParseString":648,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":515,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":204,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":663,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":502,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":585,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":86,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":131,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":557,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":421,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":473,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":646,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":506,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":222,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":394,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":42,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":205,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":602,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":568,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":82,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":186,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":331,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":343,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":403,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":6,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":56,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":479,"com.google.gson.metrics.PerformanceTest.testDummy":634,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":442,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":72,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":277,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":522,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":482,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":135,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":126,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":443,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":338,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":393,"com.google.gson.functional.CollectionTest.testSetDeserialization":446,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":107,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":177,"com.google.gson.functional.EnumTest.testEnumSet":283,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":485,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":560,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":158,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":631,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":504,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":182,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":276,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":354,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":571,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":445,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":577,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":151,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":265,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":208,"com.google.gson.functional.MapTest.testHashMapDeserialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":540,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":512,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":332,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":483,"com.google.gson.MixedStreamTest.testReadNulls":623,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":57,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":220,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":521,"com.google.gson.functional.MapTest.testSortedMap":478,"com.google.gson.functional.MapTest.testMapSerialization":31,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":47,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":659,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":565,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":494,"com.google.gson.functional.MapTest.testSerializeMaps":25,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":96,"com.google.gson.functional.MapTest.testComplexKeysSerialization":40,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":484,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":481,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":92,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":155,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":435,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":264,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":643,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":383,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":149,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":609,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":250,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":642,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":53,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":528,"com.google.gson.functional.MapTest.testStringKeyDeserialization":480,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":633,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":495,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":160,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":43,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":546,"com.google.gson.functional.PrettyPrintingTest.testMap":248,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":325,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":541,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":311,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":112,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":519,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":358,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":496,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":664,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":234,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":592,"com.google.gson.functional.MapTest.testMapSerializationEmpty":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":123,"com.google.gson.functional.CollectionTest.testQueueSerialization":312,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":370,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":455,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":561,"com.google.gson.functional.MapTest.testMapOfMapSerialization":30,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":14,"com.google.gson.JavaSerializationTest.testMapIsSerializable":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":508,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":617,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":102,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":166,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":364,"com.google.gson.functional.FieldNamingTest.testIdentity":97,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":523,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":238,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":412,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":55,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":67,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":171,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":225,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":532,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":356,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":232,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":336,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":199,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":514,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":505,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":145,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":465,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":7,"com.google.gson.functional.MapTest.testMapSubclassSerialization":24,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":341,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":434,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":486,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":291,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":327,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":349,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":555,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":500,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":589,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":392,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":275,"com.google.gson.functional.EnumTest.testEnumSubclass":286,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":202,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":360,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":406,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":191,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":335,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":462,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":573,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":380,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":533,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":170,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":558,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":397,"com.google.gson.stream.JsonWriterTest.testNullName":630,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":70,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":17,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":491,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":527,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":562,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":198,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":140,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":398,"com.google.gson.MixedStreamTest.testWriteNulls":350,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":466,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":88,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":600,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":84,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":154,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":431,"com.google.gson.CommentsTest.testParseComments":625,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":163,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":173,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":429,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":244,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":572,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":463,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":33,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":233,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":639,"com.google.gson.MixedStreamTest.testReadInvalidState":622,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":103,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":142,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":214,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":21,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":665,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":193,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":641,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":497,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":632,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":241,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":13,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":209,"com.google.gson.functional.MapTest.testMapDeserialization":472,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":125,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":253,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":23,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":427,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":454,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":27,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":76,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":259,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":384,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":2,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":389,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":180,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":328,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":433,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":64,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":169,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":32,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":249,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":529,"com.google.gson.functional.PrimitiveTest.testShortSerialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":525,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":261,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":575,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":270,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":363,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":556,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":118,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":539,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":93,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":285,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":310,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":340,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":469,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":552,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":216,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":322,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":423,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":513,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":449,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":655,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":219,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":584,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":451,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":54,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":189,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":386,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":108,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":292,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":627,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":418,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":559,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":415,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":402,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":288,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":60,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":390,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":323,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":524,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":130,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":260,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":120,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":221,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":511,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":74,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":613,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":534,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":579,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":200,"com.google.gson.JsonArrayTest.testSet":629,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":217,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":300,"com.google.gson.JsonPrimitiveTest.testEquals":368,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":258,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":284,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":376,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":373,"com.google.gson.functional.MapTest.testGeneralMapField":37,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":401,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":81,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":587,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":89,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":324,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":137,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":109,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":192,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":304,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":207,"com.google.gson.MixedStreamTest.testReadMixedStreamed":448,"com.google.gson.JsonObjectTest.testDeepCopy":652,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":196,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":371,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":503,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":319,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":357,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":419,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":441,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":563,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":1,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":459,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":128,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":475,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":271,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":468,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":218,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":299,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":294,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":553,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":127,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":601,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":367,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":498,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":616,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":168,"com.google.gson.functional.ObjectTest.testNestedDeserialization":416,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":185,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":334,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":10,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":69,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":268,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":586,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":243,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":476,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":487,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":593,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":274,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":211,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":379,"com.google.gson.JavaSerializationTest.testListIsSerializable":461,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":227,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":424,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":321,"com.google.gson.functional.ObjectTest.testNullSerialization":178,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":62,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":607,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":470,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":5,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":36,"com.google.gson.functional.MapTest.testInterfaceTypeMap":34,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":493,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":326,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":73,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":654,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":535,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":287,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":307,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":329,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":382,"com.google.gson.MixedStreamTest.testReadClosed":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":110,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":267,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":547,"com.google.gson.MixedStreamTest.testWriteClosed":353,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":12,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":314,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":174,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":517,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":278,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":246,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":143,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":77,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":175,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":313,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":438,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":566,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":295,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":381,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":317,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":133,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":604,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":98,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":588,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":195,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":501,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":79,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":156,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":245,"com.google.gson.functional.CollectionTest.testQueueDeserialization":621,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":197,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":564,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":596,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":141,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":439,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":28,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":122,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":306,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":414,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":309,"com.google.gson.functional.MapTest.testRawMapSerialization":39,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":348,"com.google.gson.JsonParserTest.testParseReader":647,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":510,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":452,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":58,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":183,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":374,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":263,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":344,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":83,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":147,"com.google.gson.functional.PrimitiveTest.testByteSerialization":210,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":346,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":49,"com.google.gson.ObjectTypeAdapterTest.testSerialize":450,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":544,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":224,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":4,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":279,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":594,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":624,"com.google.gson.functional.MapTest.testMapWithQuotes":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":113,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":550,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":595,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":157,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":590,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":167,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":65,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":111,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":105,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":605,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":272,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":413,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":119,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":203,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":636,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":91,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":121,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":226,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":293,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":578,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":150,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":618,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":489,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":273,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":61,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":240,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":610,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":342,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":644,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":520,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":536,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":638,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":628,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":165,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":660,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":408,"com.google.gson.functional.ObjectTest.testNestedSerialization":184,"com.google.gson.JsonObjectTest.testAddingStringProperties":653,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":194,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":303,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":598,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":298,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":38,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":22,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":237,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":347,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":352,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":458,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":179,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":603,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":583,"com.google.gson.JsonPrimitiveTest.testBoolean":366,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":75,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":391,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":20,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":548,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":388,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":409,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":437,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":661,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":235,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":87,"com.google.gson.functional.CollectionTest.testSetSerialization":320,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":162,"com.google.gson.functional.StringTest.testStringValueSerialization":236,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":251,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":48,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":99,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":377,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":614,"com.google.gson.MixedStreamTest.testWriteInvalidState":351,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":488,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":176,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":551,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":90,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":554,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":117,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":456,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":152,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":649,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":426,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":266,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":134,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":50,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":471,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":85,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":611},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[0,1],"tindex":"86de498e-3e4c-11e6-b598-394c92df9e41","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[2,3,4,5,6,7,8],"tindex":"86de97af-3e4c-11e6-b598-5daf9ee5d316","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"86debec0-3e4c-11e6-b598-f759a18e2418","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[9,10,11,12],"tindex":"86debec1-3e4c-11e6-b598-350b35d73d63","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (serialization) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    if (serialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    if (deserialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    return result;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86dee5d2-3e4c-11e6-b598-1f39ccfefe8d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[5,6,13,14,15,7,16],"tindex":"86dee5d3-3e4c-11e6-b598-db46851b51bc","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"86dee5d4-3e4c-11e6-b598-250ca9422542","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"86df0ce5-3e4c-11e6-b598-ed2085fc7e68","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,9,46,47,11,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,2,67,68,69,70,71,72,3,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,4,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,5,192,193,6,194,195,13,196,197,14,198,15,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,7,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,0,268,269,1,270,271,272,273,274,275,276,277,8,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,16,352,353,354,355,356,357,358,359,360,361,362,363,364],"tindex":"86df0ce6-3e4c-11e6-b598-31c5dd0ac90b","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            if (!lenient) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[66,2,67,68,113,365,148,343,366,367,368,369,370,362,371],"tindex":"86df33f7-3e4c-11e6-b598-9df61aad7de9","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"86df33f8-3e4c-11e6-b598-4f2f1c7a2fec","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"86df5b09-3e4c-11e6-b598-f13f00e8cc58","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"86df5b0a-3e4c-11e6-b598-37bd7766916c","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"86df821b-3e4c-11e6-b598-fb16345b9cfa","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[17,18,372,21,373,22,374,28,375,34,36,37,40,44,45,46,47,10,11,12,376,48,52,53,377,378,55,56,57,58,59,379,60,61,62,380,381,63,382,64,383,384,65,66,2,67,68,69,70,71,72,3,73,74,75,385,386,76,77,78,89,387,90,93,94,95,96,97,98,99,100,101,102,103,105,106,107,388,389,390,118,391,128,138,143,392,148,151,152,153,154,155,393,156,394,395,159,161,162,169,396,397,170,171,172,398,399,173,400,401,174,402,403,175,404,177,405,179,406,407,182,408,183,184,409,186,410,411,187,412,188,189,413,190,414,415,416,417,418,220,419,221,222,223,224,226,227,420,421,422,423,424,237,425,238,239,240,426,241,242,243,244,245,246,249,250,254,255,427,428,258,259,429,260,262,264,430,272,431,274,275,276,277,8,432,278,279,280,433,281,434,282,287,435,292,436,437,293,294,438,439,295,440,441,297,442,299,300,301,443,444,445,302,305,306,308,310,316,446,318,320,327,330,331,333,335,337,447,338,339,340,341,342,343,348,349,351,353,448,449,354,450],"tindex":"86df821c-3e4c-11e6-b598-995388ddec86","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            if ((!serialize) && (!deserialize)) {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17,18,19,21,22,24,25,26,27,28,29,30,34,36,37,39,40,42,44,45,47,48,49,50,51,57,59,60,61,63,65,2,72,3,73,76,77,79,80,83,84,86,87,4,89,91,98,99,100,101,102,108,109,110,112,113,114,115,116,119,121,122,123,124,125,126,129,132,133,135,136,137,139,140,141,142,144,146,147,148,151,152,153,154,155,156,157,158,159,163,164,168,169,170,172,173,174,175,179,182,184,187,189,190,192,193,195,208,221,222,228,229,230,231,232,233,234,235,236,237,238,239,241,242,250,254,256,265,266,267,0,268,269,1,270,271,273,8,283,284,285,286,287,288,289,290,293,296,297,298,299,300,301,302,303,304,305,306,307,451,452,453,308,309,312,314,315,316,317,318,319,322,323,324,325,326,327,328,330,331,333,334,341,342,343,454,347,455,456,457,458,348,349,352,354,357,358,361],"tindex":"86dfa92d-3e4c-11e6-b598-15006e4cdfce","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28,34,36,44,67,69,70,71,72,73,74,75,77,78,87,91,99,118,255,256,258,259,263,264,315],"tindex":"86dfa92e-3e4c-11e6-b598-a9694717be88","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[459,460,461,17,18,462,19,20,463,372,21,373,22,464,374,465,466,467,468,24,25,469,470,26,471,27,472,28,473,474,475,476,29,30,31,477,375,32,33,478,34,35,36,37,38,39,479,40,41,480,42,481,482,43,44,45,9,46,47,483,10,11,12,376,48,484,485,51,486,52,487,53,377,54,378,55,56,57,58,59,379,60,61,62,380,381,63,382,64,383,384,65,66,2,67,68,69,70,71,72,3,73,74,75,385,386,76,77,78,79,80,488,81,82,83,84,85,489,490,86,87,88,491,492,493,4,494,89,387,90,495,91,496,92,497,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,498,108,109,110,499,388,389,111,500,112,113,501,114,502,115,116,390,503,117,504,118,505,119,120,121,122,123,391,124,506,125,126,507,127,508,128,129,130,131,509,132,510,511,133,512,134,135,513,136,137,514,138,139,140,141,142,143,515,516,144,145,365,146,517,518,147,392,148,519,520,521,151,152,153,154,155,393,156,157,394,158,522,523,395,159,160,161,524,162,163,164,525,165,526,166,167,168,169,396,397,170,171,172,398,399,173,400,401,174,402,403,175,404,527,177,405,179,406,180,407,181,182,408,183,184,185,409,186,410,411,528,187,412,188,189,413,190,414,415,416,417,529,530,531,191,532,5,533,534,535,536,537,192,538,539,193,540,541,542,543,544,545,546,6,194,547,548,549,550,551,195,552,13,196,553,554,197,555,556,14,557,198,15,558,559,199,200,560,561,562,201,563,564,565,566,567,568,569,570,202,571,203,572,204,205,573,574,206,575,576,207,577,208,578,418,579,209,210,211,212,213,214,7,580,581,582,215,583,216,584,585,586,217,218,587,219,588,589,220,590,419,221,222,223,224,225,226,227,591,228,229,230,231,232,592,593,233,594,234,595,596,597,235,598,599,236,420,421,422,423,424,600,601,602,237,425,603,238,239,604,240,426,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,427,428,256,605,257,258,259,429,260,261,262,263,606,264,430,265,266,267,0,268,269,1,270,607,271,272,431,273,274,275,276,277,8,432,278,279,280,433,281,434,282,283,284,285,286,608,609,287,435,288,289,290,291,292,436,437,293,294,438,439,295,610,296,440,441,297,442,298,299,300,301,611,443,444,445,612,302,303,304,305,306,308,309,310,311,613,614,615,312,313,314,315,316,616,617,317,618,446,318,319,619,320,321,620,621,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,447,338,339,340,341,342,343,344,345,346,347,348,622,349,351,16,623,352,353,448,449,624,354,355,356,357,625,358,359,360,450,626],"tindex":"86dfa92f-3e4c-11e6-b598-f73cf4c3c821","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[19,208],"tindex":"86dfd040-3e4c-11e6-b598-df553bf0dfe0","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86dfd041-3e4c-11e6-b598-1fa392ff0608","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"86dfd042-3e4c-11e6-b598-41a24168f8a5","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"86dff753-3e4c-11e6-b598-6732bec9f08f","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            if (!lenient) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"86dff754-3e4c-11e6-b598-0141d34502b0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"86dff755-3e4c-11e6-b598-51a4108cb680","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[118],"tindex":"86dff756-3e4c-11e6-b598-435a11ac8f71","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86dff757-3e4c-11e6-b598-9540f4fa1813","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"86dff758-3e4c-11e6-b598-c5871c7ac22d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"86e01e69-3e4c-11e6-b598-8f9119e0756f","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"86e01e6a-3e4c-11e6-b598-3f3f3ae2178d","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"86e01e6b-3e4c-11e6-b598-a9fb9db3b116","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86e01e6c-3e4c-11e6-b598-3f14dd9aa462","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[459,460,461,465,468,469,470,26,471,27,472,28,474,475,476,31,477,375,32,478,34,35,36,37,38,479,40,41,480,42,481,482,43,44,70,3,385,88,492,98,99,100,101,102,103,105,107,114,518,521,158,523,525,168,172,527,186,189,414,576,220,590,419,221,222,600,601,237,425,603,241,242,244,245,246,249,254,255,258,259,264,272,274,275,276,278,279,280,281,282,283,284,285,286,608,288,299,308,309,613,614,312,313,315,616,617,317,446,619,321,621,335,447,339,341,342,344,345,16,352,625],"tindex":"86e01e6d-3e4c-11e6-b598-b1eb1e309569","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"86e06c8e-3e4c-11e6-b598-91e70e1e11e7","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"86e06c8f-3e4c-11e6-b598-8fe072ea5411","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"86e093a0-3e4c-11e6-b598-ad2552a3c98d","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.WildcardType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[25,28,38,44,45,46,11,49,66,2,67,68,69,70,71,74,75,78,87,150,176,223,224,225,226,227,245,246,255,256,258,259,260,261,262,263,264,273,333,336,344,345,346,348,349,350,351,16,352,353,627],"tindex":"86e093a1-3e4c-11e6-b598-97cf407110a8","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[119,121,122,141,189],"tindex":"86e093a2-3e4c-11e6-b598-37ddba2bda41","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[628],"tindex":"86e093a3-3e4c-11e6-b598-3d8d41a5d784","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"86e0bab4-3e4c-11e6-b598-cb1e7ac7f6ce","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"86e0bab5-3e4c-11e6-b598-3b733ab6bc0d","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"86e0e1c6-3e4c-11e6-b598-b7118f252f19","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"86e0e1c7-3e4c-11e6-b598-9f7a55525f4c","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            if (serialization) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    if (serialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    if (deserialization) {\n                        result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                        result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n                    } \n                    return result;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[200],"tindex":"86e0e1c8-3e4c-11e6-b598-ab2e87987e92","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"86e0e1c9-3e4c-11e6-b598-4923574c88fa","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"86e108da-3e4c-11e6-b598-4d3bd41daaa7","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"86e108db-3e4c-11e6-b598-f14996822ec5","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[98,99,100,101,102,177,189,417,330,331,450],"tindex":"86e108dc-3e4c-11e6-b598-ad5be478e32b","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"86e108dd-3e4c-11e6-b598-41074135b8d7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            if ((!serialize) && (!deserialize)) {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[629],"tindex":"86e12fee-3e4c-11e6-b598-b1025f22bd89","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[49,50,134,145,149,150,178,225,257,261,263,350,627],"tindex":"86e12fef-3e4c-11e6-b598-8b7595d5e093","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[630],"tindex":"86e12ff0-3e4c-11e6-b598-37c3b0ebcbb7","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86e15701-3e4c-11e6-b598-fd1b5e4559cf","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[631,632,633],"tindex":"86e15702-3e4c-11e6-b598-0169881ab124","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"86e15703-3e4c-11e6-b598-698b3af692f8","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86e15704-3e4c-11e6-b598-2d154804be16","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"86e15705-3e4c-11e6-b598-b3459bf9636f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[634,17,18,635,19,20,463,372,21,373,22,464,374,465,23,466,467,468,24,25,469,470,26,471,27,472,28,473,474,475,476,29,30,31,477,375,32,33,478,34,35,36,37,38,39,479,40,41,480,42,481,482,43,44,45,9,46,47,483,10,11,12,376,48,49,50,484,485,51,486,52,487,53,377,54,378,55,56,57,58,59,379,60,61,62,380,381,63,382,64,383,384,66,2,67,68,69,70,71,72,3,73,74,75,385,386,76,77,78,79,80,488,81,82,83,84,85,489,490,86,87,88,491,492,493,4,494,89,387,90,495,91,496,92,497,93,94,95,96,97,103,104,105,106,107,498,108,109,110,499,388,389,111,500,112,113,501,114,502,115,116,390,503,117,504,118,505,119,120,121,122,123,391,124,506,125,126,507,127,508,128,129,130,131,509,132,510,511,133,512,134,135,513,136,137,514,138,139,140,141,142,143,515,516,144,145,365,146,517,518,147,392,148,149,519,520,521,150,151,152,153,154,155,393,156,157,394,158,522,523,395,159,160,161,524,162,163,164,525,165,526,166,167,168,169,396,397,170,171,172,398,399,173,400,401,174,402,403,175,176,404,527,177,405,178,179,636,406,180,407,181,182,408,183,184,185,409,186,410,411,528,637,187,412,188,189,413,190,414,415,416,417,529,530,531,191,532,5,533,534,535,536,537,192,538,539,193,540,541,542,543,544,545,546,6,194,547,548,549,550,551,195,552,13,196,553,554,197,555,556,14,557,198,15,558,559,199,200,560,561,562,201,563,564,565,566,567,568,569,570,202,571,203,572,204,205,573,574,206,575,576,207,577,208,578,418,579,209,210,211,212,213,214,7,580,581,582,215,583,216,584,585,586,217,218,587,219,588,589,220,590,419,221,222,223,224,225,226,227,591,228,229,230,231,232,592,593,233,594,234,595,596,597,235,598,599,236,420,421,422,423,424,600,601,602,237,425,603,238,239,604,240,426,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,427,428,256,605,257,258,259,429,260,261,262,263,606,264,430,265,266,267,0,268,269,1,270,607,271,272,431,273,274,275,276,277,8,432,278,279,280,433,281,638,434,282,283,284,285,286,608,609,287,435,288,289,290,291,292,436,437,293,294,438,439,295,610,296,440,441,297,442,298,299,300,301,611,443,444,445,612,302,303,304,305,306,308,309,310,311,613,614,615,312,313,314,315,316,616,617,317,618,446,318,319,619,320,321,620,322,621,323,324,325,326,327,328,329,330,331,332,333,334,639,335,336,337,447,338,339,340,341,342,343,347,348,622,640,349,350,351,16,623,352,353,448,449,624,354,355,356,357,625,358,359,360,361,362],"tindex":"86e17e16-3e4c-11e6-b598-bd6679925b60","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[634,17,18,635,19,20,463,372,21,373,22,464,374,465,23,466,467,468,24,25,469,470,26,471,27,472,28,473,474,475,476,29,30,31,477,375,32,33,478,34,35,36,37,38,39,479,40,41,480,42,481,482,43,44,45,9,46,47,483,10,11,12,376,48,49,50,484,485,51,486,52,487,53,377,54,378,55,56,57,58,59,379,60,61,62,380,381,63,382,64,383,384,66,2,67,68,69,70,71,72,3,73,74,75,385,386,76,77,78,79,80,488,81,82,83,84,85,489,490,86,87,88,491,492,493,4,494,89,387,90,495,91,496,92,497,93,94,95,96,97,103,104,105,106,107,498,108,109,110,499,388,389,111,500,112,113,501,114,502,115,116,390,503,117,504,118,505,119,120,121,122,123,391,124,506,125,126,507,127,508,128,129,130,131,509,132,510,511,133,512,134,135,513,136,137,514,138,139,140,141,142,143,515,516,144,145,365,146,517,518,147,392,148,149,519,520,521,150,151,152,153,154,155,393,156,157,394,158,522,523,395,159,160,161,524,162,163,164,525,165,526,166,167,168,169,396,397,170,171,172,398,399,173,400,401,174,402,403,175,176,404,527,177,405,178,179,636,406,180,407,181,182,408,183,184,185,409,186,410,411,528,637,187,412,188,189,413,190,414,415,416,417,529,530,531,191,532,5,533,534,535,536,537,192,538,539,193,540,541,542,543,544,545,546,6,194,547,548,549,550,551,195,552,13,196,553,554,197,555,556,14,557,198,15,558,559,199,200,560,561,562,201,563,564,565,566,567,568,569,570,202,571,203,572,204,205,573,574,206,575,576,207,577,208,578,418,579,209,210,211,212,213,214,7,580,581,582,215,583,216,584,585,586,217,218,587,219,588,589,220,590,419,221,222,223,224,225,226,227,591,228,229,230,231,232,592,593,233,594,234,595,596,597,235,598,599,236,420,421,422,423,424,600,601,602,237,425,603,238,239,604,240,426,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,427,428,256,605,257,258,259,429,260,261,262,263,606,264,430,265,266,267,0,268,269,1,270,607,271,272,431,273,274,275,276,277,8,432,278,279,280,433,281,638,434,282,283,284,285,286,608,609,287,435,288,289,290,291,292,436,437,293,294,438,439,295,610,296,440,441,297,442,298,299,300,301,611,443,444,445,612,302,303,304,305,306,308,309,310,311,613,614,615,312,313,314,315,316,616,617,317,618,446,318,319,619,320,321,620,322,621,323,324,325,326,327,328,329,330,331,332,333,334,639,335,336,337,447,338,339,340,341,342,343,347,348,622,640,349,350,351,16,623,352,353,448,449,624,354,355,356,357,625,358,359,360,361,362],"tindex":"86e1a527-3e4c-11e6-b598-55a160d9f2e4","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"86e1cc38-3e4c-11e6-b598-3d51df71b677","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"86e1cc39-3e4c-11e6-b598-9b42aeadd990","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[641],"tindex":"86e1cc3a-3e4c-11e6-b598-d9d016f6b7cc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"86e1f34b-3e4c-11e6-b598-13d2e761fd2d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            return ((T)(fromJson(json, typeOfT)));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"86e1f34c-3e4c-11e6-b598-0349a065888a","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[423,642,643],"tindex":"86e1f34d-3e4c-11e6-b598-39e214540065","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"86e21a5e-3e4c-11e6-b598-013a57b698fe","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"86e21a5f-3e4c-11e6-b598-d170bd54efa8","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[641],"tindex":"86e21a60-3e4c-11e6-b598-7f78751ae0a9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[292,436,437,293,294,438,439,295,644,645],"tindex":"86e24071-3e4c-11e6-b598-47b58122f22b","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[463,372,21,373,22,464,374,481,44,46,376,49,50,65,66,2,67,68,69,70,71,74,75,78,499,117,148,522,159,160,161,165,220,221,222,223,224,226,227,420,421,422,423,424,604,245,246,605,261,273,638,646,333,336,647,648,343,344,369,361,649,650,651,642,370,652,653,362,654,655,656,627,657,658,659],"tindex":"86e24072-3e4c-11e6-b598-75a54db98a4d","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17,18,19,20,21,22,24,25,26,27,28,29,30,31,33,34,36,37,39,40,42,43,44,45,46,47,11,48,52,53,55,56,57,58,59,60,61,62,63,64,65,66,2,67,68,69,70,71,72,3,73,74,75,76,77,78,79,80,83,84,85,86,87,88,4,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,114,123,128,135,137,143,148,151,152,153,154,155,156,157,158,159,161,162,163,168,169,170,171,172,173,174,175,177,179,182,183,184,186,187,188,189,190,194,196,206,214,216,218,220,221,222,223,224,226,227,233,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,256,272,274,275,276,277,8,278,279,280,281,282,283,284,285,286,287,288,292,293,294,295,297,298,299,300,301,302,303,304,305,306,660,307,451,452,661,662,663,664,453,308,309,310,311,312,313,314,315,316,317,318,319,320,321,327,330,331,333,335,338,339,340,341,342,343,344,348,349,16,352,354,450],"tindex":"86e26783-3e4c-11e6-b598-e78e4c841a25","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"86e26784-3e4c-11e6-b598-39cb75e6df77","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[19,20,463,372,21,373,22,464,374,23,466,468,24,25,27,28,473,475,30,477,375,34,36,37,40,480,42,44,46,48,55,58,382,64,65,2,69,70,71,72,73,74,75,386,76,77,78,79,80,488,81,82,83,84,85,489,490,86,87,88,491,492,493,4,494,89,387,90,495,91,496,92,497,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,113,114,115,503,118,129,131,133,512,135,513,136,137,139,141,142,144,365,518,147,148,521,152,153,154,155,156,157,394,158,522,523,395,159,160,161,524,162,163,164,525,165,526,166,167,168,169,396,397,170,171,172,398,399,173,400,401,175,179,406,407,182,183,184,410,187,412,413,416,5,537,538,193,6,194,13,196,554,197,14,15,201,203,204,205,206,579,211,214,7,215,583,216,217,218,220,419,221,222,223,224,225,226,227,229,231,233,594,420,600,601,602,237,425,238,604,240,426,241,243,244,245,246,247,248,249,250,251,252,253,254,255,428,256,605,257,258,259,261,264,265,266,267,0,268,269,1,270,607,271,272,273,274,275,276,8,278,279,280,638,434,285,286,287,435,288,289,292,436,437,294,295,298,299,443,444,445,302,303,304,305,306,308,309,310,311,313,314,316,317,618,318,320,322,323,324,325,326,328,333,334,335,336,337,447,338,339,340,341,342,343,344,345,348,349,448,449,624,354,355,356,357,358,359,360,665,450],"tindex":"86e26785-3e4c-11e6-b598-fb85f2401014","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"86e26786-3e4c-11e6-b598-79a41128bda2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"86e28e97-3e4c-11e6-b598-592c02cf1687","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"86e28e98-3e4c-11e6-b598-8da698aefd25","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"86e28e99-3e4c-11e6-b598-d54a06eafc35","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[273,336],"tindex":"86e28e9a-3e4c-11e6-b598-0f9373191a95","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"86e28e9b-3e4c-11e6-b598-d74a912110aa","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"86e2b5ac-3e4c-11e6-b598-fd61569cd274","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"86e2b5ad-3e4c-11e6-b598-e7c8807ea500","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"86e2b5ae-3e4c-11e6-b598-17128ce17221","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"86e2b5af-3e4c-11e6-b598-ad5126fc6573","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239613972/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":82,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":569,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":73,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":222,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":557,"com.google.gson.functional.StringTest.testStringValueDeserialization":673,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":174,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":642,"com.google.gson.JsonPrimitiveTest.testDeepCopy":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":704,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":614,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":369,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":72,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":88,"com.google.gson.MixedStreamTest.testWriteLenient":367,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":575,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":269,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":387,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":79,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":54,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":239,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":648,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":127,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":138,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":417,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":621,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":515,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":532,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":33,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":97,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":572,"com.google.gson.functional.ObjectTest.testSingletonLists":52,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":266,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":223,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":461,"com.google.gson.stream.JsonWriterTest.testStrings":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":505,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":78,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":710,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":62,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":429,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":340,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":530,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":92,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":205,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":680,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":561,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":17,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":455,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":643,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":321,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":432,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":604,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":157,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":320,"com.google.gson.functional.EnumTest.testEnumCaseMapping":137,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":114,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":221,"com.google.gson.functional.JsonTreeTest.testToJsonTree":295,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":603,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":498,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":383,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":256,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":336,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":308,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":700,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":492,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":289,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":236,"com.google.gson.functional.ObjectTest.testNullDeserialization":670,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":83,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":547,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":678,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":60,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":580,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":551,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":655,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":615,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":669,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":528,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":511,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":155,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":364,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":65,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":121,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":427,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":28,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":657,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":656,"com.google.gson.JsonParserTest.testParseString":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":709,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":473,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":542,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":660,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":146,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":216,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":495,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":628,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":89,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":451,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":640,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":46,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":699,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":102,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":538,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":110,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":173,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":474,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":490,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":641,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":342,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":437,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":0,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":58,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":130,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":587,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":326,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":374,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":463,"com.google.gson.metrics.PerformanceTest.testDummy":595,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":3,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":178,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":391,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":692,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":501,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":330,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":268,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":486,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":264,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":419,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":424,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":86,"com.google.gson.functional.CollectionTest.testSetDeserialization":81,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":362,"com.google.gson.functional.EnumTest.testEnumSet":131,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":394,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":682,"com.google.gson.JsonStreamParserTest.testIterator":570,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":633,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":278,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":696,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":214,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":645,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":105,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":651,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":152,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":232,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":202,"com.google.gson.functional.MapTest.testHashMapDeserialization":599,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":612,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":686,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":496,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":597,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":672,"com.google.gson.MixedStreamTest.testReadNulls":714,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":183,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":219,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":563,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":299,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":344,"com.google.gson.functional.MapTest.testSortedMap":323,"com.google.gson.functional.MapTest.testMapSerialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":220,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":548,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":48,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":638,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":443,"com.google.gson.functional.MapTest.testSerializeMaps":162,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":405,"com.google.gson.functional.MapTest.testComplexKeysSerialization":172,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":681,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":329,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":553,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":446,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":7,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":85,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":358,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":292,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":25,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":590,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":598,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":194,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":516,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":533,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":546,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":371,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":397,"com.google.gson.functional.MapTest.testStringKeyDeserialization":328,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":502,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":480,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":331,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":618,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":244,"com.google.gson.functional.PrettyPrintingTest.testMap":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":613,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":399,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":684,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":115,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":445,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":227,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":674,"com.google.gson.functional.CollectionTest.testQueueSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":261,"com.google.gson.functional.MapTest.testMapSerializationEmpty":327,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":517,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":123,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":634,"com.google.gson.functional.MapTest.testMapOfMapSerialization":167,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":469,"com.google.gson.JavaSerializationTest.testMapIsSerializable":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":702,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":349,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":11,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":471,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":506,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":297,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":224,"com.google.gson.functional.FieldNamingTest.testIdentity":406,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":567,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":365,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":16,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":67,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":294,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":373,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":393,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":452,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":606,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":433,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":225,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":500,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":12,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":708,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":697,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":593,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":310,"com.google.gson.functional.MapTest.testMapSubclassSerialization":161,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":479,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":5,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":38,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":683,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":246,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":284,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":626,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":688,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":665,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":694,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":77,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":32,"com.google.gson.functional.EnumTest.testEnumSubclass":134,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":644,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":61,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":430,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":605,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":363,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":529,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":647,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":607,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":141,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":630,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":13,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":332,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":119,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":441,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":291,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":341,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":635,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":15,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":272,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":53,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":450,"com.google.gson.MixedStreamTest.testWriteNulls":588,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":307,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":353,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":145,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":31,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":84,"com.google.gson.CommentsTest.testParseComments":303,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":513,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":98,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":280,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":338,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":375,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":646,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":485,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":226,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":600,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":601,"com.google.gson.MixedStreamTest.testReadInvalidState":712,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":360,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":478,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":49,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":434,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":531,"com.google.gson.JsonParserTest.testParseMixedArray":524,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":566,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":200,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":544,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":447,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":196,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":540,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":465,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":9,"com.google.gson.JsonArrayTest.testRemove":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":265,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":653,"com.google.gson.functional.MapTest.testMapDeserialization":315,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":263,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":459,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":449,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":96,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":122,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":535,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":164,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":181,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":357,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":249,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":26,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":520,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":160,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":107,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":398,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":668,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":184,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":247,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":257,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":37,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":534,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":386,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":322,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":337,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":602,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":366,"com.google.gson.functional.PrimitiveTest.testShortSerialization":555,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":649,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":159,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":576,"com.google.gson.JsonParserTest.testParseEmptyString":574,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":627,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":290,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":413,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":611,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":402,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":133,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":512,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":80,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":4,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":287,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":312,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":624,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":241,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":482,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":91,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":564,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":578,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":497,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":113,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":549,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":663,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":659,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":203,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":372,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":111,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":250,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":407,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":554,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":581,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":41,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":39,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":420,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":631,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":70,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":57,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":185,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":230,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":412,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":503,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":355,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":703,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":617,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":698,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":706,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":345,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":381,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":608,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":476,"com.google.gson.JsonArrayTest.testSet":521,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":594,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":483,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":176,"com.google.gson.JsonPrimitiveTest.testEquals":583,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":356,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":76,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":50,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":56,"com.google.gson.functional.MapTest.testGeneralMapField":170,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":436,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":536,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":662,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":243,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":418,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":270,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":324,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":189,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":251,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":650,"com.google.gson.MixedStreamTest.testReadMixedStreamed":112,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":508,"com.google.gson.JsonObjectTest.testDeepCopy":518,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":316,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":494,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":526,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":100,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":117,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":240,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":2,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":636,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":158,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":577,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":300,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":414,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":317,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":193,"com.google.gson.JsonArrayTest.testDeepCopy":522,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":281,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":484,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":40,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":625,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":701,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":354,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":44,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":582,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":151,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":693,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":690,"com.google.gson.functional.ObjectTest.testNestedDeserialization":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":282,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":175,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":396,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":74,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":379,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":661,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":392,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":318,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":370,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":525,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":675,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":333,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":477,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":384,"com.google.gson.JavaSerializationTest.testListIsSerializable":302,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":390,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":401,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":351,"com.google.gson.functional.ObjectTest.testNullSerialization":589,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":385,"com.google.gson.stream.JsonWriterTest.testDoubles":558,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":454,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":313,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":169,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":460,"com.google.gson.functional.MapTest.testInterfaceTypeMap":168,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":442,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":245,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":180,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":609,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":42,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":135,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":24,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":687,"com.google.gson.MixedStreamTest.testReadClosed":713,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":252,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":154,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":619,"com.google.gson.MixedStreamTest.testWriteClosed":423,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":75,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":235,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":18,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":711,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":34,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":179,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":298,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":197,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":218,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":182,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":212,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":347,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":94,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":43,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":639,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":409,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":23,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":238,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":527,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":537,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":267,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":448,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":8,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":586,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":664,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":201,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":695,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":87,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":142,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":339,"com.google.gson.functional.CollectionTest.testQueueDeserialization":352,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":468,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":637,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":677,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":47,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":671,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":273,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":66,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":260,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":29,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":69,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":233,"com.google.gson.functional.MapTest.testRawMapSerialization":171,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":283,"com.google.gson.JsonParserTest.testParseReader":509,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":705,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":204,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":21,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":395,"com.google.gson.JsonPrimitiveTest.testExponential":585,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":51,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":592,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":304,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":144,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":231,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":571,"com.google.gson.functional.PrimitiveTest.testByteSerialization":654,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":208,"com.google.gson.ObjectTypeAdapterTest.testSerialize":368,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":27,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":616,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":388,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":148,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":403,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":35,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":431,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":487,"com.google.gson.functional.MapTest.testMapWithQuotes":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":254,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":622,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":676,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":277,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":359,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":425,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":507,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":541,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":361,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":491,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":30,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":68,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":543,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":472,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":667,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":59,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":255,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":259,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":652,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":591,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":489,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":439,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":271,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":186,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":377,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":689,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":6,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":685,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":453,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":610,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":504,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":63,"com.google.gson.functional.ObjectTest.testNestedSerialization":215,"com.google.gson.internal.LinkedTreeMapTest.testClear":288,"com.google.gson.JsonObjectTest.testAddingStringProperties":519,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":177,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":464,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":679,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":198,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":325,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":206,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":192,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":573,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":118,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":285,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":126,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":213,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":309,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":481,"com.google.gson.JsonPrimitiveTest.testBoolean":579,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":382,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":108,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":428,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":596,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":620,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":106,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":93,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":228,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":147,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":109,"com.google.gson.functional.CollectionTest.testSetSerialization":400,"com.google.gson.functional.StringTest.testStringValueSerialization":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":421,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":457,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":207,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":14,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":139,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":346,"com.google.gson.MixedStreamTest.testWriteInvalidState":422,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":435,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":666,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":623,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":376,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":467,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":129,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":552,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":286,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":404,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":82,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":514,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":378,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":45,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":153,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":539,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":707,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":209,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":545,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":314,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":556,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":438,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":691},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a51b62a-3f1b-11e6-a684-d5858b3c2488","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"tindex":"5a522b5b-3f1b-11e6-a684-f7ed51175f98","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[114,115,116,117,118,119,120,0,121,122,123,124,125,126,127,128,129,130,5,6,131,132,133,134,135,136,137,138,8,139,9,10,11,140,141,142,143,144,145,146,147,148,149,150,16,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,17,175,176,177,178,179,180,181,182,20,183,184,185,186,187,27,188,189,28,29,190,191,192,193,194,195,196,197,198,40,199,200,201,202,42,203,204,205,49,206,207,208,209,52,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,78,232,79,233,234,235,236,237,238,239,240,241,82,83,84,85,87,242,243,244,245,246,247,248,249,101,102,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285],"tindex":"5a52526c-3f1b-11e6-a684-894aec6834f5","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a52797d-3f1b-11e6-a684-f9d4987c863f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a52a08e-3f1b-11e6-a684-4b68085b5941","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a52c79f-3f1b-11e6-a684-f5545d1866b4","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[286,0,287,288,289,290,291,292,293,160,294,295,17,73,76,78,296,90,91],"tindex":"5a52eeb0-3f1b-11e6-a684-7b8be87cf838","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[297,293,160,294,295,17,190,298,73,299,101,102],"tindex":"5a5315c1-3f1b-11e6-a684-bf198a5745f6","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5315c2-3f1b-11e6-a684-115d8201afae","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[300,301,302,303,304,305,5,6,131,132,133,134,306,136,8,139,9,10,11,307,308,309,310,311,312,313,163,314,164,315,165,316,317,318,319,320,321,322,323,168,324,169,170,325,326,172,327,328,173,329,330,331,174,332,179,18,30,333,32,334,34,35,36,335,336,192,39,337,195,196,197,338,339,298,40,340,52,341,342,217,69,343,344,79,233,345,346,234,347,236,348,349,238,81,350,351,352,353,354,355,356,357,358,299,359,100,101,102,255,360,361,362,363,109,364,278,365,366,282,367,285],"tindex":"5a533cd3-3f1b-11e6-a684-0b8cd708b9a3","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[116,368,119,120,0,1,2,128,3,129,130,4,5,6,135,7,8,139,9,10,11,140,12,13,141,369,370,371,14,372,15,373,374,149,375,376,16,151,377,378,293,160,294,295,165,321,168,169,170,172,174,17,176,177,379,332,380,178,179,180,381,382,18,19,181,182,383,20,183,21,184,384,185,186,385,22,23,187,24,386,25,26,27,28,29,387,388,389,390,30,31,333,32,334,391,191,33,34,35,36,37,335,38,336,192,39,337,194,195,196,197,392,338,339,298,40,41,48,49,50,206,51,207,393,52,53,54,210,55,56,211,57,58,212,59,394,60,213,61,62,214,63,395,215,396,64,342,65,66,397,216,67,398,217,68,218,69,70,71,72,219,73,220,74,399,75,76,77,78,232,79,80,237,81,239,400,82,83,84,85,86,87,246,88,89,90,91,401,402,403,404,405,406,407,92,93,248,408,94,95,409,355,96,97,356,357,98,410,411,358,99,299,100,101,102,103,104,105,106,107,412,413,108,414,415,416,360,361,417,362,363,418,109,419,364,110,111,279,420,421,283,284,422,423,112,113],"tindex":"5a538af4-3f1b-11e6-a684-1748794ed3ec","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[424,425,426,427],"tindex":"5a53b205-3f1b-11e6-a684-33c20181f697","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[368,129,130,8,139,9,10,11,394,217,72],"tindex":"5a53d916-3f1b-11e6-a684-3d66d96aec8b","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[114,428,115,429,430,431,116,432,433,117,304,305,434,368,0,4,5,6,133,134,135,7,136,137,8,139,9,10,11,140,12,13,141,373,142,143,435,436,437,144,145,438,439,440,146,147,307,441,308,442,148,443,149,375,376,444,150,445,446,447,16,448,377,378,152,153,154,155,156,157,158,159,160,449,450,311,161,162,164,165,451,317,167,320,321,168,169,170,172,328,173,174,17,175,379,332,380,178,180,381,382,19,181,182,383,20,21,24,386,27,188,189,28,29,387,388,452,389,390,30,190,333,32,334,191,34,35,36,453,38,192,39,454,193,455,456,337,194,457,458,459,195,196,392,338,339,298,198,40,460,461,462,200,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,48,49,50,206,486,51,207,393,52,53,54,210,55,56,212,213,61,62,214,395,215,65,216,67,68,71,73,222,224,226,487,343,231,78,344,79,233,80,488,347,235,237,238,489,239,400,241,82,83,84,85,87,242,243,244,245,247,88,353,354,490,402,403,404,405,406,407,92,93,408,409,355,97,249,491,492,356,357,493,358,299,100,101,102,103,104,105,251,254,255,256,494,413,265,495,267,496,268,497,269,270,271,273,274,275,498,360,499,361,417,362,363,500,418,109,419,364,277,110,278,501,365,111,279,502,420,503,421,280,281,366,504,505,506,507,282,283,284,112,113],"tindex":"5a540027-3f1b-11e6-a684-976f4383b251","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a542738-3f1b-11e6-a684-d1bf7f726013","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[304,508,286,509,510,287,289,511,512,291,513,514,515,426,516,517,518,519,5,6,448,294,311,312,313,315,317,320,326,328,17,379,332,380,381,382,383,20,387,388,389,390,453,339,298,520,49,50,206,73,91,102,427,501,365],"tindex":"5a542739-3f1b-11e6-a684-dff5deb3dffc","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[514],"tindex":"5a544e4a-3f1b-11e6-a684-69430a0a970b","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[521,522,523,424,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,518,449,17,332,381,387,46,88,90,401,541,542],"tindex":"5a54755b-3f1b-11e6-a684-fb759da76b57","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a54755c-3f1b-11e6-a684-791138934b37","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[543,544,545,546],"tindex":"5a54755d-3f1b-11e6-a684-29b1b2d260a2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5a549c6e-3f1b-11e6-a684-53a7442f39b5","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[251,255,256,269,271,275],"tindex":"5a549c6f-3f1b-11e6-a684-fbd517bc5ed2","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[251,255,256,269,271,275],"tindex":"5a549c70-3f1b-11e6-a684-e938c52c1243","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[155,158],"tindex":"5a549c71-3f1b-11e6-a684-f985dcdd889c","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[304,509,510,0,547,527,548,549,550,513,121,514,515,426,516,517,518,519,551,448,293,160,294,295,329,174,17,379,332,380,381,382,383,20,387,388,389,390,190,453,339,298,46,485,48,49,50,206,486,51,208,209,73,76,78,88,89,90,91,401,491,299,101,102,427,552,500,501,279,502,420,504],"tindex":"5a54c382-3f1b-11e6-a684-cbeebec66a0a","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5a54c383-3f1b-11e6-a684-8f0f08f19ffd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[553,554,294,174,379,332,380,381,382,383,452,339,298],"tindex":"5a54c384-3f1b-11e6-a684-9744250b8593","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[555],"tindex":"5a54ea95-3f1b-11e6-a684-e9d2ddac958c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a54ea96-3f1b-11e6-a684-7751be4014dc","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[539,549],"tindex":"5a54ea97-3f1b-11e6-a684-9709fc41907d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[556,557,558],"tindex":"5a54ea98-3f1b-11e6-a684-07b8fa733b75","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5511a9-3f1b-11e6-a684-953c7641d913","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5511aa-3f1b-11e6-a684-a97746187aa5","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5511ab-3f1b-11e6-a684-5bc1238a587a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5538bc-3f1b-11e6-a684-357678422589","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[559,560,561,562,563,564,565,566,567,568,569,570,304,305,571,521,522,523,572,509,510,0,573,524,574,525,527,528,532,533,534,537,575,553,538,539,576,577,297,540,549,550,578,554,121,516,518,519,579,122,580,581,582,583,584,585,586,587,133,448,152,154,155,157,293,160,294,295,168,170,329,174,17,175,379,332,380,381,382,383,20,387,388,452,389,390,190,453,192,339,298,46,485,48,49,50,206,486,51,208,209,73,76,231,78,241,243,245,88,89,90,91,401,491,299,101,102,251,254,255,256,269,271,275,498,500,277,278,365,279,280,281,366,505,282,588],"tindex":"5a5538bd-3f1b-11e6-a684-21ad03d41e56","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[452,589,590,591,592,593,588],"tindex":"5a555fce-3f1b-11e6-a684-f9a22b3e00b3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a555fcf-3f1b-11e6-a684-693efb7e7576","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a555fd0-3f1b-11e6-a684-d3c1bb59a843","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5586e1-3f1b-11e6-a684-a99309f84cb2","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a5586e2-3f1b-11e6-a684-e921f346f7ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[594],"tindex":"5a5586e3-3f1b-11e6-a684-b3eea310fdce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[],"tindex":"5a55adf4-3f1b-11e6-a684-eb1f4bb1fabb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[114,428,115,429,430,303,431,116,432,433,117,118,595,119,120,596,0,121,551,127,1,2,128,3,129,130,597,4,5,6,131,132,133,134,306,598,135,7,136,137,138,140,12,13,141,369,370,371,14,372,15,373,374,142,143,435,436,437,144,145,438,439,440,146,147,307,441,308,442,148,443,149,375,376,444,150,445,446,447,309,16,151,448,377,378,152,153,154,155,156,157,158,159,293,160,294,295,310,449,450,599,311,161,162,312,313,163,314,164,315,165,451,316,317,318,166,167,319,320,321,322,600,323,168,324,169,170,325,171,326,172,327,328,173,329,330,331,174,17,175,601,176,177,379,332,380,178,179,180,381,382,18,19,181,182,383,183,21,184,384,185,186,385,22,23,187,24,386,25,26,27,188,189,28,29,387,388,452,389,390,30,31,190,333,32,334,391,191,33,34,35,36,37,335,453,38,336,192,39,454,193,455,456,337,194,457,458,459,195,196,197,392,338,339,298,198,40,602,603,604,605,606,460,607,608,609,610,461,199,462,611,200,612,613,614,615,616,617,618,463,464,619,620,621,622,623,201,624,465,466,625,467,468,626,627,469,628,629,470,630,631,632,594,633,634,635,471,636,637,638,639,640,641,642,643,644,645,472,646,473,474,647,648,475,649,340,650,651,202,652,41,476,653,654,477,655,555,478,479,656,657,658,480,481,482,659,660,661,483,484,662,663,664,665,485,48,49,50,206,486,51,207,208,209,393,52,53,54,210,55,56,211,57,58,212,666,59,341,394,60,589,213,667,61,668,62,669,214,63,395,215,396,64,342,65,66,397,670,216,67,398,217,68,218,69,70,71,72,219,671,73,220,672,74,399,75,76,673,221,222,223,224,225,674,675,226,487,227,676,677,678,228,679,680,229,681,682,230,683,343,231,77,78,590,684,685,344,591,232,79,233,80,488,345,346,686,234,347,235,236,237,348,349,238,489,81,239,240,350,400,351,296,241,352,82,83,84,85,86,87,242,243,244,245,246,247,687,88,89,90,91,401,353,354,490,402,403,404,405,406,688,407,92,93,248,408,94,95,409,689,355,96,97,249,491,492,356,357,98,410,493,411,592,690,358,99,299,359,100,101,102,691,103,104,105,692,693,250,251,252,427,106,107,541,694,253,254,695,255,542,256,257,412,494,552,696,413,697,258,698,259,260,261,108,262,699,263,264,700,701,702,414,265,703,495,704,266,705,706,267,496,707,268,497,269,270,708,415,271,272,273,274,416,709,710,275,593,498,276,711,360,499,361,417,362,363,500,418,109,419,364,277,110,278,501,365,111,279,502,420,503,421,280,281,366,504,505,506,507,282,283,712,713,284,588,422,367,714,285,423,112,113],"tindex":"5a55d505-3f1b-11e6-a684-ed5cbc36de0a","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a55fc16-3f1b-11e6-a684-7152465287bc","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[],"tindex":"5a55fc17-3f1b-11e6-a684-a715b3d2b878","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a564a38-3f1b-11e6-a684-e99f4c85bbc3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a564a39-3f1b-11e6-a684-e1e7794ed156","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5a564a3a-3f1b-11e6-a684-7b3614d7b5e5","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328596532/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":49,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":12,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":259,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":413,"com.google.gson.functional.StringTest.testStringValueDeserialization":632,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":11,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":583,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":102,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":439,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":42,"com.google.gson.MixedStreamTest.testWriteLenient":371,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":382,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":177,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":38,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":331,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":341,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":549,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":615,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":313,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":319,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":148,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":590,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":63,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":482,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":448,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":646,"com.google.gson.functional.ObjectTest.testSingletonLists":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":173,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":320,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":260,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":578,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":680,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":438,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":29,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":430,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":559,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":379,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":480,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":617,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":450,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":672,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":640,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":54,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":611,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":501,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":375,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":440,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":291,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":500,"com.google.gson.functional.EnumTest.testEnumCaseMapping":312,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":77,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":258,"com.google.gson.functional.JsonTreeTest.testToJsonTree":20,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":572,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":468,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":26,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":157,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":305,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":465,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":533,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":579,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":284,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":338,"com.google.gson.functional.ObjectTest.testNullDeserialization":565,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":192,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":72,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":638,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":556,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":69,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":248,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":584,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":215,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":478,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":289,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":360,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":562,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":61,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":187,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":328,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":623,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":622,"com.google.gson.JsonParserTest.testParseString":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":429,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":242,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":466,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":472,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":627,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":128,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":172,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":598,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":43,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":608,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":53,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":532,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":37,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":383,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":433,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":96,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":1,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":643,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":609,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":124,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":220,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":58,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":354,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":471,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":553,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":106,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":229,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":503,"com.google.gson.metrics.PerformanceTest.testDummy":488,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":457,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":116,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":299,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":30,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":505,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":541,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":167,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":459,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":359,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":476,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":545,"com.google.gson.functional.CollectionTest.testSetDeserialization":660,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":149,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":211,"com.google.gson.functional.EnumTest.testEnumSet":306,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":601,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":300,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":197,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":529,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":298,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":374,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":612,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":461,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":618,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":190,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":286,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":245,"com.google.gson.functional.MapTest.testHashMapDeserialization":490,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":581,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":538,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":355,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":417,"com.google.gson.MixedStreamTest.testReadNulls":667,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":391,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":35,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":544,"com.google.gson.functional.MapTest.testSortedMap":502,"com.google.gson.functional.MapTest.testMapSerialization":86,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":74,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":99,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":4,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":606,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":517,"com.google.gson.functional.MapTest.testSerializeMaps":81,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":138,"com.google.gson.functional.MapTest.testComplexKeysSerialization":94,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":506,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":10,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":381,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":194,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":653,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":285,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":426,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":189,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":652,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":65,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":278,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":483,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":103,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":564,"com.google.gson.functional.MapTest.testStringKeyDeserialization":504,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":519,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":32,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":252,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":97,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":587,"com.google.gson.functional.PrettyPrintingTest.testMap":276,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":582,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":154,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":402,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":431,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":378,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":467,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":520,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":264,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":633,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":66,"com.google.gson.functional.MapTest.testMapSerializationEmpty":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":164,"com.google.gson.functional.CollectionTest.testQueueSerialization":335,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":602,"com.google.gson.functional.MapTest.testMapOfMapSerialization":85,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":235,"com.google.gson.JavaSerializationTest.testMapIsSerializable":677,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":534,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":658,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":201,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":386,"com.google.gson.functional.FieldNamingTest.testIdentity":139,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":434,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":268,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":566,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":19,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":105,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":206,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":257,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":573,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":376,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":55,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":262,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":238,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":539,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":530,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":186,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":489,"com.google.gson.functional.MapTest.testMapSubclassSerialization":80,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":251,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":362,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":650,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":508,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":314,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":350,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":368,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":596,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":525,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":631,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":542,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":297,"com.google.gson.functional.EnumTest.testEnumSubclass":309,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":240,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":380,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":558,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":225,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":357,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":479,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":679,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":614,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":31,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":423,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":574,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":205,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":599,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":547,"com.google.gson.stream.JsonWriterTest.testNullName":390,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":22,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":75,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":514,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":555,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":603,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":236,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":181,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":548,"com.google.gson.MixedStreamTest.testWriteNulls":369,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":416,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":129,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":641,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":126,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":193,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":649,"com.google.gson.CommentsTest.testParseComments":670,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":60,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":199,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":208,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":647,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":274,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":518,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":613,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":3,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":88,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":263,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":411,"com.google.gson.MixedStreamTest.testReadInvalidState":665,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":183,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":250,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":5,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":481,"com.google.gson.JsonParserTest.testParseMixedArray":397,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":228,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":671,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":521,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":271,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":387,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":232,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":142,"com.google.gson.JsonArrayTest.testRemove":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":170,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":246,"com.google.gson.functional.MapTest.testMapDeserialization":495,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":166,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":281,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":79,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":399,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":444,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":485,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":83,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":119,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":406,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":427,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":18,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":524,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":214,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":109,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":351,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":158,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":449,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":484,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":115,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":204,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":87,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":277,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":571,"com.google.gson.functional.PrimitiveTest.testShortSerialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":437,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":396,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":616,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":293,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":385,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":597,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":159,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":580,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":135,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":308,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":333,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":361,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":492,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":593,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":253,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":345,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":45,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":428,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":447,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":70,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":669,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":256,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":626,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":464,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":104,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":435,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":150,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":315,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":389,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":620,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":443,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":600,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":569,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":552,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":311,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":101,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":111,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":436,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":171,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":407,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":586,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":161,"com.google.gson.stream.JsonWriterTest.testNullStringValue":675,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":537,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":24,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":654,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":575,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":621,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":239,"com.google.gson.JsonArrayTest.testSet":394,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":254,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":323,"com.google.gson.JsonPrimitiveTest.testEquals":470,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":307,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":405,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":13,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":6,"com.google.gson.functional.MapTest.testGeneralMapField":92,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":551,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":123,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":486,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":629,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":347,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":178,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":151,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":227,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":327,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":244,"com.google.gson.MixedStreamTest.testReadMixedStreamed":668,"com.google.gson.JsonObjectTest.testDeepCopy":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":233,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":477,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":528,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":342,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":377,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":442,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":604,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":292,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":676,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":169,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":498,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":294,"com.google.gson.JsonArrayTest.testDeepCopy":474,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":255,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":322,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":317,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":594,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":168,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":642,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":469,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":522,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":657,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":446,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":203,"com.google.gson.functional.ObjectTest.testNestedDeserialization":570,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":219,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":356,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":418,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":628,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":273,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":420,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":473,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":499,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":634,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":296,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":2,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":110,"com.google.gson.JavaSerializationTest.testListIsSerializable":678,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":41,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":46,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":344,"com.google.gson.functional.ObjectTest.testNullSerialization":212,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":113,"com.google.gson.stream.JsonWriterTest.testDoubles":414,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":648,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":493,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":91,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":226,"com.google.gson.functional.MapTest.testInterfaceTypeMap":89,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":516,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":681,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":349,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":118,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":576,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":310,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":330,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":352,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":425,"com.google.gson.MixedStreamTest.testReadClosed":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":152,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":288,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":588,"com.google.gson.MixedStreamTest.testWriteClosed":373,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":337,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":419,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":209,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":540,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":301,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":117,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":49,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":184,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":120,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":210,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":336,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":452,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":607,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":318,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":424,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":340,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":73,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":174,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":47,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":140,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":630,"com.google.gson.stream.JsonWriterTest.testNumbers":682,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":231,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":526,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":195,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":48,"com.google.gson.functional.CollectionTest.testQueueDeserialization":663,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":234,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":605,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":637,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":182,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":453,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":400,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":163,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":329,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":568,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":332,"com.google.gson.functional.MapTest.testRawMapSerialization":93,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":367,"com.google.gson.JsonParserTest.testParseReader":56,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":661,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":536,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":392,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":108,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":217,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":9,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":445,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":59,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":125,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":188,"com.google.gson.functional.PrimitiveTest.testByteSerialization":247,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":365,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":14,"com.google.gson.ObjectTypeAdapterTest.testSerialize":393,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":325,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":585,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":398,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":39,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":130,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":136,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":302,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":463,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":635,"com.google.gson.functional.MapTest.testMapWithQuotes":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":155,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":591,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":636,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":196,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":441,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":673,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":202,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":16,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":153,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":147,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":50,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":295,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":567,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":160,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":241,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":557,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":133,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":156,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":162,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":619,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":432,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":659,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":512,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":51,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":180,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":112,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":270,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":454,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":363,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":543,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":52,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":577,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":674,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":34,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":409,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":560,"com.google.gson.JsonObjectTest.testAddingStringProperties":68,"com.google.gson.functional.ObjectTest.testNestedSerialization":218,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":324,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":230,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":326,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":639,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":321,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":401,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":7,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":267,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":366,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":372,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":213,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":644,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":625,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":25,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":531,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":78,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":415,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":523,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":561,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":451,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":410,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":265,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":403,"com.google.gson.functional.CollectionTest.testSetSerialization":343,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":664,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":198,"com.google.gson.functional.StringTest.testStringValueSerialization":266,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":279,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":100,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":141,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":421,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":655,"com.google.gson.MixedStreamTest.testWriteInvalidState":370,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":511,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":395,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":592,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":132,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":595,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":28,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":191,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":62,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":645,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":287,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":384,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":175,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":15,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":494,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":412,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":127,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":458},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"28cb59e9-3e50-11e6-b620-0565661cdc3a","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2],"tindex":"28cb80fa-3e50-11e6-b620-336d902719b6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"28cba80b-3e50-11e6-b620-635a54f43374","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[75,76,77,78,5,7,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,11,98,99,100,15,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,16,17,18,19,20,21,22,23,116,117,118,24,25,119,120,26,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,28,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,29,189,190,191,192,193,194,195,196,197,31,32,33,198,199,200,34,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,0,240,241,242,1,243,244,245,246,247,2,248,249,250,251,252,253,254,255,256,35,36,37,38,39,257,40,41,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,48,49,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,51,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,54,356,357,55,358,359,360,361,362,363,58,59,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,61,69,381],"tindex":"28cba80c-3e50-11e6-b620-e7b5a47ce20a","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (serializeNulls) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[89,92,11,12,17,18,19,20,21,22,23,24,25,26,35,36,37,38,39,257,40,41,48,49,51,54,59,364,365,382,381,383,384,385,386,387,70,71,388,389],"tindex":"28cbcf1d-3e50-11e6-b620-2b359b963d22","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[390],"tindex":"28cbf62e-3e50-11e6-b620-17d79c0d8079","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (name == null) {\n                                throw new java.lang.NullPointerException(\"name == null\");\n                            } \n                            if ((java.lang.String) != null) {\n                                throw new java.lang.IllegalStateException();\n                            } \n                            if ((int) == 0) {\n                                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                            } \n                            java.lang.String = name;\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[81,86,92,93,97,391,12,99,100,103,105,113,115,16,17,18,19,20,117,119,122,127,129,130,131,134,135,136,137,138,139,145,146,147,148,149,29,190,33,198,204,205,208,211,213,216,218,221,222,224,245,248,250,35,36,37,267,268,269,273,274,49,275,276,277,278,279,280,281,282,295,51,296,297,298,299,300,301,302,303,304,305,315,316,317,318,320,322,325,328,329,392,331,334,336,339,341,343,344,362,363,58,367,368,393],"tindex":"28cbf62f-3e50-11e6-b620-c701f45ccdc0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28cc1d40-3e50-11e6-b620-ebf6513da97b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[62],"tindex":"28cc1d41-3e50-11e6-b620-5bb6abb84b4d","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[151,156,157,177,180,185],"tindex":"28cc1d42-3e50-11e6-b620-6dd0b11bf669","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"28cc4453-3e50-11e6-b620-5b6fab69d83c","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[394],"tindex":"28cc4454-3e50-11e6-b620-d1a2d389d167","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"28cc4455-3e50-11e6-b620-47ce50fc4c68","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"28cc6b66-3e50-11e6-b620-e38e42ad9d62","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (name == null) {\n                                throw new java.lang.NullPointerException(\"name == null\");\n                            } \n                            if ((java.lang.String) != null) {\n                                throw new java.lang.IllegalStateException();\n                            } \n                            if ((int) == 0) {\n                                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                            } \n                            java.lang.String = name;\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"28cc6b67-3e50-11e6-b620-73626b267cb7","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[79,11,14,15,18,151,153,155,156,157,28,175,177,180,185,196,197,31,32,33,198,199,200,34,201,202,203,395,35,36,37,38,39,40,41,267,284,396,286,288,289,291,51,308,345,349,54,356,397,398,399,376,61,69,381,383,384,70,71,388,389],"tindex":"28cc6b68-3e50-11e6-b620-d57635bf8f49","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[75,76,77,78,5,7,79,80,81,82,83,400,84,85,86,87,88,89,90,91,92,401,93,94,95,96,97,11,391,98,99,402,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,16,18,116,117,118,119,120,121,122,123,124,125,126,127,128,403,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,28,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,29,191,192,193,194,195,196,197,31,32,33,198,199,200,34,201,202,203,204,205,206,207,208,209,210,211,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,0,240,241,242,1,243,244,245,246,247,2,248,249,250,251,252,253,254,255,256,35,36,37,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,404,283,284,405,406,407,396,408,285,286,287,288,289,290,291,292,293,294,295,51,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,54,356,357,55,358,359,360,361,362,363,58,366,374,375,376,377,378,379,380],"tindex":"28cc9279-3e50-11e6-b620-3344aa88f97f","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"28cc927a-3e50-11e6-b620-a9e10c5062cf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[11,12,17,18,19,20,21,22,23,24,25,26,38,39,257,40,41,48,49,51,54,55,59,364,365],"tindex":"28cc927b-3e50-11e6-b620-035907fa4fa3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"28cc927c-3e50-11e6-b620-c7c53223052d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"28ccb98d-3e50-11e6-b620-65653c43fcd9","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[77,78,81,92,100,105,24,121,122,123,124,125,126,127,128,403,129,130,131,132,133,134,140,141,142,143,144,206,208,213,216,217,230,233,243,250,253,255,38,263,275,278,279,280,281,283,295,296,298,301,302,321,327,409,410,54,359],"tindex":"28ccb98e-3e50-11e6-b620-5f5525d3628a","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"28ccb98f-3e50-11e6-b620-e38c417bf3d9","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[202,215,289,291,292,293,308,54,356,411,374],"tindex":"28ccb990-3e50-11e6-b620-e3c91656107a","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[412,413,414],"tindex":"28cce0a1-3e50-11e6-b620-0d1816559ff0","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"28cce0a2-3e50-11e6-b620-176c837e6f65","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[66],"tindex":"28cce0a3-3e50-11e6-b620-9f1bfe3ee92a","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[75,76,415,77,78,3,4,5,6,7,8,9,79,416,81,400,89,92,401,11,391,98,12,99,417,418,402,419,13,14,102,420,103,421,104,422,105,106,107,109,110,111,112,113,423,424,425,115,426,427,403,135,136,137,138,139,160,168,170,171,174,428,182,183,429,430,431,432,191,193,196,433,197,30,434,435,31,32,33,436,198,199,200,437,34,438,201,202,203,395,215,439,440,231,0,242,1,245,2,252,254,35,441,442,36,37,38,39,257,40,41,267,443,47,275,276,277,278,279,280,281,282,404,444,283,50,284,405,406,407,396,408,445,446,285,447,286,287,288,289,290,291,292,293,51,448,449,52,308,314,315,450,451,316,317,452,453,318,454,319,455,456,320,457,321,322,458,459,460,461,462,325,345,347,348,349,353,354,355,54,356,411,55,371,372,463,374,375,376,377,378,379,380],"tindex":"28cce0a4-3e50-11e6-b620-395a4e9fd86c","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[102,103,105,18,117,130,241,255,300,409,330,464,392,410,465,466,467],"tindex":"28cd07b5-3e50-11e6-b620-43413fb3f2df","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                {\n                                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                                    } \n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"28cd07b6-3e50-11e6-b620-7d8a7aac2653","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"28cd07b7-3e50-11e6-b620-33bb609c8df3","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if (name == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (name == null) {\n                                throw new java.lang.NullPointerException(\"name == null\");\n                            } \n                            if ((java.lang.String) != null) {\n                                throw new java.lang.IllegalStateException();\n                            } \n                            if ((int) == 0) {\n                                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                            } \n                            java.lang.String = name;\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"28cd2ec8-3e50-11e6-b620-2943b0f197c3","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"28cd2ec9-3e50-11e6-b620-c98f6a4f6403","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"28cd2eca-3e50-11e6-b620-3ded859dee90","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[17,20,468,469,470,471],"tindex":"28cd2ecb-3e50-11e6-b620-25d28703cfa8","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isNumber()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"28cd55dc-3e50-11e6-b620-2bfed1fa74e5","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"28cd55dd-3e50-11e6-b620-e7868fe94142","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isNumber()) {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"28cd55de-3e50-11e6-b620-ef68a670b102","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[79,22,24,153,472,38,42,44,46,53,54,397,473,394,474,475,476,67,383,384,387,477,73,478,479,480,481,482,483,484,485,486,487],"tindex":"28cd55df-3e50-11e6-b620-3d22b3ac5c89","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[145,147,149,271,272,48,304,305],"tindex":"28cd55e0-3e50-11e6-b620-b5690f432a87","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"28cd7cf1-3e50-11e6-b620-efd87635a50d","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[488,75,76,415,77,78,3,4,5,6,7,8,9,489,79,416,490,491,80,81,492,493,82,494,83,495,400,496,497,498,499,84,85,86,500,501,87,88,502,89,90,91,92,401,93,503,94,95,504,96,10,505,97,11,391,98,12,99,417,418,402,419,13,100,14,15,506,507,101,508,102,420,103,421,104,422,105,106,107,108,109,110,111,112,113,423,424,114,425,115,426,427,17,18,19,20,21,22,23,116,117,118,24,25,509,510,119,120,26,121,122,511,123,124,125,126,127,512,513,128,403,129,514,515,516,130,517,131,518,132,519,133,520,134,521,135,136,137,138,139,145,146,147,148,149,522,150,151,152,27,523,524,153,525,154,155,526,156,472,157,158,527,528,28,529,159,530,160,161,162,163,164,531,165,532,166,167,533,168,534,169,170,171,172,535,173,536,537,174,538,175,176,428,177,178,539,179,180,181,182,183,184,429,430,185,186,468,187,540,541,188,542,29,189,431,543,544,432,190,191,192,193,194,545,195,196,433,197,30,434,435,31,32,33,436,198,199,200,437,34,438,201,202,203,204,546,547,205,206,207,548,549,208,550,551,209,552,553,210,395,554,555,211,556,212,213,557,558,214,559,215,216,560,217,218,219,561,220,562,563,564,565,221,566,222,223,567,224,568,569,570,439,571,572,440,225,573,226,574,575,576,577,578,227,579,580,228,581,582,583,584,585,586,587,229,230,588,589,590,591,592,231,593,232,233,594,595,234,596,597,235,598,236,237,599,600,238,239,601,602,603,0,604,605,606,607,608,609,610,611,240,612,241,613,242,1,614,615,243,616,617,244,618,245,619,620,621,246,247,2,248,249,250,251,622,623,624,252,625,253,626,627,628,254,255,629,256,630,631,35,441,442,36,37,38,39,257,40,41,632,258,259,260,261,262,633,634,263,635,264,636,637,638,265,639,640,266,42,43,44,45,46,641,642,643,267,443,644,268,269,47,270,645,271,272,273,274,48,49,275,276,277,278,279,280,281,282,404,444,646,283,50,284,405,406,647,407,396,408,445,446,285,447,286,287,288,289,290,291,292,293,648,294,295,649,51,296,297,298,299,300,448,301,302,303,449,304,52,650,305,306,307,308,309,651,652,310,653,311,312,313,314,315,450,451,316,317,452,453,318,454,319,455,456,320,457,321,322,323,324,458,459,460,461,462,325,326,327,328,329,331,332,333,334,654,655,656,335,336,337,338,339,657,658,340,659,660,341,342,661,343,344,662,345,663,346,347,348,349,350,351,352,353,354,355,54,356,411,357,55,358,664,359,360,361,362,363,58,366,367,665,666,368,369,370,371,667,372,373,668,669,463,374,375,376,377,670,378,379,380,61,69],"tindex":"28cd7cf2-3e50-11e6-b620-879a09bc22c2","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[18,117,130,226,229,251,300],"tindex":"28cda403-3e50-11e6-b620-c79c3ce3496b","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"28cda404-3e50-11e6-b620-8178100c8542","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"28cda405-3e50-11e6-b620-8fbfb61ea8df","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[671],"tindex":"28cdcb16-3e50-11e6-b620-e37729732a10","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"28cdcb17-3e50-11e6-b620-cb694271f725","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[3,4,5,6,7,8,9,79,416,11,102,420,103,421,104,422,105,106,185,196,433,197,30,434,435,31,32,33,436,198,199,200,437,34,438,201,203,439,38,39,257,40,41,267,443,47,50,284,396,286,287,288,289,291,51,448,449,52,458,459,460,461,462,345,347,349,55,463,374,375,376,377],"tindex":"28cdf228-3e50-11e6-b620-3f899a51ab1f","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[284],"tindex":"28cdf229-3e50-11e6-b620-6bf1482af0c2","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[400,89,91,11,19,21,22,23,116,118,24,25,120,26,403,133,141,159,404,283,405,406,445,285,338],"tindex":"28cdf22a-3e50-11e6-b620-6f4ee4a63b1f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28cdf22b-3e50-11e6-b620-25d99a52b383","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[14,15],"tindex":"28cdf22c-3e50-11e6-b620-430817221eb4","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[75,76,5,7,400,89,91,92,11,391,12,99,402,100,102,103,105,106,107,108,109,111,112,113,114,115,16,17,18,19,20,21,22,23,116,117,118,24,25,119,120,26,131,135,136,137,138,139,140,141,142,143,144,145,147,148,149,169,179,184,29,190,191,192,193,194,195,31,33,198,204,205,206,207,208,209,210,211,213,216,217,218,220,221,222,223,224,35,36,37,38,39,40,41,267,268,269,270,271,272,273,274,48,49,277,278,282,404,405,406,407,408,285,295,296,297,298,299,300,301,302,303,304,305,310,315,316,317,318,320,322,323,324,325,328,329,330,464,392,465,466,672,331,333,339,341,343,350,353,354,54,357,359,360,361,362,363,58,367,368,374,393],"tindex":"28ce193d-3e50-11e6-b620-35b8aa3c2b8b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28ce193e-3e50-11e6-b620-bfcce0cc0d00","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"28ce193f-3e50-11e6-b620-152b9b510037","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"28ce1940-3e50-11e6-b620-e1dcfbbd7f13","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.append(java.lang.Double.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[27,476,673,64],"tindex":"28ce1941-3e50-11e6-b620-ed6815650ba9","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"28ce4052-3e50-11e6-b620-3dbf1e655f36","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"28ce4053-3e50-11e6-b620-cda0c9500e2f","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                {\n                                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                                    } \n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"28ce4054-3e50-11e6-b620-69d39283977d","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28ce4055-3e50-11e6-b620-41ba264c45b0","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"28ce4056-3e50-11e6-b620-0f93fe68ce85","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"28ce6767-3e50-11e6-b620-a3c96b5d4b70","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"28ce6768-3e50-11e6-b620-49893918dbe3","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28ce6769-3e50-11e6-b620-196f1dc6abe6","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"28ce676a-3e50-11e6-b620-93663c5effab","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"28ce676b-3e50-11e6-b620-c578f0de2297","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"28ce8e7c-3e50-11e6-b620-c196c2143628","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"28ce8e7d-3e50-11e6-b620-ff564cecaf9b","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"28ce8e7e-3e50-11e6-b620-47e2276e393e","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[674],"tindex":"28ce8e7f-3e50-11e6-b620-2529860a3c74","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"28ceb590-3e50-11e6-b620-a97ee26ba77a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,242,1,2,252,254,371],"tindex":"28ceb591-3e50-11e6-b620-157db52aa0b7","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"28cedca2-3e50-11e6-b620-cf5161138b61","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[475],"tindex":"28cedca3-3e50-11e6-b620-91b1b627a29e","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[98,418,402,419],"tindex":"28cedca4-3e50-11e6-b620-7d4bb5ca3673","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[400,89,91,11,116,118,120,403,133,141,159,179,404,283,405,406,445,285,338,675],"tindex":"28cedca5-3e50-11e6-b620-2bfc39bdada4","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[79,383,384,388],"tindex":"28cedca6-3e50-11e6-b620-b5e4697b8158","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"28cedca7-3e50-11e6-b620-0f4529b9e651","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (serializeNulls) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"28cf03b8-3e50-11e6-b620-4774c28bfcb8","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"28cf03b9-3e50-11e6-b620-319d6326efee","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                {\n                                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                                    } \n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"28cf03ba-3e50-11e6-b620-7722b30926fd","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"28cf03bb-3e50-11e6-b620-cd87c9e3e3cf","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"28cf03bc-3e50-11e6-b620-d1fb71065c74","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28cf2acd-3e50-11e6-b620-d1dacc52abb3","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"28cf2ace-3e50-11e6-b620-753e3ab9a17b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"28cf2acf-3e50-11e6-b620-09493d0288ee","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"28cf2ad0-3e50-11e6-b620-89ec3f252be5","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                {\n                                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                                    } \n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[315,450,451,317,452,318],"tindex":"28cf2ad1-3e50-11e6-b620-fdc280044aa3","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[676,677,678,75,76,679,77,78,3,4,5,6,7,8,9,489,416,490,491,80,81,492,493,82,494,83,495,400,496,497,498,499,84,85,86,500,501,87,88,502,89,90,91,92,401,93,503,94,95,504,96,10,505,97,11,391,98,12,99,417,418,402,419,13,100,506,507,101,508,102,420,103,421,104,422,105,106,107,108,109,110,111,112,113,423,424,114,425,115,426,427,16,17,18,19,20,21,22,23,116,117,118,24,25,509,510,119,120,26,121,122,511,123,124,125,126,127,512,513,128,403,129,514,515,516,130,517,131,518,132,519,133,520,134,521,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,522,150,151,152,27,523,524,153,525,154,155,526,156,472,157,158,527,528,28,529,159,530,160,161,162,163,164,531,165,532,166,167,533,168,534,169,170,171,172,535,173,536,537,174,538,175,176,428,177,178,539,179,180,181,182,183,184,429,430,185,186,468,187,540,541,188,542,29,431,543,544,190,191,192,193,194,545,195,196,433,197,30,434,435,31,32,33,436,198,199,200,437,34,438,201,202,203,204,546,547,205,206,207,548,549,208,550,551,209,552,553,210,554,555,211,556,213,558,214,559,215,216,560,217,218,219,561,220,562,563,564,221,566,222,223,567,224,568,569,570,439,571,572,440,225,573,226,574,575,576,577,578,227,579,580,228,581,582,583,584,585,586,587,229,230,588,589,590,591,592,231,593,232,233,594,595,234,596,597,235,598,236,237,599,600,238,239,601,602,603,0,604,605,606,607,608,609,610,611,240,612,241,613,242,1,614,615,243,616,617,244,618,245,619,620,621,246,247,2,248,249,250,251,622,623,624,252,625,253,626,627,628,254,255,629,256,630,631,35,441,442,36,37,38,39,257,40,41,632,258,259,260,261,262,633,634,263,635,264,636,637,638,265,639,640,266,42,43,44,45,46,641,642,643,267,443,644,268,269,47,270,645,271,272,273,274,48,49,275,276,277,278,279,280,281,282,404,444,646,283,50,284,405,406,647,407,396,408,445,446,285,447,286,287,288,289,290,291,292,293,648,294,295,649,51,296,297,298,299,300,448,301,302,303,449,304,650,305,306,307,308,309,651,652,310,653,311,312,313,314,315,450,451,316,317,452,453,318,454,319,455,456,320,457,321,322,323,324,458,459,460,461,462,325,326,327,328,329,331,332,333,334,654,655,656,335,336,337,338,339,657,658,340,659,660,341,342,661,343,344,662,663,346,347,348,349,350,351,352,353,354,355,54,356,357,55,358,664,359,360,361,362,363,58,59,364,365,366,367,665,368,370,371,667,372,373,668,669,463,374,375,376,377,670,378,379,380,393,680],"tindex":"28cf51e2-3e50-11e6-b620-6d7dfea758e1","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"28cf51e3-3e50-11e6-b620-cf10f6bc0969","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"28cf51e4-3e50-11e6-b620-397ffcb4baf4","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[421,106,227,323],"tindex":"28cf78f5-3e50-11e6-b620-6f736dc2a49d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"28cf78f6-3e50-11e6-b620-61224fdb35b8","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (json == null) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"28cf78f7-3e50-11e6-b620-5591859114a9","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"28cfa008-3e50-11e6-b620-6f11955561c5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                                    toJson(src, typeOfSrc, writer);\n                                    return writer.toString();\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"28cfa009-3e50-11e6-b620-e1a95aff46a0","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[78,79,81,86,92,93,97,391,99,402,100,102,103,105,108,113,115,16,18,117,119,122,127,129,130,131,134,135,136,137,138,139,145,146,147,148,149,153,155,28,169,184,29,190,32,33,198,34,201,202,204,205,206,208,211,213,216,217,218,221,222,224,225,230,236,238,239,0,240,241,242,1,243,244,245,246,247,2,248,249,250,252,253,254,255,256,35,36,37,267,268,269,273,274,275,276,277,278,279,280,281,282,295,51,296,297,298,299,300,301,302,303,304,305,315,316,317,318,320,322,325,328,329,409,330,464,392,410,465,466,467,331,333,334,336,339,341,343,344,54,362,363,58,398,399,681,682,367,368,371,376,393,383,384,70],"tindex":"28cfa00a-3e50-11e6-b620-a5613a172d84","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[249],"tindex":"28cfc71b-3e50-11e6-b620-1ffcd20519e9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"28cfc71c-3e50-11e6-b620-1f36acabd7bf","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.equals(from)) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240917400/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
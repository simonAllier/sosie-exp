{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":25,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":340,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":23,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":29,"com.google.gson.MixedStreamTest.testWriteLenient":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":323,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":127,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":191,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":198,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":357,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":358,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":275,"com.google.gson.functional.ObjectTest.testSingletonLists":105,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":321,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":341,"com.google.gson.stream.JsonWriterTest.testStrings":371,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":90,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":222,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":266,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":190,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":205,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":142,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":248,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":352,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":247,"com.google.gson.functional.EnumTest.testEnumCaseMapping":356,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":5,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":339,"com.google.gson.functional.JsonTreeTest.testToJsonTree":45,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":146,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":56,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":392,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":311,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":187,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":257,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":226,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":195,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":93,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":350,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":208,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":389,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":180,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":188,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":63,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":114,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":387,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":243,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":39,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":126,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":382,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":21,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":264,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":204,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":212,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":32,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":251,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":377,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":49,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":160,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":285,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":255,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":319,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":207,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":390,"com.google.gson.functional.CollectionTest.testSetDeserialization":292,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":84,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":109,"com.google.gson.functional.EnumTest.testEnumSet":279,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":97,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":232,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":11,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":159,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":218,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":91,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":347,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":338,"com.google.gson.functional.MapTest.testHashMapDeserialization":237,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":33,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":386,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":124,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":260,"com.google.gson.functional.MapTest.testSortedMap":249,"com.google.gson.functional.MapTest.testMapSerialization":14,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":26,"com.google.gson.functional.MapTest.testSerializeMaps":10,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":74,"com.google.gson.functional.MapTest.testComplexKeysSerialization":20,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":254,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":95,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":155,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":2,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":1,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":144,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":30,"com.google.gson.functional.MapTest.testStringKeyDeserialization":253,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":234,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":22,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":363,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":309,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":189,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":374,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":344,"com.google.gson.functional.CollectionTest.testQueueSerialization":194,"com.google.gson.functional.MapTest.testMapSerializationEmpty":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":316,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":369,"com.google.gson.functional.MapTest.testMapOfMapSerialization":301,"com.google.gson.JavaSerializationTest.testMapIsSerializable":230,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":291,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":80,"com.google.gson.functional.FieldNamingTest.testIdentity":75,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":342,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":261,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":133,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":31,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":44,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":104,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":343,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":4,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":317,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":235,"com.google.gson.functional.MapTest.testMapSubclassSerialization":9,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":378,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":210,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":202,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":215,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":221,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":158,"com.google.gson.functional.EnumTest.testEnumSubclass":282,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":380,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":98,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":103,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":47,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":3,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":228,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":326,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":65,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":269,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":94,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":273,"com.google.gson.CommentsTest.testParseComments":298,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":333,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":139,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":131,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":328,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":7,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":388,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":336,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":233,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":136,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":320,"com.google.gson.functional.MapTest.testMapDeserialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":318,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":147,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":236,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":367,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":12,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":54,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":152,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":150,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":43,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":283,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":35,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":365,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":312,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":40,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":102,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":15,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":143,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":262,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":354,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":385,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":227,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":120,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":71,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":281,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":193,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":209,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":224,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":122,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":294,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":0,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":384,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":381,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":184,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":116,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":306,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":271,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":99,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":168,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":36,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":305,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":196,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":361,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":149,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":153,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":125,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":154,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":52,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":286,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":379,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":176,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":151,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":220,"com.google.gson.functional.MapTest.testGeneralMapField":18,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":59,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":324,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":250,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":307,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":335,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":119,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":244,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":268,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":353,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":86,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":245,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":355,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":238,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":334,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":175,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":171,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":270,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":134,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":290,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":101,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":366,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":351,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":138,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":246,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":157,"com.google.gson.JavaSerializationTest.testListIsSerializable":231,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":130,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":201,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":38,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":17,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":376,"com.google.gson.functional.MapTest.testInterfaceTypeMap":16,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":364,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":51,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":167,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":349,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":360,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":107,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":256,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":162,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":50,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":141,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":117,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":89,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":55,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":108,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":289,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":172,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":322,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":76,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":337,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":42,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":57,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":96,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":140,"com.google.gson.functional.CollectionTest.testQueueDeserialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":327,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":315,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":181,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":265,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":192,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":214,"com.google.gson.functional.MapTest.testRawMapSerialization":302,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":185,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":34,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":112,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":213,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":60,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":331,"com.google.gson.ObjectTypeAdapterTest.testSerialize":219,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":303,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":178,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":128,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":66,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":72,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":163,"com.google.gson.functional.MapTest.testMapWithQuotes":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":332,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":267,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":391,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":41,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":82,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":156,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":313,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":85,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":129,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":314,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":58,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":325,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":37,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":135,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":277,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":299,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":182,"com.google.gson.functional.ObjectTest.testNestedSerialization":113,"com.google.gson.internal.LinkedTreeMapTest.testClear":225,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":177,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":118,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":359,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":174,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":19,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":8,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":132,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":217,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":368,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":372,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":110,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":272,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":53,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":6,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":186,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":345,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":64,"com.google.gson.functional.CollectionTest.testSetSerialization":200,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":296,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":100,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":145,"com.google.gson.functional.StringTest.testStringValueSerialization":346,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":28,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":77,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":287,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":68,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":203,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":370,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":73,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":223,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":92,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":348,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":164,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":304,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":241,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":62,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":284},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"b5c8c344-3e39-11e6-84ec-ad975d7e6cba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2],"tindex":"b5c93875-3e39-11e6-84ec-356093ddd034","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219],"tindex":"b5c95f86-3e39-11e6-84ec-6fc1a98c9e7f","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[25,220,42,43,44,45,90,221,0,222,205,212,223,224,225,226,227,228,2],"tindex":"b5c98697-3e39-11e6-84ec-87b071e60d10","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b5c9ada8-3e39-11e6-84ec-3fd45e688543","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[229,230,231,232,233,234,235,236,237,238,239,240,11,241,12,242,13,243,244,245,246,14,247,248,15,249,16,250,17,18,19,251,20,252,253,21,254,255,22,23,47,50,256,65,257,76,77,78,79,80,81,82,84,85,258,259,260,97,261,262,101,105,263,264,116,265,266,124,267,268,125,126,269,270,132,271,272,136,137,139,140,141,143,148,149,151,152,155,156,273,274,157,158,159,161,275,162,163,164,276,165,277,278,166,279,280,281,282,283,168,175,284,285,191,192,193,286,287,288,194,289,195,290,291,197,292,199,293,201,294,295,206,296,208,209,210,211,213,297,216,217,298],"tindex":"b5c9d4b9-3e39-11e6-84ec-bba11bd2c419","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[299],"tindex":"b5c9fbca-3e39-11e6-84ec-f9bd6f599e02","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b5c9fbcb-3e39-11e6-84ec-f9db5a2ce91a","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"b5ca22dc-3e39-11e6-84ec-3b28b76dff7a","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3,4,5,7,8,9,10,11,12,13,300,301,16,17,18,302,20,21,23,24,26,28,303,304,305,33,35,36,37,39,41,43,49,50,51,54,55,57,58,60,61,63,64,66,67,69,76,77,78,79,80,306,307,308,309,310,85,311,312,313,314,315,316,317,318,319,320,321,322,87,323,324,325,326,327,328,329,330,331,90,91,92,93,94,95,96,332,97,98,333,334,101,102,103,105,106,107,108,110,111,113,114,116,117,335,336,337,338,125,126,339,340,341,342,343,131,344,345,346,132,133,134,136,137,144,148,150,347,348,349,350,351,352,353,354,355,274,161,279,280,281,282,167,168,356,357,170,358,173,174,175,176,177,178,359,179,180,181,183,184,185,190,191,192,194,360,195,196,197,198,199,294,361,362,363,364,202,365,203,204,205,366,210,211,212,367,368,369,370,371,372,214,215,217,218,373,374,375],"tindex":"b5ca22dd-3e39-11e6-84ec-cf697f5f491a","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[43,50,66,376,377,378,161],"tindex":"b5cae62e-3e39-11e6-84ec-057a83e1157b","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[6,18,24,25,26,27,28,34,42,43,44,45,50,54,66,67,90,91,104,106,110,111,112,113,114,115,117,379,380,122,381,133,134,144,148,161,170,173,175,178,180,181,191,193,196,198,205,212],"tindex":"b5cae62f-3e39-11e6-84ec-87e4b61c0b6f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[236,382,383,384],"tindex":"b5cae630-3e39-11e6-84ec-19c9092dc39c","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b5cb0d41-3e39-11e6-84ec-ef5f3b64f166","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b5cb0d42-3e39-11e6-84ec-779e1ac66ad9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"b5cb0d43-3e39-11e6-84ec-d7a8442da7be","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b5cba984-3e39-11e6-84ec-79eaf12aee74","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b5cba985-3e39-11e6-84ec-b9d75169a667","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"b5cbd096-3e39-11e6-84ec-5ff7f77b786c","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"b5cbd097-3e39-11e6-84ec-a9420b3d0e18","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[382,385],"tindex":"b5cbd098-3e39-11e6-84ec-fd5d43225903","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[386,387,388,307,85,311,325],"tindex":"b5cbd099-3e39-11e6-84ec-89688b2b9954","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"b5cbf7aa-3e39-11e6-84ec-cddaa0156780","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"b5cbf7ab-3e39-11e6-84ec-99587432559d","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b5cbf7ac-3e39-11e6-84ec-39cfcddf0cf0","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[389,390,391,392],"tindex":"b5cc1ebd-3e39-11e6-84ec-819a6a0a2f70","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"b5cc1ebe-3e39-11e6-84ec-c520466eecd6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[232,233,234],"tindex":"b5cc45cf-3e39-11e6-84ec-614efec34729","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"b5cc45d0-3e39-11e6-84ec-31ae3e143e56","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"b5cc6ce1-3e39-11e6-84ec-6b68139e7a82","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"b5cc6ce2-3e39-11e6-84ec-4d48c6eccd10","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b5cc6ce3-3e39-11e6-84ec-35faa52e8163","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"b5cc6ce4-3e39-11e6-84ec-fd8a8f1f26af","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"b5cc6ce5-3e39-11e6-84ec-6521d6c37dcd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232245259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":34,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
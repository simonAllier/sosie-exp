{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":32,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":331,"com.google.gson.functional.StringTest.testStringValueDeserialization":622,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":0,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":552,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":576,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":171,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":86,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":89,"com.google.gson.MixedStreamTest.testWriteLenient":437,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":251,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":12,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":129,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":68,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":408,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":607,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":387,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":393,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":221,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":583,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":516,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":651,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":102,"com.google.gson.functional.ObjectTest.testSingletonLists":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":247,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":394,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":332,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":480,"com.google.gson.stream.JsonWriterTest.testStrings":676,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":479,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":55,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":557,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":76,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":445,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":514,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":609,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":673,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":629,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":18,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":348,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":603,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":695,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":456,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":441,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":567,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":370,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":455,"com.google.gson.functional.EnumTest.testEnumCaseMapping":386,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":141,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":330,"com.google.gson.functional.JsonTreeTest.testToJsonTree":185,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":566,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":472,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":196,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":683,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":230,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":379,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":661,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":462,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":550,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":358,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":690,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":405,"com.google.gson.functional.ObjectTest.testNullDeserialization":564,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":57,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":627,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":686,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":74,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":320,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":577,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":284,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":512,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":691,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":368,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":428,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":79,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":20,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":543,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":121,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":613,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":612,"com.google.gson.JsonParserTest.testParseString":681,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":556,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":312,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":662,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":501,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":616,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":204,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":246,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":590,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":90,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":453,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":600,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":127,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":549,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":11,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":507,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":62,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":163,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":313,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":488,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":601,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":200,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":289,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":72,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":136,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":421,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":175,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":298,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":533,"com.google.gson.metrics.PerformanceTest.testDummy":522,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":115,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":189,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":376,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":636,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":475,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":473,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":250,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":450,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":241,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":427,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":505,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":60,"com.google.gson.functional.CollectionTest.testSetDeserialization":131,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":222,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":280,"com.google.gson.functional.EnumTest.testEnumSet":380,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":538,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":593,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":267,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":669,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":547,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":285,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":375,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":440,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":604,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":119,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":610,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":265,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":365,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":316,"com.google.gson.functional.MapTest.testHashMapDeserialization":525,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":574,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":470,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":422,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":536,"com.google.gson.MixedStreamTest.testReadNulls":648,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":165,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":176,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":9,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":474,"com.google.gson.functional.MapTest.testSortedMap":532,"com.google.gson.functional.MapTest.testMapSerialization":152,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":167,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":687,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":28,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":598,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":464,"com.google.gson.functional.MapTest.testSerializeMaps":146,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":215,"com.google.gson.functional.MapTest.testComplexKeysSerialization":161,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":537,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":22,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":534,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":59,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":108,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":364,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":697,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":42,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":263,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":633,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":351,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":517,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":684,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":172,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":563,"com.google.gson.functional.MapTest.testStringKeyDeserialization":457,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":671,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":5,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":324,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":164,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":580,"com.google.gson.functional.PrettyPrintingTest.testMap":349,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":415,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":575,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":401,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":227,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":559,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":444,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":467,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":663,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":336,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":623,"com.google.gson.functional.MapTest.testMapSerializationEmpty":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":238,"com.google.gson.functional.CollectionTest.testQueueSerialization":402,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":656,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":594,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":674,"com.google.gson.functional.MapTest.testMapOfMapSerialization":151,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":304,"com.google.gson.JavaSerializationTest.testMapIsSerializable":678,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":551,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":641,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":50,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":309,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":694,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":271,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":448,"com.google.gson.functional.FieldNamingTest.testIdentity":216,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":476,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":94,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":81,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":174,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":184,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":276,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":329,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":568,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":442,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":334,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":425,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":64,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":555,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":548,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":260,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":524,"com.google.gson.functional.MapTest.testMapSubclassSerialization":145,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":323,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":107,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":134,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":539,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":388,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":417,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":434,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":588,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":620,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":54,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":101,"com.google.gson.functional.EnumTest.testEnumSubclass":383,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":310,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":75,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":446,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":294,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":424,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":513,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":4,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":569,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":591,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":65,"com.google.gson.stream.JsonWriterTest.testNullName":650,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":187,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":139,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":461,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":696,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":561,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":595,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":37,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":305,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":255,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":67,"com.google.gson.MixedStreamTest.testWriteNulls":435,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":451,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":206,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":486,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":202,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":58,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":100,"com.google.gson.CommentsTest.testParseComments":649,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":682,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":97,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":269,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":277,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":345,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":465,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":605,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":449,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":154,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":335,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":645,"com.google.gson.MixedStreamTest.testReadInvalidState":646,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":257,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":322,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":29,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":496,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":515,"com.google.gson.JsonParserTest.testParseMixedArray":19,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":297,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":668,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":468,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":670,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":342,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":509,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":301,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":48,"com.google.gson.JsonArrayTest.testRemove":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":244,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":317,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":460,"com.google.gson.functional.MapTest.testMapDeserialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":240,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":354,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":144,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":95,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":519,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":665,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":148,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":360,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":679,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":3,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":52,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":283,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":418,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":106,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":518,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":182,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":274,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":153,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":350,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":259,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":565,"com.google.gson.functional.PrimitiveTest.testShortSerialization":321,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":478,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":16,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":608,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":372,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":447,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":589,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":693,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":233,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":573,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":212,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":382,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":692,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":130,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":133,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":688,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":526,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":586,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":325,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":412,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":92,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":471,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":23,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":328,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":615,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":658,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":173,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":63,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":292,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":223,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":87,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":6,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":592,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":84,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":71,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":385,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":170,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":178,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":546,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":413,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":477,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":245,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":361,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":579,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":235,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":554,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":192,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":637,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":570,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":483,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":308,"com.google.gson.JsonArrayTest.testSet":498,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":326,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":396,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":359,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":381,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":35,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":30,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":70,"com.google.gson.functional.MapTest.testGeneralMapField":158,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":199,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":520,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":618,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":208,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":414,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":252,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":224,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":296,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":399,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":315,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":26,"com.google.gson.MixedStreamTest.testReadMixedStreamed":137,"com.google.gson.JsonObjectTest.testDeepCopy":506,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":469,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":510,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":530,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":88,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":409,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":443,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":114,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":596,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":371,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":243,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":454,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":373,"com.google.gson.JsonArrayTest.testDeepCopy":503,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":270,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":327,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":116,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":391,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":653,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":587,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":242,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":487,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":125,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":542,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":640,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":631,"com.google.gson.functional.ObjectTest.testNestedDeserialization":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":273,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":288,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":423,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":33,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":186,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":369,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":617,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":344,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":502,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":531,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":540,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":624,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":374,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":541,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":15,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":499,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":411,"com.google.gson.functional.ObjectTest.testNullSerialization":281,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":180,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":492,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":527,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":157,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":295,"com.google.gson.functional.MapTest.testInterfaceTypeMap":155,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":463,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":666,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":191,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":685,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":571,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":123,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":384,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":419,"com.google.gson.MixedStreamTest.testReadClosed":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":225,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":367,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":581,"com.google.gson.MixedStreamTest.testWriteClosed":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":34,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":404,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":45,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":558,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":103,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":347,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":293,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":343,"com.google.gson.stream.JsonWriterTest.testLongs":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":258,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":195,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":279,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":403,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":111,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":124,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":599,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":392,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":40,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":407,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":511,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":248,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":489,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":47,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":619,"com.google.gson.stream.JsonWriterTest.testNumbers":667,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":300,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":545,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":61,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":346,"com.google.gson.functional.CollectionTest.testQueueDeserialization":644,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":303,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":597,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":626,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":128,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":166,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":256,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":80,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":237,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":83,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":122,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":400,"com.google.gson.functional.MapTest.testRawMapSerialization":160,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":433,"com.google.gson.JsonParserTest.testParseReader":680,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":642,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":553,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":659,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":38,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":286,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":31,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":363,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":429,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":201,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":262,"com.google.gson.functional.PrimitiveTest.testByteSerialization":318,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":431,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":1,"com.google.gson.ObjectTypeAdapterTest.testSerialize":497,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":578,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":664,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":13,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":207,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":213,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":104,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":485,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":495,"com.google.gson.functional.MapTest.testMapWithQuotes":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":228,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":584,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":625,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":266,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":621,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":272,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":44,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":226,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":220,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":491,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":99,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":82,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":234,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":311,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":562,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":73,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":229,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":236,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":390,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":611,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":264,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":494,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":459,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":17,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":254,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":179,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":341,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":634,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":135,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":560,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":493,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":572,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":672,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":7,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":657,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":77,"com.google.gson.functional.ObjectTest.testNestedSerialization":287,"com.google.gson.JsonObjectTest.testAddingStringProperties":500,"com.google.gson.internal.LinkedTreeMapTest.testClear":689,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":397,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":299,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":398,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":628,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":395,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":159,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":143,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":339,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":432,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":438,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":677,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":282,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":630,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":484,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":193,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":53,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":142,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":523,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":51,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":78,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":110,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":660,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":337,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":205,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":132,"com.google.gson.functional.CollectionTest.testSetSerialization":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":268,"com.google.gson.functional.StringTest.testStringValueSerialization":338,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":352,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":169,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":36,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":217,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":638,"com.google.gson.MixedStreamTest.testWriteInvalidState":436,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":458,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":8,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":585,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":209,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":482,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":232,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":675,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":27,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":214,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":56,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":655,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":126,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":366,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":508,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":249,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":2,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":528,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":203,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":635},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"801a5dd3-3e61-11e6-b2af-d119bf8509c1","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[26,27],"tindex":"801a84e4-3e61-11e6-b2af-77b1be3793fc","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[18],"tindex":"801aabf5-3e61-11e6-b2af-977a481b22ca","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"801aabf6-3e61-11e6-b2af-3b9db7c1784d","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,10,11,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,18,132,133,134,135,136,137,138],"tindex":"801aabf7-3e61-11e6-b2af-f71cdecf2ef0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"801ad308-3e61-11e6-b2af-199eedd450bb","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[139,140,141,142,29,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,0,165,166,32,167,168,169,1,2,170,171,172,173,174,175,176,38,177,178,179,180,181,182,44,183,3,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,47,217,48,49,50,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,55,263,264,265,56,57,58,59,61,266,267,4,5,6,268,269,270,7,271,272,273,274,275,276,66,277,278,279,8,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,9,10,11,12,13,329,14,15,330,331,332,333,334,335,336,337,338,339,94,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,16,362,363,364,365,366,367,368,369,370,371,372,373,99,17,374,101,375,376,377,103,104,105,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,116,396,397,120,398,399,121,122,123,129,400,130,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,18,423,424,425,426,427,428,133,134,135,136,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,20,21,447,448],"tindex":"801ad309-3e61-11e6-b2af-f11e6a8969d9","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"801afa1a-3e61-11e6-b2af-036a496a93da","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,32,183,3,184,185,186,187,188,192,193,196,12,13,329,14,15,346,347,17,18,425,429,430,431],"tindex":"801b212b-3e61-11e6-b2af-07cb82b7e7c5","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src != null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[0,32,183,3,184,185,186,187,188,192,193,196,9,10,11,12,13,14,15,346,347,18,429,22,23,24,25],"tindex":"801b212c-3e61-11e6-b2af-e51a6decc922","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                    if (element instanceof com.google.gson.JsonObject) {\n                        java.lang.String = name;\n                        return com.google.gson.internal.bind.JsonTreeWriter.this;\n                    } \n                    throw new java.lang.IllegalStateException();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"801b483d-3e61-11e6-b2af-2f5cc73d3036","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[368,371],"tindex":"801b483e-3e61-11e6-b2af-d7f96516d872","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"801b483f-3e61-11e6-b2af-c3fdc89c2540","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"801b6e50-3e61-11e6-b2af-39b796789925","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"801b6e51-3e61-11e6-b2af-d5c6026b999b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801b6e52-3e61-11e6-b2af-31ac8e70d8d9","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                            } \n                            java.util.Date java.util.Date = deserializeToDate(json);\n                            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                                return date;\n                            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                                return new java.sql.Timestamp(date.getTime());\n                            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                                return new java.sql.Date(date.getTime());\n                            } else {\n                                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[318],"tindex":"801b6e53-3e61-11e6-b2af-e73f2132a0b4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[141,142,449,28,29,30,143,450,31,144,451,452,145,146,148,149,453,454,151,455,456,155,157,158,161,457,163,0,32,169,174,38,41,182,44,3,186,187,188,189,191,192,193,46,194,195,196,197,198,458,199,200,201,202,203,459,460,204,205,206,461,462,463,207,464,208,465,209,466,210,467,211,468,212,213,214,215,216,47,217,48,49,50,218,219,220,221,222,224,228,229,230,469,233,244,246,248,470,250,471,251,252,254,256,257,259,472,473,262,55,474,56,57,58,59,61,266,62,267,475,476,63,4,5,6,477,268,269,270,478,7,479,271,272,273,274,64,65,275,276,66,67,68,277,69,70,279,282,75,76,285,286,287,79,290,81,82,85,295,480,481,297,298,299,301,302,482,303,304,306,309,311,312,313,314,483,319,322,323,324,484,325,326,327,9,88,10,11,12,13,329,14,15,331,333,335,485,89,486,487,488,339,93,94,489,341,490,342,344,345,346,347,348,349,350,351,352,353,354,355,356,96,357,491,358,359,360,16,364,365,366,367,368,369,370,371,372,492,373,99,17,374,101,375,377,103,104,105,493,107,382,383,384,108,385,386,389,109,110,391,392,395,116,117,118,119,120,398,399,121,122,129,400,130,401,403,404,406,407,494,408,410,412,413,414,415,416,418,18,423,424,425,426,132,427,428,133,134,135,136,429,430,433,434,137,138,495,440,441,442,443,444,445,446,496,497],"tindex":"801b9564-3e61-11e6-b2af-19a9f764a0c3","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[1,2,249,260,263,264,281,329,358,16,363,435,25],"tindex":"801b9565-3e61-11e6-b2af-b7a465a1269f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801b9566-3e61-11e6-b2af-21683dbbf265","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[498],"tindex":"801bbc77-3e61-11e6-b2af-e5724f5e4846","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,4,12,13,14,15,89,90,91,92,499,425,500],"tindex":"801bbc78-3e61-11e6-b2af-3dbae84d5968","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[144,187,192,226,501,12,89,91,499,127,18,19,502,498,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521],"tindex":"801bbc79-3e61-11e6-b2af-1b8bfbef0b18","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801bbc7a-3e61-11e6-b2af-31bfb08ca818","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                            } \n                            java.util.Date java.util.Date = deserializeToDate(json);\n                            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                                return date;\n                            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                                return new java.sql.Timestamp(date.getTime());\n                            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                                return new java.sql.Date(date.getTime());\n                            } else {\n                                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[149,155,157,0,184,186,187,188,189,191,192,193,195,196,205,210,217,233,356,357,359,360,363,364,405],"tindex":"801bbc7b-3e61-11e6-b2af-f5d200fe7055","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[522,139,140,523,141,142,449,28,29,30,143,450,31,524,144,451,525,452,145,146,526,527,147,528,148,529,149,453,530,454,531,150,151,152,455,456,153,154,532,155,156,157,158,159,160,533,161,162,457,163,534,535,164,0,165,166,32,167,536,33,168,34,35,169,1,2,537,538,170,539,171,540,172,36,173,37,174,175,176,38,177,541,178,179,180,39,40,181,41,182,42,43,183,3,184,185,186,187,188,189,190,191,192,193,45,46,194,195,196,197,198,458,199,200,201,202,203,459,460,204,205,206,461,462,463,207,464,208,465,209,466,210,467,211,468,212,213,214,215,216,218,219,220,221,222,542,223,224,225,543,51,52,226,544,227,228,545,229,501,230,231,546,469,232,547,233,548,234,235,236,237,238,53,239,549,240,241,550,242,551,243,244,245,246,552,247,553,554,248,470,249,250,471,251,252,555,253,254,255,256,257,258,556,557,259,260,472,261,558,473,262,54,55,263,559,560,474,264,265,56,57,58,59,60,61,266,62,267,475,476,63,4,5,6,477,268,269,270,478,7,479,271,272,273,274,64,65,275,276,66,67,68,277,69,70,278,71,72,279,8,73,561,280,74,281,282,562,75,283,76,284,285,77,286,287,288,78,289,79,80,563,564,290,81,291,292,82,293,83,84,85,86,565,566,567,294,568,295,569,570,571,572,480,296,481,573,297,574,575,576,577,578,579,580,298,299,581,582,583,584,585,300,586,301,302,587,482,303,588,589,304,590,305,306,591,592,307,308,593,594,595,309,596,597,598,599,600,601,602,603,310,604,311,605,312,313,606,607,314,608,609,315,610,316,611,87,483,317,318,319,320,321,322,323,612,613,614,324,484,325,615,616,617,326,327,618,328,619,620,9,621,88,10,11,12,13,329,14,15,622,330,331,332,333,334,623,624,335,485,336,625,626,627,337,628,629,338,89,90,91,92,499,486,487,488,339,93,630,94,340,489,341,490,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,95,96,357,491,358,359,360,97,361,16,362,363,631,364,98,365,366,367,368,369,370,371,372,492,373,99,100,17,374,101,375,376,377,102,103,104,105,106,378,493,107,379,380,381,382,383,632,633,384,108,385,386,387,388,389,109,110,390,391,111,112,392,634,393,113,114,394,115,395,116,396,397,635,117,118,119,636,120,398,399,121,122,129,400,130,401,637,638,639,402,403,404,405,406,640,641,407,494,131,408,409,642,410,411,643,412,644,413,414,415,416,417,418,419,420,421,422,18,423,645,424,425,426,132,427,428,133,134,135,136,432,433,646,647,434,435,436,437,648,438,439,137,138,495,440,441,442,443,649,444,445,446,20,21],"tindex":"801be38c-3e61-11e6-b2af-7f7c8539f19a","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return in.nextDouble();\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[650],"tindex":"801c0a9d-3e61-11e6-b2af-f7d6b9d4bc7e","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"801c0a9e-3e61-11e6-b2af-5bbae77a7300","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"801c0a9f-3e61-11e6-b2af-356cc103b55c","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[139,140,28,29,30,143,31,149,456,155,157,158,161,0,165,32,167,33,168,34,35,169,171,172,36,37,174,175,176,38,177,541,178,179,180,39,40,181,41,182,42,43,44,183,3,184,185,186,187,188,189,190,191,192,193,45,46,194,195,196,208,465,209,212,213,214,215,216,47,217,48,49,50,218,220,221,222,51,52,546,233,53,243,253,258,54,55,265,56,57,58,59,60,61,62,63,4,6,268,274,64,65,275,276,66,67,68,277,69,70,278,71,72,279,73,280,74,282,75,76,285,77,286,287,78,289,79,80,290,81,291,292,82,293,83,84,85,86,87,9,88,10,11,12,13,14,15,89,90,91,92,499,339,93,94,340,341,490,342,343,344,345,346,347,350,351,355,356,95,96,359,360,97,361,362,364,98,99,100,374,101,375,376,377,102,103,104,105,106,378,107,379,384,108,389,109,110,390,391,111,112,392,113,114,394,115,116,396,397,117,118,119,120,121,122,129,130,406,131,408,410,417,420,421,18,424,426,132,427,428,133,134,135,136,433,434,436,439,137,138,440,497],"tindex":"801c0aa0-3e61-11e6-b2af-55e4c15cf6a8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801c31b1-3e61-11e6-b2af-4d4d8f49a912","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801c31b2-3e61-11e6-b2af-1d5a7da5515a","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"801c31b3-3e61-11e6-b2af-e79213cf5890","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[32,185,187,192,193,196,12,13,329,14,15,346,347,17,425],"tindex":"801c58c4-3e61-11e6-b2af-abf92539289b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"801c58c5-3e61-11e6-b2af-23d8307b508a","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801c58c6-3e61-11e6-b2af-39c258778b6e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            synchronized(java.text.DateFormat) {\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException e) {\n                                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"801c58c7-3e61-11e6-b2af-f9970cadf222","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src != null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"801c58c8-3e61-11e6-b2af-c9315217873c","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"801c7fd9-3e61-11e6-b2af-9524344a304a","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[234,236,237,256,292],"tindex":"801c7fda-3e61-11e6-b2af-6df8ebfada7c","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"801c7fdb-3e61-11e6-b2af-a53cfb5bf209","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return in.nextDouble();\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801c7fdc-3e61-11e6-b2af-f3d3fa161b6d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[504],"tindex":"801c7fdd-3e61-11e6-b2af-a3c64b327422","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"801ca6ee-3e61-11e6-b2af-399d60d1d432","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"801ca6ef-3e61-11e6-b2af-150c068e242d","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"801ca6f0-3e61-11e6-b2af-71f3afe303bb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"801ca6f1-3e61-11e6-b2af-ff374fe7974d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[651],"tindex":"801cce02-3e61-11e6-b2af-0b65a47a49aa","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[235,242,245,246,652,653,654,445,446],"tindex":"801cce03-3e61-11e6-b2af-ffc23be1231f","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801cce04-3e61-11e6-b2af-6beab4b1d692","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[233],"tindex":"801cce05-3e61-11e6-b2af-d5e5ec0c68e4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[655],"tindex":"801cf516-3e61-11e6-b2af-0135e7e59239","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801cf517-3e61-11e6-b2af-3974e2b4b005","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"801cf518-3e61-11e6-b2af-d5fadb7d02ee","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,184,186,187,188,192,193,196],"tindex":"801cf519-3e61-11e6-b2af-87fd77deb30e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801cf51a-3e61-11e6-b2af-398264f70c94","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[656],"tindex":"801d1c2b-3e61-11e6-b2af-296c998ed663","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[142,144,146,152,158,160,164,165,167,168,169,171,172,174,38,180,182,44,3,190,194,198,203,206,207,208,211,212,213,214,215,216,218,219,220,221,222,226,228,232,243,258,55,265,5,6,268,7,271,272,274,275,276,277,280,282,285,286,287,290,291,293,294,299,305,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,327,328,9,10,11,339,94,340,344,345,348,349,350,351,352,353,354,355,99,17,374,101,375,376,377,103,104,105,378,379,389,390,391,392,394,116,120,121,122,657,123,658,659,660,661,662,663,129,130,401,403,406,408,410,411,18,134,135,136,664,665,666,667,433,434,437,442,497,507,508,23],"tindex":"801d1c2c-3e61-11e6-b2af-5fdee020250b","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801d1c2d-3e61-11e6-b2af-5d94db88f115","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801d1c2e-3e61-11e6-b2af-193c1c5fb1df","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[146,152,158,160,164,165,32,167,169,172,174,180,182,44,183,3,184,185,190,194,198,203,206,207,208,211,212,213,214,215,216,218,219,220,221,222,55,265,6,268,274,275,277,280,282,285,287,290,291,293,316,320,322,9,10,11,339,94,340,344,345,347,348,349,350,351,352,353,354,355,99,17,374,101,375,376,377,103,104,105,378,379,389,390,391,392,394,116,120,121,122,659,129,401,403,406,408,410,411,134,135,136,433,434,497],"tindex":"801d1c2f-3e61-11e6-b2af-b162b978f63f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"801d4340-3e61-11e6-b2af-8d0b1c9ebf1d","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[102,106,378,379],"tindex":"801d4341-3e61-11e6-b2af-234bd79bff35","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[233,361],"tindex":"801d4342-3e61-11e6-b2af-47e4f3f99800","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[31,456,161,171,172,36,37,174,175,176,38,177,541,178,179,180,39,40,42,43,44,3,187,190,192,45,46,194,196,47,217,48,49,50,218,220,221,222,51,52,233,53,243,258,56,57,58,59,60,61,62,4,73,280,291,292,296,12,13,14,15,342,343,344,345,346,347,378,379,396,397,117,129,131,410,417,420,421,497],"tindex":"801d4343-3e61-11e6-b2af-654e23c04aa7","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"801d6a54-3e61-11e6-b2af-9737c72d65e0","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"801d6a55-3e61-11e6-b2af-33c7c59c04b9","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801d6a56-3e61-11e6-b2af-1142aa590990","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3,190,207,295,298,323,377],"tindex":"801d6a57-3e61-11e6-b2af-bfe49fdf8505","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[668],"tindex":"801d6a58-3e61-11e6-b2af-ffb14e85c898","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"801d9169-3e61-11e6-b2af-498124bfcb8f","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"801d916a-3e61-11e6-b2af-dfc8c0b6c289","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801d916b-3e61-11e6-b2af-31a909039952","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801db87c-3e61-11e6-b2af-930c8d5c4d59","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            synchronized(java.text.DateFormat) {\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException e) {\n                                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"801db87d-3e61-11e6-b2af-33c90cfa0534","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[669,670,671],"tindex":"801db87e-3e61-11e6-b2af-0d9076ad4f48","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"801db87f-3e61-11e6-b2af-65c9df65db74","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                {\n                    if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                    if (element instanceof com.google.gson.JsonObject) {\n                        java.lang.String = name;\n                        return com.google.gson.internal.bind.JsonTreeWriter.this;\n                    } \n                    throw new java.lang.IllegalStateException();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"801ddf90-3e61-11e6-b2af-2b231afda3a7","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[166,33,168,34],"tindex":"801ddf91-3e61-11e6-b2af-2de099b7d592","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[672],"tindex":"801ddf92-3e61-11e6-b2af-b7ee70aef7ca","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"801e06a3-3e61-11e6-b2af-e5e8b26647a6","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"801e06a4-3e61-11e6-b2af-43957c254ed8","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"801e06a5-3e61-11e6-b2af-81f840d016e9","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src != null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801e2db6-3e61-11e6-b2af-6fc525811c3d","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"801e2db7-3e61-11e6-b2af-9f63b213f1c7","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            synchronized(java.text.DateFormat) {\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException ignored) {\n                                }\n                                try {\n                                    return java.text.DateFormat.parse(json.getAsString());\n                                } catch (java.text.ParseException e) {\n                                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"801e2db8-3e61-11e6-b2af-613fa3ab9992","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonParseException();\n                    } else {\n                        {\n                            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                            } \n                            java.util.Date java.util.Date = deserializeToDate(json);\n                            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                                return date;\n                            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                                return new java.sql.Timestamp(date.getTime());\n                            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                                return new java.sql.Date(date.getTime());\n                            } else {\n                                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801e2db9-3e61-11e6-b2af-9f5dcec825f1","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[356,359,360,364,99,101,375,104,105],"tindex":"801e54ca-3e61-11e6-b2af-ef6fc75c3577","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[26,27],"tindex":"801e54cb-3e61-11e6-b2af-e351fa14e0c8","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[139,140,141,142,29,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,0,165,166,167,168,169,170,171,172,173,174,175,176,38,177,541,178,179,180,181,182,44,3,189,190,191,194,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,47,217,48,49,50,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,261,262,55,56,57,58,59,61,266,267,4,5,6,268,269,270,7,271,272,273,274,275,276,66,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,9,10,11,330,331,332,333,334,335,336,337,338,339,94,340,341,342,343,344,345,348,349,350,351,352,353,354,355,356,357,358,359,360,361,16,362,364,365,366,367,368,369,370,371,372,373,99,17,374,101,375,376,377,103,104,105,378,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,116,396,397,120,398,399,121,122,123,129,400,130,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,18,423,424,425,426,427,428,133,134,135,136,432,440,441,442,443,444,445,446],"tindex":"801e54cc-3e61-11e6-b2af-f5d951974789","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"801e54cd-3e61-11e6-b2af-0d64794f363d","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801e7bde-3e61-11e6-b2af-43fb63a2f527","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"801e7bdf-3e61-11e6-b2af-63407cbadff6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"801e7be0-3e61-11e6-b2af-798ea1b2f7ef","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        {\n                            if (serializeSpecialFloatingPointValues) {\n                                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                            } \n                            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                                @java.lang.Override\n                                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                        in.nextNull();\n                                        return null;\n                                    } \n                                    return in.nextDouble();\n                                }\n\n                                @java.lang.Override\n                                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                                    if (value == null) {\n                                        out.nullValue();\n                                        return ;\n                                    } \n                                    double double = value.doubleValue();\n                                    checkValidFloatingPoint(doubleValue);\n                                    out.value(value);\n                                }\n                            };\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"801e7be1-3e61-11e6-b2af-813adc82d5d1","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src != null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"801e7be2-3e61-11e6-b2af-71d7b3b6d5c7","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (src == null) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src != null) {\n                                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                        throw new java.lang.RuntimeException();\n                                    } else {\n                                        {\n                                            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                                            toJson(src, typeOfSrc, writer);\n                                            return writer.get();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[139,140,141,29,143,145,146,147,148,149,150,151,155,157,158,160,161,163,0,165,167,169,1,2,170,176,177,178,179,181,44,3,189,190,191,194,195,197,198,201,202,204,205,207,208,210,47,217,48,49,50,223,224,225,227,228,229,230,231,234,236,237,238,239,240,241,244,247,248,250,251,252,254,255,256,257,259,261,262,55,265,56,57,58,59,61,266,267,4,269,270,273,274,275,66,277,278,279,282,285,287,290,292,293,296,297,300,316,10,11,330,331,332,333,334,335,336,337,338,339,94,340,342,343,351,355,357,365,366,367,368,369,370,371,372,373,17,377,380,381,382,383,384,385,386,387,390,393,394,395,116,396,397,120,398,399,121,122,123,658,659,673,129,400,402,404,405,406,407,408,409,412,413,414,415,416,417,418,420,421,18,423,134,135,136,665,432,674,675,676,677,433,434,438,440,443,444,20],"tindex":"801e7be3-3e61-11e6-b2af-83870aee9539","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"801ea2f4-3e61-11e6-b2af-3b4d197d268c","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[139,140,141,142,29,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,160,161,162,163,164,0,166,167,169,2,170,171,172,173,174,175,176,38,177,541,178,179,180,181,182,44,183,3,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,206,207,208,209,210,211,212,213,214,215,216,47,217,48,49,50,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,55,263,265,56,57,58,59,61,266,267,4,5,6,268,269,270,7,271,272,273,274,275,276,66,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,9,10,11,12,13,329,14,15,330,331,332,333,334,335,336,337,338,339,94,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,357,358,364,365,366,367,368,369,370,371,372,373,99,17,374,101,375,376,377,103,104,105,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,116,396,397,120,398,399,121,122,123,129,400,130,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,18,423,424,425,426,427,428,133,134,135,136,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,20,21,22],"tindex":"801ea2f5-3e61-11e6-b2af-dbaf6d5b7a43","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[678,449,28,29,30,143,450,31,452,526,527,528,529,454,455,533,457,534,0,32,35,1,2,44,183,3,184,185,186,187,188,192,193,196,543,232,55,475,476,4,5,6,7,9,10,11,12,13,14,15,89,90,91,92,499,486,489,346,347,491,16,17,493,127,679,643,18,425,134,135,680,681,136,429,682,20,655,651,683,684,656,506,500,21,685,26,27,23,24,25,686,511,687,688,689,690,691,692,693,694,695,696,697],"tindex":"801ea2f6-3e61-11e6-b2af-394df2e49267","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248382044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":674,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":552,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":329,"com.google.gson.functional.StringTest.testStringValueDeserialization":327,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":652,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":292,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":216,"com.google.gson.JsonPrimitiveTest.testDeepCopy":680,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":465,"com.google.gson.stream.JsonWriterTest.testRepeatedName":649,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":40,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":174,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":314,"com.google.gson.MixedStreamTest.testWriteLenient":604,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":695,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":37,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":545,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":352,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":138,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":369,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":513,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":104,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":585,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":242,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":474,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":692,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":95,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":561,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":684,"com.google.gson.functional.ObjectTest.testSingletonLists":136,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":217,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":330,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":458,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":617,"com.google.gson.stream.JsonWriterTest.testStrings":654,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":83,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":178,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":233,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":153,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":619,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":516,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":27,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":627,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":343,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":665,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":109,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":244,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":505,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":274,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":450,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":590,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":123,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":273,"com.google.gson.functional.EnumTest.testEnumCaseMapping":584,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":328,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":610,"com.google.gson.functional.JsonTreeTest.testToJsonTree":9,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":449,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":7,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":36,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":103,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":625,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":209,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":460,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":564,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":631,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":362,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":129,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":340,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":149,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":677,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":526,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":660,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":466,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":154,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":691,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":121,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":447,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":162,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":659,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":235,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":325,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":531,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":530,"com.google.gson.JsonParserTest.testParseString":686,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":232,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":510,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":626,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":6,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":537,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":165,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":421,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":669,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":215,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":487,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":266,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":315,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":502,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":661,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":206,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":441,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":697,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":69,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":288,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":321,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":503,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":161,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":415,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":25,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":144,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":409,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":615,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":47,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":284,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":470,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":108,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":51,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":93,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":71,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":175,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":223,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":391,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":208,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":446,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":132,"com.google.gson.functional.CollectionTest.testSetDeserialization":368,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":243,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":148,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":378,"com.google.gson.functional.EnumTest.testEnumSet":575,"com.google.gson.JsonStreamParserTest.testIterator":675,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":494,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":70,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":197,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":261,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":155,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":92,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":589,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":507,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":66,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":118,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":182,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":519,"com.google.gson.functional.MapTest.testHashMapDeserialization":255,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":463,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":221,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":410,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":554,"com.google.gson.MixedStreamTest.testReadNulls":605,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":297,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":550,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":667,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":181,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":437,"com.google.gson.functional.MapTest.testSortedMap":277,"com.google.gson.functional.MapTest.testMapSerialization":272,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":553,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":24,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":387,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":500,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":16,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":428,"com.google.gson.functional.MapTest.testSerializeMaps":258,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":384,"com.google.gson.functional.MapTest.testComplexKeysSerialization":285,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":377,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":18,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":289,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":696,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":131,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":582,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":573,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":634,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":309,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":580,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":247,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":641,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":703,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":42,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":164,"com.google.gson.functional.MapTest.testStringKeyDeserialization":287,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":3,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":75,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":533,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":291,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":469,"com.google.gson.functional.PrettyPrintingTest.testMap":245,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":464,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":355,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":190,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":556,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":434,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":618,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":637,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":333,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":203,"com.google.gson.functional.MapTest.testMapSerializationEmpty":286,"com.google.gson.functional.CollectionTest.testQueueSerialization":359,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":495,"com.google.gson.functional.MapTest.testMapOfMapSerialization":271,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":486,"com.google.gson.JavaSerializationTest.testMapIsSerializable":613,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":211,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":365,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":349,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":84,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":701,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":331,"com.google.gson.functional.FieldNamingTest.testIdentity":385,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":672,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":72,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":112,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":166,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":642,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":46,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":135,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":238,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":547,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":452,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":591,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":332,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":443,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":294,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":226,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":234,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":348,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":252,"com.google.gson.functional.MapTest.testMapSubclassSerialization":257,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":529,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":102,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":312,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":380,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":397,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":484,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":586,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":189,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":544,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":177,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":91,"com.google.gson.functional.EnumTest.testEnumSubclass":578,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":506,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":151,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":620,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":451,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":442,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":595,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":512,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":74,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":22,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":454,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":296,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":12,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":490,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":295,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":49,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":424,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":593,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":633,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":147,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":496,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":45,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":488,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":228,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":137,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":254,"com.google.gson.MixedStreamTest.testWriteNulls":671,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":423,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":319,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":417,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":130,"com.google.gson.CommentsTest.testParseComments":599,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":79,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":567,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":403,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":430,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":509,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":386,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":276,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":335,"com.google.gson.MixedStreamTest.testReadInvalidState":601,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":239,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":230,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":528,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":388,"com.google.gson.JsonParserTest.testParseMixedArray":688,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":670,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":462,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":707,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":436,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":2,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":14,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":400,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":702,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":479,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":347,"com.google.gson.JsonArrayTest.testRemove":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":213,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":523,"com.google.gson.functional.MapTest.testMapDeserialization":264,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":207,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":250,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":253,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":560,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":646,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":58,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":263,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":566,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":562,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":310,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":237,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":187,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":152,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":299,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":398,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":193,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":99,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":693,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":308,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":246,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":275,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":448,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":81,"com.google.gson.functional.PrimitiveTest.testShortSerialization":527,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":569,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":515,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":125,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":699,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":485,"com.google.gson.JsonParserTest.testParseEmptyString":689,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":632,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":461,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":381,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":577,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":354,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":311,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":629,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":259,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":478,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":375,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":535,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":317,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":668,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":224,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":574,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":609,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":656,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":542,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":536,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":623,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":44,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":57,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":73,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":168,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":184,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":658,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":678,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":521,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":62,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":491,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":172,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":143,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":583,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":301,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":194,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":363,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":393,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":77,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":214,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":568,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":200,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":440,"com.google.gson.stream.JsonWriterTest.testNullStringValue":647,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":219,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":54,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":455,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":522,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":493,"com.google.gson.JsonArrayTest.testSet":662,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":539,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":406,"com.google.gson.JsonPrimitiveTest.testEquals":23,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":565,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":576,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":558,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":389,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":141,"com.google.gson.functional.MapTest.testGeneralMapField":281,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":414,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":541,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":394,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":429,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":444,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":225,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":34,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":324,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":459,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":517,"com.google.gson.MixedStreamTest.testReadMixedStreamed":608,"com.google.gson.JsonObjectTest.testDeepCopy":704,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":195,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":267,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":480,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":370,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":439,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":592,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":106,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":124,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":700,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":612,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":212,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":268,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":351,"com.google.gson.JsonArrayTest.testDeepCopy":638,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":540,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":127,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":30,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":648,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":481,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":657,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":210,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":320,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":679,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":183,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":364,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":17,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":572,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":86,"com.google.gson.functional.ObjectTest.testNestedDeserialization":173,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":110,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":159,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":555,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":48,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":122,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":538,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":402,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":41,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":269,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":334,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":690,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":90,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":525,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":300,"com.google.gson.JavaSerializationTest.testListIsSerializable":614,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":318,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":549,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":373,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":303,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":350,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":260,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":280,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":453,"com.google.gson.functional.MapTest.testInterfaceTypeMap":278,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":426,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":396,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":53,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":456,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":581,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":307,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":185,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":472,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":20,"com.google.gson.MixedStreamTest.testWriteClosed":607,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":361,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":557,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":56,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":236,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":96,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":52,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":405,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":401,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":683,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":231,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":59,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":145,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":360,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":11,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":706,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":501,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":305,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":366,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":640,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":666,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":694,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":220,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":114,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":345,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":543,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":682,"com.google.gson.JsonParserTest.testParseInvalidJson":639,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":477,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":133,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":411,"com.google.gson.functional.CollectionTest.testQueueDeserialization":376,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":483,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":499,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":339,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":551,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":229,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":163,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":265,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":202,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":171,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":326,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":353,"com.google.gson.functional.MapTest.testRawMapSerialization":283,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":600,"com.google.gson.JsonParserTest.testParseReader":685,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":218,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":624,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":157,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":298,"com.google.gson.JsonPrimitiveTest.testExponential":681,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":392,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":571,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":596,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":176,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":416,"com.google.gson.functional.PrimitiveTest.testByteSerialization":524,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":598,"com.google.gson.ObjectTypeAdapterTest.testSerialize":616,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":644,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":322,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":467,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":13,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":546,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":10,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":19,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":427,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":382,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":97,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":336,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":588,"com.google.gson.functional.MapTest.testMapWithQuotes":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":191,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":475,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":68,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":438,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":85,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":117,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":188,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":241,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":563,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":87,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":169,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":199,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":508,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":146,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":35,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":201,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":520,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":367,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":38,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":89,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":412,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":302,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":115,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":21,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":587,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":313,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":180,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":101,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":82,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":635,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":156,"com.google.gson.functional.ObjectTest.testNestedSerialization":158,"com.google.gson.internal.LinkedTreeMapTest.testClear":630,"com.google.gson.JsonObjectTest.testAddingStringProperties":705,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":407,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":323,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":342,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":471,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":126,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":282,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":390,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":61,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":687,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":606,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":621,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":655,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":111,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":150,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":534,"com.google.gson.JsonPrimitiveTest.testBoolean":676,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":55,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":204,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":473,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":611,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":186,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":28,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":636,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":341,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":422,"com.google.gson.functional.CollectionTest.testSetSerialization":372,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":445,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":78,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":248,"com.google.gson.functional.StringTest.testStringValueSerialization":344,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":134,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":43,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":346,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":357,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":413,"com.google.gson.MixedStreamTest.testWriteInvalidState":603,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":476,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":431,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":482,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":196,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":383,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":628,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":128,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":116,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":673,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":698,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":222,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":645,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":262,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":651,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":63,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":418},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"cb0e35ea-3e84-11e6-8ce8-e915d46f169f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"cb0eab1b-3e84-11e6-8ce8-e5a257c9bbe0","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"cb0eab1c-3e84-11e6-8ce8-c13d32d89b2a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cb0eab1d-3e84-11e6-8ce8-dfe9fd98a1a2","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[1,2,3,4],"tindex":"cb0eab1e-3e84-11e6-8ce8-eb310487172c","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"cb0ed22f-3e84-11e6-8ce8-d9d64c0ffa74","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"cb0ed230-3e84-11e6-8ce8-c332211fe120","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"cb0f2051-3e84-11e6-8ce8-8b7d04a3fc71","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[26,27,28,29,30,31,32,33],"tindex":"cb0f2052-3e84-11e6-8ce8-d7243362d828","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"cb0f2053-3e84-11e6-8ce8-bdf70dba4122","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"cb0f4764-3e84-11e6-8ce8-793829866aea","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[1,2,3],"tindex":"cb0f4765-3e84-11e6-8ce8-1952f32c60a3","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[34,35,36,37,38,39],"tindex":"cb0f6e76-3e84-11e6-8ce8-65d39e15df64","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[1,3],"tindex":"cb0f6e77-3e84-11e6-8ce8-6536b193381e","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"cb0f6e78-3e84-11e6-8ce8-fbf8055ebceb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"cb0f6e79-3e84-11e6-8ce8-c33704b52b30","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,34,185,5,186,187,188,189,190,191,192,35,6,36,193,194,195,196,197,0,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,37,225,226,227,38,228,229,230,231,232,233,39,234,7,235,236,8,237,238,9,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,26,27,28,29,30,31,32,33,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,1,2,3,618,619,620,621],"tindex":"cb0f958a-3e84-11e6-8ce8-69c802c45a74","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"cb0fbc9b-3e84-11e6-8ce8-cb357ed198ec","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cb0fbc9c-3e84-11e6-8ce8-c5baa5264726","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"cb0fbc9d-3e84-11e6-8ce8-d172dcf96877","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[40,42,46,47,48,49,50,51,52,53,54,55,58,59,60,61,74,76,78,87,90,91,92,93,94,96,97,98,100,103,622,623,624,625,626,627,107,109,112,113,115,117,127,128,129,130,131,133,134,135,136,139,142,145,148,150,155,157,158,161,165,167,168,170,178,182,212,227,231,8,237,238,9,239,241,242,243,246,247,251,265,278,280,281,292,293,296,297,298,299,301,302,303,306,308,311,312,313,322,325,326,345,346,347,348,349,352,354,363,369,372,381,382,383,384,385,388,390,397,400,401,402,403,404,405,406,407,408,409,429,437,440,441,442,446,447,545,546,548,549,550,552,553,556,559,565,566,568,570,573,581,26,29,30,33,589,593,594,600,602,615,616],"tindex":"cb0fe3ae-3e84-11e6-8ce8-19dbc9fce170","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[109,178,8,237,238,9,316,317,374,552,558,615,628,629,630,631,632,633,634],"tindex":"cb0fe3af-3e84-11e6-8ce8-09dac537e946","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"cb0fe3b0-3e84-11e6-8ce8-33879d4d74c7","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[48,49,50,51,53,54,55,59,60,0,238,265,278,280,292,346,362,422,433,559,562,565,566,571,573],"tindex":"cb100ac1-3e84-11e6-8ce8-7ddee3fd67d6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cb100ac2-3e84-11e6-8ce8-ab6d648093de","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[40,42,46,94,635,622,623,624,636,625,626,637,479,486,489,508,540,604],"tindex":"cb100ac3-3e84-11e6-8ce8-af296a353233","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[497,510,511,525,533,539,604],"tindex":"cb100ac4-3e84-11e6-8ce8-5f03ba9155b5","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"cb1031d5-3e84-11e6-8ce8-8d963f69c00c","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cb1031d6-3e84-11e6-8ce8-a13a101a0019","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[61,62,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,89,101,114,118,119,120,121,123,39,253,292,375,386,387,388,389,390,391,392,394,396,443,545,546,547,548,549,563,564,569,588,589,590,591,592],"tindex":"cb1031d7-3e84-11e6-8ce8-739ec2d385f6","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[638,639,640,641,642,643],"tindex":"cb1031d8-3e84-11e6-8ce8-d1a5263728ed","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"cb1058e9-3e84-11e6-8ce8-5f4ba0872cd3","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"cb1058ea-3e84-11e6-8ce8-219402432d77","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[40,42,46,47,51,52,53,58,59,61,68,70,74,75,76,78,79,80,82,86,87,89,90,91,92,93,94,96,97,98,100,103,622,623,624,625,626,637,627,104,107,109,110,112,113,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,644,645,135,136,139,142,145,148,150,155,157,158,161,165,167,168,170,176,178,182,184,34,185,190,191,35,36,193,196,199,201,202,203,205,207,208,210,212,213,214,217,220,223,37,225,38,228,229,230,231,39,235,237,239,241,242,243,245,246,247,251,257,258,261,263,265,270,271,272,276,278,280,281,282,283,285,288,291,292,293,296,297,298,299,301,302,303,306,308,311,312,313,322,323,324,325,326,328,329,330,331,332,335,337,341,344,345,346,347,348,349,351,352,353,354,359,361,362,363,366,369,370,372,375,379,381,382,383,384,385,388,390,393,394,395,396,397,398,400,401,402,403,406,407,408,409,411,412,416,417,421,422,427,429,433,437,440,441,442,446,447,459,462,477,519,550,553,556,559,562,565,566,568,569,570,573,575,576,577,578,581,583,584,585,26,29,30,33,589,592,593,594,600,602,606,646,610,647,648,649,650,651,652,653,654,655,615,616,617,618,656,657,658,659,660,621],"tindex":"cb1058eb-3e84-11e6-8ce8-9953ee344b01","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[52,58,94,107,109,112,113,127,134,135,139,150,155,157,158,165,167,170,178,182,8,237,238,9,247,251,281,298,322,325,326,352,354,363,369,427,429,493,506,535,542,550,552,553,556,29,611,615],"tindex":"cb107ffc-3e84-11e6-8ce8-95b87bd9f523","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[48,49,50,54,55,60,61,68,70,72,74,79,80,81,83,86,89,101,661,109,110,114,117,118,120,121,123,644,645,176,178,34,191,35,36,37,38,39,7,8,237,238,9,278,281,289,292,314,315,316,317,318,375,386,387,388,389,390,391,392,394,396,404,405,437,440,441,443,545,546,547,548,549,552,558,563,577,596,597,598,662,638,663,664,665,666,667,668,669,670,671,672,673,674,675,676,646,677,678,679,23,680,681,682,25,683,684,685,686,615,687,688,689,690,640,691,692,641,693,694,695,696,697,698,699,700,701,702,656,657,643,658,659,703,704,705],"tindex":"cb107ffd-3e84-11e6-8ce8-57d6f5f7ed71","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[564],"tindex":"cb10a70e-3e84-11e6-8ce8-832343dba395","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"cb10a70f-3e84-11e6-8ce8-5f44b2aad2e5","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"cb10a710-3e84-11e6-8ce8-8373044fed6b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[40,41,42,43,44,45,46,47,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,622,623,706,114,118,119,120,121,122,123,125,128,130,174,213,220,224,230,39,254,292,386,387,388,389,390,391,392,394,395,396,443,545,546,547,548,549,563,564,569,588,589,590,591,592,595,618,619,620],"tindex":"cb10a711-3e84-11e6-8ce8-b53883a559a6","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[707],"tindex":"cb10ce22-3e84-11e6-8ce8-850fb4992324","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"cb10ce23-3e84-11e6-8ce8-1346e0273407","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'n') || (c == 'N')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cb10ce24-3e84-11e6-8ce8-113ad746a13d","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264356273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":43,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":57,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":400,"com.google.gson.functional.StringTest.testStringValueDeserialization":398,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":54,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":189,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":308,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":69,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":290,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":416,"com.google.gson.MixedStreamTest.testWriteLenient":581,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":621,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":198,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":393,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":528,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":254,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":544,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":356,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":498,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":509,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":148,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":317,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":480,"com.google.gson.functional.ObjectTest.testSingletonLists":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":190,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":512,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":301,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":401,"com.google.gson.stream.JsonWriterTest.testStrings":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":243,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":217,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":208,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":269,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":593,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":359,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":501,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":632,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":414,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":561,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":348,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":438,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":36,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":293,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":588,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":467,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":35,"com.google.gson.functional.EnumTest.testEnumCaseMapping":497,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":6,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":399,"com.google.gson.functional.JsonTreeTest.testToJsonTree":95,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":292,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":211,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":164,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":487,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":182,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":303,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":451,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":538,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":223,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":411,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":265,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":369,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":620,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":309,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":465,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":568,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":278,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":619,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":212,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":374,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":526,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":353,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":163,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":380,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":119,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":188,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":330,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":28,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":345,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":600,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":179,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":392,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":623,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":229,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":50,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":354,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":423,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":346,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":113,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":277,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":260,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":559,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":572,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":46,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":76,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":313,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":513,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":478,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":231,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":52,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":214,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":181,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":519,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":567,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":226,"com.google.gson.functional.CollectionTest.testSetDeserialization":543,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":149,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":66,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":264,"com.google.gson.functional.EnumTest.testEnumSet":488,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":337,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":230,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":602,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":169,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":477,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":587,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":350,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":521,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":361,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":221,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":462,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":362,"com.google.gson.functional.MapTest.testHashMapDeserialization":17,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":306,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":194,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":59,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":560,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":55,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":77,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":220,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":388,"com.google.gson.functional.MapTest.testSortedMap":39,"com.google.gson.functional.MapTest.testMapSerialization":34,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":58,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":9,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":343,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":126,"com.google.gson.functional.MapTest.testSerializeMaps":20,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":138,"com.google.gson.functional.MapTest.testComplexKeysSerialization":47,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":65,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":51,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":622,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":225,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":495,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":460,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":89,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":609,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":493,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":441,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":71,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":280,"com.google.gson.functional.MapTest.testStringKeyDeserialization":49,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":604,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":235,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":376,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":53,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":307,"com.google.gson.functional.PrettyPrintingTest.testMap":439,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":553,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":531,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":159,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":218,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":132,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":592,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":404,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":408,"com.google.gson.functional.MapTest.testMapSerializationEmpty":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":176,"com.google.gson.functional.CollectionTest.testQueueSerialization":535,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":338,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":633,"com.google.gson.functional.MapTest.testMapOfMapSerialization":33,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":329,"com.google.gson.JavaSerializationTest.testMapIsSerializable":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":184,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":540,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":144,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":340,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":244,"com.google.gson.functional.FieldNamingTest.testIdentity":139,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":232,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":427,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":282,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":75,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":94,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":251,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":395,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":295,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":589,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":403,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":564,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":248,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":200,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":171,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":210,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":15,"com.google.gson.functional.MapTest.testMapSubclassSerialization":19,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":372,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":486,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":570,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":68,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":327,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":499,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":555,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":158,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":387,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":418,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":216,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":476,"com.google.gson.functional.EnumTest.testEnumSubclass":491,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":349,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":267,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":594,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":294,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":5,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":563,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":234,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":84,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":297,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":250,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":333,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":249,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":97,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":3,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":122,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":263,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":339,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":74,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":203,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":253,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":16,"com.google.gson.MixedStreamTest.testWriteNulls":618,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":121,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":421,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":115,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":224,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":473,"com.google.gson.CommentsTest.testParseComments":591,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":239,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":454,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":128,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":352,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":435,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":8,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":38,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":406,"com.google.gson.MixedStreamTest.testReadInvalidState":578,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":205,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":371,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":10,"com.google.gson.JsonParserTest.testParseMixedArray":614,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":305,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":134,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":603,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":432,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":625,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":322,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":186,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":366,"com.google.gson.functional.MapTest.testMapDeserialization":26,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":180,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":444,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":606,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":447,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":616,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":25,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":453,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":449,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":90,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":93,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":156,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":268,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":79,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":556,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":484,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":88,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":247,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":37,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":440,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":291,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":241,"com.google.gson.functional.PrimitiveTest.testShortSerialization":370,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":456,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":358,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":328,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":170,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":304,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":135,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":490,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":530,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":569,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":21,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":321,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":378,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":613,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":197,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":461,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":585,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":385,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":379,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":630,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":73,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":233,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":151,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":500,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":629,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":364,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":236,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":334,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":288,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":259,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":496,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":67,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":166,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":539,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":551,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":237,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":187,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":455,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":173,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":391,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":192,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":102,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":532,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":298,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":365,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":336,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":382,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":516,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":452,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":489,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":63,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":11,"com.google.gson.functional.MapTest.testGeneralMapField":43,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":257,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":112,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":384,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":127,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":552,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":199,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":152,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":302,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":525,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":360,"com.google.gson.MixedStreamTest.testReadMixedStreamed":584,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":167,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":323,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":390,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":545,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":590,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":341,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":468,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":0,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":185,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":30,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":471,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":240,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":383,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":515,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":504,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":324,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":183,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":422,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":598,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":150,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":459,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":246,"com.google.gson.functional.ObjectTest.testNestedDeserialization":289,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":275,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":562,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":60,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":466,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":381,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":434,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":31,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":70,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":405,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":475,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":368,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":80,"com.google.gson.JavaSerializationTest.testListIsSerializable":2,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":397,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":420,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":548,"com.google.gson.functional.ObjectTest.testNullSerialization":612,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":83,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":470,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":22,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":42,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":296,"com.google.gson.functional.MapTest.testInterfaceTypeMap":40,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":554,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":299,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":596,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":87,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":153,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":464,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":315,"com.google.gson.MixedStreamTest.testWriteClosed":583,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":62,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":537,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":213,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":258,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":481,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":437,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":286,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":107,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":261,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":536,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":505,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":344,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":507,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":85,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":193,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":429,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":140,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":386,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":320,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":161,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":109,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":436,"com.google.gson.functional.CollectionTest.testQueueDeserialization":550,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":326,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":342,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":410,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":56,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":204,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":506,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":27,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":175,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":287,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":527,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":529,"com.google.gson.functional.MapTest.testRawMapSerialization":45,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":577,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":191,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":631,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":78,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":273,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":14,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":458,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":573,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":114,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":215,"com.google.gson.functional.PrimitiveTest.testByteSerialization":367,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":575,"com.google.gson.ObjectTypeAdapterTest.testSerialize":595,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":607,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":310,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":615,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":394,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":125,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":136,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":407,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":482,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":586,"com.google.gson.functional.MapTest.testMapWithQuotes":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":160,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":318,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":409,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":228,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":389,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":245,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":91,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":157,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":147,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":617,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":450,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":472,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":285,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":351,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":131,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":174,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":396,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":503,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":363,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":610,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":542,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":117,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":202,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":474,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":82,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":430,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":508,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":571,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":219,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":300,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":242,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":272,"com.google.gson.functional.ObjectTest.testNestedSerialization":274,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":517,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":314,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":413,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":524,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":514,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":44,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":12,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":424,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":576,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":582,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":636,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":266,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":426,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":377,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":103,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":177,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":7,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":155,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":276,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":502,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":412,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":120,"com.google.gson.functional.CollectionTest.testSetSerialization":547,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":566,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":238,"com.google.gson.functional.StringTest.testStringValueSerialization":415,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":442,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":64,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":72,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":141,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":533,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":111,"com.google.gson.MixedStreamTest.testWriteInvalidState":580,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":611,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":319,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":129,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":325,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":168,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":634,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":222,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":431,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":463,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":599,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":624,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":195,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":608,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":24,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":116,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":518},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ec68d619-3e83-11e6-b9ba-4748a38791fe","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"ec69e78a-3e83-11e6-b9ba-29981c5a087f","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec6a35ab-3e83-11e6-b9ba-d53b0a7288c3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595],"tindex":"ec6a5cbc-3e83-11e6-b9ba-572f1b7b71ad","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[9,10,11,14,57,60,62,63,72,74,78,84,85,87,89,90,91,104,105,140,142,143,144,155,156,177,216,217,222,223,224,225,226,227,229,233,248,249,252,253,254,256,257,259,260,262,265,267,269,272,276,278,279,282,285,287,288,289,290,364,390,391,392,416,417,418,419,425,427,447,448,454,461,472,473,476,480,481,482,483,484,486,495,501,502,505,506,510,511,513,515,519,520,521,523,526,527,596,597,598,599,600,601,528,530,543,561,566,569,570,571,572,584,585],"tindex":"ec6b471d-3e83-11e6-b9ba-391ebe17cee1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[451],"tindex":"ec6b6e2e-3e83-11e6-b9ba-0953f351b3b3","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[602,603,604],"tindex":"ec6b953f-3e83-11e6-b9ba-2f5d3bc72414","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[3,4,9,10,11,12,14,27,36,40,42,43,47,54,55,57,58,60,61,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,127,128,129,135,136,137,138,139,140,141,142,143,144,145,147,148,149,155,156,166,170,177,185,201,206,216,217,221,222,223,224,225,226,227,229,233,234,236,238,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,264,265,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,364,388,390,391,392,393,394,396,397,416,417,418,419,420,424,425,427,428,430,431,432,433,434,435,436,437,440,441,445,446,447,448,452,453,454,455,457,460,461,472,473,475,476,477,478,479,480,481,482,483,484,485,486,487,494,495,500,501,502,503,504,505,506,507,510,511,512,513,515,516,517,519,520,521,523,526,527,528,530,539,543,544,547,555,558,559,561,563,565,566,567,568,569,570,571,572,577,579,580,583,584,585,587,595],"tindex":"ec6b9540-3e83-11e6-b9ba-5bd95623d696","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[605],"tindex":"ec6bbc51-3e83-11e6-b9ba-c965b5c53cbe","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[3,4,6,7,10,12,606,19,20,23,25,27,32,33,34,37,38,40,41,42,43,44,45,47,48,50,53,54,55,56,57,58,61,64,607,608,67,69,71,73,75,76,77,78,79,81,82,83,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,106,107,108,109,110,112,113,114,115,116,119,120,121,125,127,129,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,157,159,160,162,164,165,168,170,172,173,174,175,176,178,180,181,183,185,186,187,188,190,193,195,196,198,199,201,202,203,204,205,206,209,210,212,215,217,609,610,221,222,223,224,225,227,228,230,234,235,236,238,239,240,242,244,245,246,247,250,251,252,255,258,261,611,264,612,266,268,270,271,273,274,275,277,281,283,284,286,294,296,302,305,313,314,320,322,323,326,329,331,332,335,336,340,349,351,353,354,357,360,362,366,367,368,369,370,371,372,376,378,382,383,385,388,391,392,393,394,395,396,397,399,400,401,402,403,406,408,412,415,424,427,428,430,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,449,451,452,453,455,456,457,458,460,462,463,464,465,466,467,468,469,471,472,474,475,476,477,478,479,481,482,483,485,487,488,489,490,491,494,496,497,498,499,500,503,504,507,509,512,514,515,516,517,523,524,525,526,527,596,528,529,530,531,535,536,537,538,539,541,544,545,547,548,613,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,567,568,569,570,571,572,614,573,574,575,615,616,576,617,577,579,618,580,581,582,583,587,588,589,590,592,593,594,619,620,621,622,623,624,625,626,627,628,629],"tindex":"ec6be362-3e83-11e6-b9ba-059c943f8963","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ec6be363-3e83-11e6-b9ba-bf250aba510b","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"ec6c0a74-3e83-11e6-b9ba-8742c6cb2225","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3,4,6,10,12,19,20,23,25,27,32,33,40,42,43,45,47,50,54,55,58,64,607,608,67,77,79,81,82,86,91,93,99,100,101,106,107,109,110,114,115,119,120,125,127,131,140,141,142,143,144,151,152,153,159,160,162,164,165,172,174,175,176,178,180,181,186,190,193,196,198,199,202,203,204,205,209,212,215,217,221,222,223,224,225,227,228,230,234,239,240,246,247,250,252,255,258,261,266,271,274,281,284,286,302,305,320,362,391,392,399,400,401,402,403,406,408,412,415,424,427,428,432,433,441,445,449,462,463,464,465,466,467,468,469,471,474,479,488,489,490,491,494,496,497,498,503,509,512,514,515,516,517,523,524,525,526,527,596,630,631,632,528,529,535,537,538,539,541,544,545,613,551,552,553,554,555,556,558,559,561,562,570,571,572,616,576,633,634,635,636,577,579,582,587,590,592,619],"tindex":"ec6d1be5-3e83-11e6-b9ba-893d40e669b7","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec6d42f6-3e83-11e6-b9ba-b1d35617ae39","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"ec6d42f7-3e83-11e6-b9ba-61042a64437e","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec6d42f8-3e83-11e6-b9ba-515853b63dab","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"ec6d42f9-3e83-11e6-b9ba-8be478ec8f6e","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"ec6d6a0a-3e83-11e6-b9ba-b5c5b14b5389","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"ec6d6a0b-3e83-11e6-b9ba-73fd782fc812","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"ec6d6a0c-3e83-11e6-b9ba-e51e542064aa","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec6d6a0d-3e83-11e6-b9ba-650573eaf682","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"ec6d911e-3e83-11e6-b9ba-d3ddaa678560","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            if (raw.isInterface()) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec6d911f-3e83-11e6-b9ba-3bb06042c4cb","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"ec6d9120-3e83-11e6-b9ba-154a4d8bea9d","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"ec6db731-3e83-11e6-b9ba-397226ea06da","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ec6db732-3e83-11e6-b9ba-9b554a0adbed","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ec6db733-3e83-11e6-b9ba-43f277b0bfad","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ec6dde44-3e83-11e6-b9ba-6386dba3149b","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"ec6dde45-3e83-11e6-b9ba-15c48b297f47","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"ec6dde46-3e83-11e6-b9ba-a3e2eee1c051","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"ec6dde47-3e83-11e6-b9ba-af77788e953f","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"ec6dde48-3e83-11e6-b9ba-d1229ec13e74","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"ec6e0559-3e83-11e6-b9ba-032d75020d1f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"ec6e055a-3e83-11e6-b9ba-81a17a6b2436","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"ec6e055b-3e83-11e6-b9ba-ff995753fbb2","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264147907/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
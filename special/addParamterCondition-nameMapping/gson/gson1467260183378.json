{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":535,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":15,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":364,"com.google.gson.functional.StringTest.testStringValueDeserialization":693,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":13,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":672,"com.google.gson.JsonPrimitiveTest.testDeepCopy":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":617,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":646,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":22,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":137,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":147,"com.google.gson.MixedStreamTest.testWriteLenient":442,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":582,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":315,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":143,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":216,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":106,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":220,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":677,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":394,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":396,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":75,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":653,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":264,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":595,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":184,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":548,"com.google.gson.functional.ObjectTest.testSingletonLists":104,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":313,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":365,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":427,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":86,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":623,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":119,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":279,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":478,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":196,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":504,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":700,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":538,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":225,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":673,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":8,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":413,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":637,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":385,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":461,"com.google.gson.functional.EnumTest.testEnumCaseMapping":530,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":363,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":440,"com.google.gson.functional.JsonTreeTest.testToJsonTree":46,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":636,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":521,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":59,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":265,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":518,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":502,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":473,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":615,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":378,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":444,"com.google.gson.functional.ObjectTest.testNullDeserialization":634,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":89,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":273,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":698,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":116,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":562,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":270,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":647,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":329,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":592,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":383,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":230,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":126,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":262,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":322,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":214,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":684,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":683,"com.google.gson.JsonParserTest.testParseString":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":622,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":349,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":503,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":547,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":687,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":128,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":294,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":277,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":660,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":148,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":670,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":256,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":614,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":142,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":584,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":94,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":469,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":350,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":528,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":671,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":125,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":290,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":112,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":224,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":234,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":577,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":27,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":335,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":466,"com.google.gson.metrics.PerformanceTest.testDummy":602,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":50,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":182,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":250,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":470,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":475,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":314,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":310,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":92,"com.google.gson.functional.CollectionTest.testSetDeserialization":219,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":76,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":115,"com.google.gson.functional.EnumTest.testEnumSet":389,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":607,"com.google.gson.JsonStreamParserTest.testIterator":536,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":663,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":183,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":423,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":612,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":120,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":181,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":241,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":674,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":212,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":679,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":380,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":353,"com.google.gson.functional.MapTest.testHashMapDeserialization":604,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":644,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":704,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":520,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":411,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":605,"com.google.gson.MixedStreamTest.testReadNulls":709,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":28,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":540,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":139,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":476,"com.google.gson.functional.MapTest.testSortedMap":463,"com.google.gson.functional.MapTest.testMapSerialization":460,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":16,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":275,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":2,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":574,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":668,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":563,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":512,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":66,"com.google.gson.functional.MapTest.testSerializeMaps":280,"com.google.gson.functional.MapTest.testComplexKeysSerialization":12,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":606,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":245,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":565,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":583,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":298,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":91,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":194,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":175,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":601,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":40,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":626,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":702,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":165,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":266,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":596,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":23,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":633,"com.google.gson.functional.MapTest.testStringKeyDeserialization":468,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":513,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":251,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":359,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":471,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":650,"com.google.gson.functional.PrettyPrintingTest.testMap":373,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":407,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":645,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":401,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":302,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":627,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":438,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":514,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":369,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":694,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":307,"com.google.gson.functional.MapTest.testMapSerializationEmpty":467,"com.google.gson.functional.CollectionTest.testQueueSerialization":486,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":664,"com.google.gson.functional.MapTest.testMapOfMapSerialization":282,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":341,"com.google.gson.JavaSerializationTest.testMapIsSerializable":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":616,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":488,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":72,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":428,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":588,"com.google.gson.functional.FieldNamingTest.testIdentity":67,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":366,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":533,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":424,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":154,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":129,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":26,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":45,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":103,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":430,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":638,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":414,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":257,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":367,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":100,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":621,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":613,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":624,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":449,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":358,"com.google.gson.functional.MapTest.testMapSubclassSerialization":505,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":191,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":232,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":608,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":222,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":236,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":395,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":658,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":610,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":692,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":85,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":180,"com.google.gson.functional.EnumTest.testEnumSubclass":392,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":347,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":118,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":439,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":331,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":226,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":416,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":593,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":676,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":96,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":569,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":639,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":102,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":556,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":661,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":101,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":48,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":510,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":477,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":665,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":25,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":318,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":105,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":418,"com.google.gson.MixedStreamTest.testWriteNulls":578,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":472,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":480,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":292,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":90,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":178,"com.google.gson.CommentsTest.testParseComments":496,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":261,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":107,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":172,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":325,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":61,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":675,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":243,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":283,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":368,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":706,"com.google.gson.MixedStreamTest.testReadInvalidState":707,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":73,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":320,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":357,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":3,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":532,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":594,"com.google.gson.JsonParserTest.testParseMixedArray":550,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":543,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":334,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":515,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":558,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":158,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":497,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":338,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":70,"com.google.gson.JsonArrayTest.testRemove":581,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":420,"com.google.gson.functional.MapTest.testMapDeserialization":456,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":309,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":376,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":417,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":168,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":561,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":598,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":57,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":455,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":171,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":377,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":41,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":44,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":78,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":130,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":328,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":409,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":303,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":188,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":597,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":39,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":99,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":164,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":462,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":321,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":426,"com.google.gson.functional.PrimitiveTest.testShortSerialization":682,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":379,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":678,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":387,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":586,"com.google.gson.JsonParserTest.testParseEmptyString":551,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":659,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":80,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":643,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":63,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":391,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":217,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":231,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":451,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":656,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":360,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":436,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":150,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":541,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":589,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":422,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":240,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":271,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":690,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":686,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":434,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":286,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":95,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":131,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":300,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":570,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":590,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":138,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":662,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":135,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":111,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":393,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":32,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":79,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":405,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":425,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":167,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":649,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":276,"com.google.gson.stream.JsonWriterTest.testNullStringValue":445,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":619,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":53,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":640,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":525,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":345,"com.google.gson.JsonArrayTest.testSet":579,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":361,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":208,"com.google.gson.JsonPrimitiveTest.testEquals":572,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":170,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":390,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":20,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":4,"com.google.gson.functional.MapTest.testGeneralMapField":11,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":109,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":289,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":599,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":689,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":60,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":227,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":406,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":316,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":464,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":333,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":516,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":352,"com.google.gson.MixedStreamTest.testReadMixedStreamed":239,"com.google.gson.JsonObjectTest.testDeepCopy":268,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":339,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":519,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":591,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":140,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":415,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":705,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":666,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":386,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":587,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":446,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":82,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":458,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":388,"com.google.gson.JsonArrayTest.testDeepCopy":580,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":450,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":326,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":362,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":207,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":657,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":311,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":481,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":571,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":155,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":609,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":564,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":701,"com.google.gson.functional.ObjectTest.testNestedDeserialization":136,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":429,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":330,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":531,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":17,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":47,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":384,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":688,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":160,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":419,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":459,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":552,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":695,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":179,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":355,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":31,"com.google.gson.JavaSerializationTest.testListIsSerializable":448,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":146,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":151,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":491,"com.google.gson.functional.ObjectTest.testNullSerialization":631,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":34,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":545,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":529,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":452,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":10,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":332,"com.google.gson.functional.MapTest.testInterfaceTypeMap":9,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":511,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":408,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":641,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":193,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":433,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":410,"com.google.gson.MixedStreamTest.testReadClosed":708,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":301,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":382,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":651,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":567,"com.google.gson.MixedStreamTest.testWriteClosed":238,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":19,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":403,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":55,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":625,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":185,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":163,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":133,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":159,"com.google.gson.stream.JsonWriterTest.testLongs":278,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":544,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":84,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":58,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":113,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":402,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":200,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":555,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":435,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":669,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":36,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":404,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":274,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":539,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":421,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":253,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":68,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":576,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":691,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":337,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":611,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":93,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":287,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":162,"com.google.gson.functional.CollectionTest.testQueueDeserialization":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":340,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":667,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":697,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":441,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":319,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":7,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":306,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":134,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":215,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":400,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":235,"com.google.gson.functional.MapTest.testRawMapSerialization":284,"com.google.gson.JsonParserTest.testParseReader":258,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":618,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":501,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":29,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":122,"com.google.gson.JsonPrimitiveTest.testExponential":575,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":6,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":443,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":260,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":291,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":323,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":553,"com.google.gson.functional.PrimitiveTest.testByteSerialization":681,"com.google.gson.ObjectTypeAdapterTest.testSerialize":242,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":246,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":648,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":557,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":144,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":554,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":296,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":566,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":64,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":186,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":437,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":527,"com.google.gson.functional.MapTest.testMapWithQuotes":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":517,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":654,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":696,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":324,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":479,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":327,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":685,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":546,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":74,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":254,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":177,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":132,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":304,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":348,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":632,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":114,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":474,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":145,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":680,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":629,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":489,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":508,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":255,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":317,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":33,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":156,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":568,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":703,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":233,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":628,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":190,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":642,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":252,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":499,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":121,"com.google.gson.functional.ObjectTest.testNestedSerialization":123,"com.google.gson.JsonObjectTest.testAddingStringProperties":269,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":209,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":336,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":398,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":699,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":397,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":465,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":5,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":152,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":549,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":412,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":495,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":117,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":482,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":526,"com.google.gson.JsonPrimitiveTest.testBoolean":559,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":54,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":81,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":498,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":603,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":77,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":124,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":197,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":500,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":370,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":295,"com.google.gson.functional.CollectionTest.testSetSerialization":221,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":98,"com.google.gson.functional.StringTest.testStringValueSerialization":371,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":374,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":21,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":24,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":69,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":485,"com.google.gson.MixedStreamTest.testWriteInvalidState":237,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":507,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":630,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":655,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":62,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":524,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":249,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":65,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":88,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":263,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":157,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":534,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":381,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":585,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":620,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":247,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":454,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":293,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":431},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"67bf8b3f-3e79-11e6-8fc8-fb31c565becf","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"67bfd960-3e79-11e6-8fc8-59251584ee8e","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"67c00071-3e79-11e6-8fc8-b5bc46a8b78b","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[243,2,3,4,5,244,6,245,13,15,20,246,247,42,43,44,45,46,47,48,49,53,54,59,248,249,86,250,96,251,97,252,139,141,142,143,144,145,146,147,148,149,150,151,253,162,163,254,255,190,256,225,257,258,259,234,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"tindex":"67c00072-3e79-11e6-8fc8-bd6c4f1b0315","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[276,277,278,279],"tindex":"67c02783-3e79-11e6-8fc8-13e28dbe4ae9","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,3,5,280,7,281,282,283,9,10,11,284,13,14,18,21,285,22,23,286,26,27,28,29,30,31,32,33,34,37,39,42,44,51,57,58,287,288,289,290,291,292,293,294,295,296,60,62,297,298,63,64,65,66,67,68,69,70,71,72,73,299,74,75,76,300,301,302,303,304,276,305,306,307,308,309,310,311,82,312,277,313,314,315,316,83,317,318,319,320,84,321,322,323,86,88,89,90,91,93,324,96,251,97,98,325,326,252,327,99,102,103,104,107,110,113,115,117,328,329,120,122,123,330,125,128,130,131,133,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,154,155,156,158,159,160,161,372,373,164,165,374,375,376,167,377,378,170,171,173,379,174,175,380,381,382,383,384,385,386,387,388,182,389,390,391,392,193,393,394,395,195,198,199,202,396,205,397,207,208,209,213,398,399,214,215,216,400,401,402,403,218,404,220,221,405,406,407,408,222,409,410,223,224,411,226,257,227,229,230,231,232,234,412,413,414,415],"tindex":"67c02784-3e79-11e6-8fc8-dd422fed342e","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"67c04e95-3e79-11e6-8fc8-3fd636487956","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.Number) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[416,243,2,3,4,5,244,6,417,418,13,22,419,23,24,286,25,26,27,420,421,422,320,321,88,90,324,94,423,250,424,95,96,251,97,425,98,325,326,426,252,427,428,429,137,143,144,430,145,146,152,153,253,254,378,379,380,381,382,383,384,385,387,255,184,188,190,431,210,211,212,432,433,434,435,436,406,407,408,257,437,241,413,414,415,438,279,439],"tindex":"67c04e96-3e79-11e6-8fc8-0f80429edb68","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[440,353],"tindex":"67c075a7-3e79-11e6-8fc8-e76110cdb952","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[441,17,18,19],"tindex":"67c0c3c8-3e79-11e6-8fc8-77257729fc2e","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[332,335,338,341,343,358,442],"tindex":"67c0c3c9-3e79-11e6-8fc8-9b4f9df0508e","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"67c0eada-3e79-11e6-8fc8-fdc9ad089049","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[7,9,10,13,50,52,58,295,297,69,80,83,167,377,170,171,443,175,444,445],"tindex":"67c0eadb-3e79-11e6-8fc8-376262e60aff","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"67c0eadc-3e79-11e6-8fc8-0bcab9ed5f80","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"67c0eadd-3e79-11e6-8fc8-1fb5c23e6bd0","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"67c111ee-3e79-11e6-8fc8-c15219f8bd3a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"67c111ef-3e79-11e6-8fc8-ff7204f20b29","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"67c111f0-3e79-11e6-8fc8-15e9b92cabd0","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[225],"tindex":"67c111f1-3e79-11e6-8fc8-87b5fd0f5814","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67c111f2-3e79-11e6-8fc8-0d17406124ca","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.Number) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"67c111f3-3e79-11e6-8fc8-2f28acb941a4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        {\n                            if (unlink) {\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if ((left != null) && (right != null)) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                                removeInternal(adjacent, false);\n                                int int = 0;\n                                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                if (left != null) {\n                                    leftHeight = left.int;\n                                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                                } \n                                int int = 0;\n                                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                if (right != null) {\n                                    rightHeight = right.int;\n                                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                                } \n                                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                replaceInParent(node, adjacent);\n                                return ;\n                            } else if (left != null) {\n                                replaceInParent(node, left);\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } else if (right != null) {\n                                replaceInParent(node, right);\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } else {\n                                replaceInParent(node, null);\n                            }\n                            rebalance(originalParent, false);\n                            (int)--;\n                            (int)++;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[195,196,197,198,199,200,201,202],"tindex":"67c13904-3e79-11e6-8fc8-7f0fdf6b8734","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[446,447,448,6,449,450,451,452,453,454,455,456,7,457,458,459,460,461,8,462,463,9,464,10,11,465,466,12,467,468,469,245,470,471,13,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,40,41,42,44,48,51,53,55,56,57,59,472,473,68,69,70,71,72,73,299,74,75,76,77,78,474,80,81,82,316,84,475,476,88,89,90,91,92,93,94,423,424,96,426,429,104,114,477,115,125,130,131,134,333,478,139,479,140,141,142,143,144,145,146,480,481,152,153,482,158,159,160,161,162,163,164,376,166,167,170,171,175,177,179,180,181,185,186,187,189,192,389,390,391,392,483,393,207,208,209,210,216,400,401,484,485,486,402,444,218,487,488,404,489,219,490,221,491,492,493,222,223,224,226,228,230,232,233,260,494,442,495,496,242],"tindex":"67c16015-3e79-11e6-8fc8-cb01346b91cd","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[9,11,13,15,43,44,46,47,48,49,53,54,59,142,143,144,145,146,162,255,225,260,497],"tindex":"67c18726-3e79-11e6-8fc8-53fc9cfeece8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[440,498,280,11,21,26,53,287,288,289,290,291,292,293,294,295,472,296,60,62,297,298,68,69,70,71,72,103,107,117,120,122,336,339,351,357,360,362,143,368,372,165,374,375,376,377,177,179,181,185,186,397,399,499,500,225,229],"tindex":"67c18727-3e79-11e6-8fc8-37954515c995","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,3,5,7,9,10,11,13,14,15,16,18,21,22,23,26,27,28,29,30,32,33,34,37,39,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,82,83,84,86,87,88,89,90,91,93,96,97,98,99,102,103,104,107,110,113,115,117,120,122,123,125,128,130,131,133,139,141,142,143,144,145,146,152,154,155,156,158,159,160,161,162,163,164,165,166,167,170,171,173,174,175,177,179,180,181,182,183,185,186,187,189,192,193,195,198,199,202,205,207,208,209,213,214,215,433,434,501,502,503,504,216,217,218,220,221,222,223,224,225,226,229,230,231,232,233,234,235,236,241,242],"tindex":"67c18728-3e79-11e6-8fc8-d969cb8c0204","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"67c1ae39-3e79-11e6-8fc8-e98126177053","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67c1ae3a-3e79-11e6-8fc8-d9e33fdc9cf2","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67c1ae3b-3e79-11e6-8fc8-bb038a89dd27","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"67c1ae3c-3e79-11e6-8fc8-9d9ce02e078d","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[324,423,424,325,426,429],"tindex":"67c1d54d-3e79-11e6-8fc8-aff616305795","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[80],"tindex":"67c1d54e-3e79-11e6-8fc8-212ce0555e1b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[440,498,243,2,3,4,5,244,6,417,418,450,505,280,455,7,506,458,282,461,8,9,10,11,12,468,469,13,15,21,26,29,38,39,42,44,47,48,49,50,52,53,54,56,57,58,59,287,288,507,289,290,291,292,293,508,509,294,295,472,510,473,511,296,512,60,61,62,513,297,514,298,515,63,64,65,66,67,68,69,70,71,72,73,299,74,75,76,516,517,474,518,519,80,420,277,421,520,314,422,315,316,317,319,320,321,521,475,323,86,476,88,89,90,91,93,324,94,423,250,424,95,96,251,97,425,98,325,326,426,252,427,428,327,429,99,100,101,102,103,104,105,106,107,108,109,113,117,118,119,120,122,123,126,128,129,132,136,332,522,523,334,335,336,338,339,524,340,341,343,346,348,349,350,351,525,355,357,358,359,526,360,361,362,139,140,141,142,143,144,430,145,146,364,366,368,527,147,480,481,528,152,153,154,253,156,157,158,160,161,162,163,372,373,164,165,374,375,376,166,167,169,377,254,378,170,171,379,175,380,381,382,383,384,385,386,387,529,388,177,255,179,180,181,183,185,186,187,190,191,391,392,193,194,393,530,195,196,197,199,202,397,207,210,211,212,213,398,399,214,215,216,400,217,401,402,403,218,404,489,220,221,436,405,406,407,408,409,225,531,226,257,227,228,229,230,231,232,233,234,260,494,235,236,239,240,437,241,413,414,415,438,279,439,532,242],"tindex":"67c1d54f-3e79-11e6-8fc8-bdaffb38c170","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"67c1fc60-3e79-11e6-8fc8-1da8d6c5e0af","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"67c1fc61-3e79-11e6-8fc8-474dbdf41d51","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"67c1fc62-3e79-11e6-8fc8-6fc152774aaa","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[533,534,535,536,537,538,539,540,541,542,543,544,545,243,2,3,4,5,244,6,417,9,11,245,13,15,20,246,247,42,43,44,45,46,47,48,49,53,54,59,516,248,546,517,474,547,518,249,315,317,321,521,323,86,324,423,250,424,95,96,251,97,425,98,325,326,426,252,427,428,327,429,525,139,141,142,143,144,430,145,146,147,148,149,150,151,152,153,253,162,163,254,380,382,383,385,255,190,391,256,436,406,408,225,531,257,548,258,259,234,549,550,551,552,260,494,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,413,414,261,262,266,267,268,269,270,582,583,584,585,586,587,588,497,271,272,589,590,591,274,592,593,594,595,596,597,598,275,599,600],"tindex":"67c1fc63-3e79-11e6-8fc8-890dcaf77a0b","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"67c22374-3e79-11e6-8fc8-557c5a68826d","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","toResolve":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"67c22375-3e79-11e6-8fc8-530c303a67b9","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"67c22376-3e79-11e6-8fc8-cfdcbc63db3b","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"67c24a87-3e79-11e6-8fc8-e75a2ce4c890","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"67c24a88-3e79-11e6-8fc8-6976c3b0bfa6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        {\n                            if (unlink) {\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if ((left != null) && (right != null)) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                                removeInternal(adjacent, false);\n                                int int = 0;\n                                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                if (left != null) {\n                                    leftHeight = left.int;\n                                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                                } \n                                int int = 0;\n                                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                if (right != null) {\n                                    rightHeight = right.int;\n                                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                                } \n                                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                replaceInParent(node, adjacent);\n                                return ;\n                            } else if (left != null) {\n                                replaceInParent(node, left);\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } else if (right != null) {\n                                replaceInParent(node, right);\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } else {\n                                replaceInParent(node, null);\n                            }\n                            rebalance(originalParent, false);\n                            (int)--;\n                            (int)++;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"67c27199-3e79-11e6-8fc8-c7e381dce4d8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67c298aa-3e79-11e6-8fc8-75a8381200b7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"67c298ab-3e79-11e6-8fc8-2f6dc64d016a","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67c298ac-3e79-11e6-8fc8-11b7f21602b5","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"67c2bfbd-3e79-11e6-8fc8-5d0a51d9bb82","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"67c2bfbe-3e79-11e6-8fc8-511697dba57f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        {\n                            if (unlink) {\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if ((left != null) && (right != null)) {\n                                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                                removeInternal(adjacent, false);\n                                int int = 0;\n                                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                if (left != null) {\n                                    leftHeight = left.int;\n                                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                                } \n                                int int = 0;\n                                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                                if (right != null) {\n                                    rightHeight = right.int;\n                                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                                } \n                                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                                replaceInParent(node, adjacent);\n                                return ;\n                            } else if (left != null) {\n                                replaceInParent(node, left);\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } else if (right != null) {\n                                replaceInParent(node, right);\n                                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                            } else {\n                                replaceInParent(node, null);\n                            }\n                            rebalance(originalParent, false);\n                            (int)--;\n                            (int)++;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67c2e6cf-3e79-11e6-8fc8-f1798bd19700","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[150,266,601],"tindex":"67c2e6d0-3e79-11e6-8fc8-81aa6c7e1fd1","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[349,359,361,442],"tindex":"67c30de1-3e79-11e6-8fc8-57c7a39aaaec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[195,196,197,199,200,202],"tindex":"67c30de2-3e79-11e6-8fc8-b769db075d38","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[540,542,543,516,474,518,317],"tindex":"67c30de3-3e79-11e6-8fc8-335cb996edfb","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[602,0,1,603,440,498,243,2,3,4,5,244,6,449,417,418,604,450,505,280,451,452,453,454,455,456,7,506,457,458,459,281,282,460,461,8,462,283,463,9,464,10,11,465,284,466,12,467,468,469,245,470,471,13,14,441,15,16,605,17,18,19,20,21,246,247,606,607,285,608,22,419,23,24,286,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,287,288,507,289,290,291,292,293,508,509,294,295,472,510,473,511,296,512,60,61,62,513,297,514,298,515,63,64,65,66,67,73,299,74,75,76,609,300,516,301,248,77,78,546,610,302,517,611,474,547,518,303,79,519,249,612,80,613,304,276,305,306,307,81,308,614,309,310,615,311,616,82,420,312,277,617,313,618,619,421,520,620,314,422,315,316,621,83,317,318,319,320,84,622,623,321,624,521,322,625,475,323,85,86,626,627,628,476,629,87,88,89,90,91,92,93,324,94,423,250,424,95,96,251,97,425,98,325,326,426,252,427,428,327,429,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,630,114,477,115,116,631,117,632,118,328,119,329,120,121,122,123,330,124,125,126,127,633,634,128,129,130,131,132,133,134,135,136,137,635,636,637,331,638,332,639,640,641,642,522,333,523,643,334,644,645,646,647,648,649,650,335,336,651,652,653,654,655,337,656,338,339,657,524,340,658,659,341,660,342,343,661,662,344,345,663,664,665,346,666,667,668,669,670,671,672,673,347,674,348,675,349,350,676,677,351,678,478,352,679,353,680,138,525,354,681,355,356,682,357,358,683,684,685,359,526,360,686,687,688,361,362,689,690,691,692,139,479,140,141,142,143,144,430,145,146,693,363,364,365,366,367,694,695,368,527,369,696,697,698,370,699,700,371,147,148,149,150,151,480,481,528,152,153,482,154,155,253,156,157,158,159,160,161,162,163,372,373,164,165,374,375,376,166,167,168,169,377,254,378,170,171,172,173,379,174,443,701,175,176,380,381,382,383,384,385,386,387,529,388,177,178,255,179,180,181,182,183,184,185,186,187,188,189,190,191,192,389,390,391,392,483,702,193,194,393,530,394,395,195,196,197,198,199,200,201,202,703,396,203,204,205,206,397,207,208,209,431,210,211,212,432,213,398,399,214,215,216,400,217,401,484,485,704,486,402,403,444,218,487,488,404,489,219,220,705,490,221,491,492,436,493,405,406,407,408,222,409,410,223,224,411,225,531,706,226,257,227,228,229,230,231,232,233,234,412,235,707,708,236,578,237,442,709,495,238,239,240,437,241,413,414,415,496,438,279,439,262,270],"tindex":"67c30de4-3e79-11e6-8fc8-456843b8d216","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"67c35c05-3e79-11e6-8fc8-5d1e87c77f22","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67c35c06-3e79-11e6-8fc8-61f089fde2b5","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"67c35c07-3e79-11e6-8fc8-3bb8cfda96eb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67c35c08-3e79-11e6-8fc8-4da915f34602","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259228746/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":58,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
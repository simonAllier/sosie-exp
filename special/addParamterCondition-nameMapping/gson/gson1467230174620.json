{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":30,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":300,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":380,"com.google.gson.functional.StringTest.testStringValueDeserialization":599,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":134,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":454,"com.google.gson.stream.JsonWriterTest.testRepeatedName":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":521,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":343,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":505,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":21,"com.google.gson.MixedStreamTest.testWriteLenient":338,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":141,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":17,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":121,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":125,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":480,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":568,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":311,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":634,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":64,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":530,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":234,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":613,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":623,"com.google.gson.functional.ObjectTest.testSingletonLists":293,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":455,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":301,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":516,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":4,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":195,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":66,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":467,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":491,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":673,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":571,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":317,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":636,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":607,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":166,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":91,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":560,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":250,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":393,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":205,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":162,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":214,"com.google.gson.functional.EnumTest.testEnumCaseMapping":633,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":299,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":385,"com.google.gson.functional.JsonTreeTest.testToJsonTree":47,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":507,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":468,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":223,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":139,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":364,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":450,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":517,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":199,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":245,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":320,"com.google.gson.functional.ObjectTest.testNullDeserialization":499,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":352,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":240,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":605,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":487,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":80,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":174,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":522,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":492,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":9,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":246,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":161,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":371,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":496,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":173,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":469,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":583,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":582,"com.google.gson.JsonParserTest.testParseString":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":466,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":365,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":565,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":8,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":589,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":76,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":453,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":542,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":22,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":390,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":557,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":227,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":447,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":84,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":176,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":189,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":268,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":566,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":609,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":558,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":358,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":416,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":130,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":325,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":484,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":690,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":215,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":344,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":526,"com.google.gson.metrics.PerformanceTest.testDummy":383,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":643,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":275,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":104,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":648,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":190,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":396,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":471,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":449,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":645,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":370,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":5,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":476,"com.google.gson.functional.CollectionTest.testSetDeserialization":655,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":65,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":72,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":401,"com.google.gson.functional.EnumTest.testEnumSet":626,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":549,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":148,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":439,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":74,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":103,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":562,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":647,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":573,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":159,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":79,"com.google.gson.functional.MapTest.testHashMapDeserialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":519,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":459,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":32,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":661,"com.google.gson.MixedStreamTest.testReadNulls":668,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":270,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":82,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":475,"com.google.gson.functional.MapTest.testSortedMap":394,"com.google.gson.functional.MapTest.testMapSerialization":34,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":31,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":242,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":183,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":555,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":689,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":681,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":422,"com.google.gson.functional.MapTest.testSerializeMaps":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":59,"com.google.gson.functional.MapTest.testComplexKeysSerialization":267,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":400,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":175,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":217,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":683,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":354,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":631,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":334,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":411,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":145,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":630,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":94,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":235,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":39,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":498,"com.google.gson.functional.MapTest.testStringKeyDeserialization":216,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":14,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":585,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":37,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":525,"com.google.gson.functional.PrettyPrintingTest.testMap":92,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":520,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":658,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":434,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":366,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":426,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":672,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":305,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":600,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":289,"com.google.gson.functional.CollectionTest.testQueueSerialization":318,"com.google.gson.functional.MapTest.testMapSerializationEmpty":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":550,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":382,"com.google.gson.functional.MapTest.testMapOfMapSerialization":264,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":541,"com.google.gson.JavaSerializationTest.testMapIsSerializable":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":451,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":653,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":374,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":249,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":288,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":552,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":151,"com.google.gson.functional.FieldNamingTest.testIdentity":60,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":191,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":86,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":500,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":40,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":46,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":156,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":356,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":510,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":172,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":26,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":303,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":477,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":462,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":144,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":446,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":387,"com.google.gson.functional.MapTest.testMapSubclassSerialization":259,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":581,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":128,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":625,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":402,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":132,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":323,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":539,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":635,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":433,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":596,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":472,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":102,"com.google.gson.functional.EnumTest.testEnumSubclass":628,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":561,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":489,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":674,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":509,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":369,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":567,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":13,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":687,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":512,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":70,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":545,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":678,"com.google.gson.stream.JsonWriterTest.testTwoNames":373,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":478,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":219,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":257,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":419,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":251,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":486,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":551,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":406,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":543,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":463,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":479,"com.google.gson.MixedStreamTest.testWriteNulls":171,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":388,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":52,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":225,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":280,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":353,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":622,"com.google.gson.CommentsTest.testParseComments":671,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":233,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":149,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":614,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":89,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":423,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":564,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":182,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":304,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":341,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":662,"com.google.gson.MixedStreamTest.testReadInvalidState":666,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":61,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":109,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":465,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":184,"com.google.gson.JsonParserTest.testParseMixedArray":168,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":297,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":256,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":427,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":679,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":308,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":534,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":452,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":577,"com.google.gson.functional.MapTest.testMapDeserialization":212,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":448,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":97,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":133,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":170,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":612,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":49,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":331,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":310,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":412,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":45,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":432,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":77,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":490,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":271,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":659,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":436,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":624,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":42,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":69,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":93,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":340,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":506,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":194,"com.google.gson.functional.PrimitiveTest.testShortSerialization":580,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":157,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":570,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":619,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":540,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":248,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":253,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":518,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":56,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":163,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":247,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":367,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":243,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":372,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":209,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":533,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":587,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":461,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":616,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":178,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":670,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":594,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":363,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":405,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":192,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":359,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":414,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":111,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":429,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":575,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":196,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":546,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":503,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":483,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":632,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":269,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":272,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":437,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":329,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":524,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":442,"com.google.gson.stream.JsonWriterTest.testNullStringValue":375,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":457,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":221,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":649,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":513,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":576,"com.google.gson.JsonArrayTest.testSet":254,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":548,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":591,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":313,"com.google.gson.JsonPrimitiveTest.testEquals":688,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":330,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":627,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":33,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":185,"com.google.gson.functional.MapTest.testGeneralMapField":35,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":482,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":1,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":593,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":54,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":202,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":291,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":135,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":296,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":316,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":572,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":238,"com.google.gson.MixedStreamTest.testReadMixedStreamed":669,"com.google.gson.JsonObjectTest.testDeepCopy":236,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":438,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":535,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":206,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":322,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":598,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":642,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":618,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":347,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":213,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":621,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":150,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":592,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":116,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":113,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":536,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":346,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":608,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":428,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":652,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":615,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":682,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":153,"com.google.gson.functional.ObjectTest.testNestedDeserialization":504,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":167,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":494,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":398,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":590,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":88,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":392,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":403,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":601,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":101,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":579,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":407,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":20,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":25,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":127,"com.google.gson.functional.ObjectTest.testNullSerialization":155,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":41,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":620,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":210,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":266,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":511,"com.google.gson.functional.MapTest.testInterfaceTypeMap":265,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":421,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":165,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":276,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":514,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":361,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":362,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":410,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":660,"com.google.gson.MixedStreamTest.testReadClosed":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":160,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":528,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":685,"com.google.gson.MixedStreamTest.testWriteClosed":339,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":399,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":294,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":470,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":106,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":78,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":309,"com.google.gson.stream.JsonWriterTest.testLongs":675,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":680,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":350,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":277,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":295,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":123,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":638,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":677,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":556,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":114,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":409,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":321,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":458,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":197,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":284,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":595,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":298,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":435,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":355,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":226,"com.google.gson.functional.CollectionTest.testQueueDeserialization":657,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":538,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":554,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":604,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":464,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":639,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":262,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":497,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":444,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":119,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":502,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":2,"com.google.gson.functional.MapTest.testRawMapSerialization":36,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":131,"com.google.gson.JsonParserTest.testParseReader":230,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":456,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":120,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":345,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":357,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":188,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":158,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":232,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":279,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":292,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":336,"com.google.gson.functional.PrimitiveTest.testByteSerialization":578,"com.google.gson.ObjectTypeAdapterTest.testSerialize":3,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":11,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":117,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":523,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":169,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":18,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":676,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":53,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":684,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":107,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":203,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":602,"com.google.gson.functional.MapTest.testMapWithQuotes":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":137,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":531,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":603,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":147,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":6,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":597,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":152,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":43,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":136,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":63,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":198,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":99,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":501,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":441,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":488,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":563,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":283,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":138,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":19,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":574,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":146,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":654,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":417,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":142,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":273,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":360,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":686,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":640,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":129,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":474,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":201,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":515,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":255,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":16,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":493,"com.google.gson.JsonObjectTest.testAddingStringProperties":28,"com.google.gson.functional.ObjectTest.testNestedSerialization":75,"com.google.gson.internal.LinkedTreeMapTest.testClear":244,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":314,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":315,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":527,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":606,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":312,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":327,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":186,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":85,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":326,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":665,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":73,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":610,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":586,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":222,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":445,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":384,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":431,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":495,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":637,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":306,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":282,"com.google.gson.functional.CollectionTest.testSetSerialization":126,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":664,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":68,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":95,"com.google.gson.functional.StringTest.testStringValueSerialization":307,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":38,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":285,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":404,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":650,"com.google.gson.MixedStreamTest.testWriteInvalidState":337,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":415,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":154,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":532,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":424,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":537,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":140,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":58,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":239,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":351,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":10,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":611,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":177,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":200,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":460,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":12,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":211,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":379,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":51,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":644},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[0,1,2,3,4],"tindex":"89224f7b-3e33-11e6-93f4-8bb159cfa983","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[5,6,7],"tindex":"89229d9c-3e33-11e6-93f4-831823c29016","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[8,9,5],"tindex":"89229d9d-3e33-11e6-93f4-5de152214969","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"8922c4ae-3e33-11e6-93f4-e9cbcf0cbc52","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[10],"tindex":"8922c4af-3e33-11e6-93f4-3953081644bd","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"8922c4b0-3e33-11e6-93f4-7fc42859ba8d","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"8922c4b1-3e33-11e6-93f4-f9992927e4c8","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"8922ebc2-3e33-11e6-93f4-7bc9a8e177e6","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8922ebc3-3e33-11e6-93f4-8d7ca15ea8f8","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,10,27,28],"tindex":"892312d4-3e33-11e6-93f4-9532c483c43c","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[29,30,31,32,33],"tindex":"892312d5-3e33-11e6-93f4-3f46f7dc06df","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,34,35,36,37,29,30,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,15,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3],"tindex":"892312d6-3e33-11e6-93f4-9f3ce16fb4bc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"892339e7-3e33-11e6-93f4-094640e6e79b","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"892339e8-3e33-11e6-93f4-59b7d0007268","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[133,134,11,12,45,135,136,137,138,139,140,141,142,143,144,145,146,147,148,13,14,15,68,149,150,16,151,152,153,154,155,82,83,84,17,18,156,19,20,85,157,158,159,160,161,162,100,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181],"tindex":"892360f9-3e33-11e6-93f4-61d1acfe0ced","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"892360fa-3e33-11e6-93f4-ad5f019b7915","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"892360fb-3e33-11e6-93f4-f5d311fd715a","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[182,183,184,185,186,187,188,133,134,143,147,189,148,190,191,192,13,14,15,193,68,149,150,194,16,195,151,153,17,18,156,19,20,85,196,197,198,199,157,159,200,160,161,162,100,201,164,202,165,26,203,204,205,172,206],"tindex":"8923880c-3e33-11e6-93f4-a76b834fa1dd","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[207,182,183,184,185,186,187,188,208,209,210,211,212,213,214,215,216,217,134,30,33,11,12,43,44,45,46,47,218,219,220,221,222,223,224,140,66,190,191,13,14,15,16,82,83,84,17,18,19,20,21,22,23,24,25,225,197,226,90,198,157,100,201,227,228,229,166,26,128,129,230,231,130,232,233,173,10,234,7,235,27,236,28,174,237,238,239,178,179,181,240,241,242,243,244,245,246,247,248,249,250,251,252],"tindex":"8923880d-3e33-11e6-93f4-6b73ad2ad8d9","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"8923af1e-3e33-11e6-93f4-e9f461f68735","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value.isJsonNull()) {\n                {\n                    if ((value == null) || (value.isJsonNull())) {\n                        out.nullValue();\n                    } else if (value.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            out.value(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            out.value(primitive.getAsBoolean());\n                        } else {\n                            out.value(primitive.getAsString());\n                        }\n                    } else if (value.isJsonArray()) {\n                        out.beginArray();\n                        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                            write(out, e);\n                        }\n                        out.endArray();\n                    } else if (value.isJsonObject()) {\n                        out.beginObject();\n                        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                            out.name(e.getKey());\n                            write(out, e.getValue());\n                        }\n                        out.endObject();\n                    } else {\n                        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[253],"tindex":"8923af1f-3e33-11e6-93f4-d1a1f637305c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8923af20-3e33-11e6-93f4-65a420c65f0f","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[254],"tindex":"8923af21-3e33-11e6-93f4-e516c64528fe","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8923d632-3e33-11e6-93f4-4971328d75cd","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"8923d633-3e33-11e6-93f4-a34f64654cb6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[177,178],"tindex":"8923d634-3e33-11e6-93f4-1f53090ee61a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[255],"tindex":"8923d635-3e33-11e6-93f4-b1b225a01a14","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[256],"tindex":"8923fd46-3e33-11e6-93f4-f31a5e14002b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"89242457-3e33-11e6-93f4-7f5369a45b23","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isString()) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"89242458-3e33-11e6-93f4-c9065ce4acf0","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isString()) {\n                {\n                    if (primitive instanceof java.lang.Character) {\n                        char char = ((java.lang.Character)(primitive)).charValue();\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n                    } else {\n                        com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                        com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[257,258,184,186,259,0,260,261,262,263,264,265,266,35,36,267,268,134,29,30,31,38,269,270,271,272,273,274,44,45,47,218,219,220,275,276,221,222,49,277,223,278,50,279,280,281,282,53,54,283,284,285,286,287,288,289,290,291,292,66,67,69,70,293,71,294,295,73,74,75,76,78,296,297,298,83,84,299,300,301,302,303,304,305,306,307,85,86,87,308,309,226,94,98,310,100,105,112,311,115,312,116,313,314,117,315,316,118,119,120,317,121,2,318,319,320,124,321,125,322,323,324,325,166,128,129,130,232,131,132,326,204,206],"tindex":"89242459-3e33-11e6-93f4-2923b90fca02","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[0,262,327,134,29,30,328,11,44,45,46,47,218,219,220,221,222,223,282,146,154,17,18,156,19,20,226,90,329,310,330,331,332,157,333,158,334,100,166,26,232,335,336,131,132,171,337,338,326,339,181],"tindex":"89244b6a-3e33-11e6-93f4-5b35df488754","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"89244b6b-3e33-11e6-93f4-792fa61018da","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[257,258,184,186,259,0,260,261,262,263,264,34,340,341,265,342,266,35,327,36,267,268,37,134,29,31,328,38,11,12,343,39,40,344,270,345,271,272,273,41,274,42,43,45,275,48,276,49,277,54,56,57,58,59,60,284,285,286,287,288,61,63,64,65,140,346,347,348,290,349,350,66,67,351,352,353,354,355,13,14,15,68,149,16,153,69,70,356,293,71,294,295,72,73,74,357,75,358,76,77,359,78,82,83,84,85,86,87,360,308,309,88,89,92,93,94,98,329,330,331,332,157,333,334,99,100,101,102,103,104,105,106,107,108,109,110,361,111,112,113,114,115,116,313,314,117,118,119,362,363,120,364,365,366,317,121,367,124,125,126,368,323,324,325,166,369,370,371,372,128,129,130,373,374,375,376,377,378,379,380,381,382,131,132,204,173,174,3,4,178,179,181],"tindex":"89244b6c-3e33-11e6-93f4-0f883b6cd2ec","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"89244b6d-3e33-11e6-93f4-f735b6b08446","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"8924727e-3e33-11e6-93f4-65d0e9b25d9f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8924998f-3e33-11e6-93f4-27b9ce147d66","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"89249990-3e33-11e6-93f4-515cea3d2bd4","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!create) {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8924c0a1-3e33-11e6-93f4-e34223eae371","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8924c0a2-3e33-11e6-93f4-1bb6fbbd103b","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[383,257,258,384,385,386,182,183,184,185,186,187,188,387,133,388,389,208,259,0,209,210,260,211,261,212,262,390,391,213,392,263,264,34,214,393,340,341,394,265,342,266,35,327,36,215,267,395,216,268,217,396,37,134,29,397,30,31,32,398,328,399,33,38,11,12,400,401,269,402,343,403,39,404,405,406,40,344,270,345,271,407,272,273,41,408,409,274,410,42,411,412,44,45,46,47,218,219,220,275,48,276,221,222,413,414,49,277,223,278,50,415,1,416,279,280,51,417,418,281,282,52,419,420,421,53,422,54,423,424,425,283,426,55,427,56,57,58,59,60,61,62,63,64,65,428,429,135,430,224,431,432,136,433,434,137,435,138,8,139,436,437,438,140,439,253,440,441,442,443,444,289,445,446,447,448,449,450,346,451,347,452,348,453,454,455,456,457,458,459,460,290,461,141,291,462,349,142,463,464,465,350,466,467,143,144,468,469,470,471,292,472,66,145,473,474,475,146,67,351,352,353,354,476,355,147,189,148,190,191,192,13,14,15,193,68,149,150,194,16,195,151,152,153,69,477,478,70,356,293,479,480,71,481,482,294,483,484,295,154,485,486,72,487,155,73,488,489,490,491,492,74,493,357,75,494,495,358,496,497,498,499,76,500,77,359,501,78,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,296,517,518,297,519,520,521,522,523,524,525,526,527,528,529,530,531,532,298,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,79,574,575,576,577,578,579,80,580,81,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,82,597,598,83,84,17,18,156,19,20,599,299,300,301,302,303,600,601,304,602,305,603,604,605,306,606,607,307,21,22,23,24,25,225,608,609,85,196,610,86,87,197,360,611,308,309,88,89,226,90,91,92,93,94,95,96,97,98,329,612,613,310,198,199,330,331,614,332,157,333,158,615,334,616,159,200,160,161,617,162,618,619,620,621,99,622,100,101,102,103,104,105,623,106,107,108,624,109,201,625,110,626,627,163,628,629,630,361,631,632,633,634,635,111,636,637,112,113,638,639,114,640,311,641,642,115,643,312,116,313,314,644,645,646,647,648,117,315,316,118,119,121,2,367,122,649,650,651,318,123,319,320,124,652,653,321,654,655,125,322,656,126,127,229,164,657,368,202,658,165,323,659,660,324,325,661,166,167,662,369,26,663,664,370,371,372,128,129,130,665,131,666,667,132,171,337,338,668,326,339,669,670,203,204,205,172,206,671,672,673,674,173,174],"tindex":"8924c0a3-3e33-11e6-93f4-59657a4582a3","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[442,346,348,453,675,376,378,673,674],"tindex":"8924e7b4-3e33-11e6-93f4-35c780cfaa32","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[44,47,224,8,468,676,677,678,169,679,680,681,682,683,684,685,686,687,688,689,690],"tindex":"8924e7b5-3e33-11e6-93f4-c7204a9f24e9","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8924e7b6-3e33-11e6-93f4-816870dd9a6d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[188,393,267,343,39,404,406,40,344,270,345,271,407,272,273,41,408,409,411,412,43,45,219,48,221,413,414,49,223,284,285,286,287,288,61,63,64,65,431,432,253,445,347,350,351,352,353,354,476,355,189,13,485,72,77,359,296,17,18,19,20,308,309,88,89,226,90,109,110,313,314,645,121,655,126,323,324,325,3],"tindex":"89250ec7-3e33-11e6-93f4-997695aa6c56","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"89250ec8-3e33-11e6-93f4-573618f0bd8b","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[253,144,158],"tindex":"89250ec9-3e33-11e6-93f4-add2985c890f","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[340,327,343,40,253,332,99,103,107,108],"tindex":"89250eca-3e33-11e6-93f4-79455f8e1850","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[329,330,331,334,99,102,103,107,108],"tindex":"892535db-3e33-11e6-93f4-3d0028bfdfa9","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"892535dc-3e33-11e6-93f4-7780076bb408","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'a') && (c <= 'f')"},"failures":[],"tindex":"892535dd-3e33-11e6-93f4-9940312cb860","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'a') && (c <= 'f')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"892535de-3e33-11e6-93f4-cdefd73a13bd","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"892535df-3e33-11e6-93f4-079b4d6c2589","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"89255cf0-3e33-11e6-93f4-9711653c2dc0","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"89255cf1-3e33-11e6-93f4-d1227f5280f8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"89255cf2-3e33-11e6-93f4-85797926d201","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"89255cf3-3e33-11e6-93f4-4d8403a13866","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"89255cf4-3e33-11e6-93f4-ed687d755889","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"89255cf5-3e33-11e6-93f4-11be375dce4a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"89258406-3e33-11e6-93f4-9bf880dc8dd1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"89258407-3e33-11e6-93f4-7b6fad030130","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"8925ab18-3e33-11e6-93f4-99efe17d9a26","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8925ab19-3e33-11e6-93f4-bb474b49f73f","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8925d22a-3e33-11e6-93f4-d7ee84276ed1","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229142645/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":64,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
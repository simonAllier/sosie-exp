{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":543,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":326,"com.google.gson.functional.StringTest.testStringValueDeserialization":324,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":289,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":209,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":459,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":162,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":311,"com.google.gson.MixedStreamTest.testWriteLenient":595,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":218,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":536,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":349,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":126,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":365,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":506,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":92,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":576,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":240,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":468,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":84,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":552,"com.google.gson.functional.ObjectTest.testSingletonLists":124,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":210,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":327,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":73,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":166,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":228,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":141,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":607,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":509,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":26,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":340,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":97,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":242,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":499,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":271,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":444,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":581,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":111,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":270,"com.google.gson.functional.EnumTest.testEnumCaseMapping":575,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":19,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":325,"com.google.gson.functional.JsonTreeTest.testToJsonTree":236,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":443,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":231,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":185,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":10,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":420,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":202,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":454,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":555,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":359,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":117,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":337,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":518,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":642,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":460,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":142,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":109,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":441,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":150,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":641,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":232,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":523,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":227,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":11,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":503,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":184,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":529,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":153,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":208,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":481,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":263,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":312,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":496,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":435,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":59,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":285,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":318,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":504,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":497,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":149,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":410,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":132,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":404,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":604,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":626,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":38,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":281,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":464,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":96,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":42,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":83,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":57,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":61,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":163,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":216,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":386,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":201,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":440,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":120,"com.google.gson.functional.CollectionTest.testSetDeserialization":364,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":241,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":373,"com.google.gson.functional.EnumTest.testEnumSet":566,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":488,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":4,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":190,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":258,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":82,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":580,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":501,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":56,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":511,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":106,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":170,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":18,"com.google.gson.functional.MapTest.testHashMapDeserialization":252,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":457,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":214,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":405,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":545,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":294,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":541,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":169,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":431,"com.google.gson.functional.MapTest.testSortedMap":274,"com.google.gson.functional.MapTest.testMapSerialization":269,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":544,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":382,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":494,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":625,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":616,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":422,"com.google.gson.functional.MapTest.testSerializeMaps":255,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":379,"com.google.gson.functional.MapTest.testComplexKeysSerialization":282,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":372,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":286,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":618,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":637,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":429,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":119,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":573,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":564,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":306,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":631,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":571,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":24,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":245,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":152,"com.google.gson.functional.MapTest.testStringKeyDeserialization":284,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":65,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":525,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":288,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":463,"com.google.gson.functional.PrettyPrintingTest.testMap":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":390,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":458,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":352,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":547,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":428,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":606,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":330,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":196,"com.google.gson.functional.MapTest.testMapSerializationEmpty":283,"com.google.gson.functional.CollectionTest.testQueueSerialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":489,"com.google.gson.functional.MapTest.testMapOfMapSerialization":268,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":480,"com.google.gson.JavaSerializationTest.testMapIsSerializable":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":204,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":361,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":346,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":74,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":328,"com.google.gson.functional.FieldNamingTest.testIdentity":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":62,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":100,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":154,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":123,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":235,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":538,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":446,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":582,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":329,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":437,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":291,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":220,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":230,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":345,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":250,"com.google.gson.functional.MapTest.testMapSubclassSerialization":254,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":521,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":90,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":309,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":375,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":392,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":478,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":577,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":179,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":313,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":535,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":165,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":81,"com.google.gson.functional.EnumTest.testEnumSubclass":569,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":500,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":139,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":608,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":445,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":436,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":586,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":505,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":64,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":301,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":448,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":293,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":484,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":612,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":292,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":40,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":419,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":584,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":135,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":490,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":37,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":223,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":125,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":251,"com.google.gson.MixedStreamTest.testWriteNulls":634,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":418,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":316,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":412,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":78,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":118,"com.google.gson.CommentsTest.testParseComments":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":69,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":127,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":558,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":398,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":424,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":502,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":381,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":273,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":332,"com.google.gson.MixedStreamTest.testReadInvalidState":592,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":237,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":520,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":383,"com.google.gson.JsonParserTest.testParseMixedArray":636,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":456,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":22,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":430,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":614,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":395,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":473,"com.google.gson.JsonArrayTest.testRemove":20,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":206,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":515,"com.google.gson.functional.MapTest.testMapDeserialization":261,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":200,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":248,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":551,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":635,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":48,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":557,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":553,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":307,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":13,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":177,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":140,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":393,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":88,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":290,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":305,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":244,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":272,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":442,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":71,"com.google.gson.functional.PrimitiveTest.testShortSerialization":519,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":560,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":113,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":479,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":31,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":455,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":376,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":568,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":351,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":308,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":256,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":472,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":527,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":633,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":217,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":565,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":599,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":638,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":533,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":528,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":7,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":36,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":63,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":156,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":172,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":640,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":513,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":52,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":66,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":485,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":160,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":131,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":574,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":298,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":187,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":67,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":193,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":434,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":212,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":44,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":449,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":514,"com.google.gson.JsonArrayTest.testSet":17,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":487,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":531,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":401,"com.google.gson.JsonPrimitiveTest.testEquals":624,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":556,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":567,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":549,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":384,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":129,"com.google.gson.functional.MapTest.testGeneralMapField":278,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":409,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":532,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":389,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":423,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":219,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":173,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":321,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":453,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":510,"com.google.gson.MixedStreamTest.testReadMixedStreamed":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":188,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":264,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":474,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":366,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":433,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":583,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":94,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":492,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":112,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":601,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":205,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":265,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":348,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":253,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":70,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":115,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":28,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":475,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":203,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":317,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":623,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":171,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":563,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":617,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":76,"com.google.gson.functional.ObjectTest.testNestedDeserialization":161,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":98,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":147,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":546,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":39,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":110,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":530,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":397,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":34,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":266,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":331,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":80,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":517,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":297,"com.google.gson.JavaSerializationTest.testListIsSerializable":603,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":315,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":540,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":369,"com.google.gson.functional.ObjectTest.testNullSerialization":630,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":300,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":347,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":257,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":277,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":447,"com.google.gson.functional.MapTest.testInterfaceTypeMap":275,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":421,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":43,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":450,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":6,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":572,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":304,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":174,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":108,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":466,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":620,"com.google.gson.MixedStreamTest.testWriteClosed":597,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":358,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":548,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":46,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":233,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":85,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":400,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":158,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":396,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":226,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":49,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":133,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":357,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":29,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":611,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":495,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":30,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":302,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":213,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":102,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":342,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":534,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":471,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":182,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":121,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":406,"com.google.gson.functional.CollectionTest.testQueueDeserialization":371,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":399,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":477,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":493,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":542,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":224,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":151,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":195,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":159,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":323,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":350,"com.google.gson.functional.MapTest.testRawMapSerialization":280,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":591,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":211,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":8,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":145,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":295,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":387,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":562,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":587,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":164,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":411,"com.google.gson.functional.PrimitiveTest.testByteSerialization":516,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":589,"com.google.gson.ObjectTypeAdapterTest.testSerialize":605,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":627,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":461,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":613,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":537,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":610,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":14,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":619,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":86,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":333,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":579,"com.google.gson.functional.MapTest.testMapWithQuotes":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":181,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":469,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":335,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":58,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":432,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":75,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":105,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":178,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":239,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":554,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":77,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":157,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":192,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":134,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":183,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":194,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":539,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":512,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":632,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":363,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":414,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":222,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":407,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":299,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":103,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":621,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":578,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":310,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":168,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":451,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":72,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":144,"com.google.gson.functional.ObjectTest.testNestedSerialization":146,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":402,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":320,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":465,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":114,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":279,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":385,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":51,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":596,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":609,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":99,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":138,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":526,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":45,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":197,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":467,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":600,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":176,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":27,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":9,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":338,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":417,"com.google.gson.functional.CollectionTest.testSetSerialization":368,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":439,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":68,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":246,"com.google.gson.functional.StringTest.testStringValueSerialization":341,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":122,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":35,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":343,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":354,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":408,"com.google.gson.MixedStreamTest.testWriteInvalidState":594,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":629,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":470,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":425,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":476,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":189,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":378,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":116,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":104,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":215,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":628,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":259,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":53,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":413},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"dfcb7fe7-3e6a-11e6-9ac3-2b340dccfecf","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"dfcbce08-3e6a-11e6-9ac3-815cdadc429d","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"dfcbf519-3e6a-11e6-9ac3-fd701ac3c3e1","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"tindex":"dfcbf51a-3e6a-11e6-9ac3-0b1a38e8b2f0","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[17],"tindex":"dfcbf51b-3e6a-11e6-9ac3-bb34a6f27645","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[18,19],"tindex":"dfcc1c2c-3e6a-11e6-9ac3-f9e8816c381e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[20],"tindex":"dfcc1c2d-3e6a-11e6-9ac3-b384c20a90eb","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[21,22,23,24],"tindex":"dfcc1c2e-3e6a-11e6-9ac3-2bd7162e968c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[25,26,27,28,29,30],"tindex":"dfcc6a4f-3e6a-11e6-9ac3-25f58b6797b6","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"dfcc6a50-3e6a-11e6-9ac3-2f0a11e769de","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[20],"tindex":"dfcc6a51-3e6a-11e6-9ac3-f78f94068dd8","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[31],"tindex":"dfcc9162-3e6a-11e6-9ac3-d51b42d03861","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"dfcc9163-3e6a-11e6-9ac3-173ea314ae07","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[25,26,27,32,28,29,33,30],"tindex":"dfcc9164-3e6a-11e6-9ac3-977585ce41f5","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"dfcc9165-3e6a-11e6-9ac3-9b9af1fbd408","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[0,34,1,35,36,37,2,38,39,40,41,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,4,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,31,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,13,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,14,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,15,502,503,504,505,506,507,508,509,510,511,18,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,16,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,25,26,27,32,28,29,33,30,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,19,600,601,602,603,604,605,606,607,608,609],"tindex":"dfccb876-3e6a-11e6-9ac3-392dc16c7281","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"dfccb877-3e6a-11e6-9ac3-5d89bdb4e1ab","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[175,184,231,234,236,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626],"tindex":"dfccdf88-3e6a-11e6-9ac3-a3501f8d6545","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"dfccdf89-3e6a-11e6-9ac3-990609f8818c","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"dfccdf8a-3e6a-11e6-9ac3-eb975eaa0a38","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[51,58,60,64,65,66,68,69,70,72,74,75,76,79,97,98,106,108,109,111,627,628,629,630,631,632,173,183,185,218,222,229,13,289,633,391,431,434,435,536,537,538,539,540,555,560,562,568,582,634,613,635,636,637,638,639,640,641,642],"tindex":"dfccdf8b-3e6a-11e6-9ac3-b53773b996e7","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"dfcd069c-3e6a-11e6-9ac3-efe38793029e","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"dfcd069d-3e6a-11e6-9ac3-0b80c944a3f6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"dfcd069e-3e6a-11e6-9ac3-6b310a13af05","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"dfcd069f-3e6a-11e6-9ac3-7ba4dfd027dc","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3,48,4,95,97,100,101,115,122,123,127,138,143,145,146,153,155,158,166,170,234,13,235,236,245,249,278,295,319,322,323,349,351,360,365,14,423,487,500,527,533,541,543,544,547,32,600,604],"tindex":"dfcd2db0-3e6a-11e6-9ac3-25d519269551","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,48,51,66,68,77,79,80,81,82,83,4,85,86,87,89,91,8,95,100,101,105,115,122,127,136,138,143,146,153,155,158,166,170,234,13,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,255,269,278,280,288,290,293,300,305,309,310,319,322,323,349,352,357,360,365,368,369,376,377,378,379,380,397,398,400,407,413,418,14,423,429,431,434,435,18,518,520,541,543,544,25,32,28,30,591,593,604,605],"tindex":"dfcd2db1-3e6a-11e6-9ac3-51086dcb4eeb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"dfcd2db2-3e6a-11e6-9ac3-51722830f4fe","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"dfcd54c3-3e6a-11e6-9ac3-093327140706","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"dfcd54c4-3e6a-11e6-9ac3-1bc984fd9903","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"dfcd54c5-3e6a-11e6-9ac3-f59751d3b8c1","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.Character) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"dfcd7bd6-3e6a-11e6-9ac3-37b2520f6faa","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"dfcd7bd7-3e6a-11e6-9ac3-5fd654949aac","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"dfcd7bd8-3e6a-11e6-9ac3-a748e5d89a8f","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253376915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":34,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":90,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":121,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":6,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":303,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":218,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":263,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":176,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":151,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":222,"com.google.gson.stream.JsonWriterTest.testRepeatedName":173,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":254,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":302,"com.google.gson.MixedStreamTest.testWriteLenient":310,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":212,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":231,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":10,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":123,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":124,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":32,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":126,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":235,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":271,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":143,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":261,"com.google.gson.functional.ObjectTest.testSingletonLists":15,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":209,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":264,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":165,"com.google.gson.stream.JsonWriterTest.testStrings":178,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":145,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":114,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":27,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":118,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":190,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":139,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":57,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":233,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":86,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":182,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":224,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":91,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":208,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":252,"com.google.gson.functional.EnumTest.testEnumCaseMapping":234,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":262,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":295,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":48,"com.google.gson.stream.JsonWriterTest.testNullStringValue":171,"com.google.gson.functional.JsonTreeTest.testToJsonTree":56,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":95,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":307,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":68,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":325,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":196,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":116,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":51,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":0,"com.google.gson.JsonPrimitiveTest.testEquals":308,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":92,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":230,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":258,"com.google.gson.functional.MapTest.testGeneralMapField":150,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":153,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":74,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":213,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":191,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":237,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":294,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":250,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":76,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":260,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":293,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":219,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":111,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":69,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":117,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":220,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":315,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":25,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":276,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":9,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":136,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":172,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":206,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":89,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":30,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":49,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":278,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":58,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":291,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":251,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":79,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":24,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":46,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":162,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":44,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":312,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":98,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":61,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":101,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":13,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":211,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":149,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":311,"com.google.gson.functional.MapTest.testInterfaceTypeMap":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":205,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":63,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":144,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":113,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":19,"com.google.gson.functional.EnumTest.testEnumSet":229,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":273,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":192,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":249,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":282,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":100,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":163,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":146,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":247,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":257,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":17,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":188,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":103,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":62,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":82,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":28,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":78,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":83,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":71,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":18,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":67,"com.google.gson.functional.MapTest.testMapSerialization":286,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":321,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":37,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":131,"com.google.gson.functional.MapTest.testSerializeMaps":281,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":137,"com.google.gson.functional.MapTest.testComplexKeysSerialization":290,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":304,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":157,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":155,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":96,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":187,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":156,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":81,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":216,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":42,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":147,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":201,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":301,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":112,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":274,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":255,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":4,"com.google.gson.functional.MapTest.testRawMapSerialization":289,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":292,"com.google.gson.functional.PrettyPrintingTest.testMap":180,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":226,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":115,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":22,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":84,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":193,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":169,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":238,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":202,"com.google.gson.functional.CollectionTest.testQueueSerialization":256,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":279,"com.google.gson.ObjectTypeAdapterTest.testSerialize":3,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":183,"com.google.gson.functional.MapTest.testMapOfMapSerialization":285,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":314,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":110,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":11,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":161,"com.google.gson.functional.FieldNamingTest.testIdentity":132,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":265,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":245,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":104,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":29,"com.google.gson.functional.MapTest.testMapWithQuotes":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":194,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":14,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":43,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":272,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":119,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":266,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":142,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":2,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":203,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":97,"com.google.gson.functional.MapTest.testMapSubclassSerialization":280,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":316,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":8,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":199,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":246,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":5,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":108,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":70,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":99,"com.google.gson.functional.EnumTest.testEnumSubclass":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":195,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":73,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":12,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":200,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":214,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":223,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":240,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":87,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":31,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":322,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":34,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":122,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":324,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":59,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":164,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":277,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":1,"com.google.gson.functional.ObjectTest.testNestedSerialization":23,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":52,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":236,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":181,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":174,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":288,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":215,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":72,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":170,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":296,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":179,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":242,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":20,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":154,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":275,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":65,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":80,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":267,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":287,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":320,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":141,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":217,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":244,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":39,"com.google.gson.functional.CollectionTest.testSetSerialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":140,"com.google.gson.functional.StringTest.testStringValueSerialization":270,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":50,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":158,"com.google.gson.JsonParserTest.testParseMixedArray":306,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":186,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":305,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":309,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":300,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":77,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":323,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":313,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":207,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":198,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":204,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":152,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":317,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":297,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":66,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":283,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":93,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":221,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":54,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":248,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":105,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":85,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":184,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":60,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":197},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"495882c9-3f11-11e6-b2f5-99d6f673c246","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"49591f0a-3f11-11e6-b2f5-aff3b5a083ad","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4959461b-3f11-11e6-b2f5-ddb7073458b5","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src != null) {\n                {\n                    return toJsonTree(src);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163],"tindex":"4959461c-3f11-11e6-b2f5-9741361c9477","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"49596d2d-3f11-11e6-b2f5-8112d905cda6","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4959943e-3f11-11e6-b2f5-f75331215f29","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4959bb4f-3f11-11e6-b2f5-874fc01c7ce7","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[164],"tindex":"4959e260-3f11-11e6-b2f5-15f5e8bc6f15","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"495a3081-3f11-11e6-b2f5-79fee2727c79","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,165,166,167,168,169,4,5,170,171,172,173,174,175,176,177,178,179,180,6,7,8,181,9,182,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,183,184,51,52,185,186,187,188,54,57,189,61,62,63,66,67,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,69,207,208,209,210,211,212,213,214,215,216,217,71,218,219,72,73,75,76,220,77,78,79,80,83,84,85,86,87,88,89,90,91,221,92,93,94,222,95,96,97,223,98,99,100,101,102,103,104,105,106,107,224,225,226,227,108,228,229,230,231,232,109,233,234,235,110,236,237,111,112,113,114,115,116,117,238,118,119,239,240,241,242,243,244,245,120,246,121,122,247,248,249,250,251,252,253,254,123,255,124,256,257,258,125,259,126,260,127,261,128,129,130,131,132,262,263,264,265,266,267,268,269,270,271,133,134,135,136,137,272,273,138,274,139,140,275,276,277,278,141,142,143,144,279,145,146,280,281,282,283,147,284,285,286,287,148,149,150,288,289,290,291,292,151,152,153,154,155,156,157,158,159,160,161,293,294,162,295,296,297,163,298],"tindex":"495a5792-3f11-11e6-b2f5-21d83735ac55","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495aa5b3-3f11-11e6-b2f5-51be1c461d53","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495aa5b4-3f11-11e6-b2f5-1384c3b026f5","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495accc5-3f11-11e6-b2f5-a3896982b92c","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495accc6-3f11-11e6-b2f5-0de955a40ad6","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495af3d7-3f11-11e6-b2f5-19f974823136","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495af3d8-3f11-11e6-b2f5-974c18cd8c67","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495b1ae9-3f11-11e6-b2f5-c598763d4c85","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[299,300,301],"tindex":"495b1aea-3f11-11e6-b2f5-c9449d099bdd","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"495b41fb-3f11-11e6-b2f5-e90c65e7729c","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[41,43,302,97,100,104,105,303,288],"tindex":"495b41fc-3f11-11e6-b2f5-8fb4c1bfc427","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[302],"tindex":"495b690d-3f11-11e6-b2f5-5fd7ce5b5b31","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[304,166,167,168,10,11,12,13,305,47,48,49,183,184,54,57,222,223,138,274,139,277,151,293,294,306],"tindex":"495b690e-3f11-11e6-b2f5-7135754243a2","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495b690f-3f11-11e6-b2f5-2925377751f4","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"495b9020-3f11-11e6-b2f5-fbb7d030cad0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[302],"tindex":"495b9021-3f11-11e6-b2f5-eb120bbbddcc","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495b9022-3f11-11e6-b2f5-552c5b452fae","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"495bb733-3f11-11e6-b2f5-4bc04308d91f","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495bb734-3f11-11e6-b2f5-3dec20a9783d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[53,56,307,308],"tindex":"495bb735-3f11-11e6-b2f5-cf97b8f6c4d0","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[309],"tindex":"495bde46-3f11-11e6-b2f5-7bc6e19ec4f6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495c0557-3f11-11e6-b2f5-1538da575baf","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495c0558-3f11-11e6-b2f5-edbae703b9d7","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[310,311,312,313,314,315,316],"tindex":"495c2c69-3f11-11e6-b2f5-c982ed977039","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495c2c6a-3f11-11e6-b2f5-95d30cf1f0f4","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[183,184],"tindex":"495c537b-3f11-11e6-b2f5-41718f822e3e","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"495c537c-3f11-11e6-b2f5-7d34bb0203ed","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isString()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[55,58,59,60,64,65,68,151],"tindex":"495c537d-3f11-11e6-b2f5-175475cca3e7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495c7a8e-3f11-11e6-b2f5-9f385bc402e3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495c7a8f-3f11-11e6-b2f5-5f9809eb8f41","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[317],"tindex":"495c7a90-3f11-11e6-b2f5-190a4c4975dd","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[318,134,319,320,136,321,137,322,323,324,325],"tindex":"495c7a91-3f11-11e6-b2f5-1bf02ad37128","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"495ca1a2-3f11-11e6-b2f5-27cfbf4fc31a","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495ca1a3-3f11-11e6-b2f5-f36d373d4391","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"495ca1a4-3f11-11e6-b2f5-ab434d71e9f8","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"495cc8b5-3f11-11e6-b2f5-4b57f29d8033","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324473403/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":45,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
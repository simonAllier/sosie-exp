{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":614,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":371,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":380,"com.google.gson.functional.StringTest.testStringValueDeserialization":378,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":138,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":536,"com.google.gson.JsonPrimitiveTest.testDeepCopy":656,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":235,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":46,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":368,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":448,"com.google.gson.MixedStreamTest.testWriteLenient":597,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":635,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":545,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":176,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":410,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":328,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":427,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":283,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":20,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":41,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":564,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":244,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":631,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":189,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":473,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":622,"com.google.gson.functional.ObjectTest.testSingletonLists":326,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":537,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":228,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":381,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":587,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":403,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":555,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":346,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":4,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":286,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":463,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":394,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":606,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":139,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":202,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":275,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":120,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":9,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":91,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":119,"com.google.gson.functional.EnumTest.testEnumCaseMapping":40,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":1,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":379,"com.google.gson.functional.JsonTreeTest.testToJsonTree":97,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":219,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":558,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":156,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":511,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":68,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":529,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":476,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":420,"com.google.gson.functional.ObjectTest.testNullDeserialization":358,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":436,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":391,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":340,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":652,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":19,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":296,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":236,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":347,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":630,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":89,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":571,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":355,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":18,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":559,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":174,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":301,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":300,"com.google.gson.JsonParserTest.testParseString":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":554,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":280,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":259,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":510,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":64,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":359,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":610,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":535,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":112,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":272,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":449,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":661,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":526,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":491,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":637,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":573,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":134,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":281,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":455,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":273,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":58,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":354,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":17,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":26,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":334,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":659,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":53,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":130,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":240,"com.google.gson.metrics.PerformanceTest.testDummy":13,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":24,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":147,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":187,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":496,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":575,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":136,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":400,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":543,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":528,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":570,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":439,"com.google.gson.functional.CollectionTest.testSetDeserialization":426,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":565,"com.google.gson.functional.EnumTest.testEnumSet":31,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":339,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":397,"com.google.gson.JsonStreamParserTest.testIterator":615,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":264,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":574,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":516,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":348,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":8,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":186,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":277,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":495,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":288,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":86,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":409,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":289,"com.google.gson.functional.MapTest.testHashMapDeserialization":101,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":233,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":541,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":27,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":373,"com.google.gson.MixedStreamTest.testReadNulls":598,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":369,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":608,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":407,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":487,"com.google.gson.functional.MapTest.testSortedMap":123,"com.google.gson.functional.MapTest.testMapSerialization":118,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":270,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":316,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":71,"com.google.gson.functional.MapTest.testSerializeMaps":104,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":459,"com.google.gson.functional.MapTest.testComplexKeysSerialization":131,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":396,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":135,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":636,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":78,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":438,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":485,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":169,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":404,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":36,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":205,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":632,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":647,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":48,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":357,"com.google.gson.functional.MapTest.testStringKeyDeserialization":133,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":579,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":303,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":137,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":239,"com.google.gson.functional.PrettyPrintingTest.testMap":203,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":234,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":443,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":413,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":375,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":506,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":3,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":77,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":384,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":388,"com.google.gson.functional.MapTest.testMapSerializationEmpty":132,"com.google.gson.functional.CollectionTest.testQueueSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":265,"com.google.gson.functional.MapTest.testMapOfMapSerialization":117,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":531,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":423,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":588,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":641,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":382,"com.google.gson.functional.FieldNamingTest.testIdentity":460,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":576,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":81,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":360,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":52,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":96,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":178,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":325,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":222,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":10,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":383,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":567,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":43,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":547,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":557,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":98,"com.google.gson.functional.MapTest.testMapSubclassSerialization":103,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":299,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":29,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":196,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":399,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":254,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":445,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":461,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":594,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":314,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":505,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":402,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":185,"com.google.gson.functional.EnumTest.testEnumSubclass":34,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":276,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":5,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":344,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":221,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":566,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":578,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":164,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":224,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":45,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":260,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":44,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":145,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":14,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":67,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":266,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":338,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":51,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":550,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":327,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":100,"com.google.gson.MixedStreamTest.testWriteNulls":595,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":66,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":453,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":60,"com.google.gson.CommentsTest.testParseComments":6,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":182,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":437,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":329,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":583,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":73,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":279,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":315,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":122,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":386,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":141,"com.google.gson.MixedStreamTest.testReadInvalidState":592,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":561,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":194,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":552,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":317,"com.google.gson.JsonParserTest.testParseMixedArray":626,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":611,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":232,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":603,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":79,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":642,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":249,"com.google.gson.JsonArrayTest.testRemove":621,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":533,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":63,"com.google.gson.functional.MapTest.testMapDeserialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":527,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":208,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":99,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":472,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":651,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":109,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":154,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":478,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":474,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":170,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":35,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":503,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":345,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":361,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":159,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":446,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":512,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":193,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":633,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":42,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":168,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":121,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":204,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":556,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":218,"com.google.gson.functional.PrimitiveTest.testShortSerialization":297,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":585,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":481,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":285,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":93,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":639,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":255,"com.google.gson.JsonParserTest.testParseEmptyString":627,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":284,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":517,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":456,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":33,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":412,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":28,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":105,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":248,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":305,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":433,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":451,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":609,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":645,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":544,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":602,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":643,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":306,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":50,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":153,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":362,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":577,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":498,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":646,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":653,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":291,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":580,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":366,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":333,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":39,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":161,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":398,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":513,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":441,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":581,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":471,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":534,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":238,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":520,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":539,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":150,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":414,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":292,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":263,"com.google.gson.JsonArrayTest.testSet":619,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":309,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":142,"com.google.gson.JsonPrimitiveTest.testEquals":655,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":32,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":477,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":377,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":318,"com.google.gson.functional.MapTest.testGeneralMapField":127,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":331,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":311,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":72,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":442,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":568,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":546,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":125,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":173,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":499,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":287,"com.google.gson.MixedStreamTest.testReadMixedStreamed":601,"com.google.gson.JsonObjectTest.testDeepCopy":648,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":113,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":514,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":11,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":428,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":489,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":268,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":92,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":640,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":532,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":114,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":201,"com.google.gson.JsonArrayTest.testDeepCopy":620,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":102,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":584,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":217,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":466,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":251,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":530,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":454,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":654,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":82,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":497,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":484,"com.google.gson.functional.ObjectTest.testNestedDeserialization":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":590,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":140,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":352,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":374,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":144,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":308,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":212,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":47,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":115,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":385,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":628,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":184,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":295,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":160,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":180,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":452,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":431,"com.google.gson.functional.ObjectTest.testNullSerialization":341,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":163,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":200,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":126,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":223,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":69,"com.google.gson.functional.MapTest.testInterfaceTypeMap":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":444,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":149,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":226,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":37,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":167,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":447,"com.google.gson.MixedStreamTest.testReadClosed":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":500,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":88,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":242,"com.google.gson.MixedStreamTest.testWriteClosed":600,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":376,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":419,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":152,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":560,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":190,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":148,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":215,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":211,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":364,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":553,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":155,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":335,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":418,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":271,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":469,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":165,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":424,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":607,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":629,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":540,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":83,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":313,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":658,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":247,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":508,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":54,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":440,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":214,"com.google.gson.functional.CollectionTest.testQueueDeserialization":434,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":253,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":269,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":390,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":370,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":551,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":111,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":522,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":175,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":365,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":411,"com.google.gson.functional.MapTest.testRawMapSerialization":129,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":591,"com.google.gson.JsonParserTest.testParseReader":623,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":538,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":158,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":350,"com.google.gson.JsonPrimitiveTest.testExponential":657,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":321,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":483,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":616,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":59,"com.google.gson.functional.PrimitiveTest.testByteSerialization":294,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":401,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":618,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":323,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":171,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":0,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":237,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":177,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":70,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":457,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":191,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":387,"com.google.gson.functional.MapTest.testMapWithQuotes":116,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":507,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":572,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":488,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":589,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":660,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":504,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":563,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":475,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":181,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":363,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":209,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":278,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":519,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":76,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":509,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":179,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":521,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":290,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":408,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":425,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":62,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":55,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":549,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":162,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":84,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":470,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":30,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":406,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":195,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":586,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":349,"com.google.gson.functional.ObjectTest.testNestedSerialization":351,"com.google.gson.JsonObjectTest.testAddingStringProperties":649,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":143,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":172,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":241,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":393,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":216,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":128,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":319,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":198,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":625,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":12,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":599,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":80,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":342,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":304,"com.google.gson.JsonPrimitiveTest.testBoolean":650,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":151,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":524,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":2,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":16,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":243,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":502,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":464,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":392,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":65,"com.google.gson.functional.CollectionTest.testSetSerialization":430,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":569,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":206,"com.google.gson.functional.StringTest.testStringValueSerialization":395,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":582,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":322,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":49,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":415,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":56,"com.google.gson.MixedStreamTest.testWriteInvalidState":596,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":336,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":246,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":74,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":252,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":515,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":458,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":435,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":85,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":613,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":87,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":638,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":542,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":324,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":108,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":61,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":492},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"e1eb88c4-3f03-11e6-b68a-bf69e4e54e57","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602],"tindex":"e1ec2505-3f03-11e6-b68a-8f5de80e1112","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ec7326-3f03-11e6-b68a-f9a00fdb6379","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ec7327-3f03-11e6-b68a-cbd4beb18184","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[603],"tindex":"e1ec9a38-3f03-11e6-b68a-a937195f44c0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ecc149-3f03-11e6-b68a-47ede134d18a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e1ecc14a-3f03-11e6-b68a-47e3060e76b0","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.TypeVariable)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ece85b-3f03-11e6-b68a-85367ea4f980","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[183,567],"tindex":"e1ece85c-3f03-11e6-b68a-d583f866881f","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ece85d-3f03-11e6-b68a-3301ff22b783","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[517],"tindex":"e1ed0f6e-3f03-11e6-b68a-a974c9ce9fb8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ed0f6f-3f03-11e6-b68a-3fbd05f2554f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ed0f70-3f03-11e6-b68a-39eca4dd9dc3","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ed3681-3f03-11e6-b68a-2ffb85f78218","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,17,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,18,647,648,649,650,651,652,653,654,655,656,657,658,659,33,83,86,88,89,91,94,95,96,97,124,127,135,138,139,140,144,145,146,150,151,156,660,176,177,178,179,180,183,195,198,214,215,661,315,316,317,318,319,320,321,323,324,371,377,401,403,433,442,444,448,449,450,451,452,475,487,490,491,499,507,509,511,545,549,556,558,567,572,574,576,578,583,584,585,587,590,595],"tindex":"e1ed5d92-3f03-11e6-b68a-d97b14cd3643","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ed84a3-3f03-11e6-b68a-c5710b229a0c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1527","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1ed84a4-3f03-11e6-b68a-65f5f346abae","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= '0') && (c <= '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"e1edabb5-3f03-11e6-b68a-5169b5fcea0f","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from.equals(from)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1edabb6-3f03-11e6-b68a-f944923325e3","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1edd2c7-3f03-11e6-b68a-03b9bd91cbb1","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from.equals(from)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e1edf9d8-3f03-11e6-b68a-bbd4dfc65737","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319156083/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
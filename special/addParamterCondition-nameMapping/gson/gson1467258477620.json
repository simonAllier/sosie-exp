{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":35,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":158,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":195,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":259,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":8,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":55,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":69,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":311,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":16,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":79,"com.google.gson.JsonPrimitiveTest.testDeepCopy":130,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":331,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":146,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":337,"com.google.gson.JsonParserTest.testParseEmptyString":119,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":183,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":298,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":90,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":142,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":67,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":106,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":85,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":358,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":364,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":378,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":345,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":348,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":225,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":156,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":108,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":113,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":307,"com.google.gson.functional.ObjectTest.testSingletonLists":262,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":41,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":243,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":349,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":312,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":152,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":80,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":72,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":150,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":185,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":277,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":27,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":28,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":127,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":164,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":38,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":14,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":6,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":344,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":182,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":191,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":362,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":366,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":326,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":381,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":241,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":330,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":310,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":232,"com.google.gson.functional.JsonTreeTest.testToJsonTree":62,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":332,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":11,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":70,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":66,"com.google.gson.JsonArrayTest.testSet":135,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":292,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":308,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":4,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":166,"com.google.gson.JsonPrimitiveTest.testEquals":129,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":328,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":56,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":48,"com.google.gson.functional.MapTest.testGeneralMapField":53,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":167,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":253,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":109,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":208,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":375,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":245,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":63,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":303,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":355,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":299,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":269,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":155,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":102,"com.google.gson.JsonObjectTest.testDeepCopy":140,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":286,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":138,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":383,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":251,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":356,"com.google.gson.JsonParserTest.testParseString":115,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":147,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":240,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":296,"com.google.gson.JsonArrayTest.testDeepCopy":136,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":290,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":338,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":78,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":205,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":275,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":242,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":351,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":91,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":30,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":107,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":239,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":194,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":128,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":320,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":84,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":81,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":111,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":273,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":297,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":335,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":324,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":201,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":274,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":116,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":133,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":372,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":2,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":120,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":282,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":302,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":190,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":339,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":89,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":94,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":193,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":244,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":177,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":280,"com.google.gson.functional.MapTest.testInterfaceTypeMap":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":238,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":376,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":110,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":226,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":343,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":266,"com.google.gson.functional.EnumTest.testEnumSet":340,"com.google.gson.JsonStreamParserTest.testIterator":36,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":74,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":228,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":101,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":100,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":361,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":264,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":300,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":196,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":98,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":44,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":278,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":323,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":373,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":40,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":179,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":187,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":250,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":198,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":265,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":360,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":31,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":46,"com.google.gson.functional.MapTest.testSerializeMaps":5,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":215,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":32,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":363,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":39,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":154,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":159,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":54,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":143,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":96,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":211,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":132,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":217,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":255,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":284,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":333,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":60,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":256,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":97,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":287,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":9,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":139,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":248,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":184,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":173,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":234,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":163,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":357,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":168,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":306,"com.google.gson.functional.MapTest.testRawMapSerialization":178,"com.google.gson.JsonParserTest.testParseReader":114,"com.google.gson.functional.PrettyPrintingTest.testMap":7,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":367,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":188,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":271,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":359,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":229,"com.google.gson.JsonPrimitiveTest.testExponential":131,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":51,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":235,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":121,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":71,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":123,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":202,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":57,"com.google.gson.ObjectTypeAdapterTest.testSerialize":169,"com.google.gson.functional.MapTest.testMapOfMapSerialization":175,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":288,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":353,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":86,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":221,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":293,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":148,"com.google.gson.functional.FieldNamingTest.testIdentity":216,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":313,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":207,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":213,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":75,"com.google.gson.functional.MapTest.testMapWithQuotes":174,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":64,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":20,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":87,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":186,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":258,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":59,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":382,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":112,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":314,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":291,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":224,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":172,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":99,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":236,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":305,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":295,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":379,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":210,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":17,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":346,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":368,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":246,"com.google.gson.functional.EnumTest.testEnumSubclass":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":65,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":294,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":279,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":374,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":233,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":347,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":104,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":192,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":321,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":260,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":105,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":18,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":165,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":171,"com.google.gson.JsonObjectTest.testAddingStringProperties":141,"com.google.gson.functional.ObjectTest.testNestedSerialization":272,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":352,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":283,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":354,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":289,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":350,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":247,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":95,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":117,"com.google.gson.MixedStreamTest.testWriteNulls":134,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":380,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":203,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":267,"com.google.gson.JsonPrimitiveTest.testBoolean":124,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":254,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":77,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":263,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":25,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":325,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":45,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":176,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":315,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":29,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":222,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":304,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":206,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":47,"com.google.gson.functional.CollectionTest.testSetSerialization":365,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":257,"com.google.gson.functional.StringTest.testStringValueSerialization":318,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":181,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":1,"com.google.gson.JsonParserTest.testParseMixedArray":118,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":218,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":43,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":281,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":161,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":322,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":149,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":285,"com.google.gson.JsonArrayTest.testRemove":137,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":209,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":219,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":301,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":371,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":237,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":12,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":252,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":125,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":197,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":329,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":34,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":327,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":61,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":145,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":334,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":268,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":276,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":58,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":189,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":369,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":15,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":230,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":204},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[0],"tindex":"6f0987e7-3e75-11e6-9f3f-4b1be87dc863","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[1,2,3,4],"tindex":"6f09fd18-3e75-11e6-9f3f-d3c58e46b0f7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"6f0a2429-3e75-11e6-9f3f-1d7bccd59560","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"6f0a242a-3e75-11e6-9f3f-a7a33fa88407","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"6f0a242b-3e75-11e6-9f3f-efcafd4c4742","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6f0a4b3c-3e75-11e6-9f3f-89e1ab0a55be","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[18],"tindex":"6f0a4b3d-3e75-11e6-9f3f-113a31460c82","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"6f0a724e-3e75-11e6-9f3f-6b860bedc5c2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"6f0a995f-3e75-11e6-9f3f-9f10a02c63e8","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"6f0a9960-3e75-11e6-9f3f-0b785eda92f4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[19,20,21,22,23,24,25,26],"tindex":"6f0ac071-3e75-11e6-9f3f-097a86bc62c9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"6f0ac072-3e75-11e6-9f3f-d161b4aff7b8","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"6f0ae783-3e75-11e6-9f3f-ef7481b0a642","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6f0ae784-3e75-11e6-9f3f-29606f46806e","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[27,28,29,30,31,32],"tindex":"6f0ae785-3e75-11e6-9f3f-9d358cb3b84f","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,19,55,56,57,58,59,60,61,20,62,21,22,23,24,25,26,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,14,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"tindex":"6f0ae786-3e75-11e6-9f3f-850a0b330cf2","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"6f0b0e97-3e75-11e6-9f3f-55d3006e0d1a","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[160,161,162],"tindex":"6f0b0e98-3e75-11e6-9f3f-4fb43ba3c4c6","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[163,164,165,90,91,92,94],"tindex":"6f0b0e99-3e75-11e6-9f3f-2fdbd84e1004","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"6f0b35aa-3e75-11e6-9f3f-354654564e9c","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[166],"tindex":"6f0b35ab-3e75-11e6-9f3f-ddd0f4e894b3","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6f0b35ac-3e75-11e6-9f3f-fd76c6a0c218","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"6f0b35ad-3e75-11e6-9f3f-172f5a717c57","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                {\n                    return containsKey(o);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"6f0b35ae-3e75-11e6-9f3f-a3a8bc5922a9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[5,167,168,169,170],"tindex":"6f0b5cbf-3e75-11e6-9f3f-09466d0ae3be","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[171,172,47,49,5,173,174,175,176,52,177,53,178,19,179,180,181,182,183,184,185,186,2,187,188,189,190,191,192,193,194,195,59,61,196,197,198,199,200,167,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,67,245,246,68,247,248,249,250,69,251,71,72,252,253,254,255,256,73,76,163,164,257,77,78,165,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,3,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,6,7,8,9,10,11,12,326,327,166,328,329,330,331,332,333,100,334,101,102,335,103,336,337,338,339,340,341,106,342,343,344,345,346,27,347,30,32,348,349,350,351,4,352,353,354,355,356,357,358,168,359,360,361,362,363,364,365,366,109,367,110,368,369,370,371,372,373,374,112,375,376,377,378,379,116,380,381,382,383],"tindex":"6f0b5cc0-3e75-11e6-9f3f-dbe50cbb49f1","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"6f0b83d1-3e75-11e6-9f3f-e300d32261f9","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"6f0b83d2-3e75-11e6-9f3f-7fecf68c4965","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"6f0b83d3-3e75-11e6-9f3f-a1643834e19c","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"6f0baae4-3e75-11e6-9f3f-cfbcc34c3f96","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"6f0c6e35-3e75-11e6-9f3f-2967cd69996a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6f0cbc56-3e75-11e6-9f3f-0d8819a7fb5c","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257945024/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":32,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
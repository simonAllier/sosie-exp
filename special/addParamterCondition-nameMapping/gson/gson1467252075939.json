{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":345,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":200,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":27,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":34,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":399,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":402,"com.google.gson.MixedStreamTest.testWriteLenient":482,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":112,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":325,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":278,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":288,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":381,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":260,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":266,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":83,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":460,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":412,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":416,"com.google.gson.functional.ObjectTest.testSingletonLists":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":108,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":267,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":201,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":123,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":389,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":320,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":421,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":476,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":303,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":216,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":344,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":316,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":238,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":446,"com.google.gson.functional.EnumTest.testEnumCaseMapping":259,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":2,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":199,"com.google.gson.functional.JsonTreeTest.testToJsonTree":358,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":221,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":366,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":92,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":419,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":474,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":226,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":469,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":285,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":125,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":387,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":187,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":333,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":151,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":470,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":236,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":309,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":392,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":332,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":449,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":275,"com.google.gson.JsonParserTest.testParseString":456,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":179,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":475,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":173,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":62,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":107,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":403,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":46,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":198,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":335,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":376,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":25,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":180,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":58,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":156,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":301,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":313,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":385,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":38,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":165,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":447,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":480,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":427,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":50,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":428,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":375,"com.google.gson.functional.CollectionTest.testSetDeserialization":431,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":84,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":148,"com.google.gson.functional.EnumTest.testEnumSet":253,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":248,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":130,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":9,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":152,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":246,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":315,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":233,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":374,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":183,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":302,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":39,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":196,"com.google.gson.functional.MapTest.testMapSerialization":14,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":30,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":341,"com.google.gson.functional.MapTest.testSerializeMaps":8,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":73,"com.google.gson.functional.MapTest.testComplexKeysSerialization":23,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":334,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":69,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":127,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":420,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":232,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":354,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":219,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":462,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":35,"com.google.gson.functional.MapTest.testStringKeyDeserialization":448,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":132,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":191,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":26,"com.google.gson.functional.PrettyPrintingTest.testMap":217,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":295,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":89,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":319,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":205,"com.google.gson.functional.MapTest.testMapSerializationEmpty":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":99,"com.google.gson.functional.CollectionTest.testQueueSerialization":282,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":463,"com.google.gson.functional.MapTest.testMapOfMapSerialization":13,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":171,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":79,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":138,"com.google.gson.functional.FieldNamingTest.testIdentity":74,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":451,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":209,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":394,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":37,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":143,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":357,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":317,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":203,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":306,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":174,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":378,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":100,"com.google.gson.functional.MapTest.testMapSubclassSerialization":7,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":190,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":311,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":418,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":297,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":434,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":404,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":373,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":245,"com.google.gson.functional.EnumTest.testEnumSubclass":256,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":177,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":321,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":161,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":305,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":131,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":351,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":142,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":379,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":360,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":472,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":172,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":116,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":380,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":64,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":126,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":415,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":135,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":413,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":215,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":367,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":16,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":204,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":118,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":189,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":4,"com.google.gson.JsonParserTest.testParseMixedArray":329,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":164,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":477,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":212,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":168,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":105,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":184,"com.google.gson.functional.MapTest.testMapDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":101,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":222,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":6,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":331,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":411,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":10,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":228,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":225,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":355,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":454,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":369,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":150,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":158,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":298,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":417,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":47,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":141,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":15,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":120,"com.google.gson.functional.PrimitiveTest.testShortSerialization":188,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":230,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":240,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":371,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":70,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":255,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":471,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":280,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":310,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":468,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":442,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":192,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":292,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":405,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":339,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":414,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":337,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":438,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":195,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":473,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":36,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":159,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":365,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":85,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":340,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":400,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":133,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":397,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":384,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":258,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":43,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":370,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":96,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":197,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":231,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":362,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":175,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":193,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":270,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":227,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":348,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":342,"com.google.gson.functional.MapTest.testGeneralMapField":20,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":383,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":57,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":294,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":113,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":86,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":163,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":274,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":182,"com.google.gson.MixedStreamTest.testReadMixedStreamed":437,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":466,"com.google.gson.JsonObjectTest.testDeepCopy":464,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":169,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":289,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":318,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":401,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":426,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":239,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":104,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":445,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":241,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":441,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":136,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":194,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":269,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":264,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":103,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":481,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":140,"com.google.gson.functional.ObjectTest.testNestedDeserialization":398,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":155,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":304,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":346,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":359,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":237,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":244,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":186,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":42,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":328,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":406,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":291,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":45,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":443,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":19,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":162,"com.google.gson.functional.MapTest.testInterfaceTypeMap":17,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":296,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":52,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":257,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":277,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":235,"com.google.gson.MixedStreamTest.testWriteClosed":436,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":284,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":347,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":146,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":364,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":249,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":410,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":160,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":119,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":54,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":147,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":283,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":423,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":265,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":352,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":109,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":452,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":75,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":167,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":356,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":409,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":478,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":170,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":117,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":424,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":11,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":98,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":276,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":396,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":279,"com.google.gson.functional.MapTest.testRawMapSerialization":22,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":433,"com.google.gson.JsonParserTest.testParseReader":455,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":440,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":40,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":153,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":343,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":457,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":59,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":122,"com.google.gson.functional.PrimitiveTest.testByteSerialization":185,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":322,"com.google.gson.ObjectTypeAdapterTest.testSerialize":439,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":272,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":330,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":326,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":65,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":71,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":250,"com.google.gson.functional.MapTest.testMapWithQuotes":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":129,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":139,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":88,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":82,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":242,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":395,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":95,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":178,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":68,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":97,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":263,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":327,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":115,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":243,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":44,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":211,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":479,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":312,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":453,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":137,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":390,"com.google.gson.functional.ObjectTest.testNestedSerialization":154,"com.google.gson.JsonObjectTest.testAddingStringProperties":465,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":271,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":166,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":273,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":268,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":21,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":5,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":208,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":314,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":149,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":363,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":372,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":368,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":391,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":422,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":206,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":63,"com.google.gson.functional.CollectionTest.testSetSerialization":290,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":134,"com.google.gson.functional.StringTest.testStringValueSerialization":207,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":220,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":32,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":76,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":349,"com.google.gson.MixedStreamTest.testWriteInvalidState":435,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":324,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":67,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":94,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":72,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":467,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":124,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":459,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":408,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":234,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":336,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":110,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":323,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":61},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"tindex":"8756fcf8-3e66-11e6-88db-e9c17ed9fc91","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"87574b19-3e66-11e6-88db-69827c1ee99c","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8757722a-3e66-11e6-88db-09ce28e067c9","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[6,27,322,323,49,86,91,92,112,115,120,129,130,131,132,133,134,135,136,137,138,139,140,324,196,197,198,325,326,327,328,208,226,230,233,235,236,238,243,255,292,296,303,304,329,330,331,317,332,333,334,335,336,337,338,339,340],"tindex":"8757722b-3e66-11e6-88db-9186b6a822b0","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (element == null) {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"8757993c-3e66-11e6-88db-17e92ca15b2e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,1,341,4,342,5,343,11,344,17,19,20,23,27,28,345,30,346,31,347,348,32,34,35,349,350,37,38,39,40,41,42,43,44,45,351,352,46,353,47,354,355,48,356,49,357,358,359,360,361,50,51,52,362,363,364,365,53,54,366,66,367,67,70,71,72,73,74,75,76,77,78,79,80,82,83,84,368,369,370,371,372,104,114,119,373,123,374,124,125,126,127,375,128,376,377,131,133,134,141,378,379,142,143,144,380,381,145,382,383,146,384,385,147,386,148,387,149,388,389,152,390,153,154,391,156,392,393,157,394,158,159,395,160,396,397,398,399,400,196,401,197,198,325,326,327,328,402,403,404,405,406,208,407,209,210,211,408,212,213,214,215,409,410,218,219,223,224,411,412,227,228,413,229,231,232,414,242,415,244,245,246,247,248,416,249,250,251,417,252,418,419,257,420,262,421,422,263,264,423,424,265,425,426,267,427,269,270,271,428,429,430,272,275,276,278,280,286,431,288,290,297,300,301,303,305,307,432,308,309,310,311,312,313,433,434,435,436,437,438,315,439],"tindex":"8757993d-3e66-11e6-88db-61fe9718bc8d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"8757c04e-3e66-11e6-88db-57c40d9bd8a2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[8,14,20,22,26,28,345,30,32,35,37,45,47,48,356,49,357,358,51,53,56,61,64,65,66,69,70,71,72,73,74,80,81,82,83,84,123,374,133,134,141,142,145,148,149,152,154,157,158,160,183,187,189,196,197,198,208,209,210,214,215,410,216,217,218,219,220,221,222,223,242,243,244,245,246,247,248,249,250,251,252,419,262,263,264,265,267,269,272,275,276,440,278,281,283,286,288,290,291,311,312,313,433,434,439],"tindex":"8757c04f-3e66-11e6-88db-8f2e4539a8a5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"8757c050-3e66-11e6-88db-85dc0bf2e9f2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[4,342,5,441,442,443,444,445,446,447,448,345,48,357,359,360,361,362,363,366,449,450,451,198,325,326,327,328,405,452,409,410,453,454,303,311,312,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472],"tindex":"87580e71-3e66-11e6-88db-558b79a38253","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"87583582-3e66-11e6-88db-7f2b7f374834","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,4,5,11,17,19,20,27,28,345,30,31,32,34,35,37,38,39,40,41,43,44,45,46,47,48,356,49,357,358,359,360,361,50,51,52,362,363,53,54,366,66,70,71,72,73,74,75,76,77,78,79,80,82,83,84,104,114,119,123,374,124,125,126,127,128,131,133,134,141,142,143,144,145,146,147,148,149,152,153,154,156,157,158,159,160,196,197,198,325,326,327,328,208,209,210,211,212,213,214,215,409,410,218,219,223,224,227,228,229,231,232,242,244,245,246,247,248,249,250,251,252,419,257,262,263,264,265,267,269,270,271,272,275,276,277,473,440,474,475,476,278,280,286,288,290,297,300,301,303,305,307,308,309,310,311,312,313,433,434,315,439],"tindex":"87583583-3e66-11e6-88db-2d25eeca3c8d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[477],"tindex":"87583584-3e66-11e6-88db-dd092a65506b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"87585c95-3e66-11e6-88db-4b53428f3f09","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"87585c96-3e66-11e6-88db-af478a06665a","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[243,306],"tindex":"87585c97-3e66-11e6-88db-cdaad0663bb0","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            return toJsonTree(src);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"875883a8-3e66-11e6-88db-076da45e0c5b","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (element == null) {\n                {\n                    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[27,345,356,49,357,358,359,360,361,362,363,366,196,197,198,325,326,327,328,409,410,303,457,334,337,338,340],"tindex":"875883a9-3e66-11e6-88db-7940aa360513","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"875883aa-3e66-11e6-88db-dd9c9c39c370","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[371],"tindex":"875883ab-3e66-11e6-88db-5f036b50ba3b","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[477,478,479,480,481],"tindex":"8758aabc-3e66-11e6-88db-89449a1392a8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"8758aabd-3e66-11e6-88db-5f67c5f9f680","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8758d1ce-3e66-11e6-88db-e77888714ecb","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[226],"tindex":"8758d1cf-3e66-11e6-88db-df3da44b370a","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8758d1d0-3e66-11e6-88db-07eb8a28161d","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            return toJsonTree(src);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[162,165,168,171,173,190,482],"tindex":"8758d1d1-3e66-11e6-88db-afbb10aa0432","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl","sourcecode":"(c == 't') || (c == 'T')"},"failures":[],"tindex":"8758d1d2-3e66-11e6-88db-7bb2a8055bb2","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 't') || (c == 'T')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"8758f8e3-3e66-11e6-88db-47b2f3692657","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8758f8e4-3e66-11e6-88db-a327cdf5cf45","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"8758f8e5-3e66-11e6-88db-4b13315656ed","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"87591ff6-3e66-11e6-88db-c3da271e3080","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"87591ff7-3e66-11e6-88db-ed2c6ae9067b","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"87591ff8-3e66-11e6-88db-b5a80a336238","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to.equals(to)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"87591ff9-3e66-11e6-88db-fb50a92dc568","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            return toJsonTree(src);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"8759470a-3e66-11e6-88db-915c811b0eb0","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.equals(from)) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467251483910/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":44,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":291,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":445,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":14,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":87,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":113,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":59,"com.google.gson.MixedStreamTest.testWriteLenient":104,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":411,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":208,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":285,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":363,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":372,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":494,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":346,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":352,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":180,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":463,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":449,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":517,"com.google.gson.functional.ObjectTest.testSingletonLists":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":204,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":353,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":292,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":581,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":53,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":68,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":502,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":407,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":461,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":565,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":524,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":582,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":69,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":307,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":471,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":403,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":324,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":42,"com.google.gson.functional.EnumTest.testEnumCaseMapping":345,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":121,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":290,"com.google.gson.functional.JsonTreeTest.testToJsonTree":50,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":427,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":189,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":338,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":101,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":558,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":315,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":83,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":35,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":1,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":79,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":500,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":277,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":410,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":246,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":459,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":425,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":322,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":385,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":505,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":409,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":218,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":361,"com.google.gson.JsonParserTest.testParseString":72,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":102,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":269,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":424,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":167,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":203,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":60,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":551,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":66,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":157,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":58,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":413,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":489,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":141,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":270,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":163,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":251,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":73,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":115,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":443,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":498,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":150,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":259,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":422,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":555,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":530,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":19,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":333,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":572,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":54,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":557,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":560,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":198,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":531,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":384,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":426,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":4,"com.google.gson.functional.CollectionTest.testSetDeserialization":534,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":181,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":111,"com.google.gson.functional.EnumTest.testEnumSet":339,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":225,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":542,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":128,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":247,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":332,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":402,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":533,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":222,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":319,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":273,"com.google.gson.functional.MapTest.testHashMapDeserialization":546,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":575,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":379,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":143,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":151,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":56,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":561,"com.google.gson.functional.MapTest.testSortedMap":554,"com.google.gson.functional.MapTest.testMapSerialization":132,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":80,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":145,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":442,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":470,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":433,"com.google.gson.functional.MapTest.testSerializeMaps":127,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":175,"com.google.gson.functional.MapTest.testComplexKeysSerialization":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":412,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":435,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":556,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":171,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":3,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":34,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":86,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":479,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":220,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":105,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":310,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":464,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":88,"com.google.gson.functional.MapTest.testStringKeyDeserialization":43,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":544,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":227,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":281,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":142,"com.google.gson.functional.PrettyPrintingTest.testMap":308,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":377,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":186,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":103,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":406,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":296,"com.google.gson.functional.MapTest.testMapSerializationEmpty":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":195,"com.google.gson.functional.CollectionTest.testQueueSerialization":367,"com.google.gson.functional.MapTest.testMapOfMapSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":91,"com.google.gson.JavaSerializationTest.testMapIsSerializable":36,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":577,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":110,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":232,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":539,"com.google.gson.functional.FieldNamingTest.testIdentity":176,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":293,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":562,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":300,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":507,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":467,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":15,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":89,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":237,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":287,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":404,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":294,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":382,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":265,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":491,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":120,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":217,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":545,"com.google.gson.functional.MapTest.testMapSubclassSerialization":126,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":280,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":70,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":522,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":347,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":378,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":397,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":61,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":488,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":331,"com.google.gson.functional.EnumTest.testEnumSubclass":342,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":268,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":408,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":501,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":255,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":381,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":460,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":226,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":439,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":476,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":236,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":430,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":492,"com.google.gson.stream.JsonWriterTest.testNullName":447,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":17,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":119,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":85,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":564,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":264,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":212,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":493,"com.google.gson.MixedStreamTest.testWriteNulls":398,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":168,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":567,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":165,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":2,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":520,"com.google.gson.CommentsTest.testParseComments":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":230,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":239,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":518,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":306,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":483,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":134,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":295,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":177,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":214,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":279,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":123,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":462,"com.google.gson.JsonParserTest.testParseMixedArray":388,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":258,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":419,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":431,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":543,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":303,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":415,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":90,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":108,"com.google.gson.JsonArrayTest.testRemove":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":201,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":274,"com.google.gson.functional.MapTest.testMapDeserialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":197,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":313,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":125,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":393,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":466,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":516,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":129,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":159,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":32,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":30,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":67,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":480,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":49,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":485,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":245,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":253,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":9,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":450,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":465,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":158,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":235,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":133,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":309,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":216,"com.google.gson.functional.PrimitiveTest.testShortSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":317,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":326,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":538,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":84,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":28,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":172,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":341,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":365,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":81,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":386,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":548,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":282,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":376,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":62,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":416,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":519,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":77,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":537,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":284,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":98,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":149,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":112,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":182,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":348,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":417,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":512,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":514,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":228,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":510,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":497,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":344,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":154,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":486,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":6,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":202,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":316,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":192,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":318,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":21,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":573,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":266,"com.google.gson.JsonArrayTest.testSet":454,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":283,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":356,"com.google.gson.JsonPrimitiveTest.testEquals":441,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":31,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":340,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":45,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":37,"com.google.gson.functional.MapTest.testGeneralMapField":136,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":496,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":162,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":468,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":7,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":169,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":209,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":183,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":257,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":360,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":272,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":106,"com.google.gson.MixedStreamTest.testReadMixedStreamed":536,"com.google.gson.JsonObjectTest.testDeepCopy":456,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":262,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":457,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":552,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":373,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":405,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":513,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":529,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":325,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":540,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":200,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":41,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":327,"com.google.gson.JsonArrayTest.testDeepCopy":455,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":547,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":231,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":355,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":350,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":199,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":423,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":568,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":440,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":301,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":576,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":234,"com.google.gson.functional.ObjectTest.testNestedDeserialization":511,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":250,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":380,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":472,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":16,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":323,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":305,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":452,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":553,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":330,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":451,"com.google.gson.JavaSerializationTest.testListIsSerializable":541,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":63,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":289,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":375,"com.google.gson.functional.ObjectTest.testNullSerialization":243,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":156,"com.google.gson.stream.JsonWriterTest.testDoubles":446,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":549,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":13,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":256,"com.google.gson.functional.MapTest.testInterfaceTypeMap":12,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":8,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":20,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":75,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":97,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":343,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":184,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":321,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":437,"com.google.gson.MixedStreamTest.testWriteClosed":401,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":369,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":473,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":240,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":481,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":334,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":117,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":65,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":254,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":304,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":215,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":23,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":241,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":368,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":429,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":526,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":351,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":477,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":371,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":458,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":205,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":107,"com.google.gson.JsonParserTest.testParseInvalidJson":453,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":261,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":5,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":160,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":64,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":420,"com.google.gson.functional.CollectionTest.testQueueDeserialization":579,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":263,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":213,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":527,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":11,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":194,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":362,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":509,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":364,"com.google.gson.functional.MapTest.testRawMapSerialization":138,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":396,"com.google.gson.JsonParserTest.testParseReader":71,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":559,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":99,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":152,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":248,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":39,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":33,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":389,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":164,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":219,"com.google.gson.functional.PrimitiveTest.testByteSerialization":275,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":391,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":46,"com.google.gson.ObjectTypeAdapterTest.testSerialize":116,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":358,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":392,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":286,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":428,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":118,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":436,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":335,"com.google.gson.functional.MapTest.testMapWithQuotes":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":224,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":566,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":233,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":185,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":179,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":395,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":328,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":508,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":314,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":191,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":26,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":193,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":288,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":349,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":221,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":329,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":155,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":302,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":438,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":421,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":387,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":521,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":55,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":96,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":503,"com.google.gson.internal.LinkedTreeMapTest.testClear":82,"com.google.gson.functional.ObjectTest.testNestedSerialization":249,"com.google.gson.JsonObjectTest.testAddingStringProperties":448,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":357,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":260,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":359,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":354,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":137,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":124,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":299,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":394,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":400,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":244,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":569,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":22,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":487,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":484,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":504,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":525,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":100,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":297,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":25,"com.google.gson.functional.CollectionTest.testSetSerialization":374,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":535,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":229,"com.google.gson.functional.StringTest.testStringValueSerialization":298,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":311,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":147,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":27,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":474,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":574,"com.google.gson.MixedStreamTest.testWriteInvalidState":399,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":242,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":170,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":52,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":76,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":174,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":223,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":515,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":320,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":414,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":206,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":47,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":550,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":444,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":166,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":571},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"15dbdde4-3e82-11e6-8d8c-a3dfd36ed21a","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation == null) {\n                        {\n                            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                            } \n                            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                            } \n                            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"15dc2c05-3e82-11e6-8d8c-63abac8fe3a7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,0,48,49,15,50,17,18,21,22,24,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"tindex":"15dc5316-3e82-11e6-8d8c-4d16f2c626bb","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28],"tindex":"15dc7a27-3e82-11e6-8d8c-01d579f10561","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"15dc7a28-3e82-11e6-8d8c-61c47c2dc983","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"15dca139-3e82-11e6-8d8c-79084b21fbd7","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"15dca13a-3e82-11e6-8d8c-e9cece582680","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[62,105,86],"tindex":"15dcc84b-3e82-11e6-8d8c-638bc49c65f3","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[106,76],"tindex":"15dcc84c-3e82-11e6-8d8c-dd5cffb5d641","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[69],"tindex":"15dcef5d-3e82-11e6-8d8c-13138da6f647","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"15dcef5e-3e82-11e6-8d8c-9785082e6ad5","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation == null) {\n                        {\n                            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                            } \n                            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                            } \n                            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[107,27,108,109,110,111,112,113,114,115,116],"tindex":"15dd166f-3e82-11e6-8d8c-21c9137453bc","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (field.isSynthetic()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[87,88,89,49,117,118,93,94,95,96,97,98,99,100,101,102,103],"tindex":"15dd1670-3e82-11e6-8d8c-87c10410040b","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"15dd3d81-3e82-11e6-8d8c-e1efa4c58fa2","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[119,120,121,122,123,124,125,126,127,128,129,11,130,131,132,133,134,12,135,13,136,137,138,139,140,141,142,14,143,144,44,145,146,147,46,47,148,87,88,149,89,150,151,152,153,154,155,156,157,158,0,48,49,15,50,16,17,18,19,117,20,21,22,159,23,24,160,161,162,163,164,165,166,167,25,168,118,169,170,26,171,172,173,174,175,176,107,27,108,109,110,177,178,179,180,181,182,183,184,185,186,187,188,189,190,52,28,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,53,220,221,222,223,1,2,3,5,224,225,226,227,228,229,230,231,55,232,233,234,235,236,237,238,239,240,241,242,111,243,244,245,246,247,248,249,250,251,252,253,112,254,255,256,257,258,259,260,261,90,262,263,91,264,92,265,266,267,268,93,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,94,284,56,57,58,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,64,65,307,308,309,310,311,312,313,314,29,30,315,31,32,316,317,318,33,34,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,95,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,97,363,364,365,366,367,368,369,35,370,371,372,373,374,375,376,6,7,377,8,378,9,10,114,115,379,69,380,381,382,383,384,385,386,70,387,73,388,389,390,391,392,393,394,395,396,397,398,399,104,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,77,78,416,417],"tindex":"15dd3d82-3e82-11e6-8d8c-017659846970","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"15dd6493-3e82-11e6-8d8c-a7715113a8ca","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (field.isSynthetic()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"15dd6494-3e82-11e6-8d8c-b588ab176ee1","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"15dd6495-3e82-11e6-8d8c-c3dddb6fb80c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"15dd6496-3e82-11e6-8d8c-e7efe574500b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"15dd8ba7-3e82-11e6-8d8c-719b60717a31","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"15dd8ba8-3e82-11e6-8d8c-d305303af709","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[418],"tindex":"15dd8ba9-3e82-11e6-8d8c-51e6734a2acd","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15dd8baa-3e82-11e6-8d8c-35e90e178930","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"15dd8bab-3e82-11e6-8d8c-a14a78987a0b","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation == null) {\n                        {\n                            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                            } \n                            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                            } \n                            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[28],"tindex":"15ddb2bc-3e82-11e6-8d8c-ab28c2411220","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[419,420,421,422,423],"tindex":"15ddb2bd-3e82-11e6-8d8c-5b0241ff8ce6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"15ddd9ce-3e82-11e6-8d8c-05a1f0c1617f","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"15ddd9cf-3e82-11e6-8d8c-5b3b4ab3f799","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[424,425,426],"tindex":"15ddd9d0-3e82-11e6-8d8c-ad2e7034850a","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15ddd9d1-3e82-11e6-8d8c-3746f0a1c1aa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[48,50,51,424,427,428,429,430,392,431,432,433,434,435,436,437,438,439,440,441,442,443],"tindex":"15de00e2-3e82-11e6-8d8c-e5d9d2caa624","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[444,445,446],"tindex":"15de00e3-3e82-11e6-8d8c-ef4115e577cf","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"15de00e4-3e82-11e6-8d8c-e95d7c544f44","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            if (o instanceof com.google.gson.JsonNull) {\n                {\n                    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"15de00e5-3e82-11e6-8d8c-45097ca2ff1d","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[447],"tindex":"15de00e6-3e82-11e6-8d8c-c52a58fbd18f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"15de27f7-3e82-11e6-8d8c-657d0392aa15","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[46,47,226,285,286,288,289,59,60,61,62,63,382,448],"tindex":"15de27f8-3e82-11e6-8d8c-c1b7fae989e2","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"15de27f9-3e82-11e6-8d8c-c9c25d1a43a0","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[106,76],"tindex":"15de27fa-3e82-11e6-8d8c-e30b0e82e5fe","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"15de4f0b-3e82-11e6-8d8c-c187d4a4df0b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"15de4f0c-3e82-11e6-8d8c-67ca548a459f","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15de4f0d-3e82-11e6-8d8c-f5d1925e5043","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"15de4f0e-3e82-11e6-8d8c-6d4c1dc6f7bc","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[267,270,276],"tindex":"15de4f0f-3e82-11e6-8d8c-47443c29db84","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"15de7620-3e82-11e6-8d8c-df2094b79550","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[269,281,283,104],"tindex":"15de7621-3e82-11e6-8d8c-d901e139f7bd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"15de7622-3e82-11e6-8d8c-8f2d902f64ef","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from == null) {\n                                return false;\n                            } \n                            if (java.lang.reflect.Type.equals(from)) {\n                                return true;\n                            } \n                            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                            } else {\n                                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15de7623-3e82-11e6-8d8c-a1145e456cba","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[449,450,337,338],"tindex":"15de9d34-3e82-11e6-8d8c-69fff96cac1f","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"15de9d35-3e82-11e6-8d8c-d11acdaaccdf","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from == null) {\n                                return false;\n                            } \n                            if (java.lang.reflect.Type.equals(from)) {\n                                return true;\n                            } \n                            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                            } else {\n                                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[119,120,121,122,123,124,125,126,127,128,129,11,130,131,132,133,134,12,135,13,136,137,138,139,140,141,142,14,143,144,145,146,147,148,87,88,149,89,150,151,152,153,451,154,155,156,157,158,0,49,19,117,20,159,23,160,161,162,163,164,165,166,167,25,168,118,169,170,26,171,172,173,174,175,176,107,27,108,109,110,177,178,179,180,181,182,183,184,185,186,187,188,189,190,52,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,53,223,1,2,3,5,224,225,226,227,228,229,230,231,55,232,233,234,235,236,237,238,239,240,241,111,244,245,246,247,248,249,250,251,252,253,112,254,255,256,257,258,259,260,261,90,262,263,91,264,92,265,266,267,268,93,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,94,284,56,57,58,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,29,30,315,31,32,316,317,318,34,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,95,334,335,336,337,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,97,363,364,365,366,367,368,369,35,370,371,372,373,374,375,376,6,7,377,8,378,9,10,114,115,379,69,380,381,382,383,384,385,386,70,387,73,394,402,403,404,405,406,407,408],"tindex":"15de9d36-3e82-11e6-8d8c-c79c9c95dbb8","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"15dec447-3e82-11e6-8d8c-7d2bd68992ba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"15dec448-3e82-11e6-8d8c-7d0ebe65d44a","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[329,382],"tindex":"15dec449-3e82-11e6-8d8c-81e4c48cb57a","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"15dec44a-3e82-11e6-8d8c-d983a127179e","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        {\n            if (from == null) {\n                {\n                    if (from == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (from == null) {\n                                return false;\n                            } \n                            if (java.lang.reflect.Type.equals(from)) {\n                                return true;\n                            } \n                            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                            } else {\n                                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"15deeb5b-3e82-11e6-8d8c-8133a617c8ac","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[125,185,424,59,61,388,452,453,454,455,418,426,456,413,414,415,416,457,458,459,460,461,462,463,464,465,466,467,468,469],"tindex":"15deeb5c-3e82-11e6-8d8c-a504d0beae96","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[127,307,308,309,310,311,312,313,314,69,444,445,397],"tindex":"15deeb5d-3e82-11e6-8d8c-196d7afab1b8","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[315],"tindex":"15deeb5e-3e82-11e6-8d8c-dd767cd46643","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"15df126f-3e82-11e6-8d8c-bba1f153f790","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[119,120,470,123,37,124,39,11,471,12,13,136,139,14,143,44,145,472,146,473,45,147,87,88,474,475,89,150,151,152,153,451,154,155,156,476,477,157,478,158,479,480,0,48,49,15,50,16,17,18,19,117,20,21,22,481,482,159,23,24,169,483,170,172,173,174,175,176,107,27,108,109,110,177,179,180,181,484,485,486,28,487,200,210,215,488,53,222,223,1,2,3,4,5,489,490,226,228,229,235,491,492,236,237,238,493,494,239,495,496,240,497,498,241,499,111,500,244,501,502,247,503,248,249,504,251,505,506,252,507,253,112,508,254,509,510,511,113,512,56,513,57,58,285,286,288,289,59,60,61,62,63,299,514,300,301,302,515,303,304,305,306,64,65,309,310,314,29,516,517,31,32,518,316,318,34,519,328,520,330,331,332,333,95,449,334,335,336,450,337,521,522,338,343,523,348,524,525,349,350,526,527,351,528,529,353,530,355,356,357,531,532,533,358,361,362,363,365,370,534,372,374,378,114,115,69,381,383,535,384,385,386,70,387,73,396,397,399,401,536,537,402,116],"tindex":"15df1270-3e82-11e6-8d8c-fb5267551a17","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"15df1271-3e82-11e6-8d8c-47afc86a08a9","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"15df1272-3e82-11e6-8d8c-019927972e66","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (field.isSynthetic()) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[348,524,525,349,350,526,527,351],"tindex":"15df3983-3e82-11e6-8d8c-ebe10729ed57","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"15df3984-3e82-11e6-8d8c-55f516c77b9d","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"15df3985-3e82-11e6-8d8c-eb3f08a5ac0d","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"15df6096-3e82-11e6-8d8c-ef37dfa92f46","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        {\n                            if (src == null) {\n                                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                            } \n                            return toJson(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"15df6097-3e82-11e6-8d8c-8335ff1e9c5d","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[12,136,14,44,48,49,15,50,16,17,18,21,22,24,56,57,58,285,286,287,288,289,64,65,329,69,389,390,391,411,412,413,414,538,539,415,77,78,416,417],"tindex":"15df6098-3e82-11e6-8d8c-a1985bf878df","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"15df6099-3e82-11e6-8d8c-f3050db2c5cd","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.lang.Character.isLetter(firstCharacter)) {\n                {\n                    return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"15df609a-3e82-11e6-8d8c-5bea6700661f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (name == null) {\n                        throw new java.lang.NullPointerException(\"name == null\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException();\n                    } \n                    if ((int) == 0) {\n                        throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n                    } \n                    java.lang.String = name;\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[540,36,541,542,543,544,545,125,546,547,548,549,128,550,129,40,11,551,552,41,553,132,42,471,133,554,12,135,13,136,137,555,139,140,43,141,556,557,142,14,17,117,481,168,558,107,27,108,109,110,177,179,181,188,559,560,561,225,562,563,234,238,564,251,112,509,565,56,566,513,57,58,567,568,299,514,569,303,304,306,64,65,309,314,29,31,32,34,328,520,329,330,331,332,95,449,334,335,336,450,337,521,522,338,339,340,341,342,570,344,355,571,572,363,364,365,573,574,575,367,368,35,576,577,371,534,373,578,375,376,579,381,535,385,386,70,387,389,390,104,400,580],"tindex":"15df87ab-3e82-11e6-8d8c-3d0c33e48213","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"15df87ac-3e82-11e6-8d8c-91bdc7861262","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (replacement != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15df87ad-3e82-11e6-8d8c-e308499db6ff","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15dfaebe-3e82-11e6-8d8c-850e1b8c2295","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[322,325],"tindex":"15dfaebf-3e82-11e6-8d8c-83da617d3615","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[127,162,364,116,581],"tindex":"15dfaec0-3e82-11e6-8d8c-0f4ce088193d","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"15dfaec1-3e82-11e6-8d8c-f1c9b25744d6","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"15dfaec2-3e82-11e6-8d8c-69dda66e52cc","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[119,120,123,124,11,12,13,136,14,143,44,145,146,147,87,88,89,150,151,152,153,154,155,156,157,158,0,48,49,15,50,16,17,18,19,117,20,21,22,159,23,24,169,172,173,174,175,176,107,27,108,109,110,177,179,180,181,200,210,215,53,222,223,1,2,3,5,226,228,229,235,236,237,238,239,240,241,111,244,247,248,249,251,252,253,112,254,56,57,58,285,286,288,289,299,300,301,302,303,304,305,306,64,65,309,310,314,29,31,32,316,318,34,328,330,331,332,333,95,334,335,336,337,338,343,348,349,350,351,353,355,356,357,358,361,362,97,98,99,101,102,582,363,365,370,372,374,378,114,115,69,381,383,384,385,386,70,387,73,396,397,402,116],"tindex":"15dfd5d3-3e82-11e6-8d8c-b93de0d9b8f9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"15dfd5d4-3e82-11e6-8d8c-0b14974b442e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"15dfd5d5-3e82-11e6-8d8c-897947a848de","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"15dfd5d6-3e82-11e6-8d8c-770c5daad2ff","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                            } \n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"15dfd5d7-3e82-11e6-8d8c-41a631de82c1","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    return fromJson(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262550537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":84,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":12,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":40,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":6,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":94,"com.google.gson.functional.MapTest.testMapSerialization":1,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":7,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":174,"com.google.gson.functional.MapTest.testSerializeMaps":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":29,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":85,"com.google.gson.functional.MapTest.testComplexKeysSerialization":107,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":108,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":134,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":25,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":26,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":127,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":158,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":142,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":150,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":92,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":14,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":96,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":120,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":144,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":156,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":170,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":34,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":179,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":65,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":9,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":86,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":90,"com.google.gson.functional.MapTest.testRawMapSerialization":3,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":102,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":4,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":36,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":165,"com.google.gson.functional.PrettyPrintingTest.testMap":63,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":91,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":93,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":113,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":105,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":125,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":148,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":38,"com.google.gson.ObjectTypeAdapterTest.testSerialize":104,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":88,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":62,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":116,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":95,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":151,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":131,"com.google.gson.functional.FieldNamingTest.testIdentity":30,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":23,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":106,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":27,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":78,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":182,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":57,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":171,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":54,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":10,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":16,"com.google.gson.functional.JsonTreeTest.testToJsonTree":17,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":67,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":123,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":126,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":81,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":33,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":160,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":130,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":70,"com.google.gson.functional.MapTest.testGeneralMapField":2,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":140,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":24,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":69,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":137,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":51,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":103,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":166,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":73,"com.google.gson.functional.EnumTest.testEnumSubclass":159,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":83,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":152,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":32,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":163,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":146,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":89,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":20,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":71,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":118,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":136,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":172,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":41,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":100,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":47,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":87,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":84,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":122,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":178,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":177,"com.google.gson.functional.ObjectTest.testNestedSerialization":46,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":58,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":161,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":55,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":110,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":181,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":145,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":56,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":22,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":44,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":59,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":141,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":42,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":101,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":168,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":60,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":111,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":173,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":135,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":132,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":31,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":75,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":80,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":52,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":153,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":98,"com.google.gson.functional.CollectionTest.testSetSerialization":97,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":11,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":39,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":66,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":8,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":109,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":128,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":169,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":162,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":143,"com.google.gson.functional.CollectionTest.testSetDeserialization":164,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":35,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":154,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":43,"com.google.gson.functional.EnumTest.testEnumSet":157,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":76,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":129,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":167,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":28,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":68,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":139,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":74,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":19,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":37,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":50,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":121,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":175,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":176,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":15,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":77,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":133,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":79,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":114,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":49,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":155,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":5,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":112,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":21,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":53},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"17b71653-3e71-11e6-8a3f-df2adb96fcf8","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"17b78b84-3e71-11e6-8a3f-c327aa8a990a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[105,106,107,108,9,109,110,10,111,112,113,114,115,116,117,11,118,119,120,121,13,15,122,18,123,124,125,19,126,127,128,129,130,131,31,32,33,34,35,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,43,48,148,149,55,150,151,152,153,154,155,59,60,156,61,68,157,158,159,160,161,162,92,93,94,95,163,164,97,165,166,167,168,104],"tindex":"17b78b85-3e71-11e6-8a3f-1f45b60d9054","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"17b7d9a6-3e71-11e6-8a3f-514fa6640f21","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"17b7d9a7-3e71-11e6-8a3f-21d8d8bbb074","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[169,170,171,172,173,174,175,176,177,178],"tindex":"17b7d9a8-3e71-11e6-8a3f-bd0408c7a7ef","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"17b827c9-3e71-11e6-8a3f-bfa1bc71a852","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[179],"tindex":"17b827ca-3e71-11e6-8a3f-b13e03e7d400","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[180,181,108,10,134,182,70,74,78,79],"tindex":"17b84edb-3e71-11e6-8a3f-4df34d3d065e","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"17b875ec-3e71-11e6-8a3f-0ffe2c34ab32","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"17b875ed-3e71-11e6-8a3f-8517b9e3c53f","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256409528/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":11,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
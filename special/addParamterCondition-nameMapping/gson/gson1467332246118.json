{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":5,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":30,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":49,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":166,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":319,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":244,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":175,"com.google.gson.functional.PrimitiveTest.testShortSerialization":221,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":281,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":158,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":138,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":216,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":84,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":311,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":77,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":255,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":81,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":124,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":120,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":132,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":99,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":224,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":261,"com.google.gson.functional.ObjectTest.testSingletonLists":232,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":307,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":245,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":227,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":111,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":139,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":240,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":284,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":101,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":176,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":47,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":130,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":187,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":252,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":80,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":267,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":275,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":114,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":156,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":305,"com.google.gson.functional.EnumTest.testEnumCaseMapping":131,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":108,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":243,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":295,"com.google.gson.functional.JsonTreeTest.testToJsonTree":20,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":282,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":52,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":338,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":45,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":291,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":225,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":178,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":277,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":278,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":258,"com.google.gson.functional.MapTest.testGeneralMapField":23,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":263,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":13,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":268,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":312,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":169,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":60,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":191,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":285,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":217,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":340,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":236,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":154,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":325,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":204,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":116,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":260,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":339,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":32,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":157,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":303,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":192,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":208,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":69,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":146,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":331,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":306,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":58,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":302,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":189,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":16,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":335,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":177,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":238,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":174,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":155,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":215,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":55,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":143,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":239,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":1,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":122,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":140,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":200,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":36,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":220,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":180,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":39,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":83,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":310,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":170,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":197,"com.google.gson.functional.MapTest.testInterfaceTypeMap":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":301,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":324,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":336,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":270,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":181,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":100,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":129,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":228,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":65,"com.google.gson.functional.EnumTest.testEnumSet":125,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":273,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":327,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":286,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":153,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":161,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":67,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":38,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":113,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":76,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":151,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":257,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":59,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":233,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":41,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":26,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":57,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":71,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":123,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":194,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":72,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":183,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":182,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":234,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":79,"com.google.gson.functional.MapTest.testMapSerialization":22,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":74,"com.google.gson.functional.MapTest.testSerializeMaps":21,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":87,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":92,"com.google.gson.functional.MapTest.testComplexKeysSerialization":172,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":308,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":14,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":265,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":202,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":283,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":17,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":205,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":241,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":316,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":7,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":163,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":297,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":329,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":223,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":254,"com.google.gson.functional.MapTest.testRawMapSerialization":24,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":103,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":25,"com.google.gson.functional.PrettyPrintingTest.testMap":48,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":269,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":62,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":78,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":184,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":237,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":288,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":110,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":249,"com.google.gson.functional.MapTest.testMapSerializationEmpty":173,"com.google.gson.functional.CollectionTest.testQueueSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":298,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":144,"com.google.gson.functional.PrimitiveTest.testByteSerialization":219,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":253,"com.google.gson.ObjectTypeAdapterTest.testSerialize":0,"com.google.gson.functional.MapTest.testMapOfMapSerialization":165,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":206,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":31,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":137,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":333,"com.google.gson.functional.FieldNamingTest.testIdentity":88,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":246,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":12,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":42,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":15,"com.google.gson.functional.MapTest.testMapWithQuotes":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":289,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":8,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":19,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":326,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":337,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":334,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":28,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":115,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":287,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":322,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":209,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":98,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":119,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":299,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":34,"com.google.gson.functional.MapTest.testMapSubclassSerialization":160,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":222,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":54,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":3,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":294,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":149,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":104,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":271,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":313,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":37,"com.google.gson.functional.EnumTest.testEnumSubclass":128,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":290,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":112,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":196,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":321,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":296,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":328,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":314,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":188,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":150,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":4,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":6,"com.google.gson.stream.JsonWriterTest.testNullName":345,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":332,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":118,"com.google.gson.functional.ObjectTest.testNestedSerialization":68,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":179,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":190,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":201,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":195,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":207,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":171,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":315,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":46,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":11,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":117,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":145,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":66,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":264,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":64,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":330,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":56,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":109,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":167,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":248,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":96,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":250,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":44,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":317,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":147,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":229,"com.google.gson.functional.CollectionTest.testSetSerialization":82,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":102,"com.google.gson.functional.StringTest.testStringValueSerialization":251,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":63,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":134,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":344,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":199,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":106,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":193,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":203,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":135,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":148,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":304,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":293,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":300,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":341,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":262,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":159,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":27,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":162,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":279,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":276,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":152,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":43,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":70,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":309,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":185,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":292,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":10},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"307df30e-3f21-11e6-98e7-5f67e10f0d0b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[105,106,107],"tindex":"307e683f-3f21-11e6-98e7-df8f5f07ca35","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[108,109,110,111,112,113,114,115,116,117,118,119,1,120,2,121,122,123,124,3,4,125,126,127,128,129,130,131,132,133,134,135,136,137,5,6,138,7,139,8,140,141,9,142,143,144,145,10,146,147,11,12,13,148,149,14,15,16,150,151,152,153,154,155,156,157,158,18,159,160,21,161,162,163,164,165,22,166,167,168,169,170,23,171,24,172,173,174,25,175,176,177,178,179,180,26,181,27,182,28,183,184,185,186,187,188,29,189,30,31,190,191,32,33,34,35,36,37,38,39,40,41,42,43,44,46,192,47,48,49,50,51,52,53,54,193,194,55,56,195,58,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,59,218,219,220,60,221,61,222,223,224,225,226,227,228,229,230,63,231,232,64,233,234,65,66,235,236,67,237,68,238,239,69,70,240,71,72,241,74,242,243,244,245,246,247,248,249,250,251,252,253,75,77,254,255,78,256,79,257,258,80,259,81,260,82,83,261,262,263,264,265,266,267,268,269,270,271,272,273,84,85,86,87,88,274,89,90,91,92,275,276,277,278,279,280,281,282,283,93,94,95,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,96,97,98,99,100,321,322,323,324,325,326,327,328,329,101,102,330,331,332,333,334,335],"tindex":"307e8f50-3f21-11e6-98e7-37f3ee9fd8ca","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307eb661-3f21-11e6-98e7-4f6647d3b8fd","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307eb662-3f21-11e6-98e7-073a50d7c1a9","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307edd73-3f21-11e6-98e7-a9fd27a0e081","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[106,107],"tindex":"307edd74-3f21-11e6-98e7-6577d5297dc8","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[336,337,338,339],"tindex":"307edd75-3f21-11e6-98e7-0552bab961d0","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307f0486-3f21-11e6-98e7-49929e008da7","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307f0487-3f21-11e6-98e7-bb33933703cc","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307f2b98-3f21-11e6-98e7-fdcbcd96fd9f","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[340,341],"tindex":"307f2b99-3f21-11e6-98e7-cd680f239108","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307f2b9a-3f21-11e6-98e7-5b21574cc536","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[342,343,344,285,290,291,314],"tindex":"307f52ab-3f21-11e6-98e7-b56fc00cc2a1","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307f52ac-3f21-11e6-98e7-5f49721d931d","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[345],"tindex":"307f79bd-3f21-11e6-98e7-538a72d61220","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307f79be-3f21-11e6-98e7-39c6fa4e1ec6","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307fa0cf-3f21-11e6-98e7-5f7f2e2ad5c5","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307fa0d0-3f21-11e6-98e7-7f6705cfbeac","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"307fc7e1-3f21-11e6-98e7-8b0d7ada8d8f","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isBoolean()) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307fc7e2-3f21-11e6-98e7-7d6d16cd49ee","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 't') || (c == 'T')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"307feef3-3f21-11e6-98e7-458611106aa8","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"307feef4-3f21-11e6-98e7-933a62cb7dd8","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"30801605-3f21-11e6-98e7-7ff5e4f18498","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"30803d16-3f21-11e6-98e7-69cb82288606","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"30803d17-3f21-11e6-98e7-0714aeb51fdd","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"30803d18-3f21-11e6-98e7-49036c2174f2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"30806429-3f21-11e6-98e7-1bc55094e54f","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331603271/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":28,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
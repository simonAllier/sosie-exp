{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":166,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":375,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":56,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":33,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":164,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":188,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":264,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":434,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":91,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":175,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":133,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":179,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":278,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":286,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":233,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":102,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":208,"com.google.gson.functional.ObjectTest.testSingletonLists":131,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":430,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":376,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":173,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":146,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":254,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":199,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":57,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":331,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":51,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":256,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":306,"com.google.gson.functional.EnumTest.testEnumCaseMapping":285,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":251,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":374,"com.google.gson.functional.JsonTreeTest.testToJsonTree":49,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":334,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":72,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":415,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":405,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":392,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":182,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":143,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":357,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":371,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":304,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":239,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":153,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":273,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":442,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":89,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":349,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":4,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":155,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":429,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":189,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":83,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":219,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":266,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":240,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":323,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":350,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":152,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":291,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":12,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":18,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":139,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":1,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":38,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":16,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":63,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":433,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":425,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":238,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":185,"com.google.gson.functional.CollectionTest.testSetDeserialization":178,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":234,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":142,"com.google.gson.functional.EnumTest.testEnumSet":280,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":446,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":312,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":147,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":8,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":99,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":222,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":174,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":301,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":353,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":74,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":165,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":216,"com.google.gson.functional.MapTest.testMapSerialization":316,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":167,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":124,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":196,"com.google.gson.functional.MapTest.testSerializeMaps":311,"com.google.gson.functional.MapTest.testComplexKeysSerialization":55,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":265,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":300,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":23,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":184,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":214,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":86,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":385,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":114,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":447,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":360,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":324,"com.google.gson.functional.PrettyPrintingTest.testMap":332,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":399,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":388,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":412,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":253,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":380,"com.google.gson.functional.MapTest.testMapSerializationEmpty":322,"com.google.gson.functional.CollectionTest.testQueueSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":422,"com.google.gson.functional.MapTest.testMapOfMapSerialization":315,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":3,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":28,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":451,"com.google.gson.functional.FieldNamingTest.testIdentity":197,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":377,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":42,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":156,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":37,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":48,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":130,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":328,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":257,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":378,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":444,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":30,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":345,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":11,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":441,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":5,"com.google.gson.functional.MapTest.testMapSubclassSerialization":310,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":20,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":109,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":187,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":246,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":403,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":190,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":172,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":98,"com.google.gson.functional.EnumTest.testEnumSubclass":283,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":347,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":145,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":255,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":337,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":235,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":242,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":81,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":32,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":31,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":61,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":10,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":36,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":437,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":132,"com.google.gson.MixedStreamTest.testWriteNulls":454,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":297,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":293,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":183,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":448,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":40,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":119,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":318,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":379,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":107,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":439,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":125,"com.google.gson.JsonParserTest.testParseMixedArray":263,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":339,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":116,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":268,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":2,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":26,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":424,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":335,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":309,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":207,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":276,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":70,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":313,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":210,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":404,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":87,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":224,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":157,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":370,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":76,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":401,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":416,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":106,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":85,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":113,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":317,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":440,"com.google.gson.functional.PrimitiveTest.testShortSerialization":358,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":406,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":308,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":226,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":193,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":282,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":176,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":19,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":361,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":396,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":191,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":271,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":215,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":250,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":269,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":364,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":287,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":69,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":158,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":241,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":198,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":408,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":123,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":112,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":243,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":162,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":138,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":78,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":383,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":397,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":206,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":428,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":419,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":213,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":66,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":7,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":362,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":58,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":209,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":171,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":126,"com.google.gson.functional.MapTest.testGeneralMapField":54,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":136,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":290,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":39,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":236,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":435,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":319,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":327,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":409,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":352,"com.google.gson.MixedStreamTest.testReadMixedStreamed":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":217,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":258,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":394,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":14,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":307,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":228,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":330,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":449,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":122,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":202,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":426,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":43,"com.google.gson.functional.ObjectTest.testNestedDeserialization":163,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":453,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":325,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":372,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":168,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":60,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":305,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":118,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":97,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":356,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":77,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":94,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":192,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":395,"com.google.gson.functional.ObjectTest.testNullSerialization":369,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":80,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":0,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":53,"com.google.gson.functional.MapTest.testInterfaceTypeMap":52,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":400,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":65,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":22,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":365,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":84,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":410,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":303,"com.google.gson.MixedStreamTest.testWriteClosed":248,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":170,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":391,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":68,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":137,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":103,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":64,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":121,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":117,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":71,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":140,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":390,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":203,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":205,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":82,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":431,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":24,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":341,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":46,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":186,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":288,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":343,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":373,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":438,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":50,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":421,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":90,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":161,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":387,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":245,"com.google.gson.functional.MapTest.testRawMapSerialization":321,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":75,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":149,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":128,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":407,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":260,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":262,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":292,"com.google.gson.functional.PrimitiveTest.testByteSerialization":355,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":384,"com.google.gson.ObjectTypeAdapterTest.testSerialize":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":366,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":88,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":275,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":92,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":298,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":194,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":104,"com.google.gson.functional.MapTest.testMapWithQuotes":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":413,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":445,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":452,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":411,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":232,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":277,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":95,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":159,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":418,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":141,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":414,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":93,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":420,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":386,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":289,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":436,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":79,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":44,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":108,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":450,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":148,"com.google.gson.functional.ObjectTest.testNestedSerialization":150,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":59,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":340,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":336,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":320,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":127,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":111,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":259,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":455,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":144,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":67,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":227,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":252,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":223,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":200,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":381,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":296,"com.google.gson.functional.CollectionTest.testSetSerialization":180,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":244,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":333,"com.google.gson.functional.StringTest.testStringValueSerialization":382,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":129,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":25,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":35,"com.google.gson.MixedStreamTest.testWriteInvalidState":247,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":368,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":41,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":417,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":195,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":181,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":45,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":267,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":302,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":432,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":367,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":294},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"96dc0ba5-3efd-11e6-be34-4535cd7fb758","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"96dc80d6-3efd-11e6-be34-3743573c69f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250],"tindex":"96dca7e7-3efd-11e6-be34-0db7dcd6c600","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96dccef8-3efd-11e6-be34-4bf3d9cf69b9","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[102,106,107,110],"tindex":"96dccef9-3efd-11e6-be34-b5ecfa5cea61","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[251,252,253,254,255,8,256,257,258,259,260,261,262,10,11,12,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,15,17,18,279,19,20,21,280,281,282,283,22,284,285,286,24,25,26,27,28,29,32,33,34,287,37,38,288,289,290,291,292,293,294,295,296,297,298,39,41,299,300,42,43,44,301,302,303,304,305,306,307,308,46,47,48,49,309,310,311,312,313,50,314,315,316,317,318,52,319,53,54,320,321,55,322,323,324,56,57,325,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,78,79,80,83,85,88,326,327,89,90,91,92,328,93,94,95,329,97,98,99,100,101,103,104,105,107,110,111,330,331,332,113,114,333,334,335,115,116,117,118,119,120,121,336,122,337,0,338,339,1,340,341,2,342,343,3,344,4,345,7,346,347,348,349,350,351,352,353,354,355,356,357,358,359,5,360,361,362,363,364,365,125,127,129,366,367,130,131,134,137,140,368,142,369,144,370,371,147,149,150,372,152,155,157,158,160,165,373,166,167,169,374,375,376,377,378,379,380,381,382,383,384,173,385,386,174,175,387,176,388,389,390,391,392,177,393,179,394,180,395,396,181,182,183,184,186,397,398,399,400,187,401,402,193,194,195,196,197,403,198,201,202,205,206,404,405,209,210,212,406,213,407,214,216,218,219,408,409,410,411,412,413,414,415,416,417,226,418,419,420,421,422,423,424,425,426,228,427,428,429,430,431,432,433,434,435,229,436,437,438,439,230,440,441,442,231,443,232,233,234,235,444,236,238,239,445,446,242,447,243,244,448,449,450,451,452,453,245,246,454,247,6,455,248],"tindex":"96dcf60a-3efd-11e6-be34-b5f50d584f2c","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            if (!lenient) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96dd1d1b-3efd-11e6-be34-0591eff7d2db","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"96dd1d1c-3efd-11e6-be34-7fc81b75ceb1","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96dd442d-3efd-11e6-be34-97581bd73e1c","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[],"tindex":"96dd442e-3efd-11e6-be34-c15b706741cb","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96ddb95f-3efd-11e6-be34-679bae9f5e5b","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96ddb960-3efd-11e6-be34-0f464cdff8e7","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[],"tindex":"96ddb961-3efd-11e6-be34-d10d6b48a95e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96de0782-3efd-11e6-be34-656b52d04d9b","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96de2e93-3efd-11e6-be34-d3c7f18179a0","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96de55a4-3efd-11e6-be34-856586957a2e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96de55a5-3efd-11e6-be34-bf4bbff767c0","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96de7cb6-3efd-11e6-be34-8d2b9d3a2187","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96de7cb7-3efd-11e6-be34-bd26cf2d75c8","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96dea3c8-3efd-11e6-be34-4919a8939429","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"96dea3c9-3efd-11e6-be34-23ea04167a4a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96def1ea-3efd-11e6-be34-c75cccb07b54","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96df18fb-3efd-11e6-be34-d70d5a583386","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"96df18fc-3efd-11e6-be34-43c99429b3ac","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96df671d-3efd-11e6-be34-69dd8fbddc3c","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96df671e-3efd-11e6-be34-41bdfaaa87ab","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        {\n                            out.value(value);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96df8e2f-3efd-11e6-be34-553b6bf61dcf","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"96df8e30-3efd-11e6-be34-a9a2cca2a298","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            if (!lenient) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"96dfb541-3efd-11e6-be34-2de3c39b36b5","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"96dfb542-3efd-11e6-be34-215891a87126","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316351778/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":30,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
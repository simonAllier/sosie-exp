{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":207,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":346,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":127,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":2,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":98,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":149,"com.google.gson.MixedStreamTest.testWriteLenient":259,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":313,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":202,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":162,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":67,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":166,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":273,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":425,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":38,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":215,"com.google.gson.functional.ObjectTest.testSingletonLists":65,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":309,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":347,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":100,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":80,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":251,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":226,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":50,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":323,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":122,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":427,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":280,"com.google.gson.functional.EnumTest.testEnumCaseMapping":424,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":345,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":435,"com.google.gson.functional.JsonTreeTest.testToJsonTree":113,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":326,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":20,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":298,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":418,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":58,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":77,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":408,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":440,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":287,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":278,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":200,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":87,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":439,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":321,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":155,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":254,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":398,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":89,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":247,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":150,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":141,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":195,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":26,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":341,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":255,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":86,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":376,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":73,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":188,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":242,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":7,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":390,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":49,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":11,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":312,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":307,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":61,"com.google.gson.functional.CollectionTest.testSetDeserialization":165,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":117,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":76,"com.google.gson.functional.EnumTest.testEnumSet":419,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":263,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":331,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":35,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":233,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":25,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":101,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":275,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":405,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":372,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":206,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":192,"com.google.gson.functional.MapTest.testMapSerialization":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":208,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":173,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":171,"com.google.gson.functional.MapTest.testSerializeMaps":330,"com.google.gson.functional.MapTest.testComplexKeysSerialization":126,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":438,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":384,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":60,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":224,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":221,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":144,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":290,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":119,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":3,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":264,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":257,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":342,"com.google.gson.functional.PrettyPrintingTest.testMap":324,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":368,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":356,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":295,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":437,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":304,"com.google.gson.functional.MapTest.testMapSerializationEmpty":340,"com.google.gson.functional.CollectionTest.testQueueSerialization":357,"com.google.gson.functional.MapTest.testMapOfMapSerialization":334,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":396,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":161,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":268,"com.google.gson.functional.FieldNamingTest.testIdentity":172,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":348,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":51,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":90,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":6,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":64,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":112,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":415,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":428,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":349,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":385,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":129,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":399,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":235,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":320,"com.google.gson.functional.MapTest.testMapSubclassSerialization":329,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":411,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":44,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":147,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":178,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":237,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":426,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":151,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":99,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":34,"com.google.gson.functional.EnumTest.testEnumSubclass":422,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":401,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":79,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":252,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":386,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":196,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":139,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":131,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":130,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":9,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":234,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":5,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":397,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":316,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":66,"com.google.gson.MixedStreamTest.testWriteNulls":433,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":381,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":378,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":32,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":59,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":68,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":265,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":182,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":190,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":337,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":350,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":318,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":410,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":174,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":389,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":179,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":393,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":308,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":306,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":327,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":328,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":214,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":18,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":332,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":217,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":417,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":145,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":103,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":91,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":286,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":370,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":299,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":42,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":336,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":319,"com.google.gson.functional.PrimitiveTest.testShortSerialization":409,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":282,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":105,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":168,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":421,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":163,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":146,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":364,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":412,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":152,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":222,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":241,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":414,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":261,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":27,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":92,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":291,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":201,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":29,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":96,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":72,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":423,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":104,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":164,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":366,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":213,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":246,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":244,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":220,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":14,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":400,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":258,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":185,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":216,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":420,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":212,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":175,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":70,"com.google.gson.functional.MapTest.testGeneralMapField":125,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":375,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":189,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":314,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":292,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":344,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":388,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":404,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":0,"com.google.gson.MixedStreamTest.testReadMixedStreamed":240,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":394,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":193,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":362,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":429,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":47,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":281,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":107,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":413,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":56,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":229,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":245,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":52,"com.google.gson.functional.ObjectTest.testNestedDeserialization":97,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":270,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":274,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":8,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":279,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":181,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":33,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":256,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":135,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":153,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":205,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":363,"com.google.gson.functional.ObjectTest.testNullSerialization":285,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":138,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":124,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":387,"com.google.gson.functional.MapTest.testInterfaceTypeMap":123,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":369,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":13,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":223,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":272,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":293,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":277,"com.google.gson.MixedStreamTest.testWriteClosed":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":211,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":359,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":16,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":71,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":39,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":184,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":94,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":180,"com.google.gson.stream.JsonWriterTest.testLongs":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":109,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":19,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":74,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":358,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":230,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":232,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":140,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":310,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":157,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":392,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":110,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":62,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":373,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":183,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":395,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":416,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":317,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":88,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":303,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":95,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":156,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":355,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":236,"com.google.gson.functional.MapTest.testRawMapSerialization":339,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":83,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":133,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":177,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":430,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":289,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":377,"com.google.gson.functional.PrimitiveTest.testByteSerialization":407,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":432,"com.google.gson.ObjectTypeAdapterTest.testSerialize":243,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":154,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":203,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":382,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":40,"com.google.gson.functional.MapTest.testMapWithQuotes":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":296,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":262,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":269,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":294,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":115,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":31,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":93,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":301,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":402,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":75,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":297,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":204,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":302,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":315,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":374,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":137,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":53,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":148,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":442,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":267,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":82,"com.google.gson.functional.ObjectTest.testNestedSerialization":84,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":186,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":391,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":283,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":176,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":21,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":434,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":441,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":78,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":15,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":106,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":436,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":102,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":227,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":352,"com.google.gson.functional.CollectionTest.testSetSerialization":167,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":30,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":325,"com.google.gson.functional.StringTest.testStringValueSerialization":353,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":63,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":4,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":158,"com.google.gson.MixedStreamTest.testWriteInvalidState":238,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":191,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":300,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":1,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":170,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":57,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":260,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":54,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":276,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":311,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":284,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":379},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[0,1],"tindex":"151dd202-3e6a-11e6-bfa9-0722a388aff9","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"151e2023-3e6a-11e6-bfa9-154e6d5e780a","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"151e4734-3e6a-11e6-bfa9-efa281196e5c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"151e4735-3e6a-11e6-bfa9-ff3d4166d430","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!deserialize) && (!serialize)) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"deserialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[244,245,246,247,248,249,250,251,252],"tindex":"151e6e46-3e6a-11e6-bfa9-3d15e9fcf560","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"151e9557-3e6a-11e6-bfa9-df78836bd78b","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"151e9558-3e6a-11e6-bfa9-212fe1492590","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[253,254,255,256,257,258,259],"tindex":"151e9559-3e6a-11e6-bfa9-4faff6bd8516","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[260],"tindex":"151ebc6a-3e6a-11e6-bfa9-81c02c06112f","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[2,3,261,6,7,8,9,10,11,12,13,14,15,18,19,20,21,262,263,28,264,29,30,265,266,267,268,269,270,31,271,33,34,35,36,37,39,40,41,43,45,272,273,48,50,274,51,52,53,55,275,276,277,278,279,280,281,282,283,56,57,58,59,60,62,63,284,64,65,68,71,74,76,285,78,286,287,81,83,84,288,86,89,91,92,94,289,100,290,101,291,292,293,294,295,296,297,298,299,300,105,301,244,302,303,304,305,306,307,245,107,308,246,247,309,310,311,312,313,314,108,315,316,317,318,109,319,320,321,110,111,112,113,114,322,115,116,117,323,324,118,119,325,326,327,120,328,329,330,331,332,333,334,335,336,337,123,338,124,125,339,126,340,341,342,127,128,131,132,133,134,135,136,137,138,141,143,146,147,148,154,343,344,155,156,345,346,347,348,349,350,351,352,353,157,158,159,160,161,354,162,355,163,356,357,358,359,360,164,361,166,362,167,363,364,365,168,169,170,171,172,174,176,366,367,368,369,178,370,371,179,180,181,182,183,184,185,186,187,188,372,373,374,375,376,377,378,379,380,381,382,189,191,383,384,192,194,195,196,385,197,199,200,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,253,401,402,254,255,403,404,405,406,407,256,408,409,410,411,257,412,258,413,414,202,203,415,204,205,416,208,417,418,221,419,420,421,422,223,423,424,425,426,225,228,229,232,233,427,428,429,234,235,430,431,432,236,237,433,238,259,434,239,435,436,242,437,251,252,438,439,440,441],"tindex":"151ebc6b-3e6a-11e6-bfa9-d72f5e7c2f08","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[442],"tindex":"151ee37c-3e6a-11e6-bfa9-8b84c56f5aae","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"151f0a8d-3e6a-11e6-bfa9-91c7713b23c9","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253377059/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":12,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
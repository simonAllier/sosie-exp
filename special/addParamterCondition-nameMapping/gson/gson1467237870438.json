{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":94,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":107,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":541,"com.google.gson.functional.StringTest.testStringValueDeserialization":539,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":689,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":10,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":496,"com.google.gson.JsonPrimitiveTest.testDeepCopy":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":365,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":457,"com.google.gson.stream.JsonWriterTest.testRepeatedName":686,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":11,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":44,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":174,"com.google.gson.MixedStreamTest.testWriteLenient":228,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":126,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":45,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":624,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":401,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":641,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":505,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":607,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":610,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":334,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":466,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":188,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":64,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":578,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":145,"com.google.gson.functional.ObjectTest.testSingletonLists":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":366,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":613,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":450,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":542,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":693,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":41,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":130,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":378,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":418,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":86,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":205,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":508,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":193,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":681,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":555,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":97,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":143,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":497,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":569,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":256,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":82,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":442,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":61,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":255,"com.google.gson.functional.EnumTest.testEnumCaseMapping":606,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":236,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":540,"com.google.gson.functional.JsonTreeTest.testToJsonTree":115,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":441,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":128,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":597,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":678,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":359,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":452,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":54,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":634,"com.google.gson.functional.ObjectTest.testNullDeserialization":430,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":389,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":552,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":158,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":412,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":518,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":671,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":458,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":419,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":187,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":59,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":660,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":427,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":170,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":380,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":523,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":622,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":522,"com.google.gson.JsonParserTest.testParseString":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":377,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":502,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":679,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":201,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":529,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":101,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":311,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":479,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":135,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":248,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":142,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":356,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":133,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":176,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":27,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":267,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":503,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":559,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":495,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":305,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":426,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":148,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":165,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":407,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":653,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":18,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":263,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":462,"com.google.gson.metrics.PerformanceTest.testDummy":232,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":614,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":294,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":590,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":29,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":268,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":382,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":371,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":358,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":659,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":202,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":391,"com.google.gson.functional.CollectionTest.testSetDeserialization":640,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":335,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":277,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":411,"com.google.gson.functional.EnumTest.testEnumSet":598,"com.google.gson.JsonStreamParserTest.testIterator":95,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":486,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":591,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":90,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":244,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":420,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":589,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":499,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":70,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":510,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":56,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":388,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":511,"com.google.gson.functional.MapTest.testHashMapDeserialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":455,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":369,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":272,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":654,"com.google.gson.MixedStreamTest.testReadNulls":667,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":212,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":280,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":131,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":387,"com.google.gson.functional.MapTest.testSortedMap":259,"com.google.gson.functional.MapTest.testMapSerialization":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":271,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":2,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":492,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":317,"com.google.gson.functional.MapTest.testSerializeMaps":209,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":329,"com.google.gson.functional.MapTest.testComplexKeysSerialization":264,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":276,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":106,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":175,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":324,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":390,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":604,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":224,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":292,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":384,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":602,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":171,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":189,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":572,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":13,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":429,"com.google.gson.functional.MapTest.testStringKeyDeserialization":266,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":321,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":33,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":525,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":269,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":77,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":456,"com.google.gson.functional.PrettyPrintingTest.testMap":570,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":627,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":385,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":85,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":680,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":545,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":549,"com.google.gson.functional.MapTest.testMapSerializationEmpty":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":353,"com.google.gson.functional.CollectionTest.testQueueSerialization":631,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":487,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":691,"com.google.gson.functional.MapTest.testMapOfMapSerialization":253,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":361,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":637,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":683,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":489,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":676,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":42,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":180,"com.google.gson.functional.FieldNamingTest.testIdentity":330,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":543,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":30,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":561,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":432,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":17,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":47,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":114,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":398,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":444,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":83,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":79,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":544,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":395,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":373,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":379,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":675,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":238,"com.google.gson.functional.MapTest.testMapSubclassSerialization":241,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":521,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":596,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":662,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":279,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":226,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":476,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":608,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":649,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":341,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":536,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":383,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":588,"com.google.gson.functional.EnumTest.testEnumSubclass":600,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":498,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":87,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":416,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":443,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":0,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":204,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":656,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":504,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":287,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":446,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":397,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":482,"com.google.gson.stream.JsonWriterTest.testTwoNames":682,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":396,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":117,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":233,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":313,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":410,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":488,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":16,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":480,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":687,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":375,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":400,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":9,"com.google.gson.MixedStreamTest.testWriteNulls":166,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":312,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":557,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":307,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":25,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":586,"com.google.gson.CommentsTest.testParseComments":670,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":37,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":402,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":579,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":501,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":568,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":1,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":258,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":547,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":655,"com.google.gson.MixedStreamTest.testReadInvalidState":665,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":331,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":520,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":3,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":206,"com.google.gson.JsonParserTest.testParseMixedArray":150,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":102,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":454,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":325,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":565,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":181,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":471,"com.google.gson.JsonArrayTest.testRemove":169,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":674,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":19,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":515,"com.google.gson.functional.MapTest.testMapDeserialization":247,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":357,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":575,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":8,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":157,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":577,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":246,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":299,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":220,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":293,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":113,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":340,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":417,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":433,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":282,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":650,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":344,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":65,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":291,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":394,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":257,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":571,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":23,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":440,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":39,"com.google.gson.functional.PrimitiveTest.testShortSerialization":519,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":507,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":62,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":178,"com.google.gson.JsonParserTest.testParseEmptyString":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":477,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":88,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":453,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":326,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":141,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":626,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":661,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":242,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":470,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":527,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":100,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":137,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":21,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":581,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":182,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":669,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":534,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":528,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":73,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":15,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":31,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":298,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":434,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":159,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":185,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":336,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":513,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":34,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":483,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":438,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":406,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":605,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":345,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":635,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":648,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":35,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":217,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":363,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":460,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":350,"com.google.gson.stream.JsonWriterTest.testNullStringValue":684,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":368,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":119,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":447,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":514,"com.google.gson.JsonArrayTest.testSet":167,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":485,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":531,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":617,"com.google.gson.JsonPrimitiveTest.testEquals":161,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":219,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":599,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":108,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":4,"com.google.gson.functional.MapTest.testGeneralMapField":105,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":404,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":208,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":533,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":76,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":96,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":318,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":657,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":372,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":122,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":451,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":621,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":509,"com.google.gson.MixedStreamTest.testReadMixedStreamed":668,"com.google.gson.JsonObjectTest.testDeepCopy":172,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":203,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":346,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":472,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":84,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":538,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":642,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":612,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":490,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":179,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":582,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":362,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":250,"com.google.gson.JsonArrayTest.testDeepCopy":168,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":584,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":240,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":38,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":532,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":616,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":196,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":685,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":473,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":360,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":558,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":160,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":89,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":636,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":43,"com.google.gson.functional.ObjectTest.testNestedDeserialization":439,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":144,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":424,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":273,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":116,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":60,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":530,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":567,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":12,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":152,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":251,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":546,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":587,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":517,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":283,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":49,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":138,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":645,"com.google.gson.functional.ObjectTest.testNullSerialization":413,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":286,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":583,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":243,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":261,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":445,"com.google.gson.functional.MapTest.testInterfaceTypeMap":104,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":315,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":78,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":448,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":72,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":603,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":651,"com.google.gson.MixedStreamTest.testReadClosed":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":337,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":58,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":464,"com.google.gson.MixedStreamTest.testWriteClosed":230,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":274,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":633,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":381,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":405,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":592,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":295,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":140,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":103,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":436,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":376,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":300,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":408,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":632,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":197,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":493,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":288,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":638,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":98,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":186,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":20,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":52,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":164,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":535,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":672,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":469,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":343,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":301,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":392,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":139,"com.google.gson.functional.CollectionTest.testQueueDeserialization":647,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":475,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":491,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":551,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":91,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":198,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":210,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":428,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":690,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":352,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":437,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":623,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":625,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":225,"com.google.gson.functional.MapTest.testRawMapSerialization":262,"com.google.gson.JsonParserTest.testParseReader":146,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":367,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":677,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":281,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":422,"com.google.gson.JsonPrimitiveTest.testExponential":163,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":7,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":223,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":153,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":129,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":155,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":306,"com.google.gson.functional.PrimitiveTest.testByteSerialization":516,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":109,"com.google.gson.ObjectTypeAdapterTest.testSerialize":692,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":619,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":459,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":46,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":316,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":327,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":80,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":548,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":593,"com.google.gson.functional.MapTest.testMapWithQuotes":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":123,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":467,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":550,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":26,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":537,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":393,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":111,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":200,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":333,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":53,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":585,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":435,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":349,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":500,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":322,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":124,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":48,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":351,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":512,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":215,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":639,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":309,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":127,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":285,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":563,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":609,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":663,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":386,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":66,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":449,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":40,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":421,"com.google.gson.JsonObjectTest.testAddingStringProperties":173,"com.google.gson.functional.ObjectTest.testNestedSerialization":423,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":618,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":463,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":554,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":620,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":615,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":211,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":5,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":50,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":149,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":229,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":664,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":414,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":560,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":526,"com.google.gson.JsonPrimitiveTest.testBoolean":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":120,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":354,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":235,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":237,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":339,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":425,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":194,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":553,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":214,"com.google.gson.functional.CollectionTest.testSetSerialization":644,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":658,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":36,"com.google.gson.functional.StringTest.testStringValueSerialization":556,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":573,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":275,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":14,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":629,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":673,"com.google.gson.MixedStreamTest.testWriteInvalidState":227,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":303,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":216,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":468,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":320,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":474,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":347,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":328,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":24,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":231,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":93,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":564,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":57,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":177,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":370,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":110,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":245,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":688,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":67,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":308},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"7432f211-3e45-11e6-a09e-d996f283b9fa","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"74334032-3e45-11e6-a09e-43ec7290732d","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"74334033-3e45-11e6-a09e-23775f137548","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"74336744-3e45-11e6-a09e-e3c4fbf8d194","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[88],"tindex":"74336745-3e45-11e6-a09e-113c453bf2b5","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[89,90,91],"tindex":"74338e56-3e45-11e6-a09e-b145cc2fd370","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[92,93,94,95,96,97,98,99,100,101,102,103,1,2,3,4,5,6,7,104,105,106,10,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,23,128,129,130,26,28,30,32,37,38,39,41,43,131,132,133,45,46,47,48,49,134,135,136,137,138,50,52,139,140,53,56,58,59,61,63,66,141,142,75,76,78,143,144,79,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],"tindex":"74338e57-3e45-11e6-a09e-d528a318f436","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[192,193,194,195,196,197,198,199],"tindex":"7433b568-3e45-11e6-a09e-1de38eb3d38e","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"7433b569-3e45-11e6-a09e-d918ad5b101a","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"7433dc7a-3e45-11e6-a09e-3bba8827a1d0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[8,117,119,200,201,45,134,136,138,142,143,150,152,167,168,169,202,172,176,177,181,203,186,187,204,205,206,188,189,190,207,208,191],"tindex":"7433dc7b-3e45-11e6-a09e-b3b7691c80ea","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"7433dc7c-3e45-11e6-a09e-b5f7f8dfebdc","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[209,210,211,10,212,107,213,109,112,113,114,115,116,117,118,119,120,121,214,215,216,45,46,47,48,49,139,140,217,218,219,220,221,55,222,223,224,63,143,79,153,154,155,225,226,166,227,228,229,230,185],"tindex":"7434038d-3e45-11e6-a09e-bf0b717b1275","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[231],"tindex":"7434038e-3e45-11e6-a09e-f9a76ebe91bd","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[232,233,234,235,236,237,1,2,3,4,5,6,7,238,8,9,239,240,241,209,242,243,244,245,246,247,210,248,249,250,251,252,253,254,255,256,257,258,259,104,260,261,105,211,262,263,264,265,266,267,106,268,269,10,212,270,107,271,272,273,213,274,108,275,109,110,276,277,278,279,11,12,13,14,15,16,17,18,280,281,282,283,284,285,286,287,288,289,290,291,292,293,112,113,114,115,116,117,118,294,295,296,119,120,297,298,299,300,121,301,302,303,304,305,306,307,308,309,310,311,214,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,89,336,122,337,338,339,340,200,341,342,123,343,124,201,125,344,345,346,347,90,88,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,19,363,364,365,366,367,368,20,369,370,371,21,126,372,373,374,127,375,91,22,376,377,378,23,379,128,380,381,382,129,383,130,384,385,386,387,215,388,24,389,25,390,391,392,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,393,43,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,216,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,44,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,131,537,538,132,133,45,46,47,48,49,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,134,135,136,137,138,557,558,559,50,51,560,561,562,52,563,564,565,566,567,568,139,140,569,570,571,572,573,574,575,576,217,577,578,218,53,54,219,220,579,221,55,222,223,580,224,581,56,57,58,59,60,61,582,62,583,584,585,586,63,587,588,589,590,591,64,592,593,594,65,595,66,596,597,598,599,141,600,601,602,603,604,605,606,607,608,192,193,194,195,196,197,198,199,609,610,611,612,613,614,615,616,617,618,67,68,69,70,71,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,75,647,648,76,77,78,649,650,651,652,653,654,143,144,655,656,79,657,658,659,660,661,662,663,148,664,225,665,666,226,166,227,228,667,229,230,668,669,80,81,82,83,84,670,85,86,87,170,671],"tindex":"7434038f-3e45-11e6-a09e-b102363a5d56","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"74342aa0-3e45-11e6-a09e-6dbd0fd8fe47","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[233,234,3,5,241,209,244,246,210,252,253,254,257,258,104,260,261,105,211,262,264,267,269,10,212,271,213,275,109,110,11,13,17,18,280,281,282,284,285,286,289,291,111,113,294,295,296,299,300,318,326,327,328,329,330,672,673,674,675,676,331,333,334,335,347,360,362,363,371,374,376,130,388,24,389,25,390,392,32,33,34,36,37,40,43,394,397,398,399,402,405,408,411,414,420,422,423,426,431,433,434,436,131,132,133,50,561,562,563,565,566,567,568,570,571,572,576,217,219,220,221,55,222,224,585,63,587,588,589,590,591,592,593,594,595,597,603,192,195,196,199,613,616,617,618,619,622,623,72,73,677,678,679,680,681,624,626,635,641,644,648,649,652,653,143,656,659,660,661,662,663,148,682,683,684,685,686,687,688,689,690,691,225,226,81,170,671,692,693,182,183,185],"tindex":"743451b1-3e45-11e6-a09e-653ea6cc2a61","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"743451b2-3e45-11e6-a09e-ef1ad1fe0beb","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= '0') && (c <= '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((c == 'n') || (c == 'N')) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    switch (c) {\n                        case '/' :\n                        case '\\\\' :\n                        case ';' :\n                        case '#' :\n                        case '=' :\n                            checkLenient();\n                        case '{' :\n                        case '}' :\n                        case '[' :\n                        case ']' :\n                        case ':' :\n                        case ',' :\n                        case ' ' :\n                        case '\\t' :\n                        case '\\f' :\n                        case '\\r' :\n                        case '\\n' :\n                            return false;\n                        default :\n                            return true;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"743451b3-3e45-11e6-a09e-3719941507c1","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"743451b4-3e45-11e6-a09e-ddcad9355634","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"743478c5-3e45-11e6-a09e-bd4d7698e024","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1527","type":"CtBinaryOperatorImpl","sourcecode":"(c >= '0') && (c <= '9')"},"failures":[],"tindex":"743478c6-3e45-11e6-a09e-598e041a20b5","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= '0') && (c <= '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((c == 'n') || (c == 'N')) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    switch (c) {\n                        case '/' :\n                        case '\\\\' :\n                        case ';' :\n                        case '#' :\n                        case '=' :\n                            checkLenient();\n                        case '{' :\n                        case '}' :\n                        case '[' :\n                        case ']' :\n                        case ':' :\n                        case ',' :\n                        case ' ' :\n                        case '\\t' :\n                        case '\\f' :\n                        case '\\r' :\n                        case '\\n' :\n                            return false;\n                        default :\n                            return true;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"743478c7-3e45-11e6-a09e-63a23e028542","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"74349fd8-3e45-11e6-a09e-a528dda63d9e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"74349fd9-3e45-11e6-a09e-d994c3e62779","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"74349fda-3e45-11e6-a09e-610a418b0227","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"74349fdb-3e45-11e6-a09e-0bcf7d3baf37","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"7434c6ec-3e45-11e6-a09e-efe78a83c9dd","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7434c6ed-3e45-11e6-a09e-03c418a67a74","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7434edfe-3e45-11e6-a09e-f7a5826df576","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"7434edff-3e45-11e6-a09e-e90dba754844","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7434ee00-3e45-11e6-a09e-4937a79debfd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"7434ee01-3e45-11e6-a09e-3971edff044a","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"7434ee02-3e45-11e6-a09e-fd4f4e17e9f6","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"74351513-3e45-11e6-a09e-771e553186fb","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"74351514-3e45-11e6-a09e-6d0997ff3d4b","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"74351515-3e45-11e6-a09e-05edf3266784","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237270837/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":37,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
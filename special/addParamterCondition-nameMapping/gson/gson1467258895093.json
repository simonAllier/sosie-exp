{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":34,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":402,"com.google.gson.functional.StringTest.testStringValueDeserialization":628,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":33,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":551,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":580,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":129,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":184,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":60,"com.google.gson.MixedStreamTest.testWriteLenient":262,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":349,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":56,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":441,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":451,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":476,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":612,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":240,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":433,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":327,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":587,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":227,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":495,"com.google.gson.functional.ObjectTest.testSingletonLists":364,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":346,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":403,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":575,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":178,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":6,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":164,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":484,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":270,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":614,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":232,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":636,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":76,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":199,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":608,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":106,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":524,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":185,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":266,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":224,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":29,"com.google.gson.functional.EnumTest.testEnumCaseMapping":432,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":113,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":401,"com.google.gson.functional.JsonTreeTest.testToJsonTree":3,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":569,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":5,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":44,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":335,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":642,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":512,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":549,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":576,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":210,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":101,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":448,"com.google.gson.functional.ObjectTest.testNullDeserialization":567,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":358,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":96,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":634,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":482,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":581,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":183,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":102,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":516,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":222,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":462,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":487,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":83,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":356,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":619,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":618,"com.google.gson.JsonParserTest.testParseString":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":163,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":188,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":513,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":515,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":623,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":318,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":345,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":595,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":61,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":521,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":605,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":73,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":548,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":55,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":170,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":301,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":189,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":638,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":606,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":314,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":374,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":7,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":109,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":258,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":480,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":30,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":136,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":285,"com.google.gson.metrics.PerformanceTest.testDummy":518,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":244,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":307,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":422,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":47,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":526,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":558,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":348,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":343,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":461,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":517,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":472,"com.google.gson.functional.CollectionTest.testSetDeserialization":504,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":328,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":279,"com.google.gson.functional.EnumTest.testEnumSet":427,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":528,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":598,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":171,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":546,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":370,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":265,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":421,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":609,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":250,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":615,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":219,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":562,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":190,"com.google.gson.functional.MapTest.testHashMapDeserialization":520,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":578,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":554,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":125,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":259,"com.google.gson.MixedStreamTest.testReadNulls":659,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":122,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":137,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":53,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":561,"com.google.gson.functional.MapTest.testSortedMap":525,"com.google.gson.functional.MapTest.testMapSerialization":293,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":98,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":124,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":17,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":603,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":536,"com.google.gson.functional.MapTest.testSerializeMaps":117,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":153,"com.google.gson.functional.MapTest.testComplexKeysSerialization":299,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":527,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":32,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":323,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":359,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":499,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":217,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":108,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":147,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":559,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":644,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":87,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":202,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":131,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":566,"com.google.gson.functional.MapTest.testStringKeyDeserialization":31,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":50,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":192,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":302,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":584,"com.google.gson.functional.PrettyPrintingTest.testMap":200,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":255,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":579,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":444,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":127,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":333,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":269,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":514,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":539,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":407,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":629,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":12,"com.google.gson.functional.MapTest.testMapSerializationEmpty":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":340,"com.google.gson.functional.CollectionTest.testQueueSerialization":445,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":599,"com.google.gson.functional.MapTest.testMapOfMapSerialization":292,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":385,"com.google.gson.JavaSerializationTest.testMapIsSerializable":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":550,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":649,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":105,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":187,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":179,"com.google.gson.functional.FieldNamingTest.testIdentity":154,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":404,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":48,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":410,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":489,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":2,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":135,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":196,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":363,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":570,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":267,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":77,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":405,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":388,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":555,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":547,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":556,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":519,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":286,"com.google.gson.functional.MapTest.testMapSubclassSerialization":288,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":78,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":498,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":529,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":456,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":593,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":656,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":627,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":471,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":420,"com.google.gson.functional.EnumTest.testEnumSubclass":429,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":389,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":271,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":483,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":378,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":459,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":611,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":49,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":571,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":362,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":596,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":474,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":40,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":110,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":533,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":107,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":563,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":600,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":134,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":353,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":475,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":116,"com.google.gson.MixedStreamTest.testWriteNulls":657,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":319,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":65,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":168,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":497,"com.google.gson.CommentsTest.testParseComments":661,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":11,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":175,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":365,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":496,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":416,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":537,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":610,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":16,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":295,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":406,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":261,"com.google.gson.MixedStreamTest.testReadInvalidState":654,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":324,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":162,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":18,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":380,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":664,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":540,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":413,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":382,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":157,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":393,"com.google.gson.functional.MapTest.testMapDeserialization":27,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":342,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":205,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":115,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":208,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":290,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":309,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":212,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":209,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":148,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":1,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":469,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":369,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":376,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":457,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":336,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":146,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":361,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":201,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":294,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":355,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":568,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":177,"com.google.gson.functional.PrimitiveTest.testShortSerialization":396,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":70,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":613,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":226,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":594,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":104,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":273,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":577,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":150,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":229,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":103,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":443,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":99,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":463,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":24,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":590,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":253,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":398,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":160,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":218,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":93,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":507,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":622,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":509,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":133,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":172,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":280,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":467,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":95,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":329,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":494,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":51,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":597,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":492,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":479,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":431,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":140,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":304,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":544,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":173,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":158,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":583,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":337,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":553,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":42,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":645,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":572,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":617,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":272,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":193,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":434,"com.google.gson.JsonPrimitiveTest.testEquals":10,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":211,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":35,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":19,"com.google.gson.functional.MapTest.testGeneralMapField":120,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":478,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":625,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":254,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":320,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":350,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":330,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":379,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":437,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":392,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":91,"com.google.gson.MixedStreamTest.testReadMixedStreamed":506,"com.google.gson.JsonObjectTest.testDeepCopy":88,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":14,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":383,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":545,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":195,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":268,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":452,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":601,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":225,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":344,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":28,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":417,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":176,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":399,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":246,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":591,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":156,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":637,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":501,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":541,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":648,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":216,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":181,"com.google.gson.functional.ObjectTest.testNestedDeserialization":493,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":260,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":373,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":126,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":39,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":223,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":624,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":415,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":130,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":523,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":630,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":419,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":191,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":139,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":59,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":64,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":454,"com.google.gson.functional.ObjectTest.testNullSerialization":564,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":142,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":641,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":25,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":284,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":297,"com.google.gson.functional.MapTest.testInterfaceTypeMap":119,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":535,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":256,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":308,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":573,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":430,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":440,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":458,"com.google.gson.MixedStreamTest.testReadClosed":655,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":221,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":585,"com.google.gson.MixedStreamTest.testWriteClosed":660,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":128,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":447,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":366,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":557,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":423,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":282,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":68,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":377,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":354,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":310,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":367,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":446,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":236,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":500,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":604,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":238,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":144,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":450,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":159,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":66,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":274,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":626,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":186,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":543,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":311,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":360,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":67,"com.google.gson.functional.CollectionTest.testQueueDeserialization":652,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":384,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":602,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":633,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":123,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":161,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":237,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":118,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":339,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":439,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":491,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":442,"com.google.gson.functional.MapTest.testRawMapSerialization":298,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":653,"com.google.gson.JsonParserTest.testParseReader":80,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":552,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":510,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":305,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":371,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":22,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":215,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":82,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":315,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":357,"com.google.gson.functional.PrimitiveTest.testByteSerialization":394,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":663,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":36,"com.google.gson.ObjectTypeAdapterTest.testSerialize":281,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":582,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":57,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":283,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":151,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":424,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":631,"com.google.gson.functional.MapTest.testMapWithQuotes":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":4,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":588,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":169,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":194,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":180,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":38,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":332,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":326,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":69,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":418,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":490,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":390,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":565,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":322,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":334,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":58,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":338,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":616,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":166,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":650,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":531,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":71,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":352,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":141,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":412,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":239,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":79,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":560,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":72,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":574,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":465,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":508,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":485,"com.google.gson.JsonObjectTest.testAddingStringProperties":89,"com.google.gson.internal.LinkedTreeMapTest.testClear":100,"com.google.gson.functional.ObjectTest.testNestedSerialization":372,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":435,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":381,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":436,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":635,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":245,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":121,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":20,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":197,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":263,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":464,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":368,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":639,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":621,"com.google.gson.JsonPrimitiveTest.testBoolean":8,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":43,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":470,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":112,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":114,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":468,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":486,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":233,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":511,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":408,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":149,"com.google.gson.functional.CollectionTest.testSetSerialization":453,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":174,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":203,"com.google.gson.functional.StringTest.testStringValueSerialization":409,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":303,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":132,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":275,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":646,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":530,"com.google.gson.MixedStreamTest.testWriteInvalidState":658,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":182,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":589,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":321,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":592,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":46,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":92,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":152,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":167,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":84,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":640,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":220,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":502,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":347,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":37,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":26,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":247,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":317},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"tindex":"67deb3e0-3e76-11e6-ab3b-556bc400f103","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67df0201-3e76-11e6-ab3b-539292ddead1","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"67df0202-3e76-11e6-ab3b-51df3746c011","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"67df2913-3e76-11e6-ab3b-a94e9e32304e","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"67df2914-3e76-11e6-ab3b-cdb5c233cc0a","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,0,1,2,3,39,40,41,42,43,44,45,46,6,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,7,82,11,83,84,85,86,87,12,88,89,13,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"tindex":"67df2915-3e76-11e6-ab3b-035bbda5eb0f","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67df7736-3e76-11e6-ab3b-5be48a8fcb50","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[0,3,5,9,10,109],"tindex":"67df7737-3e76-11e6-ab3b-81ac71ef2f37","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isNumber()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[110,111,112,113,114,16,17,18,19,20,21,22,115,116,117,118,119,120,121,33,122,123,34,124,125,126,127,128,35,36,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,47,48,172,49,50,51,173,174,175,176,177,52,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,53,194,195,54,55,56,57,196,58,59,197,198,66,199,200,201,202,203,204,205,206,207,208,209,69,210,211,212,213,70,214,215,216,217,218,219,220,221,222,223,224,225,226,71,227,228,72,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,76,260,261,77,262,263,264,265,266,267,268,269,270,271],"tindex":"67df9e48-3e76-11e6-ab3b-4faedff0f584","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"67df9e49-3e76-11e6-ab3b-dd57ac59f750","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(a instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"67dfc55a-3e76-11e6-ab3b-23e46866358d","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[272],"tindex":"67dfc55b-3e76-11e6-ab3b-6d0deab3e3c5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67dfc55c-3e76-11e6-ab3b-3b64a0aaffff","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[138,140,141,143,144,147,151,152,153],"tindex":"67dfc55d-3e76-11e6-ab3b-a76f4ff745fd","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[273],"tindex":"67dfc55e-3e76-11e6-ab3b-1b078d194490","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67dfec6f-3e76-11e6-ab3b-dbd6fcd00c69","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"67dfec70-3e76-11e6-ab3b-31d7dcfa0b94","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[274,275,276,277,278,279,280,184,257,258,281],"tindex":"67dfec71-3e76-11e6-ab3b-3be10f23f964","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67e01382-3e76-11e6-ab3b-f394f53d2a7b","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"67e01383-3e76-11e6-ab3b-5d9acedf734f","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67e01384-3e76-11e6-ab3b-bb7d68076fc6","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,282,283,284,285,286,287],"tindex":"67e01385-3e76-11e6-ab3b-c1b4cafa9091","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"67e01386-3e76-11e6-ab3b-a1209a08c386","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[110,111,113,114,18,20,115,288,117,289,290,118,291,292,293,294,295,119,296,297,120,121,298,299,300,301,302,33,122,123,124,127,303,304,129,131,133,135,136,137,305,138,139,140,141,142,306,146,38,1,307,282,308,309,310,311,312,313,314,315,316,317,318,149,319,283,320,321,322,323,150,151,152,153,154,274,275,276,277,278,324,325,326,327,328,329,330,331,332,333,4,334,335,336,46,155,337,338,339,340,341,342,343,156,344,157,158,345,346,159,347,348,349,350,351,352,353,161,162,354,355,356,357,6,167,358,168,359,360,169,171,49,50,51,174,175,176,52,179,180,181,361,362,363,364,365,366,367,279,368,369,183,370,371,372,373,374,375,376,280,377,378,284,379,380,285,381,186,382,383,384,385,386,387,388,272,187,389,390,188,189,391,392,190,393,394,191,395,396,397,286,192,398,193,399,400,53,54,55,401,402,403,404,405,406,407,408,409,197,410,411,412,413,414,415,416,199,200,201,202,203,204,205,206,207,209,210,211,212,213,70,214,217,219,220,221,222,223,224,225,226,417,418,71,419,420,421,422,287,423,424,425,426,427,428,229,429,430,431,432,433,230,231,234,235,238,240,243,245,246,434,435,252,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,253,455,254,255,256,456,457,458,257,258,259,76,260,459,77,460,461,462,463,78,79,7,464,265,266,267,268,269,270,271],"tindex":"67e03a97-3e76-11e6-ab3b-512e3af733d4","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[465],"tindex":"67e03a98-3e76-11e6-ab3b-2f0b510393e1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[15,19,21,22,27,28,29,31,34,35,36,37,38,0,1,2,3,40,41,42,43,44,45,46,6,47,52,53,54,55,60,61,62,63,64,67,68,73,74,75,76,78,80,81,7,86,90,92,93,94,96,98,99,100,101,104,107,108],"tindex":"67e061a9-3e76-11e6-ab3b-1f0a21fa6ff4","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67e088ba-3e76-11e6-ab3b-85de6e52dc09","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17,18,19,22,34,126,128,35,132,134,305,143,144,145,147,148,38,466,467,274,276,277,278,468,469,470,471,6,167,358,168,359,472,360,170,172,473,474,364,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,184,494,195,54,55,60,61,62,63,198,410,208,495,496,218,418,497,420,227,423,424,425,228,498,499,232,233,236,237,241,242,244,246,248,249,250,252,438,439,440,500,501,502,73,503,441,443,504,76,505,463,78,79,7,506,507],"tindex":"67e088bb-3e76-11e6-ab3b-efe3cbd051b5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"67e088bc-3e76-11e6-ab3b-83c8ffddab47","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[122,34,124,125,35],"tindex":"67e088bd-3e76-11e6-ab3b-a7071c3df8b8","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67e0afce-3e76-11e6-ab3b-a55608a4591b","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"67e0afcf-3e76-11e6-ab3b-156bfff32da0","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"67e0afd0-3e76-11e6-ab3b-6d006977aee3","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"67e0afd1-3e76-11e6-ab3b-c906c7e88e32","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[36,37],"tindex":"67e0afd2-3e76-11e6-ab3b-354e9e624299","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67e0d6e3-3e76-11e6-ab3b-c5d30c4002a4","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[129,131,135,1,282,283,390,399,287,508,440,509,510,511,512,513,514],"tindex":"67e0d6e4-3e76-11e6-ab3b-053bb183a726","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[515,516,517],"tindex":"67e0d6e5-3e76-11e6-ab3b-1b5e15aeefce","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"67e0d6e6-3e76-11e6-ab3b-2bab4eac94ce","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        {\n            if (target instanceof java.lang.String) {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[207,211,212,217,418,420,421,424,425],"tindex":"67e0fdf7-3e76-11e6-ab3b-af5c999230a4","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[36,37],"tindex":"67e0fdf8-3e76-11e6-ab3b-3f90f2e22fd5","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[187,189,191],"tindex":"67e0fdf9-3e76-11e6-ab3b-0bb7622cad64","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"67e0fdfa-3e76-11e6-ab3b-37191ca65dae","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67e0fdfb-3e76-11e6-ab3b-693e34b0b75e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[518,110,111,112,113,114,16,17,18,19,20,21,22,519,115,116,520,23,288,117,24,25,289,26,290,27,118,521,522,28,523,291,292,293,29,524,294,295,525,119,296,297,120,121,298,30,299,300,31,301,32,526,302,33,122,123,34,124,125,126,127,128,35,303,36,37,527,528,304,529,129,130,131,132,133,134,135,136,137,305,138,139,140,141,142,143,144,306,145,146,147,148,0,1,2,3,39,40,41,307,282,308,42,43,466,467,309,310,44,311,312,530,313,314,315,316,317,531,532,318,149,319,533,534,535,283,536,320,537,321,538,322,539,323,540,150,151,152,153,154,324,325,326,327,328,541,329,330,331,45,468,469,332,542,333,4,543,334,515,335,336,544,545,46,546,273,547,155,337,338,339,340,470,341,548,342,343,549,156,550,344,157,158,345,551,346,552,553,159,554,347,348,160,349,350,555,351,352,353,161,162,354,163,164,355,556,5,356,557,558,357,471,6,559,165,560,561,166,562,167,358,168,359,472,360,169,170,171,47,48,172,49,50,51,173,174,175,176,177,52,178,179,180,181,361,473,474,362,363,364,475,476,365,477,478,366,479,480,367,182,481,563,279,482,564,368,565,483,369,484,183,370,485,371,372,373,486,374,487,488,566,567,375,489,376,280,490,377,491,492,493,184,568,569,185,378,570,284,571,572,573,574,575,379,576,577,380,578,579,580,581,582,583,584,285,381,585,586,587,588,589,186,590,382,383,591,592,384,593,594,385,595,386,387,596,597,388,272,598,599,600,187,601,602,603,604,605,606,607,608,389,609,390,610,188,189,611,612,391,613,614,392,615,190,616,494,617,393,394,191,395,396,397,286,618,619,620,192,621,398,622,623,624,193,399,625,400,626,627,53,194,195,54,55,56,57,196,58,59,628,401,402,403,404,405,629,630,406,631,407,632,633,634,408,635,636,409,60,61,62,63,64,65,637,638,197,198,639,410,411,66,412,640,413,414,415,416,67,68,199,200,201,202,203,204,205,206,207,208,495,209,69,210,211,212,496,213,70,214,215,216,217,218,219,220,221,222,223,224,225,226,641,417,418,497,71,419,420,421,422,287,227,423,424,425,228,426,72,498,642,427,428,229,429,643,644,430,499,431,432,433,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,434,435,247,248,249,250,251,252,436,437,438,439,441,442,443,444,645,646,647,445,446,447,448,449,648,649,450,650,504,451,452,651,453,454,75,253,652,455,254,255,256,456,457,458,257,258,259,76,260,261,459,77,460,505,461,462,463,78,79,7,464,653,654,655,656,657,658,262,659,263,660,506,507,264,265,266,267,268,661,269,270,271,83,13],"tindex":"67e1250c-3e76-11e6-ab3b-ad72909c5025","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"67e14c1d-3e76-11e6-ab3b-970acc5ad2ea","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"67e14c1e-3e76-11e6-ab3b-d780cb8bb1b6","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"67e14c1f-3e76-11e6-ab3b-f5fb159f71a1","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[273,213],"tindex":"67e17330-3e76-11e6-ab3b-d9cc343bfda3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"67e17331-3e76-11e6-ab3b-e5ed3ec04d47","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[33,34,0,1,2,3,39,40,41,42,43,44,56,57,196,58,59,67,68,71,76,77,82,662,663],"tindex":"67e17332-3e76-11e6-ab3b-ed565cf6e91b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[113,190],"tindex":"67e17333-3e76-11e6-ab3b-8562b07a9fc1","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"67e17334-3e76-11e6-ab3b-6b36935531e6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"67e19a45-3e76-11e6-ab3b-69d20c2ae815","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"67e19a46-3e76-11e6-ab3b-5723f64216fd","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[664,465],"tindex":"67e19a47-3e76-11e6-ab3b-5384945609ee","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[110,111,17,18,19,20,22,118,524,119,297,120,299,33,122,34,124,126,127,128,35,303,129,130,131,132,133,134,135,136,137,305,138,139,140,141,142,143,144,306,145,146,147,148,38,0,1,2,3,39,40,41,307,282,308,42,43,466,467,309,310,44,320,537,321,150,151,152,153,154,274,275,276,277,278,324,326,327,328,468,469,544,273,470,344,351,354,471,6,562,167,358,168,359,472,360,170,172,49,51,174,361,473,474,362,363,364,475,476,365,477,478,366,479,480,367,481,279,482,368,483,484,370,485,371,372,373,486,374,487,488,566,375,489,376,280,490,377,491,492,493,184,494,53,195,54,55,56,57,58,59,60,61,62,63,64,197,198,410,411,412,640,413,414,415,416,67,68,201,202,206,207,208,495,211,212,496,213,214,217,218,418,497,419,420,421,422,287,227,423,424,425,228,426,498,642,430,499,231,232,233,234,235,236,237,238,241,242,243,244,246,434,435,248,249,250,252,438,439,441,443,449,504,451,453,456,257,258,76,459,460,505,461,462,463,78,79,7,653,656,658,660,506,507,265,281],"tindex":"67e1c158-3e76-11e6-ab3b-473f7b21df45","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"67e1c159-3e76-11e6-ab3b-6bb2349ae539","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257944956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":58,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
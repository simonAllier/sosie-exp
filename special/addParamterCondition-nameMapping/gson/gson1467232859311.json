{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":367,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":191,"com.google.gson.functional.StringTest.testStringValueDeserialization":512,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":173,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":472,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":567,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":9,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":451,"com.google.gson.MixedStreamTest.testWriteLenient":376,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":383,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":505,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":129,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":362,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":205,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":215,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":429,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":599,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":60,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":316,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":142,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":574,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":416,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":621,"com.google.gson.functional.ObjectTest.testSingletonLists":85,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":125,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":192,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":414,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":103,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":479,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":439,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":30,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":601,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":334,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":642,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":520,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":62,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":144,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":595,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":495,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":323,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":556,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":73,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":494,"com.google.gson.functional.EnumTest.testEnumCaseMapping":315,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":190,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":328,"com.google.gson.functional.JsonTreeTest.testToJsonTree":359,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":555,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":480,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":347,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":348,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":19,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":470,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":563,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":302,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":212,"com.google.gson.functional.ObjectTest.testNullDeserialization":445,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":79,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":518,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":436,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":288,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":393,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":568,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":92,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":71,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":262,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":442,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":392,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":458,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":607,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":478,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":20,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":280,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":463,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":611,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":98,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":28,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":582,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":490,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":506,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":592,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":469,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":257,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":385,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":408,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":171,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":281,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":511,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":593,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":97,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":244,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":239,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":330,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":433,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":32,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":267,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":497,"com.google.gson.metrics.PerformanceTest.testDummy":638,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":422,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":33,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":55,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":409,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":452,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":128,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":120,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":404,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":427,"com.google.gson.functional.CollectionTest.testSetDeserialization":528,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":143,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":89,"com.google.gson.functional.EnumTest.testEnumSet":309,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":533,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":585,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":39,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":639,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":466,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":54,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":322,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":596,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":406,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":602,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":68,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":355,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":284,"com.google.gson.functional.MapTest.testHashMapDeserialization":484,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":565,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":475,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":240,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":616,"com.google.gson.MixedStreamTest.testReadNulls":635,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":176,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":296,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":255,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":456,"com.google.gson.functional.MapTest.testSortedMap":496,"com.google.gson.functional.MapTest.testMapSerialization":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":298,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":536,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":590,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":546,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":8,"com.google.gson.functional.MapTest.testSerializeMaps":154,"com.google.gson.functional.MapTest.testComplexKeysSerialization":169,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":532,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":384,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":499,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":254,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":81,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":628,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":308,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":395,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":5,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":353,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":627,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":147,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":396,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":10,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":444,"com.google.gson.functional.MapTest.testStringKeyDeserialization":498,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":641,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":548,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":41,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":292,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":172,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":571,"com.google.gson.functional.PrettyPrintingTest.testMap":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":566,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":108,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":299,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":454,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":21,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":331,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":549,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":196,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":117,"com.google.gson.functional.MapTest.testMapSerializationEmpty":170,"com.google.gson.functional.CollectionTest.testQueueSerialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":586,"com.google.gson.functional.MapTest.testMapOfMapSerialization":159,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":471,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":526,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":203,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":47,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":193,"com.google.gson.functional.FieldNamingTest.testIdentity":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":410,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":64,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":446,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":11,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":84,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":358,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":364,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":557,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":324,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":194,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":259,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":276,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":477,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":118,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":356,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":482,"com.google.gson.functional.MapTest.testMapSubclassSerialization":153,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":291,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":183,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":419,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":534,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":229,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":317,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":373,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":461,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":507,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":615,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":453,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":53,"com.google.gson.functional.EnumTest.testEnumSubclass":312,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":279,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":332,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":263,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":258,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":598,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":40,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":3,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":558,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":175,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":583,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":502,"com.google.gson.stream.JsonWriterTest.testNullName":341,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":343,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":326,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":543,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":435,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":587,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":274,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":133,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":428,"com.google.gson.MixedStreamTest.testWriteNulls":374,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":483,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":250,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":509,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":80,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":415,"com.google.gson.CommentsTest.testParseComments":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":44,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":86,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":623,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":235,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":547,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":597,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":535,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":162,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":195,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":423,"com.google.gson.MixedStreamTest.testReadInvalidState":633,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":135,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":290,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":223,"com.google.gson.JsonParserTest.testParseMixedArray":382,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":266,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":644,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":550,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":640,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":232,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":338,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":387,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":270,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":123,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":285,"com.google.gson.functional.MapTest.testMapDeserialization":489,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":119,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":150,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":152,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":380,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":620,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":35,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":156,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":304,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":301,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":504,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":22,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":460,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":91,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":99,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":0,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":112,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":417,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":181,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":161,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":137,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":554,"com.google.gson.functional.PrimitiveTest.testShortSerialization":289,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":413,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":306,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":600,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":581,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":26,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":564,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":221,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":311,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":207,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":182,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":486,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":577,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":219,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":293,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":394,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":476,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":625,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":388,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":637,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":295,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":610,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":16,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":31,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":100,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":401,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":104,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":318,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":391,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":604,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":584,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":449,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":432,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":314,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":1,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":220,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":464,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":412,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":124,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":27,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":256,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":474,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":345,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":522,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":559,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":605,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":277,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":294,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":236,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":303,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":310,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":619,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":537,"com.google.gson.functional.MapTest.testGeneralMapField":166,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":431,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":243,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":613,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":226,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":251,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":130,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":105,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":187,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":265,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":283,"com.google.gson.MixedStreamTest.testReadMixedStreamed":636,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":465,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":491,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":216,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":325,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":552,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":421,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":588,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":122,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":492,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":204,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":485,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":25,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":45,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":77,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":320,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":578,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":121,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":510,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":457,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":525,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":624,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":49,"com.google.gson.functional.ObjectTest.testNestedDeserialization":450,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":63,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":96,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":617,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":342,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":72,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":612,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":234,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":397,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":493,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":514,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":52,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":287,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":178,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":366,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":508,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":218,"com.google.gson.functional.ObjectTest.testNullSerialization":352,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":179,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":521,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":487,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":165,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":264,"com.google.gson.functional.MapTest.testInterfaceTypeMap":163,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":545,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":34,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":560,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":15,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":503,"com.google.gson.MixedStreamTest.testReadClosed":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":106,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":572,"com.google.gson.MixedStreamTest.testWriteClosed":378,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":211,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":618,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":87,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":481,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":56,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":361,"com.google.gson.stream.JsonWriterTest.testLongs":29,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":101,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":136,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":36,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":88,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":210,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":336,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":591,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":321,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":4,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":126,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":425,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":199,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":614,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":269,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":462,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":82,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":241,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":360,"com.google.gson.functional.CollectionTest.testQueueDeserialization":531,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":272,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":589,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":517,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":134,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":629,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":157,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":116,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":448,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":206,"com.google.gson.functional.MapTest.testRawMapSerialization":168,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":372,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":17,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":94,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":177,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":539,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":368,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":369,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":102,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":245,"com.google.gson.functional.PrimitiveTest.testByteSerialization":286,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":371,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":349,"com.google.gson.ObjectTypeAdapterTest.testSerialize":643,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":569,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":379,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":363,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":23,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":57,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":515,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":630,"com.google.gson.functional.MapTest.testMapWithQuotes":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":109,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":575,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":516,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":38,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":551,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":48,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":107,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":141,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":381,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":622,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":50,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":447,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":114,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":437,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":253,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":115,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":319,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":365,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":603,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":354,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":527,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":541,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":132,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":242,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":2,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":66,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":337,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":184,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":339,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":455,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":418,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":561,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":14,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":46,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":440,"com.google.gson.functional.ObjectTest.testNestedSerialization":95,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":237,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":186,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":268,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":519,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":76,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":167,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":224,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":37,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":333,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":377,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":90,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":424,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":609,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":346,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":468,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":329,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":573,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":631,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":459,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":335,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":18,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":197,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":249,"com.google.gson.functional.CollectionTest.testSetSerialization":217,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":553,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":43,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":148,"com.google.gson.functional.StringTest.testStringValueSerialization":198,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":83,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":200,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":398,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":523,"com.google.gson.MixedStreamTest.testWriteInvalidState":375,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":540,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":351,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":576,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":252,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":579,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":113,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":7,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":78,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":426,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":69,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":386,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":127,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":350,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":488,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":247,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":403},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"c955cc2d-3e39-11e6-b1f3-c1d734354179","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"c956415e-3e39-11e6-b1f3-07063dbd0c9a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"c956686f-3e39-11e6-b1f3-2d80089f9f20","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"c9568f80-3e39-11e6-b1f3-3765a39813f8","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[26],"tindex":"c9568f81-3e39-11e6-b1f3-07d05c9ee4bb","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"c9568f82-3e39-11e6-b1f3-594cc3ac1859","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"c956b693-3e39-11e6-b1f3-fd25ecd835b2","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[27,28,29,30],"tindex":"c956b694-3e39-11e6-b1f3-7fff5b3ca0ff","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[9,10,31,11,32,33,12,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,13,56,57,58,59,15,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,27,115,116,117,118,119,120,121,122,123,124,28,125,126,127,128,129,130,131,132,133,134,135,136,137,138,22,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,0,178,1,2,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,6,7,8,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,23,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,24,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,25,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,30,332,333],"tindex":"c956dda5-3e39-11e6-b1f3-dd4a01160498","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[317,318,334,335,320,336,321,337,338,339,340],"tindex":"c95704b6-3e39-11e6-b1f3-59ac90f3eb0d","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[341],"tindex":"c95704b7-3e39-11e6-b1f3-dd8970d2792d","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"c95704b8-3e39-11e6-b1f3-0f639c504a2c","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"c95704b9-3e39-11e6-b1f3-3179efce4f43","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[9,10,31,11,32,342,343,344,33,12,34,345,346,35,36,347,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,13,56,57,58,59,348,15,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,349,350,84,85,86,87,88,351,89,352,90,91,92,93,94,95,96,97,98,99,100,101,102,103,353,354,355,104,105,106,107,108,109,110,111,112,113,26,114,27,115,116,117,118,119,120,121,122,123,124,28,125,126,127,128,129,130,131,132,133,134,135,136,137,356,138,357,22,358,359,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,0,1,2,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,6,7,8,222,223,224,225,226,227,228,229,230,231,232,233,234,235,360,361,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,23,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,24,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,25,295,362,363,364,365,366,296,297,367,298,299,300,301,302,303,304,305,306,307,368,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,369,370,371,372,373,374,375,376,377,378,379,380,328,329,381,330,382,331,30,332,383,384,385,386,387,388,389,390,391,392,393,333],"tindex":"c9572bca-3e39-11e6-b1f3-e5588681a12d","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c9572bcb-3e39-11e6-b1f3-e9f57e357fe4","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c95752dc-3e39-11e6-b1f3-7758e1243fcd","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"c95752dd-3e39-11e6-b1f3-8331912f87ed","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[394,395,396],"tindex":"c95752de-3e39-11e6-b1f3-b5b471e79a9e","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"c95779ef-3e39-11e6-b1f3-6364d860bc2f","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"c95779f0-3e39-11e6-b1f3-c10a9cd8cd10","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c957a101-3e39-11e6-b1f3-178c0fe9760a","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"c957a102-3e39-11e6-b1f3-53fb956e25b9","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[9,397,10,398,31,399,11,32,342,343,344,33,12,34,345,346,400,401,35,36,347,37,402,403,404,405,406,407,38,408,39,409,410,411,40,41,42,412,43,44,45,413,46,414,47,48,49,50,415,51,52,53,54,55,13,416,56,57,58,417,59,418,419,348,60,420,421,61,422,62,63,423,424,64,65,425,66,426,68,69,70,71,72,73,74,75,76,77,78,79,80,81,427,82,83,349,350,84,85,428,429,86,430,431,87,432,433,88,351,434,435,89,436,352,90,437,438,91,439,92,93,440,94,95,96,441,97,442,443,444,445,98,446,99,100,447,101,448,449,450,451,452,102,453,103,353,454,455,456,354,355,457,104,105,106,458,459,460,107,461,108,109,462,110,463,111,112,464,465,113,466,26,467,114,27,115,116,117,468,118,469,119,120,470,121,471,122,123,124,28,472,125,473,474,126,475,127,128,476,129,130,477,131,132,133,134,135,136,478,479,137,356,480,138,481,357,22,358,359,139,140,141,142,143,144,145,146,147,148,149,150,151,482,152,483,484,485,153,154,486,487,155,488,156,489,157,490,491,492,493,158,159,160,494,495,161,162,496,163,164,165,166,167,168,497,169,170,498,171,499,500,172,173,174,501,502,175,176,177,0,178,1,2,179,3,4,180,503,181,5,504,182,183,184,505,506,507,394,508,509,510,511,185,186,187,188,189,512,190,191,192,193,194,513,514,195,515,196,516,517,518,197,519,520,198,521,204,205,206,207,208,522,523,524,209,210,211,212,213,525,526,214,527,528,215,216,529,217,218,530,219,531,532,533,220,534,221,6,7,8,222,535,536,223,537,224,538,539,225,226,227,228,229,230,231,232,233,234,235,360,361,236,237,238,239,240,241,242,540,243,244,245,246,247,541,542,248,249,250,543,544,545,23,546,251,547,252,548,253,549,254,550,255,551,552,256,257,258,259,260,553,261,262,554,555,556,263,557,264,558,559,560,561,562,265,563,564,266,565,566,567,568,569,570,571,267,268,572,573,574,575,576,269,577,270,271,578,579,272,580,581,273,582,274,275,583,584,276,277,585,586,587,278,588,589,590,591,592,593,594,595,279,596,24,597,280,281,598,599,282,600,601,283,602,284,603,604,605,285,286,287,288,289,290,291,606,607,608,292,609,293,610,611,612,294,25,613,295,614,615,362,363,364,365,366,296,297,367,298,616,617,299,618,619,300,620,621,301,622,302,303,304,623,305,306,307,368,624,308,625,309,310,311,312,626,627,313,628,314,315,316,317,318,334,335,319,320,336,629,321,337,630,322,323,324,325,326,327,631,632,372,633,634,373,374,375,376,635,377,378,636,637,638,328,329,330,331,30,332,392,393,333],"tindex":"c957c813-3e39-11e6-b1f3-552374aa0809","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[639,640,641],"tindex":"c957c814-3e39-11e6-b1f3-1dc65f5d1b72","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[302],"tindex":"c957ef25-3e39-11e6-b1f3-d71e60f246a4","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src != null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"c957ef26-3e39-11e6-b1f3-35f9df2df925","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"c957ef27-3e39-11e6-b1f3-ab972caa4e7e","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[152,385,386,390],"tindex":"c957ef28-3e39-11e6-b1f3-91b191776af1","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"c957ef29-3e39-11e6-b1f3-27bc7d21a7e4","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"c957ef2a-3e39-11e6-b1f3-096dff8e7bbb","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"c958163b-3e39-11e6-b1f3-bd183e110cd7","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"c958163c-3e39-11e6-b1f3-0f474e6bf4a2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[394,395,396],"tindex":"c958163d-3e39-11e6-b1f3-b95c41c3f393","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"c9583d4e-3e39-11e6-b1f3-7d4ba060122d","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[50,53,54,57,58,300,303,304,308],"tindex":"c9583d4f-3e39-11e6-b1f3-715752296e84","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"c9583d50-3e39-11e6-b1f3-d9bc83643b6e","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[9,10,11,32,342,343,344,33,12,34,345,346,35,36,347,37,40,42,43,50,52,53,54,55,13,56,57,58,59,348,15,16,17,19,20,642,61,62,64,65,66,67,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,94,95,97,98,99,100,101,103,355,122,131,136,357,22,358,359,139,141,142,143,146,147,151,157,163,165,166,173,174,175,176,177,0,1,2,179,180,181,182,183,184,185,188,189,199,200,201,202,203,205,207,213,215,217,221,6,7,8,222,223,224,229,232,233,234,235,360,361,236,237,238,239,251,255,256,257,258,261,262,362,363,365,366,296,367,298,299,300,303,304,305,307,308,313,318,319,320,321,322,326,327,372,373,330,643],"tindex":"c9586461-3e39-11e6-b1f3-435eeec3d174","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"c9586462-3e39-11e6-b1f3-935cfa2f466d","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[289],"tindex":"c9586463-3e39-11e6-b1f3-4b511bf3607c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"c9586464-3e39-11e6-b1f3-bb723b02be51","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[26,179],"tindex":"c9588b75-3e39-11e6-b1f3-03b813574dad","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"c9588b76-3e39-11e6-b1f3-5fab1da055a6","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"c9588b77-3e39-11e6-b1f3-53456dff9eaa","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[644],"tindex":"c9588b78-3e39-11e6-b1f3-75b424cc9035","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[48,62,63,423,73,74,75,92,311,322],"tindex":"c958b289-3e39-11e6-b1f3-8d1320aa6eee","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"c958b28a-3e39-11e6-b1f3-4fb576349898","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c958d99b-3e39-11e6-b1f3-9d900617cd98","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"c958d99c-3e39-11e6-b1f3-c9b83645459b","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"c958d99d-3e39-11e6-b1f3-9fa84e81973c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[],"tindex":"c958d99e-3e39-11e6-b1f3-9ba53f5fd2ca","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"deserialization"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"c95900af-3e39-11e6-b1f3-d1618caf7268","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (separator == null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"c95900b0-3e39-11e6-b1f3-0f6608f2fd2e","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c95900b1-3e39-11e6-b1f3-7d0b0a65ca6e","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231991336/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":53,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
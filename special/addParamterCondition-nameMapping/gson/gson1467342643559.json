{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":238,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":395,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":472,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":27,"com.google.gson.stream.JsonWriterTest.testRepeatedName":469,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":9,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":49,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":258,"com.google.gson.MixedStreamTest.testWriteLenient":507,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":422,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":28,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":247,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":206,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":251,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":433,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":477,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":300,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":508,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":34,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":278,"com.google.gson.functional.ObjectTest.testSingletonLists":204,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":496,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":370,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":442,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":463,"com.google.gson.stream.JsonWriterTest.testStrings":474,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":85,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":245,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":455,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":219,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":269,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":440,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":144,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":363,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":139,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":5,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":23,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":355,"com.google.gson.functional.EnumTest.testEnumCaseMapping":323,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":315,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":441,"com.google.gson.functional.JsonTreeTest.testToJsonTree":137,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":426,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":159,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":97,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":509,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":458,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":338,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":371,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":57,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":514,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":253,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":216,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":465,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":21,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":306,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":226,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":464,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":498,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":176,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":103,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":383,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":459,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":380,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":228,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":419,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":259,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":352,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":170,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":289,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":71,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":357,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":384,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":412,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":225,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":328,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":101,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":112,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":212,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":16,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":373,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":110,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":150,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":183,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":63,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":73,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":399,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":421,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":493,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":305,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":255,"com.google.gson.functional.CollectionTest.testSetDeserialization":250,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":301,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":215,"com.google.gson.functional.EnumTest.testEnumSet":453,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":184,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":72,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":88,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":434,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":220,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":182,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":62,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":18,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":246,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":420,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":237,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":286,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":401,"com.google.gson.functional.MapTest.testMapSerialization":478,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":239,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":43,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":341,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":266,"com.google.gson.functional.MapTest.testSerializeMaps":350,"com.google.gson.functional.MapTest.testComplexKeysSerialization":143,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":429,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":345,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":254,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":284,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":517,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":192,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":518,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":11,"com.google.gson.functional.MapTest.testStringKeyDeserialization":356,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":90,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":342,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":77,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":390,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":481,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":54,"com.google.gson.functional.PrettyPrintingTest.testMap":364,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":403,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":485,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":460,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":444,"com.google.gson.functional.CollectionTest.testQueueSerialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":451,"com.google.gson.functional.MapTest.testMapOfMapSerialization":354,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":379,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":122,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":381,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":86,"com.google.gson.functional.FieldNamingTest.testIdentity":267,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":74,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":130,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":229,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":15,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":30,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":136,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":203,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":102,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":69,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":443,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":124,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":100,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":491,"com.google.gson.functional.MapTest.testMapSubclassSerialization":349,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":389,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":114,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":189,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":257,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":308,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":260,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":244,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":181,"com.google.gson.functional.EnumTest.testEnumSubclass":321,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":500,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":2,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":218,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":8,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":302,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":168,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":126,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":125,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":148,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":99,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":337,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":516,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":14,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":497,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":205,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":26,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":336,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":410,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":330,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":52,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":81,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":281,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":197,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":42,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":397,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":479,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":298,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":388,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":44,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":319,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":372,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":346,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":89,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":95,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":194,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":375,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":120,"com.google.gson.JsonArrayTest.testRemove":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":64,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":492,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":367,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":25,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":277,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":466,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":157,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":351,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":280,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":413,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":174,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":291,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":409,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":486,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":35,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":172,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":191,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":505,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":68,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":83,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":58,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":24,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":515,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":293,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":263,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":320,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":248,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":113,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":512,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":50,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":392,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":66,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":285,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":312,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":430,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":501,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":40,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":75,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":156,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":231,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":268,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":483,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":201,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":38,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":78,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":235,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":211,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":322,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":165,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":447,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":292,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":408,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":79,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":276,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":495,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":288,"com.google.gson.stream.JsonWriterTest.testNullStringValue":467,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":283,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":153,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":386,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":499,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":393,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":279,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":243,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":45,"com.google.gson.functional.MapTest.testGeneralMapField":142,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":209,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":327,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":53,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":127,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":303,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":423,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":454,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":414,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":437,"com.google.gson.MixedStreamTest.testReadMixedStreamed":311,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":418,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":287,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":450,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":503,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":108,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":347,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":295,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":353,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":362,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":394,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":200,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":272,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":468,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":494,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":411,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":131,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":87,"com.google.gson.functional.ObjectTest.testNestedDeserialization":236,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":358,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":240,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":147,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":22,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":196,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":10,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":180,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":387,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":164,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":32,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":262,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":506,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":167,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":361,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":141,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":369,"com.google.gson.functional.MapTest.testInterfaceTypeMap":140,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":55,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":152,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":510,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":39,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":116,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":171,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":484,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":20,"com.google.gson.MixedStreamTest.testWriteClosed":310,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":242,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":405,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":155,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":210,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":185,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":151,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":199,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":195,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":297,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":158,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":213,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":404,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":273,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":41,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":275,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":169,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":65,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":118,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":438,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":256,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":324,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":198,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":378,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":94,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":504,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":425,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":138,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":227,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":490,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":177,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":234,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":402,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":307,"com.google.gson.functional.MapTest.testRawMapSerialization":436,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":439,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":162,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":222,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":48,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":317,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":329,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":400,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":91,"com.google.gson.ObjectTypeAdapterTest.testSerialize":98,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":175,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":29,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":340,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":264,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":186,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":398,"com.google.gson.functional.MapTest.testMapWithQuotes":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":415,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":70,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":428,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":160,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":299,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":56,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":178,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":232,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":193,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":488,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":214,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":416,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":31,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":489,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":407,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":33,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":424,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":166,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":132,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":96,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":115,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":36,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":104,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":313,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":84,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":456,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":221,"com.google.gson.functional.ObjectTest.testNestedSerialization":223,"com.google.gson.internal.LinkedTreeMapTest.testClear":513,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":146,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":359,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":374,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":368,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":480,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":46,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":37,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":452,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":462,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":475,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":217,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":154,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":294,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":316,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":290,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":270,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":457,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":445,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":335,"com.google.gson.functional.CollectionTest.testSetSerialization":252,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":80,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":365,"com.google.gson.functional.StringTest.testStringValueSerialization":446,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":202,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":12,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":119,"com.google.gson.MixedStreamTest.testWriteInvalidState":309,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":326,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":129,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":377,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":487,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":265,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":511,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":51,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":314,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":133,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":19,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":187,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":92,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":471,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":59,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":331},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"65d9d8e2-3f39-11e6-b5d6-2fc5b45f53d5","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65da4e13-3f39-11e6-b5d6-b1668347e983","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65da7524-3f39-11e6-b5d6-15b963d573b4","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[88,89,90],"tindex":"65da7525-3f39-11e6-b5d6-e9e4b1db3833","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65da9c36-3f39-11e6-b5d6-d5a134413c5f","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[91,92],"tindex":"65da9c37-3f39-11e6-b5d6-1da58aee09a9","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[93,94,95,96,97,4,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,9,10,11,12,13,14,15,16,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,27,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,28,29,31,32,178,179,180,181,182,183,184,34,185,186,187,35,188,189,190,37,38,191,192,193,194,195,196,197,198,199,200,201,43,44,45,46,48,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,49,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,51,253,52,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,60,61,62,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,71,75,76,78,80,307,308,309,310,311,312],"tindex":"65dac348-3f39-11e6-b5d6-e3ee47352ff0","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65daea59-3f39-11e6-b5d6-275c6b31f544","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65db116a-3f39-11e6-b5d6-1fdbe48957dc","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"65db116b-3f39-11e6-b5d6-4b9955ea2b12","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65db387c-3f39-11e6-b5d6-7baec29340f0","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65db387d-3f39-11e6-b5d6-e712d7b2bdfe","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[313],"tindex":"65db387e-3f39-11e6-b5d6-9b1ebd25e297","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[88,89,90],"tindex":"65db869f-3f39-11e6-b5d6-fd90758201c9","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[314],"tindex":"65dbadb0-3f39-11e6-b5d6-159f013b274e","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[315,316,0,1,2,3,4,5,6,7,317,318,319,98,101,113,114,115,320,321,116,117,322,323,118,119,120,121,122,123,124,125,126,15,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,127,128,129,342,343,344,345,346,130,17,132,133,18,19,20,21,22,23,347,24,135,25,26,348,349,350,351,138,352,353,354,355,139,140,141,142,143,356,357,27,144,358,147,148,149,150,152,153,154,156,157,158,159,160,162,171,172,175,359,360,176,177,28,29,30,31,32,178,33,180,181,182,184,185,186,187,36,189,37,38,361,362,363,364,191,192,365,366,367,193,194,196,197,198,199,368,200,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,42,43,44,45,46,47,48,202,203,204,205,206,207,208,209,213,217,218,219,220,222,223,226,228,229,232,236,238,395,396,397,398,399,400,245,401,247,402,248,403,404,405,249,406,407,251,252,50,51,253,52,254,256,408,53,54,55,409,258,410,411,412,263,264,265,266,267,268,269,270,272,275,276,278,413,56,57,279,280,58,284,286,287,288,289,60,61,62,414,415,416,417,418,293,64,419,65,420,421,66,422,423,424,425,67,68,426,298,427,299,300,301,302,69,303,304,305,306,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,428,87,307,308,311,312],"tindex":"65dbadb1-3f39-11e6-b5d6-5dc9d0fb3733","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dbd4c2-3f39-11e6-b5d6-d75875952f8f","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"65dbd4c3-3f39-11e6-b5d6-530626b5f424","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (field.isSynthetic()) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[313],"tindex":"65dbfbd4-3f39-11e6-b5d6-2fdd764a2acb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[4,98,99,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,9,11,12,14,15,16,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,27,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,28,29,31,32,178,179,180,181,182,183,184,34,185,186,187,35,188,36,189,190,37,38,191,192,193,194,195,196,197,198,199,200,201,43,44,45,46,48,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,49,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,51,253,52,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,60,61,62,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,71,75,76,78,80,307,308,309,310,311,312],"tindex":"65dc22e5-3f39-11e6-b5d6-b9a83a49246d","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[317,429,430,431,432,134,135,136,137,27,144,147,148,149,153,154,159,28,29,31,32,198,199,238,286,288,289],"tindex":"65dc49f6-3f39-11e6-b5d6-d3b3d2d5c6b1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"65dc49f7-3f39-11e6-b5d6-39fc9741eff0","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[4,7,317,99,100,101,433,109,111,112,114,115,118,119,120,121,122,123,126,324,325,329,330,334,335,340,127,343,130,131,134,135,137,349,350,434,351,138,435,354,140,141,142,436,143,357,27,144,145,146,147,148,149,150,152,153,154,157,158,159,161,163,165,166,170,175,359,360,176,177,33,184,37,192,193,194,195,198,368,200,437,372,438,439,440,44,46,202,204,207,210,213,217,220,223,228,233,237,238,239,441,395,442,396,443,397,444,445,446,447,400,245,246,247,402,448,405,449,249,406,251,450,257,271,413,288,289,451,421,423,307,308,452],"tindex":"65dc7108-3f39-11e6-b5d6-2bcfa319640c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dc7109-3f39-11e6-b5d6-af508bc22299","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dc710a-3f39-11e6-b5d6-2360d58f72e7","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[98,111,112,453,320,321,118,119,120,121,122,9,11,12,14,15,16,135,139,454,143,145,146,148,151,153,155,156,157,159,160,161,162,163,164,165,166,167,168,169,173,174,28,29,31,32,367,194,195,196,197,198,199,437,48,214,215,230,231,247,403,404,249,407,250,252,455,51,253,52,254,255,256,257,289,60,290,291,293,294,295,423,297,298,427,299,300,301,71,76],"tindex":"65dc981b-3f39-11e6-b5d6-99bfb3d2d5b4","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[9,11,15,340,135,151,184,382,394,456,39,40,439,457,458,459,460],"tindex":"65dd0d4c-3f39-11e6-b5d6-eb3fb49017fc","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[160,253,52,254,255,256,408,53,55,409,461],"tindex":"65dd345d-3f39-11e6-b5d6-dbeb4d176972","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[34,35,188,190],"tindex":"65dd345e-3f39-11e6-b5d6-a59e21ced85f","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[315,0,4,7,462,98,463,99,100,101,430,431,432,464,465,466,467,468,469,470,471,472,473,474,475,433,109,111,112,113,114,115,453,476,320,321,116,322,323,477,118,119,120,121,122,123,126,9,11,15,16,324,325,329,330,334,335,340,127,343,130,131,132,18,19,20,21,22,23,347,24,135,349,350,434,351,138,435,354,478,479,140,141,142,480,436,143,357,481,27,144,358,145,146,150,151,152,157,158,160,161,162,163,165,166,167,170,172,175,359,360,176,177,178,33,180,181,182,183,184,185,186,187,188,190,37,362,364,191,192,193,194,195,196,197,368,200,437,372,438,482,39,40,439,458,459,460,440,44,46,202,91,92,203,204,207,210,213,215,217,220,222,223,225,228,230,231,233,237,239,241,441,395,442,396,443,397,444,445,446,447,400,245,246,247,402,248,448,405,449,249,406,251,450,252,50,51,253,52,254,256,408,53,54,55,257,409,263,264,265,266,267,268,271,272,275,276,413,279,280,282,58,283,284,286,288,289,483,414,484,485,415,416,417,486,487,488,489,490,451,491,492,493,494,295,64,495,496,65,421,422,423,424,497,425,67,297,68,498,298,299,300,301,302,305,306,70,72,76,77,78,80,81,82,84,87,307,308,452],"tindex":"65dd5b6f-3f39-11e6-b5d6-93964567ad58","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[136,27,147,148,149,153,154,159],"tindex":"65dd5b70-3f39-11e6-b5d6-85fa493ea260","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"65dd8181-3f39-11e6-b5d6-59804bab7460","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[316,101,109,340,127,130,131,134,135,136,137,142,144,151,157,162,175,176,177,184,192,193,200,499,500,392,501,202,203,207,217,220,222,223,228,230,233,237,238,239,241,245,246,247,248,249,251,271],"tindex":"65dd8182-3f39-11e6-b5d6-5d17174d4f2d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[502],"tindex":"65dda893-3f39-11e6-b5d6-4f0b8b2bb9a2","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dda894-3f39-11e6-b5d6-b37409bcff99","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[319,98,463],"tindex":"65dda895-3f39-11e6-b5d6-03e4d3821e1a","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dda896-3f39-11e6-b5d6-cd787fcd3c87","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65ddcfa7-3f39-11e6-b5d6-d74f3422f1af","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65ddcfa8-3f39-11e6-b5d6-09db067b2fbf","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[503],"tindex":"65ddcfa9-3f39-11e6-b5d6-ef125b5227a4","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[504,240,241,242],"tindex":"65ddcfaa-3f39-11e6-b5d6-83b59451a6a4","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[315,316,4,317,98,99,100,101,109,111,112,113,114,115,116,322,118,119,120,121,122,123,126,9,11,15,16,324,325,327,329,330,331,334,335,336,340,127,129,343,345,130,131,132,134,135,136,137,349,350,434,351,138,478,505,140,141,142,480,143,357,481,27,144,145,146,147,148,149,150,151,152,153,154,157,158,159,160,161,162,163,165,166,167,170,172,175,360,176,177,28,29,31,32,178,180,181,182,183,184,185,186,187,188,190,37,363,191,192,365,366,367,193,194,195,196,197,198,199,368,200,374,376,385,388,392,394,456,39,40,439,457,458,459,460,440,44,46,202,203,204,207,210,213,215,217,220,222,223,228,230,231,233,237,238,239,241,397,245,246,247,402,248,448,449,249,406,251,450,252,506,51,253,52,254,256,257,263,264,265,266,267,268,271,272,275,276,413,279,280,282,283,284,286,288,289,416,295,421,296,297,298,299,300,301,302,305,306,72,76,78,80,87,307,308,507,452],"tindex":"65ddf6bb-3f39-11e6-b5d6-b5e8fe056ef9","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65ddf6bc-3f39-11e6-b5d6-2181c68cfe22","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[432,508,509,510,91,92,58],"tindex":"65de1dcd-3f39-11e6-b5d6-3f2eb0ae41f4","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[167,293],"tindex":"65de1dce-3f39-11e6-b5d6-e5a3bb20794e","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[98,111,112,118,119,120,121,122,9,11,12,14,15,16,135,139,143,145,146,148,151,153,155,156,157,159,160,161,162,163,164,165,166,167,168,169,173,174,28,29,31,32,194,195,196,197,198,199,437,48,214,215,230,231,247,250,252,51,253,52,254,255,256,257,60,290,291,293,294,295,297,298,299,300,301,71,76],"tindex":"65de1dcf-3f39-11e6-b5d6-c9574412e7e9","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65de44e0-3f39-11e6-b5d6-75bf20f4451c","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element instanceof com.google.gson.JsonArray) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.remove(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[511,101,512,513,514,515,516,517,518,134,135,136,137,144,238,243,245,455,260,261],"tindex":"65de44e1-3f39-11e6-b5d6-a7fa10318164","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65de6bf2-3f39-11e6-b5d6-07a3b7b000ad","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65de6bf3-3f39-11e6-b5d6-c910696158a6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[293],"tindex":"65de6bf4-3f39-11e6-b5d6-7dd9ea6c7ee8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65de9305-3f39-11e6-b5d6-198f0a5f05ce","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[137,148,153,154,159,28,29,30,31,32,33,198,199,238,69],"tindex":"65de9306-3f39-11e6-b5d6-e7fe644593ee","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[381,383,384,387,390,393,507],"tindex":"65de9307-3f39-11e6-b5d6-5d72fa545051","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65de9308-3f39-11e6-b5d6-0bd92bb3dce2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"65deba19-3f39-11e6-b5d6-03142234b4d2","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65deba1a-3f39-11e6-b5d6-7d1fe3ad6107","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"65deba1b-3f39-11e6-b5d6-b5e2c2c6527e","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dee12c-3f39-11e6-b5d6-4fae1e52b638","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"65dee12d-3f39-11e6-b5d6-0ff40e194a13","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467341263932/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":60,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
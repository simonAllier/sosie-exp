{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":147,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":292,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":305,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":366,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":131,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":262,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":6,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":109,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":153,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":73,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":286,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":342,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":206,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":166,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":167,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":71,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":150,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":170,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":253,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":346,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":120,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":42,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":219,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":320,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":362,"com.google.gson.functional.ObjectTest.testSingletonLists":69,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":156,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":283,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":306,"com.google.gson.stream.JsonWriterTest.testStrings":353,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":104,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":226,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":363,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":84,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":250,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":31,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":96,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":267,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":205,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":33,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":100,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":76,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":54,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":140,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":108,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":168,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":322,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":217,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":126,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":223,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":260,"com.google.gson.functional.EnumTest.testEnumCaseMapping":345,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":304,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":350,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":370,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":198,"com.google.gson.functional.JsonTreeTest.testToJsonTree":117,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":224,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":18,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":273,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":360,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":189,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":242,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":220,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":216,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":179,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":317,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":74,"com.google.gson.functional.MapTest.testGeneralMapField":129,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":62,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":193,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":201,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":323,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":268,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":303,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":335,"com.google.gson.MixedStreamTest.testReadMixedStreamed":238,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":258,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":204,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":91,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":197,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":319,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":347,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":293,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":51,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":159,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":261,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":111,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":313,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":246,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":331,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":60,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":154,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":3,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":376,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":145,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":56,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":199,"com.google.gson.functional.ObjectTest.testNestedDeserialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":247,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":30,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":12,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":301,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":259,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":185,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":90,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":77,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":192,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":240,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":11,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":372,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":37,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":53,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":139,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":15,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":40,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":157,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":209,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":142,"com.google.gson.stream.JsonWriterTest.testDoubles":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":285,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":128,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":27,"com.google.gson.functional.MapTest.testInterfaceTypeMap":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":281,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":203,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":325,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":17,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":65,"com.google.gson.functional.CollectionTest.testSetDeserialization":169,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":121,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":227,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":249,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":80,"com.google.gson.functional.EnumTest.testEnumSet":340,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":146,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":41,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":269,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":257,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":296,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":39,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":231,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":29,"com.google.gson.MixedStreamTest.testWriteClosed":237,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":105,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":215,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":255,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":316,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":20,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":75,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":338,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":374,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":375,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":43,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":16,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":188,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":98,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":184,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":136,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":210,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":113,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":23,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":78,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":212,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":177,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":175,"com.google.gson.functional.MapTest.testSerializeMaps":295,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":5,"com.google.gson.functional.MapTest.testComplexKeysSerialization":130,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":144,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":284,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":161,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":64,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":228,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":225,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":337,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":114,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":66,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":148,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":327,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":187,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":369,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":123,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":290,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":7,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":92,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":277,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":99,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":160,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":358,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":314,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":234,"com.google.gson.functional.MapTest.testRawMapSerialization":300,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":324,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":251,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":87,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":137,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":270,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":181,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":355,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":278,"com.google.gson.functional.CollectionTest.testQueueSerialization":315,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":351,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":266,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":329,"com.google.gson.ObjectTypeAdapterTest.testSerialize":241,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":264,"com.google.gson.functional.MapTest.testMapOfMapSerialization":299,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":158,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":207,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":165,"com.google.gson.functional.FieldNamingTest.testIdentity":176,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":307,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":333,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":44,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":55,"com.google.gson.functional.MapTest.testMapWithQuotes":298,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":271,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":10,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":68,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":243,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":59,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":308,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":133,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":119,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":233,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":279,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":35,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":97,"com.google.gson.functional.MapTest.testMapSubclassSerialization":294,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":124,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":48,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":275,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":79,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":334,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":182,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":235,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":112,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":103,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":38,"com.google.gson.functional.EnumTest.testEnumSubclass":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":272,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":361,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":83,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":200,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":208,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":276,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":288,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":328,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":141,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":57,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":371,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":135,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":152,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":134,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":13,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":359,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":86,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":232,"com.google.gson.functional.ObjectTest.testNestedSerialization":88,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":190,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":302,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":9,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":263,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":289,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":25,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":70,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":348,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":357,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":354,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":330,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":82,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":63,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":72,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":245,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":19,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":50,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":186,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":110,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":309,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":364,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":106,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":118,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":311,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":291,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":332,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":178,"com.google.gson.functional.CollectionTest.testSetSerialization":171,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":34,"com.google.gson.functional.StringTest.testStringValueSerialization":312,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":67,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":8,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":162,"com.google.gson.MixedStreamTest.testWriteInvalidState":236,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":336,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":368,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":183,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":163,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":282,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":191,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":352,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":280,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":61,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":218,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":349,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":22,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":297,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":221,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":58,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":339,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":149,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":107,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":256,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":45,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":95,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":138,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":265,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":326,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":14,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":274,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":46},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,3,4,5],"tindex":"cd33a66b-3e87-11e6-be76-594b9e292c76","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cd33f48c-3e87-11e6-be76-a52ab1549ce8","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    try {\n                                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                        toJson(src, typeOfSrc, jsonWriter);\n                                    } catch (java.io.IOException e) {\n                                        throw new com.google.gson.JsonIOException(e);\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"cd341b9d-3e87-11e6-be76-fb16c8b69a97","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cd341b9e-3e87-11e6-be76-b740b9045b72","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,0,1,2,229,3,4,230,5,231,232,233,234,235,236,237,238,239,240,241],"tindex":"cd3442af-3e87-11e6-be76-51c1219bbc2e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,0,1,2,229,3,4,230,5,231,232,233,234,235,236,237,238,239,240,241],"tindex":"cd3469c0-3e87-11e6-be76-cd111f74a9ff","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!deserialize) && (!serialize)) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"deserialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cd3490d1-3e87-11e6-be76-b98710cb0eee","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cd3490d2-3e87-11e6-be76-4bd6fa7fee5a","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cd34b7e3-3e87-11e6-be76-75a4f56db150","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    try {\n                                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                        toJson(src, typeOfSrc, jsonWriter);\n                                    } catch (java.io.IOException e) {\n                                        throw new com.google.gson.JsonIOException(e);\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cd34b7e4-3e87-11e6-be76-8929ed6e827a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[242],"tindex":"cd34def5-3e87-11e6-be76-1371de690508","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cd34def6-3e87-11e6-be76-813d6e78b44a","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[15,16,17,22,23,25,243,244,32,245,246,247,248,41,249,250,251,252,253,52,54,254,55,56,59,255,256,257,258,259,260,261,262,263,60,61,62,63,64,66,67,264,265,69,72,75,78,82,85,88,93,96,98,266,104,105,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,115,123,124,294,295,296,297,125,298,299,127,128,129,300,130,301,131,132,135,136,138,140,141,145,151,152,158,302,303,159,160,304,305,306,307,308,309,310,311,312,161,162,163,164,165,313,166,314,315,316,317,168,318,170,319,320,321,178,180,322,323,324,325,182,326,183,184,189,190,191,192,327,328,329,330,331,332,333,193,334,198,199,335,336,337,338,210,212,339,340,341,342,343,227,344,345,346,229,231,347,232,233,234,235,348,349,350,351,352,353,354,240,355,356,357],"tindex":"cd34def7-3e87-11e6-be76-d14af36e3d04","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[358,33,359,153,154,155,157],"tindex":"cd350608-3e87-11e6-be76-2baaac4296e5","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[16,22,41,52,54,55,56,60,67,68,72,82,85,87,88,93,95,98,104,105,114,115,116,117,123,124,129,137,158,159,160,166,167,168,170,333,193,360,361,362,363,210,211,212,214,229,364,240],"tindex":"cd350609-3e87-11e6-be76-bb30e3b264fb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[365,366,367],"tindex":"cd35060a-3e87-11e6-be76-cb1a6dd62eff","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[368,369,370,371,372,373,374,375,376,377],"tindex":"cd35060b-3e87-11e6-be76-f153b604423e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[],"tindex":"cd352d1c-3e87-11e6-be76-e1dd09293da5","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"cd352d1d-3e87-11e6-be76-2d5490839076","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"cd35542e-3e87-11e6-be76-31cb8443d5f1","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"cd35542f-3e87-11e6-be76-33ef3c07101d","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"cd355430-3e87-11e6-be76-3f9f56d10381","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"cd357b41-3e87-11e6-be76-ebc150ea8626","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Iterator) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"cd357b42-3e87-11e6-be76-a1b99c4aca66","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    try {\n                                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                        toJson(src, typeOfSrc, jsonWriter);\n                                    } catch (java.io.IOException e) {\n                                        throw new com.google.gson.JsonIOException(e);\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"cd357b43-3e87-11e6-be76-49e747145bb0","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                {\n                                    try {\n                                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                        toJson(src, typeOfSrc, jsonWriter);\n                                    } catch (java.io.IOException e) {\n                                        throw new com.google.gson.JsonIOException(e);\n                                    }\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cd35a254-3e87-11e6-be76-631d5b77126a","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265915493/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}